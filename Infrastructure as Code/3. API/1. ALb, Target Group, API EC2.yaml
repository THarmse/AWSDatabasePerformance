AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template - ALB, Target Group, and Auto Scaling Group
  Created by Theodor Harmse for University of Liverpool -
  Deploys an ALB, Target Group, Auto Scaling Group with EC2 instances.
  Includes Route53 record, Apache install, CodeDeploy agent bootstrap, and a custom IAM Role and Policy for deployments.

Parameters:

  NamePrefix:
    Type: String
    Default: API
    Description: Prefix for naming resources

  ALBScheme:
    Type: String
    Default: internet-facing
    AllowedValues:
      - internet-facing
      - internal
    Description: ALB Scheme (internet-facing or internal)

  HostedZoneDomainName:
    Type: String
    Default: liverpool.com
    Description: Base domain for the private hosted zone

  EC2InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m6i.large
      - m6i.xlarge
    Description: EC2 Instance type

  EC2AmiId:
    Type: AWS::EC2::Image::Id
    Default: ami-0fab1b527ffa9b942
    Description: AMI ID for EC2 instances

  TargetGroupPort:
    Type: Number
    Default: 80
    Description: Port for Target Group registration

  HealthCheckPath:
    Type: String
    Default: /
    Description: Health Check Path for ALB Target Group

  EC2VolumeSize:
    Type: Number
    Default: 30
    Description: EC2 root EBS volume size (GB)

  MinSize:
    Type: Number
    Default: 1
    Description: Minimum number of EC2 instances in Auto Scaling Group

  MaxSize:
    Type: Number
    Default: 1
    Description: Maximum number of EC2 instances in Auto Scaling Group

  DesiredCapacity:
    Type: Number
    Default: 1
    Description: Desired number of EC2 instances in Auto Scaling Group

  ScaleCpuThreshold:
    Type: Number
    Default: 80
    Description: Target average CPU utilization (%) to trigger scale-out/in

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: ALB and Target Group Configuration
        Parameters:
          - NamePrefix
          - ALBScheme
          - HostedZoneDomainName
          - TargetGroupPort
          - HealthCheckPath
      - Label:
          default: EC2 and Auto Scaling Configuration
        Parameters:
          - EC2InstanceType
          - EC2AmiId
          - EC2VolumeSize
          - MinSize
          - MaxSize
          - DesiredCapacity
          - ScaleCpuThreshold

Resources:

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${NamePrefix}-App-EC2Role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${NamePrefix}-App-EC2Policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codedeploy:*
                  - s3:Get*
                  - s3:ListBucket
                  - logs:*
                  - ec2:Describe*
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-App-EC2Role"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${NamePrefix}-App-InstanceProfile"
      Roles:
        - !Ref EC2InstanceRole

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${NamePrefix}-App-ALB"
      Scheme: !Ref ALBScheme
      Subnets:
        - !ImportValue Networking-PublicSubnet3Id
        - !ImportValue Networking-PublicSubnet4Id
      SecurityGroups:
        - !ImportValue SecurityGroup-ELBSGId
      Type: application
      IpAddressType: ipv4
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-App-ALB"

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${NamePrefix}-App-TG"
      VpcId: !ImportValue Networking-VPCId
      Protocol: HTTP
      Port: !Ref TargetGroupPort
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: !Ref HealthCheckPath
      Matcher:
        HttpCode: 200
      LoadBalancerArns:
        - !Ref ALB
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-App-TG"

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${NamePrefix}-App-LT"
      LaunchTemplateData:
        InstanceType: !Ref EC2InstanceType
        ImageId: !Ref EC2AmiId
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !ImportValue SecurityGroup-AppTierSGId
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              set -ex
              yum update -y
              yum install -y httpd
              systemctl enable httpd
              echo '<html><body><h1>Healthcheck OK</h1></body></html>' > /var/www/html/index.html
              systemctl start httpd

              # Install CodeDeploy Agent
              yum install -y ruby wget
              cd /home/ec2-user
              wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
              chmod +x ./install
              ./install auto
              systemctl enable codedeploy-agent
              systemctl start codedeploy-agent
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref EC2VolumeSize
              VolumeType: gp3
              DeleteOnTermination: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${NamePrefix}-App-EC2"
              - Key: CodeDeployRole
                Value: AppServer

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue Networking-PrivateSubnet3Id
        - !ImportValue Networking-PrivateSubnet4Id
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: api-app-asg
          PropagateAtLaunch: true

  ScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref ScaleCpuThreshold

  ALBRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue PrivateHostedZoneId
      Name: !Sub "alb.${HostedZoneDomainName}"
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !GetAtt ALB.DNSName

Outputs:

  ALBDNSName:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt ALB.DNSName
    Export:
      Name: api-app-alb-dnsname

  TargetGroupArn:
    Description: ARN of the Target Group
    Value: !Ref ALBTargetGroup
    Export:
      Name: api-app-targetgroup-arn

  LaunchTemplateId:
    Description: ID of the Launch Template
    Value: !Ref LaunchTemplate
    Export:
      Name: api-app-tier-launchtemplateid

  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref AutoScalingGroup
    Export:
      Name: api-app-tier-autoscalinggroupname

  ALBRecordName:
    Description: DNS name in Private Hosted Zone
    Value: !Sub "alb.${HostedZoneDomainName}"