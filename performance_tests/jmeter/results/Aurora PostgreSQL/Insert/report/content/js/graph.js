/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 2153.0, "series": [{"data": [[0.0, 5.0], [0.1, 35.0], [0.2, 79.0], [0.3, 125.0], [0.4, 146.0], [0.5, 162.0], [0.6, 181.0], [0.7, 195.0], [0.8, 209.0], [0.9, 223.0], [1.0, 240.0], [1.1, 250.0], [1.2, 257.0], [1.3, 267.0], [1.4, 278.0], [1.5, 285.0], [1.6, 294.0], [1.7, 306.0], [1.8, 316.0], [1.9, 324.0], [2.0, 336.0], [2.1, 354.0], [2.2, 378.0], [2.3, 392.0], [2.4, 411.0], [2.5, 439.0], [2.6, 455.0], [2.7, 466.0], [2.8, 478.0], [2.9, 487.0], [3.0, 496.0], [3.1, 506.0], [3.2, 528.0], [3.3, 533.0], [3.4, 538.0], [3.5, 545.0], [3.6, 553.0], [3.7, 555.0], [3.8, 556.0], [3.9, 558.0], [4.0, 559.0], [4.1, 560.0], [4.2, 561.0], [4.3, 563.0], [4.4, 564.0], [4.5, 565.0], [4.6, 566.0], [4.7, 567.0], [4.8, 568.0], [4.9, 569.0], [5.0, 570.0], [5.1, 571.0], [5.2, 572.0], [5.3, 572.0], [5.4, 573.0], [5.5, 574.0], [5.6, 575.0], [5.7, 575.0], [5.8, 577.0], [5.9, 577.0], [6.0, 578.0], [6.1, 579.0], [6.2, 580.0], [6.3, 581.0], [6.4, 582.0], [6.5, 582.0], [6.6, 583.0], [6.7, 583.0], [6.8, 584.0], [6.9, 585.0], [7.0, 586.0], [7.1, 586.0], [7.2, 587.0], [7.3, 588.0], [7.4, 588.0], [7.5, 588.0], [7.6, 589.0], [7.7, 590.0], [7.8, 590.0], [7.9, 591.0], [8.0, 591.0], [8.1, 591.0], [8.2, 592.0], [8.3, 592.0], [8.4, 593.0], [8.5, 593.0], [8.6, 594.0], [8.7, 594.0], [8.8, 595.0], [8.9, 595.0], [9.0, 596.0], [9.1, 596.0], [9.2, 596.0], [9.3, 597.0], [9.4, 598.0], [9.5, 598.0], [9.6, 599.0], [9.7, 599.0], [9.8, 599.0], [9.9, 600.0], [10.0, 600.0], [10.1, 601.0], [10.2, 601.0], [10.3, 602.0], [10.4, 602.0], [10.5, 603.0], [10.6, 603.0], [10.7, 604.0], [10.8, 604.0], [10.9, 605.0], [11.0, 605.0], [11.1, 606.0], [11.2, 606.0], [11.3, 607.0], [11.4, 607.0], [11.5, 608.0], [11.6, 608.0], [11.7, 609.0], [11.8, 609.0], [11.9, 609.0], [12.0, 610.0], [12.1, 610.0], [12.2, 611.0], [12.3, 612.0], [12.4, 612.0], [12.5, 612.0], [12.6, 613.0], [12.7, 613.0], [12.8, 614.0], [12.9, 614.0], [13.0, 615.0], [13.1, 615.0], [13.2, 616.0], [13.3, 616.0], [13.4, 617.0], [13.5, 617.0], [13.6, 618.0], [13.7, 618.0], [13.8, 619.0], [13.9, 619.0], [14.0, 620.0], [14.1, 621.0], [14.2, 621.0], [14.3, 622.0], [14.4, 622.0], [14.5, 623.0], [14.6, 624.0], [14.7, 624.0], [14.8, 625.0], [14.9, 625.0], [15.0, 626.0], [15.1, 626.0], [15.2, 627.0], [15.3, 627.0], [15.4, 628.0], [15.5, 629.0], [15.6, 629.0], [15.7, 630.0], [15.8, 631.0], [15.9, 632.0], [16.0, 632.0], [16.1, 633.0], [16.2, 634.0], [16.3, 635.0], [16.4, 636.0], [16.5, 637.0], [16.6, 638.0], [16.7, 639.0], [16.8, 640.0], [16.9, 641.0], [17.0, 642.0], [17.1, 643.0], [17.2, 643.0], [17.3, 645.0], [17.4, 646.0], [17.5, 646.0], [17.6, 647.0], [17.7, 648.0], [17.8, 649.0], [17.9, 650.0], [18.0, 650.0], [18.1, 651.0], [18.2, 652.0], [18.3, 653.0], [18.4, 654.0], [18.5, 655.0], [18.6, 657.0], [18.7, 658.0], [18.8, 658.0], [18.9, 660.0], [19.0, 661.0], [19.1, 662.0], [19.2, 663.0], [19.3, 665.0], [19.4, 666.0], [19.5, 668.0], [19.6, 668.0], [19.7, 670.0], [19.8, 671.0], [19.9, 672.0], [20.0, 674.0], [20.1, 675.0], [20.2, 676.0], [20.3, 677.0], [20.4, 678.0], [20.5, 679.0], [20.6, 680.0], [20.7, 681.0], [20.8, 682.0], [20.9, 682.0], [21.0, 683.0], [21.1, 685.0], [21.2, 686.0], [21.3, 687.0], [21.4, 688.0], [21.5, 689.0], [21.6, 691.0], [21.7, 691.0], [21.8, 692.0], [21.9, 693.0], [22.0, 693.0], [22.1, 694.0], [22.2, 694.0], [22.3, 695.0], [22.4, 695.0], [22.5, 696.0], [22.6, 697.0], [22.7, 697.0], [22.8, 698.0], [22.9, 698.0], [23.0, 699.0], [23.1, 699.0], [23.2, 700.0], [23.3, 700.0], [23.4, 701.0], [23.5, 701.0], [23.6, 702.0], [23.7, 702.0], [23.8, 702.0], [23.9, 703.0], [24.0, 703.0], [24.1, 704.0], [24.2, 704.0], [24.3, 704.0], [24.4, 705.0], [24.5, 705.0], [24.6, 705.0], [24.7, 706.0], [24.8, 706.0], [24.9, 706.0], [25.0, 707.0], [25.1, 707.0], [25.2, 707.0], [25.3, 707.0], [25.4, 707.0], [25.5, 708.0], [25.6, 708.0], [25.7, 708.0], [25.8, 708.0], [25.9, 709.0], [26.0, 709.0], [26.1, 709.0], [26.2, 709.0], [26.3, 710.0], [26.4, 710.0], [26.5, 710.0], [26.6, 710.0], [26.7, 711.0], [26.8, 711.0], [26.9, 711.0], [27.0, 711.0], [27.1, 712.0], [27.2, 712.0], [27.3, 712.0], [27.4, 712.0], [27.5, 713.0], [27.6, 713.0], [27.7, 713.0], [27.8, 713.0], [27.9, 714.0], [28.0, 714.0], [28.1, 714.0], [28.2, 714.0], [28.3, 714.0], [28.4, 714.0], [28.5, 715.0], [28.6, 715.0], [28.7, 715.0], [28.8, 715.0], [28.9, 716.0], [29.0, 716.0], [29.1, 716.0], [29.2, 716.0], [29.3, 716.0], [29.4, 717.0], [29.5, 717.0], [29.6, 717.0], [29.7, 717.0], [29.8, 717.0], [29.9, 718.0], [30.0, 718.0], [30.1, 718.0], [30.2, 718.0], [30.3, 718.0], [30.4, 718.0], [30.5, 719.0], [30.6, 719.0], [30.7, 719.0], [30.8, 719.0], [30.9, 719.0], [31.0, 719.0], [31.1, 719.0], [31.2, 720.0], [31.3, 720.0], [31.4, 720.0], [31.5, 720.0], [31.6, 720.0], [31.7, 721.0], [31.8, 721.0], [31.9, 721.0], [32.0, 721.0], [32.1, 721.0], [32.2, 721.0], [32.3, 721.0], [32.4, 722.0], [32.5, 722.0], [32.6, 722.0], [32.7, 722.0], [32.8, 722.0], [32.9, 722.0], [33.0, 723.0], [33.1, 723.0], [33.2, 723.0], [33.3, 723.0], [33.4, 723.0], [33.5, 723.0], [33.6, 724.0], [33.7, 724.0], [33.8, 724.0], [33.9, 724.0], [34.0, 724.0], [34.1, 725.0], [34.2, 725.0], [34.3, 725.0], [34.4, 725.0], [34.5, 725.0], [34.6, 725.0], [34.7, 726.0], [34.8, 726.0], [34.9, 726.0], [35.0, 726.0], [35.1, 726.0], [35.2, 726.0], [35.3, 726.0], [35.4, 727.0], [35.5, 727.0], [35.6, 727.0], [35.7, 727.0], [35.8, 727.0], [35.9, 727.0], [36.0, 727.0], [36.1, 728.0], [36.2, 728.0], [36.3, 728.0], [36.4, 728.0], [36.5, 728.0], [36.6, 729.0], [36.7, 729.0], [36.8, 729.0], [36.9, 729.0], [37.0, 729.0], [37.1, 729.0], [37.2, 730.0], [37.3, 730.0], [37.4, 730.0], [37.5, 730.0], [37.6, 730.0], [37.7, 730.0], [37.8, 731.0], [37.9, 731.0], [38.0, 731.0], [38.1, 731.0], [38.2, 731.0], [38.3, 732.0], [38.4, 732.0], [38.5, 732.0], [38.6, 732.0], [38.7, 732.0], [38.8, 732.0], [38.9, 732.0], [39.0, 733.0], [39.1, 733.0], [39.2, 733.0], [39.3, 733.0], [39.4, 733.0], [39.5, 733.0], [39.6, 734.0], [39.7, 734.0], [39.8, 734.0], [39.9, 734.0], [40.0, 734.0], [40.1, 734.0], [40.2, 735.0], [40.3, 735.0], [40.4, 735.0], [40.5, 735.0], [40.6, 736.0], [40.7, 736.0], [40.8, 736.0], [40.9, 736.0], [41.0, 736.0], [41.1, 736.0], [41.2, 737.0], [41.3, 737.0], [41.4, 737.0], [41.5, 737.0], [41.6, 737.0], [41.7, 738.0], [41.8, 738.0], [41.9, 738.0], [42.0, 738.0], [42.1, 738.0], [42.2, 738.0], [42.3, 739.0], [42.4, 739.0], [42.5, 739.0], [42.6, 739.0], [42.7, 739.0], [42.8, 740.0], [42.9, 740.0], [43.0, 740.0], [43.1, 740.0], [43.2, 740.0], [43.3, 740.0], [43.4, 741.0], [43.5, 741.0], [43.6, 741.0], [43.7, 741.0], [43.8, 741.0], [43.9, 741.0], [44.0, 742.0], [44.1, 742.0], [44.2, 742.0], [44.3, 742.0], [44.4, 742.0], [44.5, 742.0], [44.6, 742.0], [44.7, 743.0], [44.8, 743.0], [44.9, 743.0], [45.0, 743.0], [45.1, 743.0], [45.2, 743.0], [45.3, 744.0], [45.4, 744.0], [45.5, 744.0], [45.6, 744.0], [45.7, 744.0], [45.8, 744.0], [45.9, 745.0], [46.0, 745.0], [46.1, 745.0], [46.2, 745.0], [46.3, 745.0], [46.4, 745.0], [46.5, 746.0], [46.6, 746.0], [46.7, 746.0], [46.8, 746.0], [46.9, 746.0], [47.0, 747.0], [47.1, 747.0], [47.2, 747.0], [47.3, 747.0], [47.4, 747.0], [47.5, 748.0], [47.6, 748.0], [47.7, 748.0], [47.8, 748.0], [47.9, 748.0], [48.0, 749.0], [48.1, 749.0], [48.2, 749.0], [48.3, 749.0], [48.4, 749.0], [48.5, 750.0], [48.6, 750.0], [48.7, 750.0], [48.8, 750.0], [48.9, 750.0], [49.0, 750.0], [49.1, 751.0], [49.2, 751.0], [49.3, 751.0], [49.4, 751.0], [49.5, 751.0], [49.6, 751.0], [49.7, 752.0], [49.8, 752.0], [49.9, 752.0], [50.0, 752.0], [50.1, 752.0], [50.2, 752.0], [50.3, 753.0], [50.4, 753.0], [50.5, 753.0], [50.6, 753.0], [50.7, 753.0], [50.8, 753.0], [50.9, 754.0], [51.0, 754.0], [51.1, 754.0], [51.2, 754.0], [51.3, 754.0], [51.4, 754.0], [51.5, 754.0], [51.6, 755.0], [51.7, 755.0], [51.8, 755.0], [51.9, 755.0], [52.0, 755.0], [52.1, 755.0], [52.2, 756.0], [52.3, 756.0], [52.4, 756.0], [52.5, 756.0], [52.6, 756.0], [52.7, 757.0], [52.8, 757.0], [52.9, 757.0], [53.0, 757.0], [53.1, 757.0], [53.2, 757.0], [53.3, 757.0], [53.4, 758.0], [53.5, 758.0], [53.6, 758.0], [53.7, 758.0], [53.8, 758.0], [53.9, 758.0], [54.0, 759.0], [54.1, 759.0], [54.2, 759.0], [54.3, 759.0], [54.4, 759.0], [54.5, 759.0], [54.6, 760.0], [54.7, 760.0], [54.8, 760.0], [54.9, 760.0], [55.0, 760.0], [55.1, 760.0], [55.2, 761.0], [55.3, 761.0], [55.4, 761.0], [55.5, 761.0], [55.6, 761.0], [55.7, 762.0], [55.8, 762.0], [55.9, 762.0], [56.0, 762.0], [56.1, 762.0], [56.2, 763.0], [56.3, 763.0], [56.4, 763.0], [56.5, 763.0], [56.6, 763.0], [56.7, 764.0], [56.8, 764.0], [56.9, 764.0], [57.0, 764.0], [57.1, 764.0], [57.2, 765.0], [57.3, 765.0], [57.4, 765.0], [57.5, 765.0], [57.6, 766.0], [57.7, 766.0], [57.8, 766.0], [57.9, 766.0], [58.0, 767.0], [58.1, 767.0], [58.2, 767.0], [58.3, 767.0], [58.4, 767.0], [58.5, 768.0], [58.6, 768.0], [58.7, 768.0], [58.8, 768.0], [58.9, 768.0], [59.0, 769.0], [59.1, 769.0], [59.2, 769.0], [59.3, 769.0], [59.4, 770.0], [59.5, 770.0], [59.6, 770.0], [59.7, 770.0], [59.8, 770.0], [59.9, 770.0], [60.0, 771.0], [60.1, 771.0], [60.2, 771.0], [60.3, 771.0], [60.4, 772.0], [60.5, 772.0], [60.6, 772.0], [60.7, 772.0], [60.8, 773.0], [60.9, 773.0], [61.0, 773.0], [61.1, 773.0], [61.2, 774.0], [61.3, 774.0], [61.4, 774.0], [61.5, 774.0], [61.6, 775.0], [61.7, 775.0], [61.8, 775.0], [61.9, 776.0], [62.0, 776.0], [62.1, 776.0], [62.2, 776.0], [62.3, 777.0], [62.4, 777.0], [62.5, 777.0], [62.6, 778.0], [62.7, 778.0], [62.8, 778.0], [62.9, 779.0], [63.0, 779.0], [63.1, 779.0], [63.2, 780.0], [63.3, 780.0], [63.4, 780.0], [63.5, 780.0], [63.6, 781.0], [63.7, 781.0], [63.8, 781.0], [63.9, 782.0], [64.0, 782.0], [64.1, 782.0], [64.2, 783.0], [64.3, 783.0], [64.4, 783.0], [64.5, 783.0], [64.6, 784.0], [64.7, 784.0], [64.8, 784.0], [64.9, 785.0], [65.0, 785.0], [65.1, 785.0], [65.2, 786.0], [65.3, 786.0], [65.4, 786.0], [65.5, 787.0], [65.6, 787.0], [65.7, 787.0], [65.8, 788.0], [65.9, 788.0], [66.0, 788.0], [66.1, 788.0], [66.2, 789.0], [66.3, 789.0], [66.4, 789.0], [66.5, 789.0], [66.6, 790.0], [66.7, 790.0], [66.8, 790.0], [66.9, 790.0], [67.0, 791.0], [67.1, 791.0], [67.2, 791.0], [67.3, 792.0], [67.4, 792.0], [67.5, 792.0], [67.6, 792.0], [67.7, 793.0], [67.8, 793.0], [67.9, 793.0], [68.0, 794.0], [68.1, 794.0], [68.2, 794.0], [68.3, 794.0], [68.4, 795.0], [68.5, 795.0], [68.6, 795.0], [68.7, 795.0], [68.8, 796.0], [68.9, 796.0], [69.0, 796.0], [69.1, 797.0], [69.2, 797.0], [69.3, 797.0], [69.4, 797.0], [69.5, 798.0], [69.6, 798.0], [69.7, 798.0], [69.8, 798.0], [69.9, 799.0], [70.0, 799.0], [70.1, 799.0], [70.2, 799.0], [70.3, 800.0], [70.4, 800.0], [70.5, 800.0], [70.6, 800.0], [70.7, 801.0], [70.8, 801.0], [70.9, 801.0], [71.0, 801.0], [71.1, 802.0], [71.2, 802.0], [71.3, 802.0], [71.4, 802.0], [71.5, 803.0], [71.6, 803.0], [71.7, 803.0], [71.8, 803.0], [71.9, 804.0], [72.0, 804.0], [72.1, 804.0], [72.2, 805.0], [72.3, 805.0], [72.4, 805.0], [72.5, 805.0], [72.6, 806.0], [72.7, 806.0], [72.8, 806.0], [72.9, 807.0], [73.0, 807.0], [73.1, 807.0], [73.2, 808.0], [73.3, 808.0], [73.4, 808.0], [73.5, 809.0], [73.6, 809.0], [73.7, 809.0], [73.8, 810.0], [73.9, 810.0], [74.0, 811.0], [74.1, 811.0], [74.2, 811.0], [74.3, 812.0], [74.4, 812.0], [74.5, 813.0], [74.6, 813.0], [74.7, 813.0], [74.8, 814.0], [74.9, 814.0], [75.0, 814.0], [75.1, 815.0], [75.2, 815.0], [75.3, 816.0], [75.4, 816.0], [75.5, 816.0], [75.6, 817.0], [75.7, 817.0], [75.8, 818.0], [75.9, 818.0], [76.0, 818.0], [76.1, 819.0], [76.2, 819.0], [76.3, 820.0], [76.4, 820.0], [76.5, 820.0], [76.6, 821.0], [76.7, 821.0], [76.8, 821.0], [76.9, 822.0], [77.0, 822.0], [77.1, 822.0], [77.2, 823.0], [77.3, 823.0], [77.4, 824.0], [77.5, 824.0], [77.6, 824.0], [77.7, 825.0], [77.8, 825.0], [77.9, 826.0], [78.0, 826.0], [78.1, 826.0], [78.2, 827.0], [78.3, 827.0], [78.4, 828.0], [78.5, 828.0], [78.6, 829.0], [78.7, 829.0], [78.8, 829.0], [78.9, 830.0], [79.0, 830.0], [79.1, 831.0], [79.2, 831.0], [79.3, 831.0], [79.4, 832.0], [79.5, 832.0], [79.6, 832.0], [79.7, 833.0], [79.8, 833.0], [79.9, 834.0], [80.0, 834.0], [80.1, 834.0], [80.2, 835.0], [80.3, 835.0], [80.4, 835.0], [80.5, 836.0], [80.6, 836.0], [80.7, 837.0], [80.8, 837.0], [80.9, 838.0], [81.0, 838.0], [81.1, 839.0], [81.2, 839.0], [81.3, 840.0], [81.4, 840.0], [81.5, 841.0], [81.6, 842.0], [81.7, 842.0], [81.8, 843.0], [81.9, 844.0], [82.0, 844.0], [82.1, 845.0], [82.2, 845.0], [82.3, 846.0], [82.4, 847.0], [82.5, 847.0], [82.6, 848.0], [82.7, 849.0], [82.8, 849.0], [82.9, 850.0], [83.0, 850.0], [83.1, 851.0], [83.2, 852.0], [83.3, 852.0], [83.4, 853.0], [83.5, 854.0], [83.6, 855.0], [83.7, 855.0], [83.8, 856.0], [83.9, 857.0], [84.0, 858.0], [84.1, 858.0], [84.2, 859.0], [84.3, 860.0], [84.4, 861.0], [84.5, 861.0], [84.6, 862.0], [84.7, 863.0], [84.8, 864.0], [84.9, 864.0], [85.0, 865.0], [85.1, 866.0], [85.2, 867.0], [85.3, 868.0], [85.4, 869.0], [85.5, 870.0], [85.6, 870.0], [85.7, 871.0], [85.8, 872.0], [85.9, 873.0], [86.0, 874.0], [86.1, 874.0], [86.2, 875.0], [86.3, 876.0], [86.4, 877.0], [86.5, 877.0], [86.6, 878.0], [86.7, 879.0], [86.8, 879.0], [86.9, 880.0], [87.0, 881.0], [87.1, 881.0], [87.2, 882.0], [87.3, 883.0], [87.4, 883.0], [87.5, 884.0], [87.6, 885.0], [87.7, 886.0], [87.8, 886.0], [87.9, 887.0], [88.0, 888.0], [88.1, 889.0], [88.2, 890.0], [88.3, 891.0], [88.4, 893.0], [88.5, 893.0], [88.6, 894.0], [88.7, 895.0], [88.8, 896.0], [88.9, 897.0], [89.0, 898.0], [89.1, 899.0], [89.2, 899.0], [89.3, 900.0], [89.4, 901.0], [89.5, 902.0], [89.6, 903.0], [89.7, 904.0], [89.8, 905.0], [89.9, 905.0], [90.0, 907.0], [90.1, 908.0], [90.2, 910.0], [90.3, 911.0], [90.4, 912.0], [90.5, 913.0], [90.6, 914.0], [90.7, 916.0], [90.8, 917.0], [90.9, 918.0], [91.0, 920.0], [91.1, 921.0], [91.2, 923.0], [91.3, 924.0], [91.4, 925.0], [91.5, 926.0], [91.6, 928.0], [91.7, 929.0], [91.8, 930.0], [91.9, 932.0], [92.0, 933.0], [92.1, 935.0], [92.2, 936.0], [92.3, 937.0], [92.4, 939.0], [92.5, 941.0], [92.6, 942.0], [92.7, 944.0], [92.8, 945.0], [92.9, 947.0], [93.0, 949.0], [93.1, 950.0], [93.2, 952.0], [93.3, 953.0], [93.4, 955.0], [93.5, 956.0], [93.6, 957.0], [93.7, 959.0], [93.8, 960.0], [93.9, 962.0], [94.0, 963.0], [94.1, 965.0], [94.2, 967.0], [94.3, 969.0], [94.4, 971.0], [94.5, 974.0], [94.6, 977.0], [94.7, 979.0], [94.8, 982.0], [94.9, 985.0], [95.0, 987.0], [95.1, 989.0], [95.2, 991.0], [95.3, 993.0], [95.4, 996.0], [95.5, 998.0], [95.6, 1001.0], [95.7, 1004.0], [95.8, 1007.0], [95.9, 1010.0], [96.0, 1014.0], [96.1, 1022.0], [96.2, 1029.0], [96.3, 1035.0], [96.4, 1040.0], [96.5, 1049.0], [96.6, 1057.0], [96.7, 1068.0], [96.8, 1075.0], [96.9, 1089.0], [97.0, 1112.0], [97.1, 1131.0], [97.2, 1148.0], [97.3, 1161.0], [97.4, 1181.0], [97.5, 1199.0], [97.6, 1220.0], [97.7, 1240.0], [97.8, 1265.0], [97.9, 1292.0], [98.0, 1310.0], [98.1, 1324.0], [98.2, 1347.0], [98.3, 1392.0], [98.4, 1427.0], [98.5, 1456.0], [98.6, 1486.0], [98.7, 1503.0], [98.8, 1519.0], [98.9, 1543.0], [99.0, 1574.0], [99.1, 1603.0], [99.2, 1630.0], [99.3, 1672.0], [99.4, 1703.0], [99.5, 1720.0], [99.6, 1768.0], [99.7, 1867.0], [99.8, 1967.0], [99.9, 2053.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 34.0, "minX": 0.0, "maxY": 36722.0, "series": [{"data": [[0.0, 193.0], [2100.0, 34.0], [600.0, 10379.0], [700.0, 36722.0], [200.0, 722.0], [800.0, 14794.0], [900.0, 4935.0], [1000.0, 1088.0], [1100.0, 434.0], [300.0, 546.0], [1200.0, 332.0], [1300.0, 310.0], [1400.0, 273.0], [1500.0, 322.0], [100.0, 372.0], [400.0, 539.0], [1600.0, 227.0], [1700.0, 222.0], [1800.0, 47.0], [1900.0, 76.0], [500.0, 5290.0], [2000.0, 103.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1027.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 74554.0, "series": [{"data": [[0.0, 2379.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 74554.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1027.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 978.6959009805515, "minX": 1.75235424E12, "maxY": 988.2702166257591, "series": [{"data": [[1.7523543E12, 988.2702166257591], [1.75235424E12, 978.6959009805515]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523543E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 39.24999999999999, "minX": 1.0, "maxY": 1672.0, "series": [{"data": [[2.0, 444.0], [3.0, 453.0], [4.0, 466.0], [5.0, 468.0], [6.0, 477.0], [7.0, 479.0], [8.0, 484.0], [9.0, 524.0], [10.0, 666.0], [11.0, 668.0], [12.0, 668.0], [13.0, 688.0], [14.0, 695.0], [15.0, 700.0], [16.0, 701.0], [17.0, 706.0], [18.0, 727.0], [19.0, 728.0], [22.0, 410.33333333333337], [25.0, 413.6666666666667], [26.0, 223.0], [27.0, 270.0], [28.0, 749.0], [29.0, 234.0], [30.0, 283.0], [31.0, 754.0], [33.0, 284.0], [32.0, 263.0], [35.0, 268.0], [34.0, 756.0], [37.0, 762.0], [36.0, 284.0], [39.0, 284.0], [38.0, 334.0], [41.0, 348.0], [40.0, 762.0], [43.0, 373.0], [42.0, 763.0], [45.0, 378.0], [44.0, 786.0], [47.0, 685.0], [49.0, 790.0], [48.0, 379.0], [51.0, 473.0], [50.0, 586.0], [53.0, 593.0], [52.0, 787.0], [55.0, 719.0], [56.0, 595.0], [59.0, 612.0], [58.0, 745.5], [62.0, 710.3333333333334], [67.0, 797.0], [65.0, 710.6666666666666], [70.0, 797.0], [68.0, 672.5], [74.0, 717.25], [72.0, 704.0], [77.0, 799.0], [76.0, 710.5], [82.0, 772.5], [80.0, 743.6666666666666], [85.0, 170.0], [84.0, 728.0], [90.0, 524.0], [95.0, 192.0], [94.0, 160.0], [93.0, 764.6666666666666], [99.0, 192.0], [98.0, 772.0], [96.0, 267.0], [102.0, 797.0], [101.0, 276.0], [100.0, 744.0], [106.0, 287.0], [105.0, 750.0], [104.0, 518.0], [111.0, 603.3333333333334], [108.0, 541.0], [112.0, 311.0], [118.0, 799.0], [117.0, 312.0], [116.0, 646.0], [123.0, 801.0], [122.0, 356.0], [121.0, 753.0], [120.0, 293.0], [127.0, 443.0], [126.0, 601.3333333333334], [132.0, 481.0], [131.0, 609.3333333333334], [130.0, 810.0], [143.0, 682.5], [141.0, 376.0], [140.0, 754.0], [139.0, 576.0], [138.0, 558.5], [136.0, 725.0], [151.0, 761.0], [150.0, 755.0], [149.0, 679.0], [147.0, 761.0], [146.0, 615.0], [145.0, 753.0], [144.0, 473.0], [157.0, 701.0], [156.0, 756.0], [155.0, 825.0], [153.0, 533.0], [152.0, 629.0], [167.0, 613.0], [166.0, 762.0], [165.0, 831.0], [162.0, 705.4], [175.0, 777.0], [172.0, 758.25], [168.0, 565.0], [182.0, 689.5], [180.0, 818.5], [178.0, 795.0], [177.0, 740.0], [176.0, 768.0], [187.0, 764.8], [198.0, 795.0], [197.0, 777.6], [192.0, 777.6], [207.0, 771.25], [203.0, 795.0], [202.0, 743.0], [200.0, 854.0], [213.0, 673.0], [212.0, 814.0], [211.0, 798.0], [209.0, 731.5], [223.0, 729.5], [221.0, 797.0], [219.0, 858.0], [218.0, 781.0], [229.0, 678.0], [228.0, 789.0], [227.0, 781.0], [238.0, 92.5], [239.0, 788.0], [237.0, 818.3333333333334], [234.0, 788.0], [233.0, 684.0], [232.0, 816.3333333333334], [240.0, 39.24999999999999], [241.0, 191.5], [242.0, 104.25423728813557], [243.0, 417.0], [246.0, 186.8], [247.0, 783.25], [248.0, 180.33333333333331], [250.0, 44.0], [251.0, 307.75], [255.0, 104.2], [253.0, 785.0], [269.0, 504.7142857142857], [256.0, 105.4], [258.0, 357.57142857142856], [257.0, 836.5], [259.0, 688.0], [262.0, 53.5], [265.0, 305.66666666666663], [266.0, 52.0], [270.0, 802.0], [264.0, 689.0], [263.0, 816.25], [284.0, 199.0], [272.0, 98.6], [274.0, 105.0], [275.0, 795.4], [277.0, 141.0], [276.0, 691.0], [278.0, 155.33333333333334], [279.0, 834.0], [280.0, 356.8571428571429], [285.0, 417.54545454545456], [286.0, 374.33333333333337], [281.0, 691.0], [300.0, 599.1666666666667], [289.0, 215.71428571428572], [288.0, 197.0], [291.0, 432.4545454545455], [290.0, 881.0], [294.0, 226.4], [293.0, 754.0], [295.0, 834.5], [296.0, 531.0], [297.0, 206.0], [298.0, 93.0], [301.0, 336.75], [303.0, 175.66666666666666], [302.0, 814.0], [317.0, 424.0], [304.0, 529.4], [311.0, 83.33333333333333], [312.0, 713.0], [314.0, 89.0], [315.0, 263.0833333333333], [316.0, 458.5], [306.0, 848.5], [305.0, 707.0], [318.0, 790.0], [309.0, 760.5], [308.0, 766.3333333333334], [323.0, 297.0], [335.0, 833.0], [330.0, 201.6], [332.0, 796.0], [331.0, 804.0], [328.0, 792.0], [327.0, 717.0], [326.0, 833.0], [322.0, 716.0], [321.0, 832.0], [338.0, 720.0], [351.0, 719.0], [350.0, 826.25], [347.0, 720.0], [346.0, 826.0], [343.0, 720.0], [342.0, 826.6666666666666], [341.0, 819.0], [337.0, 797.0], [336.0, 720.0], [355.0, 720.0], [352.0, 113.66666666666667], [353.0, 92.0], [354.0, 807.0], [356.0, 459.7142857142857], [365.0, 166.2], [367.0, 798.0], [364.0, 805.0], [361.0, 725.0], [360.0, 831.6666666666666], [359.0, 805.0], [357.0, 720.0], [380.0, 580.875], [370.0, 184.0], [368.0, 807.5], [373.0, 483.75], [375.0, 100.0], [376.0, 443.57142857142856], [378.0, 92.0], [383.0, 91.0], [382.0, 848.0], [372.0, 806.4], [398.0, 385.33333333333337], [386.0, 290.6], [384.0, 305.625], [385.0, 800.5], [387.0, 146.0], [390.0, 735.6], [391.0, 362.66666666666663], [399.0, 568.3333333333334], [393.0, 800.5], [396.0, 837.5], [395.0, 733.0], [394.0, 846.5], [402.0, 182.0], [405.0, 162.0], [404.0, 797.0], [408.0, 395.0], [415.0, 735.0], [414.0, 807.5], [412.0, 783.3333333333334], [403.0, 768.5], [411.0, 796.0], [409.0, 1672.0], [407.0, 734.0], [401.0, 813.0], [400.0, 837.5], [406.0, 832.3333333333334], [428.0, 771.5], [423.0, 206.0], [425.0, 152.75], [426.0, 842.5], [424.0, 771.5], [422.0, 881.0], [421.0, 786.3333333333334], [418.0, 776.0], [416.0, 803.0], [434.0, 883.0], [445.0, 804.0], [435.0, 382.0], [443.0, 835.0], [442.0, 830.6666666666666], [439.0, 742.0], [438.0, 786.5], [436.0, 805.0], [433.0, 740.0], [432.0, 808.5], [451.0, 260.16666666666663], [455.0, 604.5], [448.0, 819.0], [463.0, 816.6], [459.0, 809.0], [458.0, 860.0], [456.0, 744.0], [454.0, 808.0], [453.0, 859.5], [450.0, 802.0], [449.0, 808.0], [470.0, 142.0], [471.0, 170.0], [479.0, 812.0], [478.0, 825.5], [476.0, 778.0], [475.0, 824.5], [474.0, 818.9000000000001], [466.0, 744.0], [483.0, 557.2857142857142], [485.0, 233.3478260869565], [488.0, 572.6666666666666], [489.0, 168.0], [490.0, 139.0], [491.0, 630.2857142857143], [493.0, 674.75], [494.0, 778.5], [487.0, 844.3333333333334], [480.0, 743.0], [510.0, 332.25], [496.0, 138.0], [498.0, 486.625], [499.0, 815.0], [501.0, 473.5], [503.0, 586.6666666666666], [502.0, 880.0], [504.0, 282.2], [506.0, 163.0], [505.0, 881.0], [511.0, 862.0], [509.0, 818.0], [508.0, 799.6666666666666], [530.0, 249.0507246376812], [515.0, 388.66666666666663], [514.0, 809.5], [512.0, 809.5], [527.0, 880.0], [526.0, 800.6666666666666], [523.0, 821.0], [522.0, 819.75], [517.0, 587.1666666666666], [519.0, 491.0], [536.0, 208.6], [537.0, 357.75], [538.0, 349.80000000000007], [543.0, 798.0], [528.0, 821.0], [542.0, 855.0], [540.0, 834.3333333333334], [539.0, 861.0], [531.0, 274.67605633802816], [532.0, 225.78571428571428], [533.0, 249.46511627906975], [534.0, 254.35294117647058], [535.0, 205.8888888888889], [572.0, 714.0], [554.0, 535.0], [548.0, 715.0], [547.0, 798.0], [546.0, 826.0], [545.0, 869.5], [549.0, 869.5], [551.0, 799.0], [550.0, 827.0], [559.0, 824.75], [556.0, 797.0], [555.0, 828.0], [552.0, 527.0], [574.0, 726.0], [573.0, 838.3333333333334], [571.0, 789.6666666666666], [568.0, 819.6666666666666], [566.0, 830.3333333333334], [563.0, 824.5], [562.0, 795.0], [600.0, 308.5714285714286], [586.0, 351.5], [584.0, 811.2], [588.0, 332.0], [589.0, 668.4285714285714], [577.0, 810.25], [580.0, 788.0], [578.0, 828.0], [595.0, 439.0], [602.0, 176.0], [604.0, 395.1538461538462], [606.0, 814.3333333333334], [594.0, 814.75], [593.0, 781.0], [599.0, 807.2], [620.0, 209.33333333333334], [617.0, 278.16], [618.0, 565.3000000000001], [619.0, 231.0], [621.0, 220.0], [633.0, 802.5], [614.0, 787.5], [611.0, 814.3333333333334], [608.0, 788.0], [622.0, 800.4], [634.0, 421.66666666666663], [636.0, 388.0], [635.0, 811.0], [637.0, 414.25], [638.0, 491.0], [639.0, 809.0], [624.0, 215.25], [625.0, 283.5], [627.0, 788.75], [626.0, 842.0], [629.0, 220.0], [631.0, 539.3333333333334], [642.0, 272.3333333333333], [641.0, 505.75], [654.0, 427.33333333333337], [655.0, 697.0], [652.0, 264.75], [653.0, 509.75], [643.0, 451.4], [644.0, 483.66666666666663], [645.0, 218.33333333333334], [646.0, 470.6], [647.0, 392.0], [666.0, 801.7142857142857], [669.0, 507.8333333333333], [670.0, 412.0], [671.0, 469.5], [660.0, 777.25], [659.0, 834.0], [661.0, 165.0], [663.0, 227.25], [649.0, 538.75], [650.0, 697.0], [651.0, 541.5], [673.0, 253.0], [672.0, 266.0], [674.0, 651.5], [677.0, 834.0], [676.0, 721.0], [679.0, 685.0], [678.0, 796.0], [680.0, 347.16666666666663], [683.0, 740.0], [681.0, 834.0], [684.0, 328.0], [687.0, 225.66666666666666], [686.0, 795.0], [685.0, 833.0], [688.0, 599.6666666666666], [693.0, 436.0], [691.0, 685.0], [690.0, 795.0], [689.0, 821.0], [695.0, 686.0], [694.0, 796.0], [696.0, 439.33333333333337], [697.0, 272.5], [698.0, 593.0], [700.0, 741.0], [708.0, 250.8], [716.0, 266.50000000000006], [706.0, 344.8333333333333], [707.0, 811.0], [719.0, 502.125], [705.0, 759.0], [704.0, 777.4], [709.0, 266.0], [711.0, 556.7142857142857], [720.0, 352.1666666666667], [734.0, 383.7], [735.0, 380.8125], [732.0, 371.27272727272725], [733.0, 343.14285714285717], [730.0, 273.8857142857143], [731.0, 271.8888888888889], [728.0, 272.52941176470586], [729.0, 322.82352941176464], [721.0, 358.6], [722.0, 313.7777777777778], [723.0, 279.2631578947368], [724.0, 290.2142857142857], [725.0, 256.22222222222223], [726.0, 304.84210526315786], [727.0, 356.8], [713.0, 260.2857142857143], [714.0, 311.7857142857143], [715.0, 282.2631578947369], [717.0, 259.6521739130435], [718.0, 258.6363636363636], [762.0, 637.0], [736.0, 311.3529411764706], [751.0, 642.0], [750.0, 762.0], [748.0, 813.0], [747.0, 643.0], [746.0, 761.0], [744.0, 757.3333333333334], [737.0, 327.1363636363637], [767.0, 766.0], [754.0, 752.0], [753.0, 815.5], [757.0, 757.0], [755.0, 779.0], [765.0, 754.0], [763.0, 764.5], [761.0, 812.0], [760.0, 763.5], [742.0, 794.25], [739.0, 654.0], [738.0, 752.0], [759.0, 722.0], [758.0, 764.0], [798.0, 768.0], [774.0, 272.4], [783.0, 767.6666666666666], [770.0, 751.0], [768.0, 739.6666666666666], [773.0, 711.0], [772.0, 792.0], [781.0, 701.5], [780.0, 749.5], [778.0, 735.6666666666666], [776.0, 751.5], [799.0, 792.0], [784.0, 701.5], [797.0, 737.0], [796.0, 730.3333333333334], [793.0, 752.5], [775.0, 741.6], [791.0, 699.5], [790.0, 766.6666666666666], [787.0, 700.5], [785.0, 767.0], [829.0, 595.0], [806.0, 215.0], [813.0, 450.33333333333337], [812.0, 712.0], [810.0, 757.5], [808.0, 765.0], [815.0, 600.0], [802.0, 737.0], [801.0, 697.0], [804.0, 784.0], [803.0, 767.0], [814.0, 770.0], [816.0, 514.5], [823.0, 278.0], [822.0, 711.6666666666666], [821.0, 753.5], [820.0, 767.5], [818.0, 757.0], [830.0, 780.0], [828.0, 743.5], [827.0, 689.0], [825.0, 743.0], [824.0, 779.5], [807.0, 724.25], [859.0, 296.0], [832.0, 574.6666666666666], [847.0, 683.5], [846.0, 776.0], [845.0, 740.0], [844.0, 685.0], [843.0, 751.0], [841.0, 753.0], [840.0, 685.5], [849.0, 271.0], [861.0, 682.0], [860.0, 749.0], [858.0, 770.0], [857.0, 593.0], [856.0, 710.5], [839.0, 727.4], [836.0, 779.0], [835.0, 715.0], [834.0, 687.5], [833.0, 756.0], [852.0, 772.0], [851.0, 711.0], [871.0, 414.8], [867.0, 263.5], [866.0, 279.0], [879.0, 206.0], [864.0, 721.2], [876.0, 482.2857142857143], [877.0, 444.5], [868.0, 489.30000000000007], [869.0, 270.2], [870.0, 269.6], [880.0, 654.2857142857142], [895.0, 417.4736842105263], [894.0, 698.1428571428571], [892.0, 376.8], [893.0, 434.6428571428571], [890.0, 268.1666666666667], [891.0, 350.5], [888.0, 268.75], [889.0, 528.75], [881.0, 333.6], [882.0, 340.7272727272727], [883.0, 440.70000000000005], [884.0, 384.8571428571429], [885.0, 363.41666666666663], [886.0, 258.2], [887.0, 328.1666666666667], [872.0, 426.3333333333333], [873.0, 421.625], [874.0, 373.81818181818187], [875.0, 306.5], [903.0, 399.75], [898.0, 305.54545454545456], [897.0, 383.9230769230769], [896.0, 711.0], [910.0, 433.7391304347827], [911.0, 522.0], [908.0, 396.0], [909.0, 528.8000000000001], [899.0, 566.0666666666666], [900.0, 483.7], [901.0, 331.4], [902.0, 710.8], [913.0, 469.8], [912.0, 692.6666666666666], [927.0, 530.0], [926.0, 695.3333333333334], [924.0, 735.0], [921.0, 476.75], [922.0, 760.0], [923.0, 530.6666666666666], [914.0, 667.25], [915.0, 629.8], [916.0, 421.16666666666663], [917.0, 691.5], [918.0, 613.6666666666666], [919.0, 466.57142857142856], [904.0, 526.0], [905.0, 470.2], [906.0, 576.0], [907.0, 621.3333333333334], [933.0, 527.5714285714286], [929.0, 583.0], [928.0, 530.1666666666666], [943.0, 466.125], [940.0, 447.1666666666667], [941.0, 710.6], [942.0, 363.5], [930.0, 520.0], [931.0, 465.57142857142856], [932.0, 600.0], [934.0, 599.6666666666666], [952.0, 560.0], [954.0, 533.5555555555555], [953.0, 689.8333333333334], [955.0, 554.125], [956.0, 576.875], [957.0, 486.8], [958.0, 537.2857142857143], [959.0, 758.0], [944.0, 421.66666666666663], [945.0, 688.0], [946.0, 499.55555555555554], [948.0, 456.6666666666667], [947.0, 719.0], [949.0, 480.0], [950.0, 559.625], [951.0, 658.5], [938.0, 386.6], [937.0, 597.0], [936.0, 745.0], [939.0, 476.8125], [967.0, 583.8000000000001], [961.0, 655.0], [960.0, 561.75], [974.0, 329.0], [973.0, 715.4], [975.0, 660.0833333333334], [962.0, 637.1999999999999], [964.0, 598.4], [965.0, 598.4], [978.0, 605.1666666666666], [977.0, 737.0], [976.0, 707.6666666666666], [979.0, 688.0], [990.0, 660.25], [991.0, 700.1818181818181], [988.0, 718.6249999999999], [989.0, 685.0588235294117], [985.0, 738.2], [984.0, 674.0], [986.0, 705.6363636363636], [987.0, 678.45], [980.0, 653.3333333333334], [982.0, 604.2], [981.0, 694.3333333333334], [983.0, 625.5], [968.0, 556.8571428571429], [969.0, 623.6], [970.0, 641.8461538461538], [972.0, 517.75], [995.0, 675.0], [992.0, 637.5], [993.0, 608.6], [994.0, 715.3636363636364], [996.0, 656.5833333333333], [997.0, 695.4545454545455], [998.0, 611.0500000000001], [999.0, 668.6363636363636], [1000.0, 776.5007693439909], [1.0, 413.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[984.4501282709086, 763.8926629040494]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 120289.33333333333, "minX": 1.75235424E12, "maxY": 186639.08333333334, "series": [{"data": [[1.7523543E12, 181161.55], [1.75235424E12, 120289.33333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7523543E12, 186639.08333333334], [1.75235424E12, 123901.58333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523543E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 720.542742324387, "minX": 1.75235424E12, "maxY": 792.6707928716205, "series": [{"data": [[1.7523543E12, 792.6707928716205], [1.75235424E12, 720.542742324387]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523543E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 720.5239350586725, "minX": 1.75235424E12, "maxY": 792.666140219826, "series": [{"data": [[1.7523543E12, 792.666140219826], [1.75235424E12, 720.5239350586725]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523543E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.9208195496745256E-4, "minX": 1.75235424E12, "maxY": 0.8826233724481458, "series": [{"data": [[1.7523543E12, 1.9208195496745256E-4], [1.75235424E12, 0.8826233724481458]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523543E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.75235424E12, "maxY": 2153.0, "series": [{"data": [[1.7523543E12, 2153.0], [1.75235424E12, 1306.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7523543E12, 852.0], [1.75235424E12, 899.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7523543E12, 952.0], [1.75235424E12, 1022.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7523543E12, 893.0], [1.75235424E12, 959.9500000000007]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7523543E12, 153.0], [1.75235424E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7523543E12, 749.0], [1.75235424E12, 753.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523543E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 162.0, "minX": 258.0, "maxY": 1488.0, "series": [{"data": [[615.0, 162.0], [617.0, 1488.0], [691.0, 873.0], [957.0, 1452.0], [1104.0, 904.0], [1093.0, 827.0], [1148.0, 772.0], [1144.0, 832.5], [1094.0, 951.0], [1142.0, 814.0], [1117.0, 856.0], [1162.0, 788.0], [1227.0, 775.0], [1235.0, 830.0], [1241.0, 955.0], [1250.0, 788.0], [1243.0, 769.0], [1261.0, 745.0], [1265.0, 804.0], [1270.0, 759.0], [1263.0, 828.0], [1259.0, 744.0], [1340.0, 748.0], [1327.0, 750.0], [1296.0, 757.0], [1328.0, 755.0], [1341.0, 747.0], [1332.0, 752.0], [1342.0, 735.0], [1294.0, 758.0], [1290.0, 863.0], [1357.0, 295.0], [1406.0, 528.0], [1405.0, 735.0], [1378.0, 741.0], [1347.0, 725.0], [1344.0, 723.0], [1373.0, 752.0], [1393.0, 727.0], [1392.0, 745.0], [1394.0, 745.0], [1400.0, 755.0], [1395.0, 745.0], [1371.0, 736.0], [1370.0, 734.0], [1367.0, 744.0], [1360.0, 719.0], [1402.0, 738.0], [1380.0, 734.0], [1356.0, 735.0], [1352.0, 738.0], [1384.0, 738.0], [1381.0, 765.0], [1390.0, 828.0], [1411.0, 741.0], [1414.0, 732.0], [1408.0, 736.0], [258.0, 749.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1414.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 162.0, "minX": 258.0, "maxY": 1488.0, "series": [{"data": [[615.0, 162.0], [617.0, 1488.0], [691.0, 873.0], [957.0, 1452.0], [1104.0, 904.0], [1093.0, 827.0], [1148.0, 772.0], [1144.0, 832.5], [1094.0, 951.0], [1142.0, 814.0], [1117.0, 856.0], [1162.0, 788.0], [1227.0, 775.0], [1235.0, 830.0], [1241.0, 955.0], [1250.0, 788.0], [1243.0, 769.0], [1261.0, 745.0], [1265.0, 804.0], [1270.0, 759.0], [1263.0, 828.0], [1259.0, 744.0], [1340.0, 748.0], [1327.0, 750.0], [1296.0, 757.0], [1328.0, 755.0], [1341.0, 747.0], [1332.0, 752.0], [1342.0, 735.0], [1294.0, 758.0], [1290.0, 863.0], [1357.0, 295.0], [1406.0, 528.0], [1405.0, 735.0], [1378.0, 741.0], [1347.0, 725.0], [1344.0, 723.0], [1373.0, 752.0], [1393.0, 727.0], [1392.0, 745.0], [1394.0, 745.0], [1400.0, 755.0], [1395.0, 745.0], [1371.0, 736.0], [1370.0, 734.0], [1367.0, 744.0], [1360.0, 719.0], [1402.0, 738.0], [1380.0, 734.0], [1356.0, 735.0], [1352.0, 738.0], [1384.0, 738.0], [1381.0, 765.0], [1390.0, 828.0], [1411.0, 741.0], [1414.0, 732.0], [1408.0, 736.0], [258.0, 749.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1414.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 535.0833333333334, "minX": 1.75235424E12, "maxY": 764.25, "series": [{"data": [[1.7523543E12, 764.25], [1.75235424E12, 535.0833333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523543E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 518.4166666666666, "minX": 1.75235424E12, "maxY": 780.9166666666666, "series": [{"data": [[1.7523543E12, 780.9166666666666], [1.75235424E12, 518.4166666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523543E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 518.4166666666666, "minX": 1.75235424E12, "maxY": 780.9166666666666, "series": [{"data": [[1.7523543E12, 780.9166666666666], [1.75235424E12, 518.4166666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523543E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 518.4166666666666, "minX": 1.75235424E12, "maxY": 780.9166666666666, "series": [{"data": [[1.7523543E12, 780.9166666666666], [1.75235424E12, 518.4166666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523543E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

