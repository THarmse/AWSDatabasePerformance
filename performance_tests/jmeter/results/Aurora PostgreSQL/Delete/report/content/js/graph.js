/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 17.0, "minX": 0.0, "maxY": 11041.0, "series": [{"data": [[0.0, 17.0], [0.1, 65.0], [0.2, 85.0], [0.3, 97.0], [0.4, 112.0], [0.5, 124.0], [0.6, 141.0], [0.7, 159.0], [0.8, 200.0], [0.9, 220.0], [1.0, 269.0], [1.1, 273.0], [1.2, 301.0], [1.3, 308.0], [1.4, 327.0], [1.5, 351.0], [1.6, 370.0], [1.7, 403.0], [1.8, 424.0], [1.9, 437.0], [2.0, 457.0], [2.1, 494.0], [2.2, 509.0], [2.3, 531.0], [2.4, 548.0], [2.5, 563.0], [2.6, 587.0], [2.7, 597.0], [2.8, 613.0], [2.9, 625.0], [3.0, 668.0], [3.1, 714.0], [3.2, 720.0], [3.3, 724.0], [3.4, 733.0], [3.5, 740.0], [3.6, 747.0], [3.7, 753.0], [3.8, 771.0], [3.9, 775.0], [4.0, 777.0], [4.1, 778.0], [4.2, 779.0], [4.3, 780.0], [4.4, 781.0], [4.5, 782.0], [4.6, 782.0], [4.7, 783.0], [4.8, 784.0], [4.9, 785.0], [5.0, 786.0], [5.1, 787.0], [5.2, 788.0], [5.3, 788.0], [5.4, 789.0], [5.5, 790.0], [5.6, 791.0], [5.7, 792.0], [5.8, 792.0], [5.9, 793.0], [6.0, 794.0], [6.1, 794.0], [6.2, 795.0], [6.3, 795.0], [6.4, 795.0], [6.5, 796.0], [6.6, 796.0], [6.7, 797.0], [6.8, 797.0], [6.9, 798.0], [7.0, 798.0], [7.1, 799.0], [7.2, 799.0], [7.3, 799.0], [7.4, 800.0], [7.5, 800.0], [7.6, 800.0], [7.7, 801.0], [7.8, 801.0], [7.9, 801.0], [8.0, 802.0], [8.1, 802.0], [8.2, 802.0], [8.3, 803.0], [8.4, 803.0], [8.5, 803.0], [8.6, 803.0], [8.7, 804.0], [8.8, 804.0], [8.9, 804.0], [9.0, 805.0], [9.1, 805.0], [9.2, 805.0], [9.3, 806.0], [9.4, 806.0], [9.5, 806.0], [9.6, 807.0], [9.7, 807.0], [9.8, 807.0], [9.9, 808.0], [10.0, 808.0], [10.1, 808.0], [10.2, 809.0], [10.3, 809.0], [10.4, 809.0], [10.5, 809.0], [10.6, 810.0], [10.7, 810.0], [10.8, 810.0], [10.9, 810.0], [11.0, 811.0], [11.1, 811.0], [11.2, 811.0], [11.3, 811.0], [11.4, 811.0], [11.5, 812.0], [11.6, 812.0], [11.7, 812.0], [11.8, 812.0], [11.9, 812.0], [12.0, 813.0], [12.1, 813.0], [12.2, 813.0], [12.3, 813.0], [12.4, 814.0], [12.5, 814.0], [12.6, 814.0], [12.7, 815.0], [12.8, 815.0], [12.9, 815.0], [13.0, 815.0], [13.1, 815.0], [13.2, 816.0], [13.3, 816.0], [13.4, 816.0], [13.5, 816.0], [13.6, 817.0], [13.7, 817.0], [13.8, 817.0], [13.9, 817.0], [14.0, 817.0], [14.1, 818.0], [14.2, 818.0], [14.3, 818.0], [14.4, 818.0], [14.5, 819.0], [14.6, 819.0], [14.7, 819.0], [14.8, 819.0], [14.9, 819.0], [15.0, 820.0], [15.1, 820.0], [15.2, 820.0], [15.3, 820.0], [15.4, 820.0], [15.5, 820.0], [15.6, 821.0], [15.7, 821.0], [15.8, 821.0], [15.9, 821.0], [16.0, 821.0], [16.1, 822.0], [16.2, 822.0], [16.3, 822.0], [16.4, 822.0], [16.5, 823.0], [16.6, 823.0], [16.7, 823.0], [16.8, 823.0], [16.9, 823.0], [17.0, 824.0], [17.1, 824.0], [17.2, 824.0], [17.3, 824.0], [17.4, 825.0], [17.5, 825.0], [17.6, 825.0], [17.7, 825.0], [17.8, 825.0], [17.9, 826.0], [18.0, 826.0], [18.1, 826.0], [18.2, 826.0], [18.3, 827.0], [18.4, 827.0], [18.5, 827.0], [18.6, 827.0], [18.7, 827.0], [18.8, 828.0], [18.9, 828.0], [19.0, 828.0], [19.1, 828.0], [19.2, 829.0], [19.3, 829.0], [19.4, 829.0], [19.5, 829.0], [19.6, 829.0], [19.7, 830.0], [19.8, 830.0], [19.9, 830.0], [20.0, 830.0], [20.1, 830.0], [20.2, 831.0], [20.3, 831.0], [20.4, 831.0], [20.5, 831.0], [20.6, 831.0], [20.7, 832.0], [20.8, 832.0], [20.9, 832.0], [21.0, 832.0], [21.1, 832.0], [21.2, 833.0], [21.3, 833.0], [21.4, 833.0], [21.5, 833.0], [21.6, 833.0], [21.7, 834.0], [21.8, 834.0], [21.9, 834.0], [22.0, 834.0], [22.1, 835.0], [22.2, 835.0], [22.3, 835.0], [22.4, 835.0], [22.5, 835.0], [22.6, 835.0], [22.7, 836.0], [22.8, 836.0], [22.9, 836.0], [23.0, 836.0], [23.1, 836.0], [23.2, 837.0], [23.3, 837.0], [23.4, 837.0], [23.5, 837.0], [23.6, 837.0], [23.7, 837.0], [23.8, 838.0], [23.9, 838.0], [24.0, 838.0], [24.1, 838.0], [24.2, 838.0], [24.3, 838.0], [24.4, 839.0], [24.5, 839.0], [24.6, 839.0], [24.7, 839.0], [24.8, 839.0], [24.9, 840.0], [25.0, 840.0], [25.1, 840.0], [25.2, 840.0], [25.3, 840.0], [25.4, 841.0], [25.5, 841.0], [25.6, 841.0], [25.7, 841.0], [25.8, 841.0], [25.9, 842.0], [26.0, 842.0], [26.1, 842.0], [26.2, 842.0], [26.3, 842.0], [26.4, 843.0], [26.5, 843.0], [26.6, 843.0], [26.7, 843.0], [26.8, 843.0], [26.9, 843.0], [27.0, 844.0], [27.1, 844.0], [27.2, 844.0], [27.3, 844.0], [27.4, 844.0], [27.5, 844.0], [27.6, 845.0], [27.7, 845.0], [27.8, 845.0], [27.9, 845.0], [28.0, 845.0], [28.1, 845.0], [28.2, 845.0], [28.3, 846.0], [28.4, 846.0], [28.5, 846.0], [28.6, 846.0], [28.7, 846.0], [28.8, 846.0], [28.9, 847.0], [29.0, 847.0], [29.1, 847.0], [29.2, 847.0], [29.3, 847.0], [29.4, 847.0], [29.5, 848.0], [29.6, 848.0], [29.7, 848.0], [29.8, 848.0], [29.9, 848.0], [30.0, 848.0], [30.1, 849.0], [30.2, 849.0], [30.3, 849.0], [30.4, 849.0], [30.5, 849.0], [30.6, 849.0], [30.7, 849.0], [30.8, 850.0], [30.9, 850.0], [31.0, 850.0], [31.1, 850.0], [31.2, 851.0], [31.3, 851.0], [31.4, 851.0], [31.5, 851.0], [31.6, 851.0], [31.7, 851.0], [31.8, 852.0], [31.9, 852.0], [32.0, 852.0], [32.1, 852.0], [32.2, 852.0], [32.3, 853.0], [32.4, 853.0], [32.5, 853.0], [32.6, 853.0], [32.7, 853.0], [32.8, 854.0], [32.9, 854.0], [33.0, 854.0], [33.1, 854.0], [33.2, 855.0], [33.3, 855.0], [33.4, 855.0], [33.5, 855.0], [33.6, 856.0], [33.7, 856.0], [33.8, 856.0], [33.9, 856.0], [34.0, 856.0], [34.1, 857.0], [34.2, 857.0], [34.3, 857.0], [34.4, 857.0], [34.5, 857.0], [34.6, 857.0], [34.7, 858.0], [34.8, 858.0], [34.9, 858.0], [35.0, 858.0], [35.1, 858.0], [35.2, 859.0], [35.3, 859.0], [35.4, 859.0], [35.5, 859.0], [35.6, 859.0], [35.7, 859.0], [35.8, 860.0], [35.9, 860.0], [36.0, 860.0], [36.1, 860.0], [36.2, 860.0], [36.3, 861.0], [36.4, 861.0], [36.5, 861.0], [36.6, 861.0], [36.7, 861.0], [36.8, 862.0], [36.9, 862.0], [37.0, 862.0], [37.1, 862.0], [37.2, 862.0], [37.3, 863.0], [37.4, 863.0], [37.5, 863.0], [37.6, 863.0], [37.7, 863.0], [37.8, 863.0], [37.9, 864.0], [38.0, 864.0], [38.1, 864.0], [38.2, 864.0], [38.3, 864.0], [38.4, 865.0], [38.5, 865.0], [38.6, 865.0], [38.7, 865.0], [38.8, 866.0], [38.9, 866.0], [39.0, 866.0], [39.1, 866.0], [39.2, 866.0], [39.3, 867.0], [39.4, 867.0], [39.5, 867.0], [39.6, 867.0], [39.7, 867.0], [39.8, 868.0], [39.9, 868.0], [40.0, 868.0], [40.1, 868.0], [40.2, 868.0], [40.3, 869.0], [40.4, 869.0], [40.5, 869.0], [40.6, 869.0], [40.7, 869.0], [40.8, 870.0], [40.9, 870.0], [41.0, 870.0], [41.1, 870.0], [41.2, 870.0], [41.3, 871.0], [41.4, 871.0], [41.5, 871.0], [41.6, 871.0], [41.7, 871.0], [41.8, 872.0], [41.9, 872.0], [42.0, 872.0], [42.1, 872.0], [42.2, 872.0], [42.3, 873.0], [42.4, 873.0], [42.5, 873.0], [42.6, 873.0], [42.7, 873.0], [42.8, 874.0], [42.9, 874.0], [43.0, 874.0], [43.1, 874.0], [43.2, 874.0], [43.3, 875.0], [43.4, 875.0], [43.5, 875.0], [43.6, 875.0], [43.7, 875.0], [43.8, 875.0], [43.9, 876.0], [44.0, 876.0], [44.1, 876.0], [44.2, 876.0], [44.3, 876.0], [44.4, 877.0], [44.5, 877.0], [44.6, 877.0], [44.7, 877.0], [44.8, 877.0], [44.9, 878.0], [45.0, 878.0], [45.1, 878.0], [45.2, 878.0], [45.3, 878.0], [45.4, 879.0], [45.5, 879.0], [45.6, 879.0], [45.7, 879.0], [45.8, 880.0], [45.9, 880.0], [46.0, 880.0], [46.1, 880.0], [46.2, 880.0], [46.3, 881.0], [46.4, 881.0], [46.5, 881.0], [46.6, 881.0], [46.7, 881.0], [46.8, 882.0], [46.9, 882.0], [47.0, 882.0], [47.1, 882.0], [47.2, 882.0], [47.3, 883.0], [47.4, 883.0], [47.5, 883.0], [47.6, 884.0], [47.7, 884.0], [47.8, 884.0], [47.9, 884.0], [48.0, 885.0], [48.1, 885.0], [48.2, 885.0], [48.3, 885.0], [48.4, 886.0], [48.5, 886.0], [48.6, 886.0], [48.7, 887.0], [48.8, 887.0], [48.9, 887.0], [49.0, 888.0], [49.1, 888.0], [49.2, 888.0], [49.3, 889.0], [49.4, 889.0], [49.5, 889.0], [49.6, 890.0], [49.7, 890.0], [49.8, 890.0], [49.9, 891.0], [50.0, 891.0], [50.1, 891.0], [50.2, 892.0], [50.3, 892.0], [50.4, 892.0], [50.5, 893.0], [50.6, 893.0], [50.7, 894.0], [50.8, 894.0], [50.9, 894.0], [51.0, 895.0], [51.1, 895.0], [51.2, 896.0], [51.3, 896.0], [51.4, 897.0], [51.5, 897.0], [51.6, 897.0], [51.7, 898.0], [51.8, 898.0], [51.9, 899.0], [52.0, 899.0], [52.1, 900.0], [52.2, 900.0], [52.3, 900.0], [52.4, 901.0], [52.5, 901.0], [52.6, 902.0], [52.7, 902.0], [52.8, 902.0], [52.9, 903.0], [53.0, 903.0], [53.1, 904.0], [53.2, 904.0], [53.3, 905.0], [53.4, 905.0], [53.5, 906.0], [53.6, 906.0], [53.7, 907.0], [53.8, 907.0], [53.9, 908.0], [54.0, 909.0], [54.1, 909.0], [54.2, 910.0], [54.3, 911.0], [54.4, 911.0], [54.5, 912.0], [54.6, 913.0], [54.7, 913.0], [54.8, 914.0], [54.9, 914.0], [55.0, 915.0], [55.1, 915.0], [55.2, 916.0], [55.3, 917.0], [55.4, 917.0], [55.5, 918.0], [55.6, 919.0], [55.7, 919.0], [55.8, 920.0], [55.9, 920.0], [56.0, 921.0], [56.1, 921.0], [56.2, 922.0], [56.3, 922.0], [56.4, 923.0], [56.5, 923.0], [56.6, 924.0], [56.7, 924.0], [56.8, 925.0], [56.9, 926.0], [57.0, 926.0], [57.1, 927.0], [57.2, 928.0], [57.3, 928.0], [57.4, 929.0], [57.5, 930.0], [57.6, 931.0], [57.7, 931.0], [57.8, 932.0], [57.9, 932.0], [58.0, 933.0], [58.1, 934.0], [58.2, 934.0], [58.3, 935.0], [58.4, 936.0], [58.5, 936.0], [58.6, 937.0], [58.7, 938.0], [58.8, 938.0], [58.9, 939.0], [59.0, 940.0], [59.1, 940.0], [59.2, 941.0], [59.3, 942.0], [59.4, 942.0], [59.5, 943.0], [59.6, 943.0], [59.7, 944.0], [59.8, 944.0], [59.9, 945.0], [60.0, 946.0], [60.1, 946.0], [60.2, 947.0], [60.3, 947.0], [60.4, 948.0], [60.5, 948.0], [60.6, 949.0], [60.7, 949.0], [60.8, 950.0], [60.9, 950.0], [61.0, 950.0], [61.1, 951.0], [61.2, 951.0], [61.3, 952.0], [61.4, 952.0], [61.5, 952.0], [61.6, 952.0], [61.7, 953.0], [61.8, 953.0], [61.9, 953.0], [62.0, 954.0], [62.1, 954.0], [62.2, 954.0], [62.3, 955.0], [62.4, 955.0], [62.5, 955.0], [62.6, 956.0], [62.7, 956.0], [62.8, 957.0], [62.9, 957.0], [63.0, 957.0], [63.1, 958.0], [63.2, 958.0], [63.3, 959.0], [63.4, 959.0], [63.5, 960.0], [63.6, 960.0], [63.7, 961.0], [63.8, 961.0], [63.9, 961.0], [64.0, 962.0], [64.1, 962.0], [64.2, 963.0], [64.3, 963.0], [64.4, 963.0], [64.5, 964.0], [64.6, 964.0], [64.7, 965.0], [64.8, 965.0], [64.9, 965.0], [65.0, 965.0], [65.1, 966.0], [65.2, 966.0], [65.3, 966.0], [65.4, 967.0], [65.5, 967.0], [65.6, 967.0], [65.7, 968.0], [65.8, 968.0], [65.9, 968.0], [66.0, 969.0], [66.1, 969.0], [66.2, 970.0], [66.3, 970.0], [66.4, 970.0], [66.5, 970.0], [66.6, 971.0], [66.7, 971.0], [66.8, 972.0], [66.9, 972.0], [67.0, 972.0], [67.1, 973.0], [67.2, 973.0], [67.3, 973.0], [67.4, 974.0], [67.5, 974.0], [67.6, 974.0], [67.7, 975.0], [67.8, 975.0], [67.9, 975.0], [68.0, 976.0], [68.1, 976.0], [68.2, 976.0], [68.3, 977.0], [68.4, 977.0], [68.5, 977.0], [68.6, 978.0], [68.7, 978.0], [68.8, 978.0], [68.9, 978.0], [69.0, 979.0], [69.1, 979.0], [69.2, 979.0], [69.3, 980.0], [69.4, 980.0], [69.5, 980.0], [69.6, 980.0], [69.7, 981.0], [69.8, 981.0], [69.9, 981.0], [70.0, 982.0], [70.1, 982.0], [70.2, 982.0], [70.3, 983.0], [70.4, 983.0], [70.5, 984.0], [70.6, 984.0], [70.7, 984.0], [70.8, 985.0], [70.9, 985.0], [71.0, 985.0], [71.1, 985.0], [71.2, 986.0], [71.3, 986.0], [71.4, 986.0], [71.5, 987.0], [71.6, 987.0], [71.7, 987.0], [71.8, 988.0], [71.9, 988.0], [72.0, 988.0], [72.1, 989.0], [72.2, 989.0], [72.3, 989.0], [72.4, 990.0], [72.5, 990.0], [72.6, 990.0], [72.7, 991.0], [72.8, 991.0], [72.9, 991.0], [73.0, 992.0], [73.1, 992.0], [73.2, 992.0], [73.3, 993.0], [73.4, 993.0], [73.5, 993.0], [73.6, 994.0], [73.7, 994.0], [73.8, 994.0], [73.9, 994.0], [74.0, 995.0], [74.1, 995.0], [74.2, 995.0], [74.3, 995.0], [74.4, 996.0], [74.5, 996.0], [74.6, 996.0], [74.7, 996.0], [74.8, 997.0], [74.9, 997.0], [75.0, 997.0], [75.1, 997.0], [75.2, 998.0], [75.3, 998.0], [75.4, 998.0], [75.5, 999.0], [75.6, 999.0], [75.7, 999.0], [75.8, 1000.0], [75.9, 1000.0], [76.0, 1000.0], [76.1, 1001.0], [76.2, 1001.0], [76.3, 1001.0], [76.4, 1002.0], [76.5, 1002.0], [76.6, 1002.0], [76.7, 1002.0], [76.8, 1003.0], [76.9, 1003.0], [77.0, 1003.0], [77.1, 1004.0], [77.2, 1004.0], [77.3, 1004.0], [77.4, 1004.0], [77.5, 1005.0], [77.6, 1005.0], [77.7, 1005.0], [77.8, 1006.0], [77.9, 1006.0], [78.0, 1006.0], [78.1, 1007.0], [78.2, 1007.0], [78.3, 1007.0], [78.4, 1008.0], [78.5, 1008.0], [78.6, 1008.0], [78.7, 1009.0], [78.8, 1009.0], [78.9, 1009.0], [79.0, 1009.0], [79.1, 1010.0], [79.2, 1010.0], [79.3, 1010.0], [79.4, 1010.0], [79.5, 1011.0], [79.6, 1011.0], [79.7, 1011.0], [79.8, 1012.0], [79.9, 1012.0], [80.0, 1012.0], [80.1, 1012.0], [80.2, 1013.0], [80.3, 1013.0], [80.4, 1013.0], [80.5, 1013.0], [80.6, 1014.0], [80.7, 1014.0], [80.8, 1014.0], [80.9, 1015.0], [81.0, 1015.0], [81.1, 1015.0], [81.2, 1015.0], [81.3, 1016.0], [81.4, 1016.0], [81.5, 1016.0], [81.6, 1016.0], [81.7, 1016.0], [81.8, 1017.0], [81.9, 1017.0], [82.0, 1017.0], [82.1, 1018.0], [82.2, 1018.0], [82.3, 1018.0], [82.4, 1018.0], [82.5, 1019.0], [82.6, 1019.0], [82.7, 1019.0], [82.8, 1020.0], [82.9, 1020.0], [83.0, 1020.0], [83.1, 1020.0], [83.2, 1021.0], [83.3, 1021.0], [83.4, 1021.0], [83.5, 1021.0], [83.6, 1022.0], [83.7, 1022.0], [83.8, 1022.0], [83.9, 1023.0], [84.0, 1023.0], [84.1, 1023.0], [84.2, 1024.0], [84.3, 1024.0], [84.4, 1024.0], [84.5, 1025.0], [84.6, 1025.0], [84.7, 1025.0], [84.8, 1026.0], [84.9, 1026.0], [85.0, 1027.0], [85.1, 1027.0], [85.2, 1028.0], [85.3, 1028.0], [85.4, 1028.0], [85.5, 1029.0], [85.6, 1029.0], [85.7, 1029.0], [85.8, 1030.0], [85.9, 1030.0], [86.0, 1031.0], [86.1, 1031.0], [86.2, 1032.0], [86.3, 1032.0], [86.4, 1033.0], [86.5, 1033.0], [86.6, 1034.0], [86.7, 1034.0], [86.8, 1035.0], [86.9, 1035.0], [87.0, 1036.0], [87.1, 1036.0], [87.2, 1036.0], [87.3, 1037.0], [87.4, 1037.0], [87.5, 1038.0], [87.6, 1038.0], [87.7, 1039.0], [87.8, 1039.0], [87.9, 1040.0], [88.0, 1040.0], [88.1, 1041.0], [88.2, 1041.0], [88.3, 1042.0], [88.4, 1042.0], [88.5, 1043.0], [88.6, 1044.0], [88.7, 1044.0], [88.8, 1045.0], [88.9, 1045.0], [89.0, 1046.0], [89.1, 1046.0], [89.2, 1047.0], [89.3, 1047.0], [89.4, 1048.0], [89.5, 1049.0], [89.6, 1049.0], [89.7, 1049.0], [89.8, 1050.0], [89.9, 1050.0], [90.0, 1051.0], [90.1, 1051.0], [90.2, 1052.0], [90.3, 1052.0], [90.4, 1053.0], [90.5, 1053.0], [90.6, 1054.0], [90.7, 1055.0], [90.8, 1055.0], [90.9, 1056.0], [91.0, 1057.0], [91.1, 1058.0], [91.2, 1059.0], [91.3, 1060.0], [91.4, 1061.0], [91.5, 1062.0], [91.6, 1063.0], [91.7, 1064.0], [91.8, 1065.0], [91.9, 1067.0], [92.0, 1067.0], [92.1, 1068.0], [92.2, 1069.0], [92.3, 1070.0], [92.4, 1071.0], [92.5, 1072.0], [92.6, 1073.0], [92.7, 1075.0], [92.8, 1076.0], [92.9, 1077.0], [93.0, 1078.0], [93.1, 1079.0], [93.2, 1080.0], [93.3, 1081.0], [93.4, 1082.0], [93.5, 1083.0], [93.6, 1084.0], [93.7, 1085.0], [93.8, 1086.0], [93.9, 1087.0], [94.0, 1088.0], [94.1, 1089.0], [94.2, 1091.0], [94.3, 1092.0], [94.4, 1094.0], [94.5, 1096.0], [94.6, 1097.0], [94.7, 1098.0], [94.8, 1100.0], [94.9, 1101.0], [95.0, 1102.0], [95.1, 1104.0], [95.2, 1105.0], [95.3, 1107.0], [95.4, 1109.0], [95.5, 1111.0], [95.6, 1113.0], [95.7, 1115.0], [95.8, 1118.0], [95.9, 1122.0], [96.0, 1125.0], [96.1, 1128.0], [96.2, 1131.0], [96.3, 1133.0], [96.4, 1135.0], [96.5, 1137.0], [96.6, 1141.0], [96.7, 1143.0], [96.8, 1147.0], [96.9, 1149.0], [97.0, 1151.0], [97.1, 1154.0], [97.2, 1162.0], [97.3, 1170.0], [97.4, 1180.0], [97.5, 1189.0], [97.6, 1193.0], [97.7, 1199.0], [97.8, 1206.0], [97.9, 1223.0], [98.0, 1246.0], [98.1, 1263.0], [98.2, 1279.0], [98.3, 1294.0], [98.4, 1315.0], [98.5, 1372.0], [98.6, 1416.0], [98.7, 1605.0], [98.8, 1631.0], [98.9, 1661.0], [99.0, 1696.0], [99.1, 1748.0], [99.2, 1920.0], [99.3, 2066.0], [99.4, 2176.0], [99.5, 2432.0], [99.6, 2707.0], [99.7, 11013.0], [99.8, 11023.0], [99.9, 11029.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 28132.0, "series": [{"data": [[0.0, 205.0], [600.0, 207.0], [700.0, 2739.0], [11000.0, 218.0], [800.0, 28132.0], [900.0, 14883.0], [1000.0, 11985.0], [1100.0, 1839.0], [1200.0, 383.0], [1300.0, 139.0], [1400.0, 56.0], [1500.0, 32.0], [100.0, 298.0], [1600.0, 209.0], [1700.0, 68.0], [1800.0, 40.0], [1900.0, 35.0], [2000.0, 57.0], [2100.0, 43.0], [2200.0, 26.0], [2300.0, 27.0], [2400.0, 22.0], [2500.0, 34.0], [2600.0, 13.0], [2700.0, 15.0], [2800.0, 5.0], [3100.0, 1.0], [200.0, 247.0], [3200.0, 5.0], [3300.0, 7.0], [3400.0, 1.0], [300.0, 307.0], [400.0, 300.0], [500.0, 350.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 858.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 60712.0, "series": [{"data": [[0.0, 1358.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 60712.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 858.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 948.2992022619404, "minX": 1.75235466E12, "maxY": 994.5127015558686, "series": [{"data": [[1.75235466E12, 994.5127015558686], [1.75235472E12, 948.2992022619404]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235472E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 45.0, "minX": 1.0, "maxY": 1129.0, "series": [{"data": [[2.0, 833.0], [3.0, 694.0], [4.0, 914.0], [5.0, 699.0], [6.0, 926.0], [7.0, 724.0], [8.0, 937.0], [9.0, 752.0], [10.0, 940.0], [11.0, 868.0], [12.0, 945.0], [13.0, 867.0], [14.0, 946.0], [15.0, 867.0], [16.0, 946.0], [17.0, 882.0], [18.0, 956.0], [19.0, 909.0], [20.0, 957.0], [21.0, 910.0], [22.0, 957.0], [24.0, 933.5], [25.0, 655.0], [27.0, 941.5], [28.0, 670.0], [29.0, 927.0], [30.0, 963.0], [31.0, 709.0], [33.0, 946.0], [35.0, 965.0], [34.0, 725.0], [37.0, 734.0], [36.0, 931.0], [39.0, 949.0], [41.0, 966.0], [40.0, 766.0], [43.0, 765.0], [42.0, 930.0], [45.0, 954.5], [47.0, 940.0], [46.0, 796.0], [49.0, 801.0], [48.0, 966.0], [51.0, 950.0], [50.0, 967.0], [53.0, 952.0], [52.0, 806.0], [55.0, 816.0], [54.0, 967.0], [57.0, 967.0], [56.0, 961.0], [59.0, 967.0], [58.0, 821.0], [61.0, 822.0], [60.0, 960.0], [63.0, 964.5], [67.0, 829.0], [66.0, 969.5], [64.0, 819.0], [71.0, 835.0], [70.0, 975.0], [69.0, 791.0], [75.0, 834.0], [74.0, 860.6666666666666], [79.0, 846.0], [78.0, 983.0], [77.0, 985.0], [76.0, 633.0], [83.0, 750.0], [81.0, 984.5], [87.0, 853.0], [86.0, 985.0], [84.0, 675.0], [91.0, 851.0], [90.0, 689.0], [89.0, 985.0], [95.0, 853.0], [94.0, 708.0], [93.0, 989.0], [92.0, 985.0], [99.0, 852.0], [98.0, 985.0], [97.0, 884.0], [103.0, 853.0], [102.0, 922.6666666666666], [107.0, 854.0], [106.0, 928.3333333333334], [111.0, 853.0], [110.0, 795.0], [109.0, 998.0], [108.0, 997.0], [115.0, 853.0], [114.0, 995.0], [113.0, 897.0], [119.0, 857.0], [118.0, 795.0], [117.0, 997.5], [123.0, 859.0], [122.0, 1000.0], [121.0, 896.0], [127.0, 860.0], [126.0, 798.0], [125.0, 999.0], [124.0, 1002.0], [135.0, 1006.0], [134.0, 797.0], [133.0, 677.0], [132.0, 1003.0], [131.0, 861.0], [130.0, 1009.0], [129.0, 799.0], [128.0, 571.0], [142.0, 718.0], [141.0, 797.0], [140.0, 1035.0], [139.0, 937.0], [137.0, 718.0], [136.0, 862.0], [151.0, 797.0], [150.0, 952.5], [148.0, 1013.0], [147.0, 733.0], [146.0, 935.0], [144.0, 918.5], [159.0, 866.0], [158.0, 1039.0], [157.0, 732.0], [156.0, 894.0], [153.0, 1041.0], [152.0, 733.0], [167.0, 810.0], [166.0, 748.0], [165.0, 1030.0], [163.0, 806.0], [162.0, 732.0], [161.0, 1016.0], [160.0, 803.0], [175.0, 919.3333333333334], [172.0, 1023.0], [171.0, 778.0], [170.0, 954.5], [168.0, 1039.0], [183.0, 809.0], [181.0, 913.4], [176.0, 782.0], [191.0, 1018.0], [190.0, 810.0], [188.0, 966.0], [186.0, 1018.0], [185.0, 896.0], [184.0, 1035.0], [198.0, 849.5], [196.0, 1018.0], [195.0, 965.0], [193.0, 810.0], [206.0, 1014.0], [205.0, 818.0], [204.0, 916.0], [202.0, 896.0], [201.0, 1016.0], [200.0, 925.5], [215.0, 893.0], [214.0, 822.0], [213.0, 917.0], [211.0, 1011.0], [210.0, 892.0], [209.0, 882.0], [222.0, 821.0], [221.0, 1030.0], [220.0, 893.0], [219.0, 807.0], [218.0, 954.0], [231.0, 821.0], [230.0, 896.0], [229.0, 821.0], [228.0, 1029.0], [227.0, 911.5], [225.0, 897.0], [224.0, 911.5], [239.0, 860.0], [237.0, 1028.0], [236.0, 824.0], [235.0, 897.0], [234.0, 822.0], [233.0, 1009.0], [232.0, 1028.0], [246.0, 836.0], [245.0, 821.0], [244.0, 1012.0], [243.0, 966.0], [241.0, 825.0], [240.0, 1009.0], [255.0, 919.5], [253.0, 968.5], [251.0, 837.0], [250.0, 967.0], [249.0, 1012.0], [248.0, 824.0], [270.0, 905.0], [271.0, 848.0], [269.0, 1043.0], [268.0, 926.0], [266.0, 848.0], [265.0, 1011.0], [264.0, 906.0], [263.0, 936.5], [257.0, 1011.0], [256.0, 842.0], [259.0, 833.0], [258.0, 1034.0], [261.0, 847.0], [260.0, 905.0], [286.0, 1022.0], [287.0, 852.0], [285.0, 877.5], [284.0, 1055.0], [282.0, 852.0], [281.0, 1014.0], [280.0, 847.0], [279.0, 1014.0], [272.0, 1011.0], [275.0, 840.0], [274.0, 976.5], [278.0, 980.0], [276.0, 847.0], [302.0, 852.0], [303.0, 1055.0], [301.0, 930.6666666666666], [291.0, 965.0], [290.0, 1054.0], [288.0, 848.0], [298.0, 851.0], [297.0, 853.0], [296.0, 1026.0], [295.0, 982.5], [293.0, 848.0], [292.0, 852.0], [318.0, 1036.0], [319.0, 908.0], [317.0, 953.5], [307.0, 853.0], [306.0, 854.0], [305.0, 970.5], [315.0, 855.0], [314.0, 1035.0], [313.0, 1056.0], [312.0, 851.0], [311.0, 909.0], [310.0, 855.0], [309.0, 1033.0], [308.0, 1055.0], [334.0, 852.0], [335.0, 1060.0], [333.0, 1037.0], [332.0, 884.0], [330.0, 1058.0], [329.0, 850.0], [328.0, 1036.0], [327.0, 849.0], [321.0, 859.0], [320.0, 850.0], [323.0, 1036.0], [322.0, 1058.0], [326.0, 1059.0], [325.0, 859.0], [324.0, 909.0], [348.0, 971.0], [350.0, 1065.0], [351.0, 861.0], [349.0, 866.0], [346.0, 861.0], [345.0, 965.5], [343.0, 907.0], [339.0, 964.0], [336.0, 1037.0], [342.0, 854.0], [341.0, 1036.0], [340.0, 880.0], [366.0, 906.0], [367.0, 1042.0], [365.0, 1075.0], [364.0, 867.0], [363.0, 862.0], [362.0, 1041.0], [361.0, 1069.0], [360.0, 866.0], [359.0, 906.0], [352.0, 1036.0], [354.0, 867.0], [353.0, 907.0], [358.0, 862.0], [357.0, 1034.0], [356.0, 963.5], [382.0, 864.5], [383.0, 908.0], [380.0, 1043.0], [371.0, 906.0], [370.0, 862.0], [369.0, 1078.0], [368.0, 868.0], [379.0, 907.0], [378.0, 1101.0], [377.0, 870.0], [376.0, 906.0], [375.0, 861.0], [374.0, 1043.0], [373.0, 1101.0], [372.0, 869.0], [398.0, 880.5], [399.0, 1051.0], [396.0, 863.0], [387.0, 858.0], [386.0, 868.0], [385.0, 1072.5], [395.0, 1051.0], [394.0, 1116.0], [393.0, 904.0], [392.0, 862.0], [391.0, 1053.0], [389.0, 1115.0], [388.0, 908.0], [414.0, 1066.0], [415.0, 852.0], [413.0, 864.0], [412.0, 852.0], [411.0, 1109.0], [410.0, 904.0], [409.0, 1065.0], [408.0, 864.0], [407.0, 854.0], [400.0, 863.0], [402.0, 856.0], [401.0, 1110.0], [406.0, 861.0], [405.0, 1112.0], [404.0, 977.0], [429.0, 855.0], [431.0, 996.0], [428.0, 986.0], [419.0, 855.0], [418.0, 885.0], [416.0, 1109.0], [426.0, 1079.0], [425.0, 907.0], [424.0, 854.0], [423.0, 903.0], [422.0, 987.0], [420.0, 1065.0], [435.0, 918.0], [447.0, 1079.0], [444.0, 853.0], [443.0, 1020.3333333333334], [441.0, 915.0], [439.0, 855.0], [438.0, 1020.0], [434.0, 854.0], [433.0, 1110.0], [432.0, 865.0], [461.0, 843.0], [463.0, 970.0], [460.0, 913.0], [459.0, 1102.0], [458.0, 969.0], [456.0, 877.5], [454.0, 972.0], [452.0, 991.0], [450.0, 868.0], [449.0, 849.0], [448.0, 966.3333333333334], [478.0, 1006.0], [479.0, 1077.0], [476.0, 848.0], [467.0, 912.0], [466.0, 957.5], [464.0, 1102.0], [475.0, 1076.0], [474.0, 874.0], [473.0, 1101.0], [472.0, 971.5], [470.0, 881.5], [468.0, 1102.0], [494.0, 966.8], [489.0, 1082.0], [488.0, 942.6666666666666], [486.0, 910.0], [484.0, 1083.0], [483.0, 1005.5], [481.0, 851.0], [480.0, 875.0], [499.0, 1081.0], [509.0, 1080.0], [511.0, 981.5], [508.0, 1100.0], [507.0, 885.0], [504.0, 1082.0], [503.0, 896.5], [501.0, 979.5], [498.0, 857.0], [497.0, 1100.0], [496.0, 896.0], [542.0, 898.0], [543.0, 1100.0], [528.0, 1100.0], [531.0, 905.0], [529.0, 1081.0], [539.0, 1083.0], [538.0, 860.0], [537.0, 948.0], [536.0, 881.0], [527.0, 888.3333333333334], [514.0, 977.0], [513.0, 923.0], [519.0, 1082.0], [518.0, 940.5], [524.0, 1081.0], [523.0, 873.0], [522.0, 964.6666666666666], [535.0, 1101.0], [534.0, 1080.0], [533.0, 879.0], [532.0, 1101.0], [569.0, 1103.0], [574.0, 916.0], [572.0, 190.0], [575.0, 355.0], [560.0, 874.0], [564.0, 1028.6666666666667], [561.0, 966.0], [573.0, 1088.0], [570.0, 964.0], [568.0, 1002.0], [551.0, 964.0], [550.0, 869.0], [549.0, 1085.0], [548.0, 915.0], [546.0, 993.0], [544.0, 1084.0], [559.0, 1103.0], [558.0, 1087.0], [557.0, 892.0], [556.0, 965.0], [555.0, 872.0], [554.0, 1085.0], [553.0, 995.0], [566.0, 877.0], [565.0, 966.0], [582.0, 506.5], [606.0, 931.0], [603.0, 768.75], [595.0, 126.0], [594.0, 926.0], [593.0, 1093.5], [597.0, 1051.0], [599.0, 926.0], [598.0, 931.0], [592.0, 124.0], [591.0, 931.0], [576.0, 908.0], [578.0, 916.0], [577.0, 1088.0], [581.0, 936.5], [579.0, 1105.0], [590.0, 965.0], [589.0, 924.0], [588.0, 1089.0], [587.0, 965.0], [586.0, 907.0], [585.0, 934.0], [584.0, 1104.0], [607.0, 927.0], [605.0, 1099.0], [604.0, 965.0], [600.0, 931.0], [583.0, 1086.0], [634.0, 1114.0], [623.0, 397.5714285714286], [619.0, 267.9375], [617.0, 966.0], [616.0, 926.0], [620.0, 219.28571428571428], [622.0, 45.0], [621.0, 936.0], [625.0, 400.6666666666667], [624.0, 964.0], [626.0, 89.1791044776119], [630.0, 518.5], [629.0, 937.0], [628.0, 1032.5], [627.0, 1115.0], [635.0, 507.5], [633.0, 937.0], [632.0, 1033.5], [615.0, 932.0], [614.0, 1032.5], [611.0, 926.0], [610.0, 1031.5], [608.0, 930.0], [638.0, 1019.5], [636.0, 967.0], [639.0, 1114.0], [647.0, 1116.0], [667.0, 967.0], [653.0, 716.6666666666666], [651.0, 967.0], [650.0, 935.0], [648.0, 1102.0], [671.0, 1115.0], [656.0, 949.5], [658.0, 932.0], [657.0, 1116.0], [670.0, 1016.0], [668.0, 930.0], [666.0, 1116.0], [665.0, 966.0], [664.0, 989.3333333333334], [646.0, 968.0], [645.0, 932.0], [644.0, 1101.0], [643.0, 936.0], [642.0, 1116.0], [641.0, 967.0], [640.0, 933.0], [654.0, 1100.0], [661.0, 967.0], [660.0, 1018.5], [675.0, 174.0], [672.0, 520.0], [687.0, 412.0], [685.0, 540.6666666666667], [686.0, 279.83333333333337], [683.0, 255.76923076923077], [684.0, 536.6666666666666], [673.0, 89.0], [674.0, 506.75], [676.0, 461.5], [677.0, 334.2], [678.0, 190.0], [679.0, 297.20000000000005], [688.0, 319.0], [703.0, 598.5], [701.0, 101.2], [702.0, 796.0], [699.0, 711.0], [700.0, 315.16666666666663], [696.0, 277.7142857142857], [698.0, 757.0], [689.0, 409.5], [690.0, 455.75], [691.0, 314.0], [693.0, 591.1666666666667], [694.0, 255.14285714285714], [695.0, 175.73684210526318], [680.0, 546.3333333333333], [681.0, 298.2857142857143], [710.0, 647.0], [705.0, 111.33333333333333], [704.0, 459.33333333333337], [718.0, 347.6], [719.0, 320.6], [716.0, 193.57142857142856], [717.0, 206.08823529411765], [714.0, 386.0], [715.0, 373.6666666666667], [706.0, 820.0], [707.0, 708.0], [708.0, 384.5], [709.0, 1114.0], [711.0, 573.5], [728.0, 457.0], [730.0, 425.6666666666667], [731.0, 589.6666666666666], [732.0, 320.7142857142857], [733.0, 935.0], [734.0, 298.14285714285717], [735.0, 1033.5], [720.0, 531.75], [721.0, 412.4], [722.0, 400.3333333333333], [723.0, 524.5], [724.0, 329.75], [725.0, 696.3333333333334], [726.0, 333.25], [727.0, 275.2272727272728], [712.0, 262.5], [713.0, 475.0], [739.0, 264.0769230769231], [736.0, 320.6153846153847], [751.0, 282.3333333333333], [749.0, 478.2], [748.0, 1125.0], [750.0, 362.5], [746.0, 183.0], [747.0, 518.25], [737.0, 267.6666666666667], [738.0, 511.8], [740.0, 404.6666666666667], [741.0, 202.15000000000003], [742.0, 701.25], [743.0, 300.27272727272725], [752.0, 768.0], [766.0, 513.7777777777778], [767.0, 359.42857142857144], [764.0, 339.1111111111111], [765.0, 449.0], [762.0, 381.0], [763.0, 577.3333333333334], [760.0, 380.5], [761.0, 538.3333333333333], [753.0, 853.3333333333334], [754.0, 430.0], [755.0, 378.5], [756.0, 318.3333333333333], [757.0, 719.0], [758.0, 552.6666666666666], [759.0, 458.0], [744.0, 650.5], [745.0, 330.3333333333333], [774.0, 802.5], [770.0, 472.2307692307692], [769.0, 343.0], [768.0, 938.0], [782.0, 369.0], [783.0, 317.125], [780.0, 415.41666666666663], [781.0, 325.7142857142857], [778.0, 358.41666666666663], [779.0, 421.92857142857144], [771.0, 601.6666666666666], [772.0, 298.55555555555554], [773.0, 512.0], [775.0, 442.0], [792.0, 553.0], [793.0, 474.6363636363636], [794.0, 431.55555555555554], [795.0, 271.0], [796.0, 260.33333333333337], [797.0, 428.5], [798.0, 652.0], [799.0, 453.0], [784.0, 373.38095238095235], [785.0, 810.5], [786.0, 629.0], [787.0, 435.58333333333326], [788.0, 465.6666666666667], [789.0, 828.5], [790.0, 598.0], [791.0, 443.75], [776.0, 355.8333333333333], [777.0, 355.8333333333333], [804.0, 525.6666666666666], [811.0, 578.6], [803.0, 419.7142857142857], [802.0, 1127.0], [801.0, 945.6666666666666], [815.0, 575.6666666666667], [814.0, 935.0], [807.0, 418.8571428571429], [806.0, 969.0], [805.0, 1129.0], [824.0, 546.3333333333334], [825.0, 808.6666666666666], [826.0, 513.25], [827.0, 339.0], [828.0, 324.8], [829.0, 479.3076923076923], [831.0, 603.0], [830.0, 1110.0], [816.0, 502.0], [817.0, 584.3333333333333], [819.0, 825.0], [820.0, 309.75], [821.0, 768.3333333333334], [823.0, 286.5], [822.0, 1020.0], [808.0, 309.6], [809.0, 584.4], [810.0, 284.5], [812.0, 502.5], [813.0, 314.0], [838.0, 539.2857142857142], [833.0, 580.8], [832.0, 320.5238095238096], [846.0, 434.72727272727275], [844.0, 395.0], [845.0, 284.4], [842.0, 308.3333333333333], [843.0, 616.6], [834.0, 771.4], [835.0, 933.0], [836.0, 794.6666666666666], [837.0, 306.8], [839.0, 388.8571428571429], [857.0, 286.4], [861.0, 692.5], [858.0, 1013.8], [863.0, 517.0], [862.0, 995.3333333333334], [848.0, 468.57142857142856], [850.0, 283.6], [849.0, 966.0], [851.0, 929.0], [852.0, 304.0], [853.0, 836.0], [854.0, 423.6], [855.0, 282.125], [840.0, 411.5], [841.0, 637.0], [871.0, 342.4], [878.0, 456.5], [866.0, 453.6], [868.0, 968.0], [867.0, 929.0], [869.0, 692.5], [870.0, 358.75], [880.0, 474.8571428571429], [894.0, 790.0], [895.0, 647.3333333333334], [890.0, 703.5], [889.0, 1000.6666666666666], [888.0, 927.0], [892.0, 925.0], [891.0, 1017.5], [893.0, 380.6666666666667], [881.0, 424.0], [882.0, 431.66666666666663], [883.0, 826.0], [885.0, 722.6666666666666], [886.0, 530.8571428571429], [887.0, 1129.0], [874.0, 275.0], [872.0, 987.75], [875.0, 632.1428571428571], [877.0, 348.75], [879.0, 725.6666666666667], [865.0, 1027.5], [902.0, 702.5], [897.0, 786.0], [896.0, 297.3333333333333], [910.0, 793.4], [909.0, 926.0], [911.0, 795.25], [898.0, 566.4285714285714], [899.0, 601.5], [901.0, 663.5714285714286], [900.0, 1110.0], [903.0, 809.0], [920.0, 791.2499999999999], [921.0, 515.0], [922.0, 1041.5], [924.0, 628.8333333333334], [927.0, 1008.6], [926.0, 1041.0], [925.0, 984.6666666666666], [912.0, 755.0], [913.0, 721.0], [914.0, 796.6], [916.0, 728.8], [917.0, 784.0], [918.0, 926.5], [905.0, 548.0], [907.0, 1046.5], [906.0, 925.0], [908.0, 850.0], [935.0, 572.0], [929.0, 786.0], [928.0, 858.75], [943.0, 896.75], [941.0, 864.0], [942.0, 750.3333333333334], [930.0, 537.6666666666666], [931.0, 925.0], [932.0, 795.5], [933.0, 804.6666666666666], [934.0, 1103.0], [944.0, 539.421052631579], [958.0, 668.5], [959.0, 797.5], [956.0, 589.4285714285714], [957.0, 894.1249999999999], [954.0, 751.375], [955.0, 589.0], [952.0, 911.8], [953.0, 717.4], [945.0, 795.0], [946.0, 757.75], [947.0, 809.8888888888889], [948.0, 971.6], [949.0, 572.5], [950.0, 594.5], [951.0, 629.0], [936.0, 896.6666666666666], [937.0, 989.6666666666666], [938.0, 792.0], [939.0, 443.9555555555555], [940.0, 619.909090909091], [967.0, 954.4], [962.0, 664.6666666666666], [960.0, 666.5], [961.0, 1062.0], [974.0, 815.3333333333334], [975.0, 412.0], [972.0, 981.125], [973.0, 924.6666666666666], [963.0, 907.5], [964.0, 995.0], [965.0, 658.1111111111111], [966.0, 791.5], [976.0, 895.0], [990.0, 786.6666666666666], [991.0, 699.0], [988.0, 861.5], [989.0, 675.0], [986.0, 688.5], [987.0, 942.8888888888889], [984.0, 679.2631578947368], [985.0, 672.5], [977.0, 915.5], [978.0, 811.0], [979.0, 950.2857142857143], [980.0, 908.6666666666666], [981.0, 1006.8], [982.0, 772.5], [983.0, 436.0], [968.0, 969.7272727272727], [969.0, 923.0], [970.0, 867.4], [971.0, 819.3333333333334], [995.0, 936.4117647058822], [994.0, 903.5882352941177], [998.0, 878.5185185185187], [999.0, 582.3333333333334], [1000.0, 964.8586365745343], [997.0, 974.25], [996.0, 986.2105263157894], [993.0, 1123.0], [992.0, 991.8333333333333], [1.0, 792.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[987.2400521230653, 950.5906432748594]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 39281.9, "minX": 1.75235466E12, "maxY": 250117.91666666666, "series": [{"data": [[1.75235466E12, 250117.91666666666], [1.75235472E12, 46708.55]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235466E12, 210332.5], [1.75235472E12, 39281.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235472E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 904.7114757190031, "minX": 1.75235466E12, "maxY": 1196.2478036958476, "series": [{"data": [[1.75235466E12, 904.7114757190031], [1.75235472E12, 1196.2478036958476]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235472E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 904.7059877416253, "minX": 1.75235466E12, "maxY": 1196.2434615773025, "series": [{"data": [[1.75235466E12, 904.7059877416253], [1.75235472E12, 1196.2434615773025]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235472E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75235466E12, "maxY": 6.446430928807166, "series": [{"data": [[1.75235466E12, 6.446430928807166], [1.75235472E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235472E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 17.0, "minX": 1.75235466E12, "maxY": 11041.0, "series": [{"data": [[1.75235466E12, 3407.0], [1.75235472E12, 11041.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235466E12, 1057.0], [1.75235472E12, 1226.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235466E12, 1150.0], [1.75235472E12, 11026.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235466E12, 1094.9500000000007], [1.75235472E12, 1628.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235466E12, 17.0], [1.75235472E12, 571.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235466E12, 902.0], [1.75235472E12, 918.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235472E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 93.0, "minX": 181.0, "maxY": 1229.0, "series": [{"data": [[553.0, 944.0], [681.0, 1229.0], [753.0, 970.0], [830.0, 854.0], [803.0, 926.0], [857.0, 860.0], [862.0, 872.0], [871.0, 953.0], [884.0, 839.0], [925.0, 958.0], [937.0, 827.0], [984.0, 955.0], [977.0, 939.0], [1005.0, 941.0], [1019.0, 986.0], [1007.0, 905.0], [1067.0, 918.0], [1053.0, 906.0], [1043.0, 932.0], [1080.0, 861.0], [1072.0, 931.0], [1074.0, 906.0], [1083.0, 872.0], [1063.0, 902.0], [1096.0, 901.0], [1133.0, 733.0], [1134.0, 1018.0], [1103.0, 844.0], [1102.0, 876.0], [1115.0, 869.0], [1111.0, 881.0], [1106.0, 851.0], [1108.0, 883.0], [1127.0, 869.0], [1124.0, 850.0], [1122.0, 835.0], [1121.0, 853.0], [1089.0, 882.0], [1101.0, 880.0], [1097.0, 900.0], [1100.0, 877.0], [1099.0, 863.0], [1118.0, 867.0], [1119.0, 886.0], [1090.0, 873.0], [1184.0, 337.5], [1166.0, 823.0], [1156.0, 844.0], [181.0, 910.0], [326.0, 93.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1184.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 93.0, "minX": 181.0, "maxY": 1229.0, "series": [{"data": [[553.0, 944.0], [681.0, 1229.0], [753.0, 970.0], [830.0, 854.0], [803.0, 926.0], [857.0, 860.0], [862.0, 872.0], [871.0, 953.0], [884.0, 839.0], [925.0, 958.0], [937.0, 827.0], [984.0, 955.0], [977.0, 939.0], [1005.0, 941.0], [1019.0, 986.0], [1007.0, 905.0], [1067.0, 918.0], [1053.0, 906.0], [1043.0, 932.0], [1080.0, 861.0], [1072.0, 931.0], [1074.0, 906.0], [1083.0, 872.0], [1063.0, 902.0], [1096.0, 901.0], [1133.0, 733.0], [1134.0, 1018.0], [1103.0, 844.0], [1102.0, 876.0], [1115.0, 869.0], [1111.0, 881.0], [1106.0, 851.0], [1108.0, 883.0], [1127.0, 869.0], [1124.0, 850.0], [1122.0, 835.0], [1121.0, 853.0], [1089.0, 882.0], [1101.0, 880.0], [1097.0, 900.0], [1100.0, 877.0], [1099.0, 863.0], [1118.0, 867.0], [1119.0, 886.0], [1090.0, 873.0], [1184.0, 337.5], [1166.0, 823.0], [1156.0, 844.0], [181.0, 910.0], [326.0, 93.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1184.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 148.38333333333333, "minX": 1.75235466E12, "maxY": 900.4166666666666, "series": [{"data": [[1.75235466E12, 900.4166666666666], [1.75235472E12, 148.38333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235472E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 165.05, "minX": 1.75235466E12, "maxY": 883.75, "series": [{"data": [[1.75235466E12, 883.75], [1.75235472E12, 165.05]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235472E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 165.05, "minX": 1.75235466E12, "maxY": 883.75, "series": [{"data": [[1.75235466E12, 883.75], [1.75235472E12, 165.05]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235472E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 165.05, "minX": 1.75235466E12, "maxY": 883.75, "series": [{"data": [[1.75235466E12, 883.75], [1.75235472E12, 165.05]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235472E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

