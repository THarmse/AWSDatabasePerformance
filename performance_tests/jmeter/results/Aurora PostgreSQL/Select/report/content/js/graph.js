/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 2101.0, "series": [{"data": [[0.0, 3.0], [0.1, 6.0], [0.2, 7.0], [0.3, 9.0], [0.4, 11.0], [0.5, 14.0], [0.6, 18.0], [0.7, 23.0], [0.8, 32.0], [0.9, 50.0], [1.0, 76.0], [1.1, 92.0], [1.2, 109.0], [1.3, 120.0], [1.4, 124.0], [1.5, 126.0], [1.6, 128.0], [1.7, 131.0], [1.8, 134.0], [1.9, 136.0], [2.0, 140.0], [2.1, 144.0], [2.2, 149.0], [2.3, 153.0], [2.4, 159.0], [2.5, 168.0], [2.6, 178.0], [2.7, 191.0], [2.8, 194.0], [2.9, 197.0], [3.0, 200.0], [3.1, 202.0], [3.2, 203.0], [3.3, 203.0], [3.4, 204.0], [3.5, 205.0], [3.6, 206.0], [3.7, 206.0], [3.8, 208.0], [3.9, 210.0], [4.0, 212.0], [4.1, 215.0], [4.2, 217.0], [4.3, 218.0], [4.4, 219.0], [4.5, 221.0], [4.6, 222.0], [4.7, 222.0], [4.8, 224.0], [4.9, 225.0], [5.0, 227.0], [5.1, 229.0], [5.2, 232.0], [5.3, 234.0], [5.4, 240.0], [5.5, 246.0], [5.6, 254.0], [5.7, 258.0], [5.8, 262.0], [5.9, 265.0], [6.0, 266.0], [6.1, 268.0], [6.2, 270.0], [6.3, 271.0], [6.4, 272.0], [6.5, 273.0], [6.6, 275.0], [6.7, 275.0], [6.8, 276.0], [6.9, 277.0], [7.0, 278.0], [7.1, 279.0], [7.2, 280.0], [7.3, 281.0], [7.4, 282.0], [7.5, 282.0], [7.6, 283.0], [7.7, 284.0], [7.8, 285.0], [7.9, 286.0], [8.0, 287.0], [8.1, 288.0], [8.2, 289.0], [8.3, 290.0], [8.4, 290.0], [8.5, 291.0], [8.6, 292.0], [8.7, 294.0], [8.8, 295.0], [8.9, 296.0], [9.0, 296.0], [9.1, 297.0], [9.2, 298.0], [9.3, 299.0], [9.4, 300.0], [9.5, 301.0], [9.6, 301.0], [9.7, 302.0], [9.8, 302.0], [9.9, 303.0], [10.0, 304.0], [10.1, 304.0], [10.2, 306.0], [10.3, 307.0], [10.4, 308.0], [10.5, 309.0], [10.6, 310.0], [10.7, 311.0], [10.8, 312.0], [10.9, 314.0], [11.0, 315.0], [11.1, 318.0], [11.2, 320.0], [11.3, 323.0], [11.4, 325.0], [11.5, 327.0], [11.6, 330.0], [11.7, 333.0], [11.8, 335.0], [11.9, 338.0], [12.0, 339.0], [12.1, 341.0], [12.2, 343.0], [12.3, 346.0], [12.4, 349.0], [12.5, 356.0], [12.6, 359.0], [12.7, 363.0], [12.8, 365.0], [12.9, 368.0], [13.0, 371.0], [13.1, 374.0], [13.2, 378.0], [13.3, 382.0], [13.4, 386.0], [13.5, 390.0], [13.6, 394.0], [13.7, 397.0], [13.8, 398.0], [13.9, 402.0], [14.0, 405.0], [14.1, 407.0], [14.2, 410.0], [14.3, 411.0], [14.4, 412.0], [14.5, 413.0], [14.6, 414.0], [14.7, 414.0], [14.8, 415.0], [14.9, 416.0], [15.0, 417.0], [15.1, 417.0], [15.2, 418.0], [15.3, 418.0], [15.4, 419.0], [15.5, 419.0], [15.6, 420.0], [15.7, 420.0], [15.8, 421.0], [15.9, 421.0], [16.0, 422.0], [16.1, 423.0], [16.2, 423.0], [16.3, 424.0], [16.4, 424.0], [16.5, 425.0], [16.6, 425.0], [16.7, 426.0], [16.8, 426.0], [16.9, 427.0], [17.0, 427.0], [17.1, 427.0], [17.2, 428.0], [17.3, 428.0], [17.4, 429.0], [17.5, 429.0], [17.6, 430.0], [17.7, 430.0], [17.8, 431.0], [17.9, 431.0], [18.0, 431.0], [18.1, 432.0], [18.2, 432.0], [18.3, 432.0], [18.4, 433.0], [18.5, 433.0], [18.6, 433.0], [18.7, 434.0], [18.8, 434.0], [18.9, 434.0], [19.0, 434.0], [19.1, 435.0], [19.2, 435.0], [19.3, 435.0], [19.4, 435.0], [19.5, 435.0], [19.6, 436.0], [19.7, 436.0], [19.8, 436.0], [19.9, 436.0], [20.0, 436.0], [20.1, 437.0], [20.2, 437.0], [20.3, 437.0], [20.4, 437.0], [20.5, 437.0], [20.6, 437.0], [20.7, 438.0], [20.8, 438.0], [20.9, 438.0], [21.0, 438.0], [21.1, 438.0], [21.2, 438.0], [21.3, 439.0], [21.4, 439.0], [21.5, 439.0], [21.6, 439.0], [21.7, 439.0], [21.8, 440.0], [21.9, 440.0], [22.0, 440.0], [22.1, 440.0], [22.2, 440.0], [22.3, 440.0], [22.4, 440.0], [22.5, 441.0], [22.6, 441.0], [22.7, 441.0], [22.8, 441.0], [22.9, 441.0], [23.0, 442.0], [23.1, 442.0], [23.2, 442.0], [23.3, 442.0], [23.4, 442.0], [23.5, 442.0], [23.6, 443.0], [23.7, 443.0], [23.8, 443.0], [23.9, 443.0], [24.0, 443.0], [24.1, 443.0], [24.2, 444.0], [24.3, 444.0], [24.4, 444.0], [24.5, 444.0], [24.6, 444.0], [24.7, 445.0], [24.8, 445.0], [24.9, 445.0], [25.0, 445.0], [25.1, 445.0], [25.2, 445.0], [25.3, 446.0], [25.4, 446.0], [25.5, 446.0], [25.6, 446.0], [25.7, 446.0], [25.8, 447.0], [25.9, 447.0], [26.0, 447.0], [26.1, 447.0], [26.2, 447.0], [26.3, 448.0], [26.4, 448.0], [26.5, 448.0], [26.6, 448.0], [26.7, 448.0], [26.8, 448.0], [26.9, 449.0], [27.0, 449.0], [27.1, 449.0], [27.2, 449.0], [27.3, 449.0], [27.4, 449.0], [27.5, 450.0], [27.6, 450.0], [27.7, 450.0], [27.8, 450.0], [27.9, 450.0], [28.0, 450.0], [28.1, 450.0], [28.2, 451.0], [28.3, 451.0], [28.4, 451.0], [28.5, 451.0], [28.6, 451.0], [28.7, 451.0], [28.8, 452.0], [28.9, 452.0], [29.0, 452.0], [29.1, 452.0], [29.2, 452.0], [29.3, 452.0], [29.4, 452.0], [29.5, 453.0], [29.6, 453.0], [29.7, 453.0], [29.8, 453.0], [29.9, 453.0], [30.0, 454.0], [30.1, 454.0], [30.2, 454.0], [30.3, 454.0], [30.4, 454.0], [30.5, 454.0], [30.6, 455.0], [30.7, 455.0], [30.8, 455.0], [30.9, 455.0], [31.0, 455.0], [31.1, 455.0], [31.2, 456.0], [31.3, 456.0], [31.4, 456.0], [31.5, 456.0], [31.6, 456.0], [31.7, 456.0], [31.8, 456.0], [31.9, 457.0], [32.0, 457.0], [32.1, 457.0], [32.2, 457.0], [32.3, 457.0], [32.4, 457.0], [32.5, 457.0], [32.6, 457.0], [32.7, 458.0], [32.8, 458.0], [32.9, 458.0], [33.0, 458.0], [33.1, 458.0], [33.2, 458.0], [33.3, 459.0], [33.4, 459.0], [33.5, 459.0], [33.6, 459.0], [33.7, 459.0], [33.8, 459.0], [33.9, 459.0], [34.0, 460.0], [34.1, 460.0], [34.2, 460.0], [34.3, 460.0], [34.4, 460.0], [34.5, 460.0], [34.6, 461.0], [34.7, 461.0], [34.8, 461.0], [34.9, 461.0], [35.0, 461.0], [35.1, 462.0], [35.2, 462.0], [35.3, 462.0], [35.4, 462.0], [35.5, 462.0], [35.6, 463.0], [35.7, 463.0], [35.8, 463.0], [35.9, 463.0], [36.0, 463.0], [36.1, 463.0], [36.2, 463.0], [36.3, 464.0], [36.4, 464.0], [36.5, 464.0], [36.6, 464.0], [36.7, 464.0], [36.8, 464.0], [36.9, 464.0], [37.0, 465.0], [37.1, 465.0], [37.2, 465.0], [37.3, 465.0], [37.4, 465.0], [37.5, 465.0], [37.6, 466.0], [37.7, 466.0], [37.8, 466.0], [37.9, 466.0], [38.0, 466.0], [38.1, 466.0], [38.2, 466.0], [38.3, 467.0], [38.4, 467.0], [38.5, 467.0], [38.6, 467.0], [38.7, 467.0], [38.8, 467.0], [38.9, 468.0], [39.0, 468.0], [39.1, 468.0], [39.2, 468.0], [39.3, 468.0], [39.4, 468.0], [39.5, 469.0], [39.6, 469.0], [39.7, 469.0], [39.8, 469.0], [39.9, 469.0], [40.0, 469.0], [40.1, 470.0], [40.2, 470.0], [40.3, 470.0], [40.4, 470.0], [40.5, 470.0], [40.6, 471.0], [40.7, 471.0], [40.8, 471.0], [40.9, 471.0], [41.0, 471.0], [41.1, 472.0], [41.2, 472.0], [41.3, 472.0], [41.4, 472.0], [41.5, 472.0], [41.6, 473.0], [41.7, 473.0], [41.8, 473.0], [41.9, 473.0], [42.0, 473.0], [42.1, 473.0], [42.2, 474.0], [42.3, 474.0], [42.4, 474.0], [42.5, 474.0], [42.6, 474.0], [42.7, 475.0], [42.8, 475.0], [42.9, 475.0], [43.0, 475.0], [43.1, 475.0], [43.2, 476.0], [43.3, 476.0], [43.4, 476.0], [43.5, 476.0], [43.6, 477.0], [43.7, 477.0], [43.8, 477.0], [43.9, 477.0], [44.0, 478.0], [44.1, 478.0], [44.2, 478.0], [44.3, 478.0], [44.4, 478.0], [44.5, 479.0], [44.6, 479.0], [44.7, 479.0], [44.8, 479.0], [44.9, 480.0], [45.0, 480.0], [45.1, 480.0], [45.2, 480.0], [45.3, 480.0], [45.4, 481.0], [45.5, 481.0], [45.6, 481.0], [45.7, 481.0], [45.8, 482.0], [45.9, 482.0], [46.0, 482.0], [46.1, 483.0], [46.2, 483.0], [46.3, 483.0], [46.4, 483.0], [46.5, 484.0], [46.6, 484.0], [46.7, 484.0], [46.8, 484.0], [46.9, 485.0], [47.0, 485.0], [47.1, 485.0], [47.2, 486.0], [47.3, 486.0], [47.4, 487.0], [47.5, 487.0], [47.6, 487.0], [47.7, 488.0], [47.8, 488.0], [47.9, 488.0], [48.0, 489.0], [48.1, 489.0], [48.2, 489.0], [48.3, 490.0], [48.4, 490.0], [48.5, 490.0], [48.6, 491.0], [48.7, 491.0], [48.8, 492.0], [48.9, 492.0], [49.0, 492.0], [49.1, 493.0], [49.2, 493.0], [49.3, 493.0], [49.4, 493.0], [49.5, 494.0], [49.6, 494.0], [49.7, 494.0], [49.8, 494.0], [49.9, 495.0], [50.0, 495.0], [50.1, 495.0], [50.2, 495.0], [50.3, 496.0], [50.4, 496.0], [50.5, 496.0], [50.6, 497.0], [50.7, 497.0], [50.8, 497.0], [50.9, 497.0], [51.0, 498.0], [51.1, 498.0], [51.2, 498.0], [51.3, 499.0], [51.4, 499.0], [51.5, 499.0], [51.6, 500.0], [51.7, 500.0], [51.8, 500.0], [51.9, 500.0], [52.0, 501.0], [52.1, 501.0], [52.2, 501.0], [52.3, 502.0], [52.4, 502.0], [52.5, 502.0], [52.6, 502.0], [52.7, 503.0], [52.8, 503.0], [52.9, 503.0], [53.0, 503.0], [53.1, 504.0], [53.2, 504.0], [53.3, 504.0], [53.4, 505.0], [53.5, 505.0], [53.6, 505.0], [53.7, 506.0], [53.8, 506.0], [53.9, 506.0], [54.0, 507.0], [54.1, 507.0], [54.2, 507.0], [54.3, 507.0], [54.4, 508.0], [54.5, 508.0], [54.6, 508.0], [54.7, 508.0], [54.8, 509.0], [54.9, 509.0], [55.0, 509.0], [55.1, 509.0], [55.2, 510.0], [55.3, 510.0], [55.4, 510.0], [55.5, 511.0], [55.6, 511.0], [55.7, 511.0], [55.8, 512.0], [55.9, 512.0], [56.0, 512.0], [56.1, 513.0], [56.2, 513.0], [56.3, 513.0], [56.4, 513.0], [56.5, 514.0], [56.6, 514.0], [56.7, 514.0], [56.8, 514.0], [56.9, 515.0], [57.0, 515.0], [57.1, 515.0], [57.2, 515.0], [57.3, 516.0], [57.4, 516.0], [57.5, 516.0], [57.6, 516.0], [57.7, 516.0], [57.8, 517.0], [57.9, 517.0], [58.0, 517.0], [58.1, 517.0], [58.2, 517.0], [58.3, 518.0], [58.4, 518.0], [58.5, 518.0], [58.6, 518.0], [58.7, 518.0], [58.8, 519.0], [58.9, 519.0], [59.0, 519.0], [59.1, 519.0], [59.2, 519.0], [59.3, 519.0], [59.4, 520.0], [59.5, 520.0], [59.6, 520.0], [59.7, 520.0], [59.8, 520.0], [59.9, 520.0], [60.0, 521.0], [60.1, 521.0], [60.2, 521.0], [60.3, 521.0], [60.4, 521.0], [60.5, 522.0], [60.6, 522.0], [60.7, 522.0], [60.8, 522.0], [60.9, 522.0], [61.0, 522.0], [61.1, 522.0], [61.2, 523.0], [61.3, 523.0], [61.4, 523.0], [61.5, 523.0], [61.6, 523.0], [61.7, 523.0], [61.8, 524.0], [61.9, 524.0], [62.0, 524.0], [62.1, 524.0], [62.2, 524.0], [62.3, 524.0], [62.4, 525.0], [62.5, 525.0], [62.6, 525.0], [62.7, 525.0], [62.8, 525.0], [62.9, 525.0], [63.0, 526.0], [63.1, 526.0], [63.2, 526.0], [63.3, 526.0], [63.4, 526.0], [63.5, 527.0], [63.6, 527.0], [63.7, 527.0], [63.8, 527.0], [63.9, 527.0], [64.0, 527.0], [64.1, 528.0], [64.2, 528.0], [64.3, 528.0], [64.4, 528.0], [64.5, 528.0], [64.6, 528.0], [64.7, 528.0], [64.8, 529.0], [64.9, 529.0], [65.0, 529.0], [65.1, 529.0], [65.2, 529.0], [65.3, 529.0], [65.4, 530.0], [65.5, 530.0], [65.6, 530.0], [65.7, 530.0], [65.8, 530.0], [65.9, 530.0], [66.0, 531.0], [66.1, 531.0], [66.2, 531.0], [66.3, 531.0], [66.4, 531.0], [66.5, 531.0], [66.6, 531.0], [66.7, 532.0], [66.8, 532.0], [66.9, 532.0], [67.0, 532.0], [67.1, 532.0], [67.2, 532.0], [67.3, 532.0], [67.4, 533.0], [67.5, 533.0], [67.6, 533.0], [67.7, 533.0], [67.8, 533.0], [67.9, 533.0], [68.0, 533.0], [68.1, 533.0], [68.2, 534.0], [68.3, 534.0], [68.4, 534.0], [68.5, 534.0], [68.6, 534.0], [68.7, 534.0], [68.8, 534.0], [68.9, 535.0], [69.0, 535.0], [69.1, 535.0], [69.2, 535.0], [69.3, 535.0], [69.4, 535.0], [69.5, 535.0], [69.6, 535.0], [69.7, 536.0], [69.8, 536.0], [69.9, 536.0], [70.0, 536.0], [70.1, 536.0], [70.2, 536.0], [70.3, 537.0], [70.4, 537.0], [70.5, 537.0], [70.6, 537.0], [70.7, 537.0], [70.8, 537.0], [70.9, 537.0], [71.0, 538.0], [71.1, 538.0], [71.2, 538.0], [71.3, 538.0], [71.4, 538.0], [71.5, 538.0], [71.6, 539.0], [71.7, 539.0], [71.8, 539.0], [71.9, 539.0], [72.0, 539.0], [72.1, 539.0], [72.2, 540.0], [72.3, 540.0], [72.4, 540.0], [72.5, 540.0], [72.6, 540.0], [72.7, 540.0], [72.8, 541.0], [72.9, 541.0], [73.0, 541.0], [73.1, 541.0], [73.2, 541.0], [73.3, 542.0], [73.4, 542.0], [73.5, 542.0], [73.6, 542.0], [73.7, 542.0], [73.8, 542.0], [73.9, 543.0], [74.0, 543.0], [74.1, 543.0], [74.2, 543.0], [74.3, 543.0], [74.4, 543.0], [74.5, 544.0], [74.6, 544.0], [74.7, 544.0], [74.8, 544.0], [74.9, 544.0], [75.0, 545.0], [75.1, 545.0], [75.2, 545.0], [75.3, 545.0], [75.4, 546.0], [75.5, 546.0], [75.6, 546.0], [75.7, 546.0], [75.8, 547.0], [75.9, 547.0], [76.0, 547.0], [76.1, 547.0], [76.2, 548.0], [76.3, 548.0], [76.4, 548.0], [76.5, 548.0], [76.6, 549.0], [76.7, 549.0], [76.8, 549.0], [76.9, 549.0], [77.0, 549.0], [77.1, 550.0], [77.2, 550.0], [77.3, 550.0], [77.4, 551.0], [77.5, 551.0], [77.6, 551.0], [77.7, 551.0], [77.8, 551.0], [77.9, 552.0], [78.0, 552.0], [78.1, 552.0], [78.2, 552.0], [78.3, 553.0], [78.4, 553.0], [78.5, 553.0], [78.6, 553.0], [78.7, 554.0], [78.8, 554.0], [78.9, 554.0], [79.0, 554.0], [79.1, 555.0], [79.2, 555.0], [79.3, 555.0], [79.4, 556.0], [79.5, 556.0], [79.6, 556.0], [79.7, 556.0], [79.8, 557.0], [79.9, 557.0], [80.0, 557.0], [80.1, 557.0], [80.2, 558.0], [80.3, 558.0], [80.4, 558.0], [80.5, 559.0], [80.6, 559.0], [80.7, 559.0], [80.8, 560.0], [80.9, 560.0], [81.0, 560.0], [81.1, 561.0], [81.2, 561.0], [81.3, 561.0], [81.4, 562.0], [81.5, 562.0], [81.6, 562.0], [81.7, 563.0], [81.8, 563.0], [81.9, 564.0], [82.0, 564.0], [82.1, 564.0], [82.2, 564.0], [82.3, 565.0], [82.4, 565.0], [82.5, 565.0], [82.6, 566.0], [82.7, 566.0], [82.8, 566.0], [82.9, 567.0], [83.0, 567.0], [83.1, 567.0], [83.2, 568.0], [83.3, 568.0], [83.4, 569.0], [83.5, 569.0], [83.6, 570.0], [83.7, 570.0], [83.8, 571.0], [83.9, 571.0], [84.0, 572.0], [84.1, 573.0], [84.2, 574.0], [84.3, 575.0], [84.4, 575.0], [84.5, 576.0], [84.6, 577.0], [84.7, 578.0], [84.8, 579.0], [84.9, 580.0], [85.0, 581.0], [85.1, 582.0], [85.2, 583.0], [85.3, 584.0], [85.4, 584.0], [85.5, 585.0], [85.6, 586.0], [85.7, 587.0], [85.8, 587.0], [85.9, 588.0], [86.0, 588.0], [86.1, 589.0], [86.2, 590.0], [86.3, 591.0], [86.4, 592.0], [86.5, 593.0], [86.6, 594.0], [86.7, 596.0], [86.8, 597.0], [86.9, 598.0], [87.0, 599.0], [87.1, 600.0], [87.2, 602.0], [87.3, 603.0], [87.4, 604.0], [87.5, 607.0], [87.6, 608.0], [87.7, 609.0], [87.8, 610.0], [87.9, 611.0], [88.0, 611.0], [88.1, 612.0], [88.2, 613.0], [88.3, 614.0], [88.4, 614.0], [88.5, 616.0], [88.6, 617.0], [88.7, 619.0], [88.8, 621.0], [88.9, 624.0], [89.0, 627.0], [89.1, 629.0], [89.2, 631.0], [89.3, 634.0], [89.4, 637.0], [89.5, 640.0], [89.6, 642.0], [89.7, 644.0], [89.8, 645.0], [89.9, 646.0], [90.0, 647.0], [90.1, 649.0], [90.2, 651.0], [90.3, 655.0], [90.4, 657.0], [90.5, 659.0], [90.6, 660.0], [90.7, 663.0], [90.8, 665.0], [90.9, 667.0], [91.0, 669.0], [91.1, 672.0], [91.2, 674.0], [91.3, 677.0], [91.4, 680.0], [91.5, 682.0], [91.6, 684.0], [91.7, 687.0], [91.8, 690.0], [91.9, 694.0], [92.0, 696.0], [92.1, 698.0], [92.2, 704.0], [92.3, 707.0], [92.4, 711.0], [92.5, 715.0], [92.6, 717.0], [92.7, 719.0], [92.8, 721.0], [92.9, 723.0], [93.0, 726.0], [93.1, 730.0], [93.2, 732.0], [93.3, 734.0], [93.4, 737.0], [93.5, 740.0], [93.6, 742.0], [93.7, 743.0], [93.8, 744.0], [93.9, 744.0], [94.0, 746.0], [94.1, 747.0], [94.2, 748.0], [94.3, 749.0], [94.4, 750.0], [94.5, 752.0], [94.6, 754.0], [94.7, 756.0], [94.8, 758.0], [94.9, 760.0], [95.0, 761.0], [95.1, 763.0], [95.2, 764.0], [95.3, 766.0], [95.4, 768.0], [95.5, 770.0], [95.6, 772.0], [95.7, 774.0], [95.8, 776.0], [95.9, 778.0], [96.0, 779.0], [96.1, 781.0], [96.2, 782.0], [96.3, 783.0], [96.4, 785.0], [96.5, 786.0], [96.6, 787.0], [96.7, 788.0], [96.8, 790.0], [96.9, 793.0], [97.0, 794.0], [97.1, 796.0], [97.2, 798.0], [97.3, 801.0], [97.4, 803.0], [97.5, 806.0], [97.6, 810.0], [97.7, 819.0], [97.8, 823.0], [97.9, 826.0], [98.0, 829.0], [98.1, 835.0], [98.2, 838.0], [98.3, 842.0], [98.4, 846.0], [98.5, 853.0], [98.6, 865.0], [98.7, 878.0], [98.8, 885.0], [98.9, 891.0], [99.0, 912.0], [99.1, 936.0], [99.2, 947.0], [99.3, 987.0], [99.4, 1076.0], [99.5, 1171.0], [99.6, 1287.0], [99.7, 1367.0], [99.8, 1435.0], [99.9, 1500.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 44623.0, "series": [{"data": [[0.0, 1365.0], [2100.0, 1.0], [600.0, 6026.0], [700.0, 6086.0], [200.0, 7555.0], [800.0, 2019.0], [900.0, 423.0], [1000.0, 110.0], [1100.0, 129.0], [300.0, 5260.0], [1200.0, 98.0], [1300.0, 138.0], [1400.0, 202.0], [1500.0, 43.0], [100.0, 2173.0], [400.0, 44623.0], [1600.0, 40.0], [1700.0, 6.0], [1800.0, 23.0], [1900.0, 4.0], [500.0, 41869.0], [2000.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 61388.0, "series": [{"data": [[0.0, 61388.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 56686.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 118.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 979.558739933681, "minX": 1.75235436E12, "maxY": 993.2249335041942, "series": [{"data": [[1.75235436E12, 979.558739933681], [1.75235442E12, 993.2249335041942]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235442E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.0, "maxY": 1512.0, "series": [{"data": [[2.0, 713.0], [3.0, 436.0], [4.0, 440.0], [5.0, 527.0], [6.0, 541.0], [7.0, 573.0], [8.0, 578.0], [9.0, 585.0], [10.0, 600.0], [11.0, 614.0], [12.0, 621.0], [13.0, 623.0], [14.0, 629.0], [15.0, 645.0], [16.0, 645.0], [17.0, 646.0], [18.0, 646.0], [19.0, 651.0], [20.0, 656.0], [21.0, 653.0], [22.0, 658.0], [23.0, 660.0], [24.0, 660.0], [25.0, 1280.0], [26.0, 1300.0], [27.0, 1302.0], [28.0, 1455.0], [29.0, 1456.0], [30.0, 1512.0], [32.0, 656.5], [34.0, 658.0], [37.0, 676.0], [36.0, 667.0], [39.0, 672.0], [41.0, 667.0], [40.0, 682.0], [43.0, 668.0], [42.0, 667.0], [45.0, 670.0], [44.0, 668.0], [47.0, 670.0], [46.0, 670.0], [49.0, 670.0], [48.0, 670.0], [51.0, 670.0], [50.0, 671.0], [53.0, 672.0], [52.0, 671.0], [55.0, 672.0], [54.0, 672.0], [57.0, 672.0], [56.0, 672.0], [59.0, 674.0], [58.0, 673.0], [61.0, 673.0], [60.0, 673.0], [63.0, 672.0], [62.0, 672.0], [67.0, 673.0], [66.0, 673.0], [65.0, 671.0], [64.0, 673.0], [71.0, 672.0], [70.0, 672.0], [69.0, 672.0], [68.0, 672.0], [74.0, 672.0], [73.0, 507.0], [72.0, 671.0], [79.0, 673.0], [78.0, 610.5], [76.0, 607.0], [83.0, 675.0], [82.0, 277.0], [81.0, 674.0], [80.0, 270.0], [87.0, 676.0], [86.0, 325.0], [85.0, 675.0], [84.0, 287.0], [91.0, 675.0], [90.0, 325.0], [89.0, 501.5], [95.0, 676.0], [94.0, 335.0], [93.0, 676.0], [92.0, 328.0], [99.0, 676.0], [98.0, 379.0], [97.0, 675.0], [96.0, 333.0], [102.0, 529.5], [100.0, 380.0], [106.0, 690.0], [105.0, 379.0], [104.0, 533.5], [111.0, 383.0], [110.0, 692.0], [109.0, 382.0], [108.0, 537.0], [115.0, 382.0], [114.0, 695.0], [113.0, 382.0], [112.0, 692.0], [119.0, 397.0], [118.0, 709.0], [117.0, 395.0], [116.0, 703.0], [123.0, 399.0], [122.0, 714.0], [121.0, 397.0], [120.0, 712.0], [127.0, 1080.0], [126.0, 714.0], [125.0, 824.0], [124.0, 713.0], [135.0, 722.0], [134.0, 430.0], [133.0, 721.0], [132.0, 713.0], [131.0, 1077.0], [129.0, 1082.0], [128.0, 714.0], [143.0, 726.0], [142.0, 488.0], [141.0, 726.0], [140.0, 609.0], [138.0, 490.0], [137.0, 722.0], [136.0, 432.0], [150.0, 737.0], [149.0, 488.0], [148.0, 729.0], [147.0, 488.0], [146.0, 607.0], [144.0, 488.0], [159.0, 523.0], [158.0, 738.0], [157.0, 509.0], [156.0, 737.0], [155.0, 506.0], [154.0, 736.0], [153.0, 506.0], [152.0, 614.5], [167.0, 531.0], [166.0, 647.5], [164.0, 642.0], [162.0, 748.0], [161.0, 528.0], [160.0, 748.0], [175.0, 772.0], [174.0, 772.0], [173.0, 595.0], [172.0, 683.0], [170.0, 768.0], [169.0, 589.0], [168.0, 768.0], [182.0, 595.0], [181.0, 779.0], [180.0, 594.0], [179.0, 778.0], [178.0, 594.0], [177.0, 777.0], [176.0, 595.0], [191.0, 785.0], [190.0, 597.0], [189.0, 786.0], [188.0, 597.0], [187.0, 784.0], [186.0, 689.0], [184.0, 689.5], [199.0, 789.0], [198.0, 599.0], [197.0, 790.0], [196.0, 596.0], [195.0, 787.0], [194.0, 596.0], [193.0, 786.0], [192.0, 596.0], [207.0, 595.0], [206.0, 790.0], [205.0, 597.0], [204.0, 789.0], [203.0, 597.0], [202.0, 790.0], [201.0, 597.0], [200.0, 789.0], [215.0, 605.0], [214.0, 790.0], [213.0, 603.0], [212.0, 790.0], [211.0, 600.0], [210.0, 789.0], [209.0, 598.0], [208.0, 789.0], [223.0, 616.0], [222.0, 791.0], [221.0, 611.0], [220.0, 791.0], [219.0, 608.0], [218.0, 790.0], [217.0, 604.0], [216.0, 790.0], [231.0, 618.0], [230.0, 375.0], [229.0, 791.0], [228.0, 339.0], [227.0, 617.0], [226.0, 324.0], [225.0, 791.0], [224.0, 617.0], [239.0, 328.0], [238.0, 100.0], [237.0, 443.0], [235.0, 618.0], [234.0, 95.0], [233.0, 445.5], [246.0, 95.0], [245.0, 621.0], [244.0, 102.0], [243.0, 84.0], [242.0, 96.0], [241.0, 794.0], [240.0, 621.0], [255.0, 107.0], [254.0, 793.0], [253.0, 622.0], [252.0, 97.0], [250.0, 505.66666666666663], [248.0, 88.0], [269.0, 120.0], [271.0, 374.0], [268.0, 793.0], [259.0, 794.0], [258.0, 279.6666666666667], [267.0, 373.5], [265.0, 119.0], [264.0, 793.0], [263.0, 130.0], [262.0, 369.0], [260.0, 118.0], [287.0, 131.0], [286.0, 356.0], [275.0, 373.0], [274.0, 793.0], [272.0, 142.0], [283.0, 624.0], [282.0, 131.0], [281.0, 148.0], [280.0, 458.5], [278.0, 624.0], [277.0, 130.0], [276.0, 142.0], [302.0, 171.0], [303.0, 169.0], [301.0, 380.5], [291.0, 792.0], [290.0, 143.5], [288.0, 625.0], [299.0, 170.0], [298.0, 792.0], [297.0, 378.5], [295.0, 133.0], [294.0, 153.0], [293.0, 378.5], [307.0, 789.0], [318.0, 708.0], [316.0, 176.66666666666666], [313.0, 627.0], [312.0, 789.0], [311.0, 192.0], [310.0, 147.0], [309.0, 625.0], [308.0, 169.0], [306.0, 171.0], [305.0, 139.0], [304.0, 625.0], [334.0, 479.5], [335.0, 193.0], [332.0, 241.0], [323.0, 788.0], [322.0, 629.0], [321.0, 171.5], [320.0, 194.0], [331.0, 629.0], [330.0, 189.0], [329.0, 477.0], [327.0, 238.0], [326.0, 629.0], [325.0, 187.0], [324.0, 162.0], [349.0, 177.0], [350.0, 193.0], [348.0, 520.5], [339.0, 193.0], [338.0, 792.0], [337.0, 178.0], [336.0, 241.0], [346.0, 193.0], [345.0, 177.0], [344.0, 248.0], [343.0, 492.5], [341.0, 178.0], [340.0, 246.0], [366.0, 420.5], [367.0, 258.0], [364.0, 791.0], [363.0, 218.0], [361.0, 644.0], [360.0, 193.0], [359.0, 467.25], [352.0, 522.0], [355.0, 193.0], [354.0, 181.0], [353.0, 639.0], [382.0, 256.0], [383.0, 193.0], [381.0, 494.5], [371.0, 421.0], [369.0, 791.0], [368.0, 184.0], [379.0, 644.0], [378.0, 193.0], [377.0, 259.0], [376.0, 198.0], [375.0, 644.0], [374.0, 791.0], [373.0, 221.5], [398.0, 193.0], [399.0, 645.0], [397.0, 530.5], [387.0, 258.0], [386.0, 495.0], [384.0, 646.0], [395.0, 421.5], [393.0, 193.0], [392.0, 530.0], [390.0, 198.0], [389.0, 646.0], [388.0, 193.0], [414.0, 267.0], [415.0, 421.5], [413.0, 199.0], [412.0, 197.0], [411.0, 646.0], [410.0, 531.5], [409.0, 198.0], [408.0, 646.0], [407.0, 264.0], [400.0, 199.0], [403.0, 193.0], [402.0, 531.0], [406.0, 199.0], [405.0, 646.0], [404.0, 796.0], [419.0, 499.0], [431.0, 335.5], [428.0, 426.2], [426.0, 375.0], [425.0, 203.0], [424.0, 793.0], [423.0, 425.0], [421.0, 272.0], [420.0, 202.0], [418.0, 645.0], [417.0, 277.0], [416.0, 793.0], [446.0, 409.0], [447.0, 645.0], [444.0, 272.0], [435.0, 214.5], [434.0, 786.0], [433.0, 460.0], [432.0, 211.0], [443.0, 645.0], [442.0, 220.0], [441.0, 503.5], [440.0, 274.0], [439.0, 431.0], [438.0, 217.0], [437.0, 790.0], [436.0, 645.0], [462.0, 221.0], [463.0, 271.0], [461.0, 644.0], [460.0, 247.5], [459.0, 789.0], [458.0, 339.5], [457.0, 551.3333333333334], [454.0, 248.0], [450.0, 789.0], [449.0, 222.0], [448.0, 272.0], [452.0, 431.5], [478.0, 426.0], [479.0, 227.0], [477.0, 274.0], [476.0, 360.0], [474.0, 274.0], [473.0, 227.0], [472.0, 427.0], [470.0, 274.0], [464.0, 644.0], [466.0, 271.0], [465.0, 227.0], [469.0, 227.0], [468.0, 429.0], [494.0, 644.0], [495.0, 245.33333333333334], [493.0, 793.0], [492.0, 223.5], [491.0, 644.0], [490.0, 281.0], [489.0, 232.0], [488.0, 378.6666666666667], [486.0, 223.5], [483.0, 276.0], [482.0, 221.0], [481.0, 643.0], [480.0, 275.0], [484.0, 643.0], [510.0, 791.0], [511.0, 643.0], [509.0, 241.0], [508.0, 224.0], [507.0, 644.0], [506.0, 516.0], [505.0, 430.5], [504.0, 517.0], [502.0, 430.5], [496.0, 644.0], [499.0, 431.5], [497.0, 537.5], [501.0, 281.0], [500.0, 792.0], [536.0, 643.0], [542.0, 269.5], [543.0, 789.0], [529.0, 717.0], [540.0, 643.0], [539.0, 426.66666666666663], [537.0, 291.0], [527.0, 248.0], [513.0, 264.0], [512.0, 224.0], [515.0, 791.0], [514.0, 643.0], [517.0, 391.3333333333333], [516.0, 227.0], [519.0, 226.0], [518.0, 791.0], [526.0, 464.0], [525.0, 790.0], [524.0, 247.0], [523.0, 644.0], [522.0, 438.66666666666663], [521.0, 438.8], [520.0, 391.0], [535.0, 245.5], [533.0, 573.0], [531.0, 240.0], [530.0, 266.0], [571.0, 410.0], [575.0, 787.0], [574.0, 275.5], [572.0, 445.5], [570.0, 789.0], [551.0, 467.0], [550.0, 518.0], [548.0, 247.0], [547.0, 493.5], [546.0, 396.0], [544.0, 247.0], [561.0, 265.3333333333333], [559.0, 643.0], [557.0, 395.0], [555.0, 643.0], [553.0, 518.0], [552.0, 247.0], [601.0, 396.5], [587.0, 31.283964365256132], [586.0, 446.0], [584.0, 545.0], [589.0, 249.0], [588.0, 545.5], [590.0, 175.16666666666669], [591.0, 345.0], [577.0, 248.0], [576.0, 643.0], [580.0, 304.0], [579.0, 517.5], [582.0, 249.0], [581.0, 642.0], [602.0, 136.5], [604.0, 317.3333333333333], [605.0, 88.0], [606.0, 8.0], [607.0, 94.0], [592.0, 449.5], [594.0, 472.5], [593.0, 518.0], [597.0, 517.5], [595.0, 262.0], [599.0, 306.0], [598.0, 642.0], [600.0, 256.5], [583.0, 248.0], [634.0, 299.85714285714283], [622.0, 243.75], [609.0, 207.0], [615.0, 642.0], [614.0, 269.0], [613.0, 248.0], [612.0, 543.5], [611.0, 641.0], [623.0, 455.5], [608.0, 558.3333333333334], [632.0, 578.5], [633.0, 254.8181818181818], [635.0, 390.8], [636.0, 495.0], [637.0, 286.23529411764713], [639.0, 169.27272727272728], [638.0, 787.0], [618.0, 365.5], [619.0, 456.0], [620.0, 130.0], [621.0, 107.85714285714286], [624.0, 155.0], [625.0, 212.0], [627.0, 269.0], [626.0, 714.5], [628.0, 386.0], [630.0, 298.6666666666667], [629.0, 786.0], [631.0, 102.2], [666.0, 15.0], [643.0, 48.5], [641.0, 374.2857142857143], [640.0, 471.25], [642.0, 133.57142857142858], [645.0, 315.5], [644.0, 787.0], [646.0, 8.0], [652.0, 214.0], [651.0, 787.0], [650.0, 452.5], [649.0, 286.0], [648.0, 788.0], [654.0, 269.0], [653.0, 568.3333333333334], [655.0, 292.16666666666663], [656.0, 325.4], [657.0, 640.0], [671.0, 640.0], [670.0, 786.0], [669.0, 282.0], [667.0, 153.5], [668.0, 459.77777777777777], [665.0, 24.333333333333332], [664.0, 640.0], [647.0, 452.6], [658.0, 185.80645161290323], [659.0, 148.0], [660.0, 410.5], [661.0, 175.4], [662.0, 595.5], [663.0, 248.2], [675.0, 225.0], [678.0, 271.44444444444446], [677.0, 713.0], [679.0, 786.0], [696.0, 348.0], [698.0, 159.5], [697.0, 642.0], [699.0, 382.33333333333337], [703.0, 642.0], [702.0, 545.0], [701.0, 272.0], [700.0, 642.0], [682.0, 275.33333333333337], [681.0, 671.0], [680.0, 501.5], [683.0, 503.5], [684.0, 177.75], [686.0, 132.9090909090909], [685.0, 786.0], [687.0, 292.4], [672.0, 282.5], [674.0, 620.2], [673.0, 571.3333333333334], [688.0, 302.7142857142857], [689.0, 172.57142857142858], [690.0, 201.6], [691.0, 305.8322147651006], [692.0, 299.0], [693.0, 459.83333333333337], [695.0, 785.0], [694.0, 543.0], [732.0, 370.4], [709.0, 176.5], [705.0, 397.66666666666663], [708.0, 787.0], [707.0, 457.0], [706.0, 270.0], [719.0, 274.0], [704.0, 272.0], [711.0, 304.3157894736842], [712.0, 55.5], [713.0, 540.5], [714.0, 256.5], [715.0, 281.0], [717.0, 407.75], [716.0, 787.0], [718.0, 129.75], [723.0, 294.0], [722.0, 288.5], [721.0, 444.0], [720.0, 303.0], [725.0, 275.0], [724.0, 639.0], [727.0, 471.0], [726.0, 527.5], [735.0, 434.83333333333337], [734.0, 429.2222222222223], [733.0, 302.0], [731.0, 172.5], [730.0, 471.75], [729.0, 787.0], [728.0, 182.5], [762.0, 189.5], [741.0, 331.0], [743.0, 188.5], [742.0, 473.0], [761.0, 428.0], [760.0, 854.75], [744.0, 165.5], [746.0, 426.66666666666663], [745.0, 307.0], [748.0, 306.0], [747.0, 737.5], [749.0, 356.0], [751.0, 594.6666666666666], [740.0, 496.5], [739.0, 533.0], [738.0, 290.5], [737.0, 508.5], [736.0, 472.99999999999994], [750.0, 397.5], [757.0, 522.2], [758.0, 635.7142857142857], [759.0, 180.5], [763.0, 231.87500000000003], [764.0, 419.14285714285717], [766.0, 283.6], [765.0, 505.5], [767.0, 316.0], [753.0, 504.5], [752.0, 293.0], [755.0, 439.3333333333333], [754.0, 529.0], [772.0, 333.4], [769.0, 108.4], [771.0, 315.0], [770.0, 592.3333333333334], [782.0, 599.6666666666666], [768.0, 310.0], [775.0, 198.71428571428572], [774.0, 402.25], [773.0, 770.0], [792.0, 63.0], [794.0, 309.6], [793.0, 455.0], [795.0, 433.4], [797.0, 860.0], [796.0, 525.0], [799.0, 322.0], [784.0, 430.0], [798.0, 297.0], [777.0, 191.0], [776.0, 503.5], [778.0, 296.22222222222223], [779.0, 301.2], [780.0, 441.6666666666667], [781.0, 496.125], [785.0, 465.25], [786.0, 70.0], [787.0, 306.0], [788.0, 75.0], [790.0, 188.75], [789.0, 599.6666666666666], [791.0, 696.0], [824.0, 529.75], [828.0, 486.7142857142857], [801.0, 264.6], [809.0, 276.1666666666667], [808.0, 526.25], [811.0, 461.99999999999994], [810.0, 594.3333333333334], [813.0, 526.5], [812.0, 485.4], [815.0, 594.3333333333334], [800.0, 484.2], [814.0, 439.66666666666663], [819.0, 352.5], [818.0, 483.7], [817.0, 554.5], [816.0, 526.25], [820.0, 547.0], [821.0, 327.0], [822.0, 472.625], [823.0, 437.57142857142856], [826.0, 497.75], [825.0, 597.3333333333334], [807.0, 457.8333333333333], [806.0, 438.0], [805.0, 476.3333333333333], [804.0, 496.5], [803.0, 323.0], [802.0, 524.75], [827.0, 327.0], [830.0, 433.0], [829.0, 328.0], [831.0, 487.6], [856.0, 372.0], [844.0, 156.33333333333331], [837.0, 447.5], [835.0, 480.3333333333333], [834.0, 499.0], [833.0, 480.0], [832.0, 499.0], [839.0, 745.5], [838.0, 316.0], [847.0, 506.0], [846.0, 317.5], [845.0, 602.3333333333334], [841.0, 525.0], [840.0, 316.3333333333333], [843.0, 534.75], [842.0, 317.0], [849.0, 168.66666666666669], [851.0, 199.5], [850.0, 696.0], [852.0, 566.5], [853.0, 190.0], [855.0, 558.2], [854.0, 695.0], [858.0, 191.6], [857.0, 695.0], [859.0, 153.33333333333331], [863.0, 532.75], [848.0, 566.5], [862.0, 489.0], [861.0, 308.5], [860.0, 609.3333333333334], [871.0, 478.0], [891.0, 447.33333333333337], [878.0, 396.5], [866.0, 357.6], [879.0, 437.25], [865.0, 478.6666666666667], [864.0, 505.5], [888.0, 604.6666666666666], [870.0, 698.0], [869.0, 460.1666666666667], [868.0, 320.5], [867.0, 601.6666666666666], [890.0, 315.0], [889.0, 476.375], [875.0, 384.0], [874.0, 478.3333333333333], [873.0, 506.0], [877.0, 478.6666666666667], [876.0, 314.0], [882.0, 444.0], [883.0, 1047.0], [884.0, 423.0], [885.0, 191.5], [887.0, 535.75], [892.0, 528.0], [893.0, 560.6666666666666], [895.0, 713.0], [881.0, 309.5], [880.0, 498.8571428571429], [894.0, 797.0], [907.0, 638.6666666666666], [897.0, 84.0], [898.0, 654.8333333333333], [902.0, 615.0], [900.0, 504.0], [920.0, 542.25], [903.0, 509.25], [921.0, 180.66666666666666], [923.0, 446.0], [922.0, 494.0], [924.0, 456.6666666666667], [925.0, 510.0], [927.0, 474.6], [913.0, 529.0], [912.0, 469.66666666666663], [904.0, 733.4], [905.0, 361.25], [906.0, 371.57142857142856], [910.0, 337.5], [908.0, 338.0], [911.0, 541.375], [914.0, 314.5], [915.0, 356.2857142857143], [917.0, 462.6666666666667], [919.0, 407.85714285714283], [918.0, 456.66666666666663], [930.0, 553.625], [929.0, 232.5], [928.0, 510.0], [934.0, 161.0], [933.0, 545.1666666666667], [932.0, 454.66666666666663], [931.0, 308.0], [935.0, 513.0], [939.0, 355.83333333333337], [938.0, 337.0], [937.0, 800.0], [936.0, 494.2], [940.0, 472.25], [941.0, 351.2], [942.0, 798.0], [943.0, 338.0], [947.0, 349.00000000000006], [950.0, 340.0], [949.0, 304.0], [948.0, 509.0], [951.0, 515.7777777777778], [952.0, 698.6666666666666], [953.0, 238.5], [954.0, 454.6666666666667], [956.0, 540.75], [955.0, 309.0], [957.0, 386.9], [959.0, 494.8], [944.0, 493.6], [946.0, 494.4], [945.0, 444.33333333333337], [986.0, 293.14285714285717], [961.0, 286.875], [960.0, 325.0], [962.0, 342.0], [964.0, 345.875], [967.0, 423.6], [966.0, 570.5], [965.0, 533.0], [985.0, 345.0], [984.0, 318.5], [971.0, 375.2857142857143], [970.0, 470.0], [968.0, 500.14285714285717], [972.0, 495.0], [974.0, 541.25], [973.0, 311.0], [975.0, 313.0], [979.0, 439.5555555555555], [981.0, 408.33333333333337], [980.0, 498.4], [983.0, 572.5], [982.0, 317.5], [991.0, 370.1666666666667], [976.0, 718.0], [978.0, 531.0], [977.0, 467.9166666666667], [990.0, 461.5714285714286], [987.0, 435.55555555555554], [994.0, 432.6666666666667], [998.0, 477.1666666666665], [1000.0, 501.2756204024122], [999.0, 608.0], [997.0, 519.0], [996.0, 496.86666666666673], [993.0, 501.2], [992.0, 454.0], [1.0, 683.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[990.2959346842096, 496.17180929819676]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 64171.86666666667, "minX": 1.75235436E12, "maxY": 706721.9666666667, "series": [{"data": [[1.75235436E12, 192989.16666666666], [1.75235442E12, 706721.9666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235436E12, 64171.86666666667], [1.75235442E12, 235252.93333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235442E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 456.52210642665517, "minX": 1.75235436E12, "maxY": 506.9878099996776, "series": [{"data": [[1.75235436E12, 456.52210642665517], [1.75235442E12, 506.9878099996776]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235442E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 456.46210326859574, "minX": 1.75235436E12, "maxY": 506.9832441338308, "series": [{"data": [[1.75235436E12, 456.46210326859574], [1.75235442E12, 506.9832441338308]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235442E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.01532364881599784, "minX": 1.75235436E12, "maxY": 3.5994394441812756, "series": [{"data": [[1.75235436E12, 3.5994394441812756], [1.75235442E12, 0.01532364881599784]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235442E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.75235436E12, "maxY": 2101.0, "series": [{"data": [[1.75235436E12, 1162.0], [1.75235442E12, 2101.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235436E12, 544.0], [1.75235442E12, 803.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235436E12, 629.0], [1.75235442E12, 948.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235436E12, 557.0], [1.75235442E12, 845.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235436E12, 3.0], [1.75235442E12, 84.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235436E12, 499.0], [1.75235442E12, 344.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235442E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 248.0, "maxY": 670.0, "series": [{"data": [[1228.0, 15.0], [1282.0, 583.0], [1416.0, 636.0], [1668.0, 587.5], [1781.0, 536.0], [1839.0, 388.0], [1905.0, 210.0], [1901.0, 529.0], [1915.0, 519.0], [1928.0, 494.0], [1958.0, 505.0], [1967.0, 504.0], [1982.0, 495.0], [1972.0, 516.5], [1927.0, 611.0], [1926.0, 400.0], [1983.0, 329.0], [1995.0, 510.0], [2013.0, 495.0], [2018.0, 514.0], [2046.0, 479.0], [2044.0, 310.5], [2016.0, 488.0], [2039.0, 501.0], [2043.0, 477.0], [2019.0, 508.0], [2042.0, 484.0], [2001.0, 485.0], [2008.0, 296.0], [2010.0, 481.0], [2012.0, 516.5], [2011.0, 496.0], [1989.0, 481.0], [1993.0, 481.0], [1991.0, 499.0], [1986.0, 494.0], [2038.0, 465.0], [1996.0, 514.0], [1997.0, 537.0], [2067.0, 491.0], [2071.0, 491.0], [2075.0, 471.0], [2078.0, 500.0], [2051.0, 468.0], [2053.0, 543.0], [2056.0, 508.0], [2066.0, 539.0], [2054.0, 545.0], [2069.0, 472.0], [2091.0, 464.0], [2086.0, 472.0], [2074.0, 470.0], [248.0, 670.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1905.0, 11.0], [2018.0, 23.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2091.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 248.0, "maxY": 670.0, "series": [{"data": [[1228.0, 15.0], [1282.0, 583.0], [1416.0, 636.0], [1668.0, 587.5], [1781.0, 536.0], [1839.0, 388.0], [1905.0, 210.0], [1901.0, 529.0], [1915.0, 519.0], [1928.0, 494.0], [1958.0, 505.0], [1967.0, 504.0], [1982.0, 495.0], [1972.0, 516.5], [1927.0, 611.0], [1926.0, 400.0], [1983.0, 329.0], [1995.0, 510.0], [2013.0, 495.0], [2018.0, 514.0], [2046.0, 479.0], [2044.0, 310.5], [2016.0, 488.0], [2039.0, 501.0], [2043.0, 477.0], [2019.0, 508.0], [2042.0, 484.0], [2001.0, 485.0], [2008.0, 296.0], [2010.0, 481.0], [2012.0, 516.5], [2011.0, 496.0], [1989.0, 481.0], [1993.0, 481.0], [1991.0, 499.0], [1986.0, 494.0], [2038.0, 465.0], [1996.0, 514.0], [1997.0, 537.0], [2067.0, 491.0], [2071.0, 491.0], [2075.0, 471.0], [2078.0, 500.0], [2051.0, 468.0], [2053.0, 543.0], [2056.0, 508.0], [2066.0, 539.0], [2054.0, 545.0], [2069.0, 472.0], [2091.0, 464.0], [2086.0, 472.0], [2074.0, 470.0], [248.0, 670.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1905.0, 0.0], [2018.0, 23.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2091.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 438.8666666666667, "minX": 1.75235436E12, "maxY": 1531.05, "series": [{"data": [[1.75235436E12, 438.8666666666667], [1.75235442E12, 1531.05]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235442E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75235436E12, "maxY": 1547.6833333333334, "series": [{"data": [[1.75235436E12, 422.18333333333334], [1.75235442E12, 1547.6833333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75235442E12, 0.03333333333333333]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.75235436E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235442E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75235436E12, "maxY": 1547.6833333333334, "series": [{"data": [[1.75235436E12, 422.18333333333334], [1.75235442E12, 1547.6833333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75235436E12, 0.016666666666666666], [1.75235442E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235442E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75235436E12, "maxY": 1547.6833333333334, "series": [{"data": [[1.75235436E12, 422.18333333333334], [1.75235442E12, 1547.6833333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75235436E12, 0.016666666666666666], [1.75235442E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235442E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

