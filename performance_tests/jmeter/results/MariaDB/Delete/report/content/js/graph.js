/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 69.0, "minX": 0.0, "maxY": 3392.0, "series": [{"data": [[0.0, 69.0], [0.1, 99.0], [0.2, 131.0], [0.3, 147.0], [0.4, 159.0], [0.5, 168.0], [0.6, 182.0], [0.7, 239.0], [0.8, 310.0], [0.9, 344.0], [1.0, 383.0], [1.1, 412.0], [1.2, 483.0], [1.3, 511.0], [1.4, 525.0], [1.5, 552.0], [1.6, 601.0], [1.7, 649.0], [1.8, 706.0], [1.9, 723.0], [2.0, 743.0], [2.1, 760.0], [2.2, 777.0], [2.3, 798.0], [2.4, 812.0], [2.5, 839.0], [2.6, 859.0], [2.7, 881.0], [2.8, 901.0], [2.9, 919.0], [3.0, 939.0], [3.1, 958.0], [3.2, 1005.0], [3.3, 1012.0], [3.4, 1025.0], [3.5, 1036.0], [3.6, 1050.0], [3.7, 1061.0], [3.8, 1091.0], [3.9, 1179.0], [4.0, 1346.0], [4.1, 1370.0], [4.2, 1398.0], [4.3, 1424.0], [4.4, 1450.0], [4.5, 1479.0], [4.6, 1496.0], [4.7, 1524.0], [4.8, 1602.0], [4.9, 1778.0], [5.0, 1839.0], [5.1, 1944.0], [5.2, 1990.0], [5.3, 2007.0], [5.4, 2018.0], [5.5, 2025.0], [5.6, 2031.0], [5.7, 2039.0], [5.8, 2048.0], [5.9, 2056.0], [6.0, 2061.0], [6.1, 2065.0], [6.2, 2069.0], [6.3, 2075.0], [6.4, 2079.0], [6.5, 2085.0], [6.6, 2088.0], [6.7, 2090.0], [6.8, 2094.0], [6.9, 2098.0], [7.0, 2102.0], [7.1, 2108.0], [7.2, 2113.0], [7.3, 2118.0], [7.4, 2121.0], [7.5, 2123.0], [7.6, 2124.0], [7.7, 2127.0], [7.8, 2130.0], [7.9, 2131.0], [8.0, 2132.0], [8.1, 2134.0], [8.2, 2136.0], [8.3, 2137.0], [8.4, 2138.0], [8.5, 2140.0], [8.6, 2141.0], [8.7, 2143.0], [8.8, 2144.0], [8.9, 2145.0], [9.0, 2146.0], [9.1, 2148.0], [9.2, 2150.0], [9.3, 2152.0], [9.4, 2153.0], [9.5, 2154.0], [9.6, 2156.0], [9.7, 2157.0], [9.8, 2159.0], [9.9, 2160.0], [10.0, 2162.0], [10.1, 2163.0], [10.2, 2165.0], [10.3, 2166.0], [10.4, 2168.0], [10.5, 2170.0], [10.6, 2171.0], [10.7, 2173.0], [10.8, 2174.0], [10.9, 2176.0], [11.0, 2177.0], [11.1, 2178.0], [11.2, 2179.0], [11.3, 2180.0], [11.4, 2182.0], [11.5, 2183.0], [11.6, 2184.0], [11.7, 2186.0], [11.8, 2188.0], [11.9, 2189.0], [12.0, 2191.0], [12.1, 2192.0], [12.2, 2195.0], [12.3, 2196.0], [12.4, 2198.0], [12.5, 2199.0], [12.6, 2200.0], [12.7, 2202.0], [12.8, 2204.0], [12.9, 2206.0], [13.0, 2207.0], [13.1, 2208.0], [13.2, 2209.0], [13.3, 2210.0], [13.4, 2211.0], [13.5, 2212.0], [13.6, 2213.0], [13.7, 2215.0], [13.8, 2215.0], [13.9, 2216.0], [14.0, 2217.0], [14.1, 2218.0], [14.2, 2220.0], [14.3, 2220.0], [14.4, 2221.0], [14.5, 2222.0], [14.6, 2223.0], [14.7, 2224.0], [14.8, 2225.0], [14.9, 2226.0], [15.0, 2227.0], [15.1, 2228.0], [15.2, 2229.0], [15.3, 2230.0], [15.4, 2231.0], [15.5, 2231.0], [15.6, 2232.0], [15.7, 2233.0], [15.8, 2234.0], [15.9, 2234.0], [16.0, 2235.0], [16.1, 2236.0], [16.2, 2237.0], [16.3, 2237.0], [16.4, 2238.0], [16.5, 2239.0], [16.6, 2239.0], [16.7, 2240.0], [16.8, 2241.0], [16.9, 2242.0], [17.0, 2242.0], [17.1, 2243.0], [17.2, 2243.0], [17.3, 2244.0], [17.4, 2245.0], [17.5, 2245.0], [17.6, 2246.0], [17.7, 2246.0], [17.8, 2247.0], [17.9, 2248.0], [18.0, 2248.0], [18.1, 2249.0], [18.2, 2249.0], [18.3, 2250.0], [18.4, 2250.0], [18.5, 2251.0], [18.6, 2251.0], [18.7, 2252.0], [18.8, 2252.0], [18.9, 2253.0], [19.0, 2253.0], [19.1, 2254.0], [19.2, 2255.0], [19.3, 2255.0], [19.4, 2256.0], [19.5, 2256.0], [19.6, 2257.0], [19.7, 2257.0], [19.8, 2258.0], [19.9, 2258.0], [20.0, 2259.0], [20.1, 2260.0], [20.2, 2260.0], [20.3, 2261.0], [20.4, 2261.0], [20.5, 2262.0], [20.6, 2262.0], [20.7, 2263.0], [20.8, 2263.0], [20.9, 2264.0], [21.0, 2264.0], [21.1, 2265.0], [21.2, 2265.0], [21.3, 2266.0], [21.4, 2266.0], [21.5, 2267.0], [21.6, 2267.0], [21.7, 2268.0], [21.8, 2268.0], [21.9, 2268.0], [22.0, 2269.0], [22.1, 2269.0], [22.2, 2270.0], [22.3, 2270.0], [22.4, 2271.0], [22.5, 2271.0], [22.6, 2271.0], [22.7, 2272.0], [22.8, 2272.0], [22.9, 2273.0], [23.0, 2273.0], [23.1, 2273.0], [23.2, 2274.0], [23.3, 2274.0], [23.4, 2275.0], [23.5, 2275.0], [23.6, 2276.0], [23.7, 2276.0], [23.8, 2277.0], [23.9, 2277.0], [24.0, 2278.0], [24.1, 2278.0], [24.2, 2279.0], [24.3, 2279.0], [24.4, 2280.0], [24.5, 2280.0], [24.6, 2281.0], [24.7, 2281.0], [24.8, 2282.0], [24.9, 2283.0], [25.0, 2283.0], [25.1, 2284.0], [25.2, 2285.0], [25.3, 2285.0], [25.4, 2286.0], [25.5, 2287.0], [25.6, 2287.0], [25.7, 2288.0], [25.8, 2288.0], [25.9, 2289.0], [26.0, 2289.0], [26.1, 2290.0], [26.2, 2290.0], [26.3, 2290.0], [26.4, 2291.0], [26.5, 2291.0], [26.6, 2292.0], [26.7, 2292.0], [26.8, 2292.0], [26.9, 2293.0], [27.0, 2293.0], [27.1, 2294.0], [27.2, 2294.0], [27.3, 2294.0], [27.4, 2295.0], [27.5, 2295.0], [27.6, 2296.0], [27.7, 2296.0], [27.8, 2297.0], [27.9, 2297.0], [28.0, 2298.0], [28.1, 2298.0], [28.2, 2298.0], [28.3, 2299.0], [28.4, 2299.0], [28.5, 2300.0], [28.6, 2300.0], [28.7, 2300.0], [28.8, 2301.0], [28.9, 2301.0], [29.0, 2302.0], [29.1, 2302.0], [29.2, 2303.0], [29.3, 2303.0], [29.4, 2304.0], [29.5, 2304.0], [29.6, 2305.0], [29.7, 2305.0], [29.8, 2306.0], [29.9, 2306.0], [30.0, 2306.0], [30.1, 2307.0], [30.2, 2307.0], [30.3, 2308.0], [30.4, 2308.0], [30.5, 2309.0], [30.6, 2309.0], [30.7, 2310.0], [30.8, 2310.0], [30.9, 2311.0], [31.0, 2312.0], [31.1, 2312.0], [31.2, 2313.0], [31.3, 2313.0], [31.4, 2314.0], [31.5, 2314.0], [31.6, 2315.0], [31.7, 2316.0], [31.8, 2316.0], [31.9, 2317.0], [32.0, 2317.0], [32.1, 2318.0], [32.2, 2319.0], [32.3, 2319.0], [32.4, 2320.0], [32.5, 2321.0], [32.6, 2321.0], [32.7, 2322.0], [32.8, 2323.0], [32.9, 2323.0], [33.0, 2324.0], [33.1, 2324.0], [33.2, 2325.0], [33.3, 2326.0], [33.4, 2327.0], [33.5, 2327.0], [33.6, 2328.0], [33.7, 2328.0], [33.8, 2329.0], [33.9, 2330.0], [34.0, 2331.0], [34.1, 2331.0], [34.2, 2332.0], [34.3, 2333.0], [34.4, 2334.0], [34.5, 2334.0], [34.6, 2335.0], [34.7, 2336.0], [34.8, 2336.0], [34.9, 2337.0], [35.0, 2338.0], [35.1, 2338.0], [35.2, 2339.0], [35.3, 2340.0], [35.4, 2340.0], [35.5, 2341.0], [35.6, 2342.0], [35.7, 2342.0], [35.8, 2343.0], [35.9, 2344.0], [36.0, 2344.0], [36.1, 2345.0], [36.2, 2346.0], [36.3, 2346.0], [36.4, 2347.0], [36.5, 2348.0], [36.6, 2348.0], [36.7, 2349.0], [36.8, 2349.0], [36.9, 2350.0], [37.0, 2351.0], [37.1, 2351.0], [37.2, 2352.0], [37.3, 2353.0], [37.4, 2353.0], [37.5, 2354.0], [37.6, 2355.0], [37.7, 2355.0], [37.8, 2356.0], [37.9, 2357.0], [38.0, 2357.0], [38.1, 2358.0], [38.2, 2359.0], [38.3, 2359.0], [38.4, 2360.0], [38.5, 2360.0], [38.6, 2361.0], [38.7, 2362.0], [38.8, 2363.0], [38.9, 2364.0], [39.0, 2364.0], [39.1, 2365.0], [39.2, 2366.0], [39.3, 2366.0], [39.4, 2367.0], [39.5, 2368.0], [39.6, 2368.0], [39.7, 2369.0], [39.8, 2370.0], [39.9, 2370.0], [40.0, 2371.0], [40.1, 2372.0], [40.2, 2373.0], [40.3, 2374.0], [40.4, 2374.0], [40.5, 2375.0], [40.6, 2376.0], [40.7, 2377.0], [40.8, 2378.0], [40.9, 2378.0], [41.0, 2379.0], [41.1, 2380.0], [41.2, 2380.0], [41.3, 2381.0], [41.4, 2381.0], [41.5, 2382.0], [41.6, 2382.0], [41.7, 2383.0], [41.8, 2383.0], [41.9, 2384.0], [42.0, 2384.0], [42.1, 2385.0], [42.2, 2386.0], [42.3, 2387.0], [42.4, 2387.0], [42.5, 2388.0], [42.6, 2388.0], [42.7, 2389.0], [42.8, 2390.0], [42.9, 2390.0], [43.0, 2391.0], [43.1, 2392.0], [43.2, 2392.0], [43.3, 2393.0], [43.4, 2393.0], [43.5, 2394.0], [43.6, 2394.0], [43.7, 2395.0], [43.8, 2395.0], [43.9, 2396.0], [44.0, 2396.0], [44.1, 2397.0], [44.2, 2398.0], [44.3, 2398.0], [44.4, 2399.0], [44.5, 2400.0], [44.6, 2400.0], [44.7, 2401.0], [44.8, 2402.0], [44.9, 2402.0], [45.0, 2403.0], [45.1, 2404.0], [45.2, 2404.0], [45.3, 2405.0], [45.4, 2406.0], [45.5, 2407.0], [45.6, 2408.0], [45.7, 2408.0], [45.8, 2409.0], [45.9, 2410.0], [46.0, 2411.0], [46.1, 2412.0], [46.2, 2413.0], [46.3, 2414.0], [46.4, 2415.0], [46.5, 2415.0], [46.6, 2416.0], [46.7, 2417.0], [46.8, 2418.0], [46.9, 2419.0], [47.0, 2420.0], [47.1, 2421.0], [47.2, 2422.0], [47.3, 2422.0], [47.4, 2423.0], [47.5, 2424.0], [47.6, 2424.0], [47.7, 2425.0], [47.8, 2426.0], [47.9, 2427.0], [48.0, 2427.0], [48.1, 2428.0], [48.2, 2429.0], [48.3, 2430.0], [48.4, 2430.0], [48.5, 2431.0], [48.6, 2432.0], [48.7, 2433.0], [48.8, 2434.0], [48.9, 2435.0], [49.0, 2436.0], [49.1, 2437.0], [49.2, 2437.0], [49.3, 2438.0], [49.4, 2439.0], [49.5, 2440.0], [49.6, 2440.0], [49.7, 2441.0], [49.8, 2442.0], [49.9, 2442.0], [50.0, 2443.0], [50.1, 2444.0], [50.2, 2445.0], [50.3, 2446.0], [50.4, 2447.0], [50.5, 2448.0], [50.6, 2449.0], [50.7, 2450.0], [50.8, 2451.0], [50.9, 2452.0], [51.0, 2453.0], [51.1, 2454.0], [51.2, 2455.0], [51.3, 2456.0], [51.4, 2457.0], [51.5, 2458.0], [51.6, 2459.0], [51.7, 2460.0], [51.8, 2461.0], [51.9, 2462.0], [52.0, 2463.0], [52.1, 2464.0], [52.2, 2465.0], [52.3, 2466.0], [52.4, 2467.0], [52.5, 2468.0], [52.6, 2469.0], [52.7, 2470.0], [52.8, 2471.0], [52.9, 2472.0], [53.0, 2473.0], [53.1, 2474.0], [53.2, 2474.0], [53.3, 2475.0], [53.4, 2476.0], [53.5, 2477.0], [53.6, 2477.0], [53.7, 2478.0], [53.8, 2478.0], [53.9, 2479.0], [54.0, 2480.0], [54.1, 2481.0], [54.2, 2481.0], [54.3, 2482.0], [54.4, 2483.0], [54.5, 2483.0], [54.6, 2484.0], [54.7, 2485.0], [54.8, 2486.0], [54.9, 2486.0], [55.0, 2487.0], [55.1, 2488.0], [55.2, 2488.0], [55.3, 2489.0], [55.4, 2490.0], [55.5, 2490.0], [55.6, 2491.0], [55.7, 2492.0], [55.8, 2493.0], [55.9, 2493.0], [56.0, 2494.0], [56.1, 2495.0], [56.2, 2496.0], [56.3, 2496.0], [56.4, 2497.0], [56.5, 2498.0], [56.6, 2498.0], [56.7, 2499.0], [56.8, 2500.0], [56.9, 2500.0], [57.0, 2501.0], [57.1, 2502.0], [57.2, 2502.0], [57.3, 2503.0], [57.4, 2504.0], [57.5, 2504.0], [57.6, 2505.0], [57.7, 2506.0], [57.8, 2506.0], [57.9, 2507.0], [58.0, 2507.0], [58.1, 2508.0], [58.2, 2509.0], [58.3, 2509.0], [58.4, 2510.0], [58.5, 2510.0], [58.6, 2511.0], [58.7, 2512.0], [58.8, 2513.0], [58.9, 2514.0], [59.0, 2514.0], [59.1, 2515.0], [59.2, 2516.0], [59.3, 2516.0], [59.4, 2517.0], [59.5, 2518.0], [59.6, 2519.0], [59.7, 2519.0], [59.8, 2520.0], [59.9, 2521.0], [60.0, 2522.0], [60.1, 2523.0], [60.2, 2524.0], [60.3, 2524.0], [60.4, 2525.0], [60.5, 2526.0], [60.6, 2526.0], [60.7, 2527.0], [60.8, 2528.0], [60.9, 2529.0], [61.0, 2530.0], [61.1, 2530.0], [61.2, 2531.0], [61.3, 2531.0], [61.4, 2532.0], [61.5, 2533.0], [61.6, 2534.0], [61.7, 2535.0], [61.8, 2535.0], [61.9, 2536.0], [62.0, 2537.0], [62.1, 2537.0], [62.2, 2538.0], [62.3, 2539.0], [62.4, 2539.0], [62.5, 2540.0], [62.6, 2541.0], [62.7, 2541.0], [62.8, 2542.0], [62.9, 2542.0], [63.0, 2543.0], [63.1, 2544.0], [63.2, 2545.0], [63.3, 2546.0], [63.4, 2547.0], [63.5, 2548.0], [63.6, 2549.0], [63.7, 2549.0], [63.8, 2550.0], [63.9, 2550.0], [64.0, 2551.0], [64.1, 2552.0], [64.2, 2553.0], [64.3, 2554.0], [64.4, 2555.0], [64.5, 2556.0], [64.6, 2557.0], [64.7, 2558.0], [64.8, 2559.0], [64.9, 2560.0], [65.0, 2561.0], [65.1, 2561.0], [65.2, 2562.0], [65.3, 2563.0], [65.4, 2564.0], [65.5, 2564.0], [65.6, 2565.0], [65.7, 2565.0], [65.8, 2566.0], [65.9, 2567.0], [66.0, 2567.0], [66.1, 2568.0], [66.2, 2569.0], [66.3, 2569.0], [66.4, 2570.0], [66.5, 2571.0], [66.6, 2572.0], [66.7, 2573.0], [66.8, 2573.0], [66.9, 2574.0], [67.0, 2575.0], [67.1, 2576.0], [67.2, 2576.0], [67.3, 2577.0], [67.4, 2578.0], [67.5, 2579.0], [67.6, 2579.0], [67.7, 2580.0], [67.8, 2581.0], [67.9, 2581.0], [68.0, 2582.0], [68.1, 2582.0], [68.2, 2583.0], [68.3, 2584.0], [68.4, 2585.0], [68.5, 2586.0], [68.6, 2586.0], [68.7, 2587.0], [68.8, 2588.0], [68.9, 2589.0], [69.0, 2590.0], [69.1, 2590.0], [69.2, 2591.0], [69.3, 2592.0], [69.4, 2592.0], [69.5, 2593.0], [69.6, 2594.0], [69.7, 2594.0], [69.8, 2595.0], [69.9, 2595.0], [70.0, 2596.0], [70.1, 2597.0], [70.2, 2598.0], [70.3, 2598.0], [70.4, 2599.0], [70.5, 2600.0], [70.6, 2600.0], [70.7, 2601.0], [70.8, 2602.0], [70.9, 2603.0], [71.0, 2604.0], [71.1, 2605.0], [71.2, 2606.0], [71.3, 2606.0], [71.4, 2607.0], [71.5, 2607.0], [71.6, 2608.0], [71.7, 2609.0], [71.8, 2610.0], [71.9, 2611.0], [72.0, 2612.0], [72.1, 2613.0], [72.2, 2613.0], [72.3, 2614.0], [72.4, 2615.0], [72.5, 2616.0], [72.6, 2616.0], [72.7, 2617.0], [72.8, 2618.0], [72.9, 2619.0], [73.0, 2620.0], [73.1, 2621.0], [73.2, 2622.0], [73.3, 2622.0], [73.4, 2623.0], [73.5, 2624.0], [73.6, 2625.0], [73.7, 2625.0], [73.8, 2626.0], [73.9, 2627.0], [74.0, 2628.0], [74.1, 2629.0], [74.2, 2630.0], [74.3, 2631.0], [74.4, 2631.0], [74.5, 2632.0], [74.6, 2633.0], [74.7, 2633.0], [74.8, 2634.0], [74.9, 2635.0], [75.0, 2635.0], [75.1, 2636.0], [75.2, 2636.0], [75.3, 2637.0], [75.4, 2638.0], [75.5, 2638.0], [75.6, 2639.0], [75.7, 2639.0], [75.8, 2640.0], [75.9, 2641.0], [76.0, 2642.0], [76.1, 2643.0], [76.2, 2644.0], [76.3, 2645.0], [76.4, 2646.0], [76.5, 2647.0], [76.6, 2648.0], [76.7, 2648.0], [76.8, 2649.0], [76.9, 2650.0], [77.0, 2651.0], [77.1, 2652.0], [77.2, 2653.0], [77.3, 2654.0], [77.4, 2654.0], [77.5, 2655.0], [77.6, 2656.0], [77.7, 2656.0], [77.8, 2657.0], [77.9, 2658.0], [78.0, 2658.0], [78.1, 2659.0], [78.2, 2659.0], [78.3, 2660.0], [78.4, 2660.0], [78.5, 2661.0], [78.6, 2661.0], [78.7, 2662.0], [78.8, 2663.0], [78.9, 2663.0], [79.0, 2664.0], [79.1, 2665.0], [79.2, 2665.0], [79.3, 2666.0], [79.4, 2667.0], [79.5, 2668.0], [79.6, 2668.0], [79.7, 2669.0], [79.8, 2670.0], [79.9, 2671.0], [80.0, 2671.0], [80.1, 2672.0], [80.2, 2673.0], [80.3, 2674.0], [80.4, 2674.0], [80.5, 2675.0], [80.6, 2676.0], [80.7, 2676.0], [80.8, 2677.0], [80.9, 2678.0], [81.0, 2679.0], [81.1, 2680.0], [81.2, 2680.0], [81.3, 2681.0], [81.4, 2682.0], [81.5, 2683.0], [81.6, 2683.0], [81.7, 2684.0], [81.8, 2684.0], [81.9, 2685.0], [82.0, 2686.0], [82.1, 2686.0], [82.2, 2687.0], [82.3, 2688.0], [82.4, 2688.0], [82.5, 2689.0], [82.6, 2689.0], [82.7, 2690.0], [82.8, 2691.0], [82.9, 2691.0], [83.0, 2692.0], [83.1, 2692.0], [83.2, 2693.0], [83.3, 2693.0], [83.4, 2694.0], [83.5, 2695.0], [83.6, 2695.0], [83.7, 2696.0], [83.8, 2696.0], [83.9, 2697.0], [84.0, 2697.0], [84.1, 2698.0], [84.2, 2698.0], [84.3, 2699.0], [84.4, 2699.0], [84.5, 2700.0], [84.6, 2700.0], [84.7, 2701.0], [84.8, 2701.0], [84.9, 2702.0], [85.0, 2702.0], [85.1, 2703.0], [85.2, 2704.0], [85.3, 2704.0], [85.4, 2705.0], [85.5, 2706.0], [85.6, 2706.0], [85.7, 2707.0], [85.8, 2707.0], [85.9, 2708.0], [86.0, 2708.0], [86.1, 2709.0], [86.2, 2710.0], [86.3, 2710.0], [86.4, 2711.0], [86.5, 2712.0], [86.6, 2712.0], [86.7, 2713.0], [86.8, 2713.0], [86.9, 2714.0], [87.0, 2714.0], [87.1, 2715.0], [87.2, 2716.0], [87.3, 2716.0], [87.4, 2717.0], [87.5, 2717.0], [87.6, 2718.0], [87.7, 2718.0], [87.8, 2719.0], [87.9, 2720.0], [88.0, 2720.0], [88.1, 2721.0], [88.2, 2722.0], [88.3, 2723.0], [88.4, 2723.0], [88.5, 2724.0], [88.6, 2725.0], [88.7, 2725.0], [88.8, 2726.0], [88.9, 2726.0], [89.0, 2727.0], [89.1, 2727.0], [89.2, 2728.0], [89.3, 2729.0], [89.4, 2730.0], [89.5, 2731.0], [89.6, 2731.0], [89.7, 2732.0], [89.8, 2732.0], [89.9, 2733.0], [90.0, 2734.0], [90.1, 2734.0], [90.2, 2735.0], [90.3, 2736.0], [90.4, 2736.0], [90.5, 2737.0], [90.6, 2738.0], [90.7, 2739.0], [90.8, 2739.0], [90.9, 2740.0], [91.0, 2741.0], [91.1, 2742.0], [91.2, 2743.0], [91.3, 2744.0], [91.4, 2744.0], [91.5, 2745.0], [91.6, 2746.0], [91.7, 2747.0], [91.8, 2747.0], [91.9, 2748.0], [92.0, 2749.0], [92.1, 2750.0], [92.2, 2751.0], [92.3, 2751.0], [92.4, 2752.0], [92.5, 2753.0], [92.6, 2754.0], [92.7, 2755.0], [92.8, 2755.0], [92.9, 2756.0], [93.0, 2757.0], [93.1, 2758.0], [93.2, 2760.0], [93.3, 2761.0], [93.4, 2763.0], [93.5, 2764.0], [93.6, 2765.0], [93.7, 2767.0], [93.8, 2768.0], [93.9, 2769.0], [94.0, 2771.0], [94.1, 2773.0], [94.2, 2775.0], [94.3, 2777.0], [94.4, 2780.0], [94.5, 2783.0], [94.6, 2785.0], [94.7, 2788.0], [94.8, 2791.0], [94.9, 2794.0], [95.0, 2795.0], [95.1, 2798.0], [95.2, 2800.0], [95.3, 2804.0], [95.4, 2807.0], [95.5, 2810.0], [95.6, 2814.0], [95.7, 2819.0], [95.8, 2826.0], [95.9, 2833.0], [96.0, 2841.0], [96.1, 2849.0], [96.2, 2857.0], [96.3, 2863.0], [96.4, 2875.0], [96.5, 2883.0], [96.6, 2889.0], [96.7, 2895.0], [96.8, 2899.0], [96.9, 2905.0], [97.0, 2911.0], [97.1, 2918.0], [97.2, 2923.0], [97.3, 2933.0], [97.4, 2944.0], [97.5, 2952.0], [97.6, 2960.0], [97.7, 2969.0], [97.8, 2978.0], [97.9, 2989.0], [98.0, 2997.0], [98.1, 3004.0], [98.2, 3010.0], [98.3, 3016.0], [98.4, 3023.0], [98.5, 3031.0], [98.6, 3043.0], [98.7, 3054.0], [98.8, 3080.0], [98.9, 3104.0], [99.0, 3137.0], [99.1, 3155.0], [99.2, 3194.0], [99.3, 3222.0], [99.4, 3262.0], [99.5, 3280.0], [99.6, 3300.0], [99.7, 3314.0], [99.8, 3330.0], [99.9, 3352.0], [100.0, 3392.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 4057.0, "series": [{"data": [[0.0, 26.0], [600.0, 47.0], [700.0, 132.0], [800.0, 125.0], [900.0, 97.0], [1000.0, 163.0], [1100.0, 21.0], [1200.0, 20.0], [1300.0, 54.0], [1400.0, 109.0], [1500.0, 41.0], [100.0, 134.0], [1600.0, 4.0], [1700.0, 29.0], [1800.0, 29.0], [1900.0, 52.0], [2000.0, 424.0], [2100.0, 1419.0], [2200.0, 4016.0], [2300.0, 4057.0], [2400.0, 3103.0], [2500.0, 3456.0], [2600.0, 3527.0], [2700.0, 2712.0], [2800.0, 420.0], [2900.0, 306.0], [3000.0, 215.0], [3100.0, 87.0], [200.0, 34.0], [3200.0, 93.0], [3300.0, 102.0], [300.0, 77.0], [400.0, 43.0], [500.0, 89.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 314.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 24092.0, "series": [{"data": [[0.0, 314.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 857.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 24092.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 906.4544054220574, "minX": 1.75235514E12, "maxY": 976.969841486123, "series": [{"data": [[1.7523552E12, 976.969841486123], [1.75235514E12, 906.4544054220574]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523552E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 111.0, "minX": 1.0, "maxY": 2702.0, "series": [{"data": [[2.0, 2366.0], [3.0, 2372.0], [4.0, 2380.0], [5.0, 2386.0], [6.0, 2394.0], [7.0, 2399.0], [8.0, 2404.0], [9.0, 2410.0], [10.0, 2418.0], [11.0, 2424.0], [12.0, 2428.0], [13.0, 2431.0], [14.0, 2419.0], [15.0, 2435.0], [16.0, 2165.0], [17.0, 2423.0], [18.0, 2434.0], [19.0, 2176.0], [20.0, 2436.0], [21.0, 2471.0], [22.0, 2179.0], [23.0, 2437.0], [24.0, 2537.0], [25.0, 2438.0], [26.0, 2231.0], [27.0, 2544.0], [28.0, 2437.0], [29.0, 2235.0], [30.0, 2547.0], [31.0, 2437.0], [33.0, 2553.0], [32.0, 2242.0], [35.0, 2248.0], [34.0, 2437.0], [37.0, 2636.0], [36.0, 2440.0], [39.0, 2439.0], [38.0, 2252.0], [41.0, 2441.0], [40.0, 2637.0], [43.0, 2636.0], [42.0, 2249.0], [45.0, 2249.0], [44.0, 2450.0], [47.0, 2452.0], [46.0, 2635.0], [49.0, 2634.0], [48.0, 2248.0], [51.0, 2247.0], [50.0, 2460.0], [53.0, 2632.0], [52.0, 2462.0], [55.0, 2468.0], [54.0, 2247.0], [57.0, 2245.0], [56.0, 2630.0], [59.0, 2629.0], [58.0, 2469.0], [61.0, 2473.0], [60.0, 2255.0], [63.0, 217.64999999999998], [62.0, 2629.0], [65.0, 1201.5], [67.0, 1314.0], [66.0, 2626.0], [64.0, 2475.0], [68.0, 1199.0], [71.0, 1199.5], [70.0, 2483.0], [69.0, 2624.0], [74.0, 1315.0], [75.0, 2635.0], [73.0, 2336.0], [72.0, 2625.0], [76.0, 1274.0], [79.0, 1402.5], [78.0, 2416.0], [77.0, 2492.0], [83.0, 1314.5], [82.0, 2645.0], [81.0, 2449.0], [80.0, 2501.0], [86.0, 931.0], [87.0, 2503.0], [85.0, 2649.0], [84.0, 2503.0], [89.0, 1326.0], [91.0, 2664.0], [90.0, 2509.0], [88.0, 2655.0], [92.0, 1282.5], [95.0, 1422.0], [94.0, 2513.0], [93.0, 2514.0], [99.0, 161.0], [98.0, 1811.0], [97.0, 2517.0], [96.0, 2524.0], [100.0, 1785.6666666666667], [101.0, 1342.0], [102.0, 989.5], [103.0, 2672.0], [104.0, 1348.5], [107.0, 1328.0], [106.0, 2675.0], [105.0, 2035.0], [110.0, 1802.6666666666667], [111.0, 2042.0], [108.0, 1814.0], [113.0, 981.6666666666666], [115.0, 769.0], [114.0, 1813.0], [112.0, 2519.0], [116.0, 1432.0], [117.0, 931.3333333333334], [119.0, 1003.0], [118.0, 2511.0], [122.0, 1310.5], [123.0, 982.6666666666666], [121.0, 2681.0], [120.0, 2044.0], [125.0, 689.6666666666666], [126.0, 1327.0], [127.0, 995.3333333333334], [124.0, 2682.0], [129.0, 1369.5], [130.0, 123.0], [131.0, 1522.3333333333333], [134.0, 966.6666666666666], [135.0, 2510.0], [133.0, 2038.0], [132.0, 2516.0], [128.0, 2037.0], [137.0, 1434.0], [140.0, 111.0], [141.0, 1761.3333333333333], [143.0, 1823.0], [142.0, 2507.0], [139.0, 2032.0], [138.0, 1792.0], [136.0, 2513.0], [144.0, 964.0], [147.0, 1419.5], [150.0, 1303.0], [151.0, 2696.0], [149.0, 1815.0], [148.0, 2502.0], [146.0, 2266.0], [154.0, 1326.0], [157.0, 893.6666666666666], [159.0, 1299.5], [158.0, 2693.0], [156.0, 2014.0], [155.0, 1809.0], [153.0, 2501.0], [152.0, 2017.0], [164.0, 931.0], [166.0, 1057.0], [167.0, 2516.0], [165.0, 2497.0], [163.0, 2694.0], [162.0, 2009.0], [161.0, 2158.5], [168.0, 933.5], [171.0, 329.1515151515151], [172.0, 1088.5], [173.0, 695.0], [174.0, 726.75], [175.0, 2686.0], [169.0, 2692.0], [177.0, 1345.5], [179.0, 971.5], [182.0, 1087.5], [183.0, 2509.0], [181.0, 2508.0], [180.0, 2679.0], [178.0, 2505.0], [176.0, 2011.0], [186.0, 1328.5], [189.0, 137.0], [191.0, 1338.0], [190.0, 2341.5], [188.0, 2012.0], [187.0, 2693.0], [185.0, 2233.0], [194.0, 1366.0], [196.0, 1088.5], [199.0, 2221.0], [198.0, 2503.0], [197.0, 2536.0], [195.0, 2699.0], [193.0, 2170.0], [192.0, 2018.0], [202.0, 781.3333333333334], [206.0, 1081.5], [207.0, 2542.0], [205.0, 2256.0], [204.0, 2543.0], [203.0, 2506.0], [201.0, 2621.5], [210.0, 174.5], [214.0, 1360.5], [215.0, 2692.0], [213.0, 2511.0], [212.0, 2146.0], [211.0, 2408.0], [209.0, 2599.0], [219.0, 1383.0], [223.0, 1344.5], [222.0, 2207.0], [221.0, 2693.0], [220.0, 2523.0], [218.0, 2204.0], [217.0, 2392.0], [227.0, 1811.3333333333333], [231.0, 2539.0], [230.0, 2544.0], [229.0, 2253.0], [228.0, 2206.0], [225.0, 2533.0], [224.0, 2256.0], [232.0, 1221.5], [236.0, 159.0], [239.0, 2685.0], [238.0, 2212.0], [237.0, 2545.5], [235.0, 2258.0], [234.0, 2684.0], [233.0, 2551.0], [242.0, 1189.0], [246.0, 207.0], [247.0, 2407.0], [245.0, 2681.0], [244.0, 2533.0], [243.0, 2555.0], [241.0, 2255.0], [240.0, 2555.0], [249.0, 1377.5], [255.0, 1362.5], [254.0, 2257.0], [253.0, 2383.0], [251.0, 2681.0], [250.0, 2566.0], [248.0, 2219.0], [268.0, 182.0], [264.0, 1209.0], [259.0, 1681.6666666666667], [257.0, 2681.0], [256.0, 2544.0], [263.0, 2678.0], [262.0, 2579.0], [261.0, 2539.0], [260.0, 2256.0], [267.0, 1396.0], [271.0, 2227.0], [270.0, 2249.0], [269.0, 2632.5], [266.0, 2222.0], [265.0, 2585.0], [287.0, 1005.0], [275.0, 1374.5], [277.0, 1228.5], [276.0, 2671.0], [279.0, 2566.0], [272.0, 2584.0], [274.0, 2248.0], [273.0, 2541.0], [282.0, 1372.5], [286.0, 2541.0], [285.0, 2238.0], [284.0, 2588.0], [283.0, 2250.0], [281.0, 2675.0], [280.0, 2239.0], [303.0, 859.3333333333334], [292.0, 1207.0], [294.0, 2238.0], [293.0, 2540.0], [297.0, 1209.0], [301.0, 1466.0], [302.0, 2225.0], [300.0, 2575.0], [291.0, 2676.0], [290.0, 2584.0], [289.0, 2245.5], [295.0, 2679.0], [299.0, 2540.0], [298.0, 2684.0], [296.0, 2578.0], [318.0, 504.23076923076917], [309.0, 1209.0], [308.0, 2696.0], [311.0, 2701.0], [305.0, 2617.5], [307.0, 2226.0], [306.0, 2571.0], [310.0, 2568.0], [313.0, 1198.0], [314.0, 171.0], [316.0, 978.0], [317.0, 166.2142857142857], [319.0, 1187.0], [315.0, 2476.5], [312.0, 2541.0], [322.0, 1521.5], [321.0, 1353.0], [320.0, 2564.0], [323.0, 398.0], [332.0, 2550.0], [333.0, 247.0], [334.0, 1873.0], [335.0, 1299.5], [328.0, 2698.0], [324.0, 1665.3333333333333], [325.0, 1191.5], [327.0, 879.75], [326.0, 2552.0], [329.0, 1205.0], [330.0, 1464.5], [331.0, 1205.0], [337.0, 1076.3333333333335], [336.0, 1212.5], [339.0, 1245.5], [338.0, 2555.0], [348.0, 1377.5], [349.0, 1291.0], [350.0, 1561.5], [351.0, 1489.0], [340.0, 1537.5], [341.0, 1370.5], [342.0, 1209.0], [344.0, 1234.8], [345.0, 1299.0], [346.0, 1445.0], [347.0, 2702.0], [365.0, 986.3333333333334], [353.0, 412.0], [352.0, 1092.3333333333335], [359.0, 2230.0], [354.0, 1222.0], [364.0, 2398.0], [355.0, 2234.0], [366.0, 1582.0], [367.0, 1301.5], [357.0, 1323.0], [356.0, 2554.0], [358.0, 1097.6666666666665], [360.0, 1239.0], [361.0, 1523.5], [362.0, 1500.5], [363.0, 433.0], [370.0, 1324.0], [369.0, 1317.0], [371.0, 1418.5], [380.0, 1361.0], [381.0, 1460.5], [382.0, 1084.6666666666665], [383.0, 473.0], [372.0, 1202.0], [374.0, 1734.3333333333333], [375.0, 1270.0], [368.0, 2544.0], [376.0, 1462.5], [377.0, 1256.5], [378.0, 1509.5], [379.0, 2235.0], [396.0, 1037.3333333333335], [384.0, 1811.0], [385.0, 2236.0], [386.0, 1475.0], [387.0, 852.0], [388.0, 841.0], [390.0, 2401.5], [391.0, 2693.0], [392.0, 1521.5], [395.0, 1579.0], [394.0, 2256.5], [397.0, 1423.0], [398.0, 1123.3333333333335], [399.0, 2241.0], [412.0, 484.0], [400.0, 1406.0], [401.0, 2698.0], [402.0, 1106.3333333333335], [403.0, 1282.5], [406.0, 1387.0], [405.0, 2701.0], [404.0, 2532.0], [407.0, 2271.0], [415.0, 2696.0], [409.0, 2260.0], [408.0, 2535.0], [414.0, 2537.0], [413.0, 2403.5], [411.0, 2278.0], [410.0, 2700.0], [429.0, 1299.0], [416.0, 1212.0], [417.0, 2277.0], [423.0, 2412.5], [421.0, 2687.0], [420.0, 2263.0], [418.0, 1419.0], [424.0, 1501.5], [425.0, 1380.0], [427.0, 1613.5], [426.0, 2288.0], [428.0, 1124.3333333333335], [419.0, 2547.0], [430.0, 1127.0], [431.0, 2265.0], [433.0, 1777.3333333333333], [434.0, 1510.5], [444.0, 2534.0], [435.0, 2534.0], [436.0, 1397.5], [437.0, 1058.3333333333335], [438.0, 1420.0], [439.0, 1374.0], [442.0, 351.0], [441.0, 2525.0], [440.0, 2657.0], [443.0, 2296.5], [445.0, 1552.0], [447.0, 1525.5], [446.0, 2324.0], [460.0, 1414.5], [455.0, 1304.0], [450.0, 1306.5], [449.0, 2334.0], [448.0, 2536.0], [451.0, 2641.0], [454.0, 1496.5], [453.0, 2427.5], [456.0, 1439.0], [457.0, 1547.5], [458.0, 936.25], [459.0, 1397.0], [463.0, 2485.5], [461.0, 2268.0], [477.0, 2503.0], [479.0, 2440.5], [476.0, 2345.0], [467.0, 2268.0], [466.0, 2345.0], [465.0, 2518.0], [464.0, 2538.0], [475.0, 2606.0], [474.0, 2543.0], [473.0, 2303.5], [471.0, 2509.0], [470.0, 2613.0], [469.0, 2346.0], [468.0, 2539.0], [487.0, 1371.5], [484.0, 1055.3333333333335], [485.0, 1466.0], [486.0, 1175.3333333333335], [489.0, 1510.0], [490.0, 1826.0], [491.0, 2591.0], [492.0, 1294.0], [483.0, 2537.0], [482.0, 2498.0], [481.0, 2599.0], [480.0, 2253.0], [493.0, 2345.0], [494.0, 1448.5], [495.0, 1564.5], [498.0, 1290.5], [496.0, 1434.0], [497.0, 2533.0], [499.0, 526.0], [508.0, 2528.0], [500.0, 1749.3333333333333], [501.0, 2584.0], [502.0, 1542.0], [503.0, 1512.0], [504.0, 1375.5], [506.0, 1528.0], [505.0, 2581.0], [507.0, 2354.0], [510.0, 1715.0], [511.0, 1553.5], [519.0, 566.0], [513.0, 1059.0], [512.0, 1198.0], [527.0, 1463.5], [526.0, 2270.0], [515.0, 1145.6666666666665], [514.0, 2531.0], [516.0, 1469.0], [518.0, 1537.0], [517.0, 2500.0], [530.0, 1772.6666666666667], [536.0, 1405.0], [537.0, 1053.75], [538.0, 1435.5], [539.0, 615.0], [540.0, 1729.0], [541.0, 2577.0], [542.0, 1560.5], [543.0, 2517.0], [528.0, 2502.0], [534.0, 1600.0], [533.0, 2279.0], [532.0, 2351.0], [531.0, 2571.0], [535.0, 2577.0], [521.0, 1625.5], [520.0, 2307.0], [522.0, 1506.5], [524.0, 1524.5], [523.0, 2267.0], [525.0, 1217.3333333333335], [546.0, 1526.0], [544.0, 1434.0], [545.0, 2579.0], [547.0, 1171.0], [548.0, 2514.0], [549.0, 514.0], [551.0, 1483.5], [550.0, 2436.5], [568.0, 2339.0], [569.0, 752.0], [571.0, 1603.0], [570.0, 2391.5], [572.0, 2550.0], [573.0, 1133.0], [575.0, 2504.0], [574.0, 2339.0], [560.0, 1856.3333333333333], [561.0, 1596.5], [562.0, 2343.0], [563.0, 1138.6666666666665], [564.0, 1508.5], [565.0, 1027.25], [566.0, 1514.0], [567.0, 1465.0], [552.0, 1401.0], [553.0, 2536.0], [554.0, 1564.0], [556.0, 1635.5], [555.0, 2572.0], [557.0, 2344.0], [558.0, 1399.5], [600.0, 1520.0], [577.0, 1538.5], [581.0, 1662.5], [580.0, 2270.0], [579.0, 2334.0], [578.0, 2515.0], [583.0, 2542.0], [582.0, 2341.0], [585.0, 1427.5], [584.0, 2267.0], [586.0, 2507.0], [589.0, 2443.0], [587.0, 2567.0], [590.0, 1463.0], [591.0, 2513.0], [576.0, 2270.0], [594.0, 1061.0], [597.0, 1505.0], [596.0, 2525.0], [595.0, 2357.0], [599.0, 2463.5], [603.0, 1233.6666666666665], [602.0, 2572.0], [601.0, 2523.0], [605.0, 2578.0], [604.0, 2269.0], [607.0, 2514.0], [593.0, 2564.0], [592.0, 2353.0], [606.0, 2355.0], [632.0, 1549.5], [609.0, 1114.0], [611.0, 1442.5], [610.0, 2266.0], [613.0, 2510.0], [612.0, 2511.0], [615.0, 2523.0], [614.0, 2269.0], [635.0, 1284.6666666666665], [634.0, 2281.0], [633.0, 2573.0], [636.0, 2493.0], [637.0, 1649.5], [639.0, 1434.0], [624.0, 2278.0], [638.0, 2574.0], [617.0, 1427.0], [616.0, 2580.0], [619.0, 1900.6666666666667], [620.0, 692.9607843137255], [621.0, 1348.0], [623.0, 1557.5], [608.0, 2507.0], [622.0, 2504.0], [625.0, 1613.5], [630.0, 1396.0], [629.0, 2504.0], [628.0, 2351.0], [627.0, 2579.0], [626.0, 2523.0], [631.0, 2526.0], [646.0, 1547.0], [642.0, 1668.0], [641.0, 1612.0], [640.0, 2281.0], [655.0, 2577.0], [654.0, 2290.0], [645.0, 1677.5], [644.0, 2284.0], [643.0, 2518.0], [648.0, 789.0], [650.0, 2290.0], [649.0, 2543.0], [652.0, 2576.0], [651.0, 2356.0], [653.0, 1623.5], [656.0, 1250.3333333333335], [659.0, 2524.5], [657.0, 2354.0], [667.0, 1616.5], [666.0, 2471.0], [665.0, 2437.5], [647.0, 2483.0], [670.0, 2295.0], [669.0, 2466.0], [671.0, 2483.0], [660.0, 1541.5], [663.0, 1571.5], [662.0, 2576.0], [661.0, 2494.0], [698.0, 2480.0], [672.0, 1679.5], [677.0, 1496.5], [676.0, 2438.5], [674.0, 2347.0], [673.0, 2461.0], [679.0, 2304.0], [678.0, 2460.0], [697.0, 2372.0], [696.0, 2309.0], [699.0, 2592.0], [701.0, 2457.0], [700.0, 2376.0], [702.0, 656.5], [703.0, 2392.0], [680.0, 1549.0], [683.0, 2567.0], [682.0, 2393.0], [684.0, 806.0], [685.0, 1871.6666666666667], [686.0, 1151.25], [687.0, 1637.5], [688.0, 1557.5], [690.0, 1581.0], [689.0, 2585.0], [692.0, 2387.0], [693.0, 1349.6666666666665], [695.0, 1424.5], [694.0, 2590.0], [728.0, 1675.0], [706.0, 1632.0], [705.0, 2466.0], [704.0, 2594.0], [709.0, 2438.5], [707.0, 2594.0], [711.0, 2464.0], [710.0, 2302.0], [719.0, 2483.0], [718.0, 2588.0], [717.0, 2306.0], [712.0, 823.0], [714.0, 2497.0], [713.0, 2492.0], [716.0, 1903.3333333333333], [722.0, 1635.0], [721.0, 2310.0], [720.0, 2493.0], [723.0, 2403.0], [725.0, 2497.0], [724.0, 2587.0], [727.0, 2407.0], [726.0, 2488.0], [730.0, 1713.5], [729.0, 2308.0], [732.0, 1936.6666666666667], [735.0, 2483.0], [734.0, 2311.0], [733.0, 2407.0], [742.0, 2525.0], [763.0, 1674.5], [736.0, 1682.5], [743.0, 1231.0], [740.0, 2305.0], [739.0, 2497.0], [738.0, 2483.0], [737.0, 2415.0], [762.0, 2461.0], [760.0, 2566.0], [749.0, 1704.5], [748.0, 2497.0], [747.0, 2418.0], [746.0, 2314.0], [745.0, 2495.0], [744.0, 2495.0], [751.0, 843.0], [750.0, 2486.0], [753.0, 1636.5], [758.0, 1911.0], [756.0, 2492.0], [755.0, 2512.0], [754.0, 2570.0], [759.0, 2308.0], [767.0, 2430.0], [752.0, 2410.0], [766.0, 2306.0], [765.0, 2533.5], [793.0, 1691.5], [770.0, 1401.0], [774.0, 801.0], [773.0, 2430.0], [772.0, 2554.0], [771.0, 2515.0], [792.0, 2540.0], [775.0, 2519.0], [780.0, 1583.5], [779.0, 2431.0], [778.0, 2534.0], [777.0, 2551.0], [776.0, 2307.0], [781.0, 2537.0], [783.0, 2542.0], [769.0, 2518.0], [768.0, 2513.0], [782.0, 2509.0], [785.0, 1938.3333333333333], [789.0, 1368.0], [788.0, 2442.0], [787.0, 2517.0], [786.0, 2307.0], [791.0, 1471.0], [790.0, 2306.0], [794.0, 873.0], [795.0, 2488.5], [796.0, 1577.5], [798.0, 1616.0], [797.0, 2543.0], [799.0, 2513.0], [802.0, 1470.0], [800.0, 1593.5], [801.0, 2532.0], [804.0, 859.0], [803.0, 2535.0], [806.0, 2306.0], [805.0, 2530.0], [824.0, 2544.0], [807.0, 2431.0], [825.0, 1564.0], [829.0, 1717.5], [828.0, 2546.0], [827.0, 2518.0], [826.0, 2307.0], [830.0, 2306.0], [817.0, 2541.0], [816.0, 2306.0], [808.0, 1428.6666666666665], [809.0, 2528.0], [811.0, 2527.0], [810.0, 2308.0], [812.0, 1624.5], [815.0, 1973.3333333333333], [813.0, 2423.0], [818.0, 1711.0], [819.0, 1654.5], [820.0, 1599.0], [823.0, 2541.0], [822.0, 2522.0], [821.0, 2538.0], [858.0, 1544.0], [835.0, 1372.0], [839.0, 1515.5], [838.0, 2549.0], [837.0, 2512.0], [836.0, 2415.0], [857.0, 2493.0], [856.0, 2480.0], [844.0, 1309.6666666666667], [843.0, 2531.0], [841.0, 2477.0], [840.0, 2513.0], [846.0, 2481.0], [832.0, 2481.5], [834.0, 2511.0], [833.0, 2546.0], [845.0, 2551.0], [848.0, 1926.6666666666667], [850.0, 1641.0], [849.0, 2504.0], [851.0, 2481.5], [853.0, 2556.0], [852.0, 2500.0], [854.0, 1613.5], [855.0, 1719.5], [861.0, 1662.5], [860.0, 2493.0], [859.0, 2540.0], [863.0, 2305.0], [862.0, 2543.0], [890.0, 1959.3333333333333], [869.0, 1729.0], [874.0, 1631.0], [873.0, 2491.0], [872.0, 2430.0], [875.0, 2436.0], [877.0, 2498.0], [876.0, 2538.0], [879.0, 2303.0], [864.0, 2475.0], [866.0, 2480.5], [865.0, 2487.0], [868.0, 2454.0], [867.0, 2306.0], [878.0, 2437.0], [880.0, 1991.3333333333333], [885.0, 2051.0], [884.0, 2538.0], [883.0, 2380.5], [882.0, 2492.0], [881.0, 2446.0], [887.0, 2502.5], [886.0, 2307.0], [888.0, 2048.5], [871.0, 2312.0], [870.0, 2537.0], [889.0, 2302.0], [893.0, 1795.0], [892.0, 2524.0], [891.0, 2535.0], [895.0, 1669.5], [894.0, 2476.0], [899.0, 1517.0], [905.0, 1728.0], [904.0, 2485.0], [906.0, 2475.0], [907.0, 1902.3333333333333], [909.0, 601.0], [908.0, 2303.0], [911.0, 2493.0], [896.0, 2522.0], [898.0, 2486.0], [897.0, 2472.0], [910.0, 2501.5], [912.0, 1716.5], [913.0, 2389.0], [927.0, 2154.0], [926.0, 2473.0], [914.0, 1601.0], [917.0, 1624.5], [916.0, 2426.0], [915.0, 2508.5], [919.0, 2402.0], [918.0, 2497.6666666666665], [921.0, 2152.3333333333335], [920.0, 2495.0], [903.0, 2302.0], [902.0, 2466.0], [901.0, 2504.0], [900.0, 2531.0], [922.0, 2495.6666666666665], [924.0, 2496.6666666666665], [923.0, 2397.0], [925.0, 1991.7142857142858], [954.0, 2544.0], [958.0, 861.5], [930.0, 1613.0], [934.0, 1724.5], [933.0, 2462.6666666666665], [932.0, 2453.5], [931.0, 2429.2], [953.0, 2457.0], [935.0, 2470.0], [955.0, 2490.5], [957.0, 2429.0], [956.0, 2545.0], [939.0, 1861.6666666666667], [938.0, 2398.0], [937.0, 2510.5], [936.0, 2457.0], [941.0, 2430.3333333333335], [940.0, 2535.0], [943.0, 2443.25], [929.0, 2456.0], [928.0, 2395.0], [942.0, 2518.0], [944.0, 1595.0], [946.0, 2155.8], [945.0, 2492.5], [947.0, 2471.0], [948.0, 1977.3333333333333], [950.0, 1526.0], [949.0, 2437.5], [951.0, 2466.0], [959.0, 2445.0], [986.0, 1897.3333333333333], [964.0, 1618.0], [963.0, 1954.3333333333333], [962.0, 2354.0], [961.0, 2475.3333333333335], [960.0, 2469.0], [966.0, 1602.0], [965.0, 2439.5], [967.0, 2440.0], [985.0, 2405.5], [984.0, 2408.0], [972.0, 1524.0], [971.0, 2556.0], [970.0, 2446.6666666666665], [969.0, 2440.0], [968.0, 2463.0], [974.0, 2426.0], [973.0, 2484.0], [975.0, 1675.5], [978.0, 2039.75], [982.0, 1874.0], [981.0, 2415.0], [980.0, 2493.5], [979.0, 2379.0], [983.0, 2482.5], [988.0, 1679.75], [987.0, 2386.0], [990.0, 1974.6666666666667], [976.0, 2560.0], [989.0, 2391.0], [996.0, 2435.6666666666665], [993.0, 1625.0], [999.0, 2314.5384615384614], [1000.0, 2441.488416496957], [998.0, 2453.2], [997.0, 2491.5], [995.0, 2455.2], [994.0, 2458.6], [992.0, 2396.5], [1.0, 2357.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[967.9094327672925, 2397.236076475456]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12388.9, "minX": 1.75235514E12, "maxY": 99804.4, "series": [{"data": [[1.7523552E12, 99804.4], [1.75235514E12, 14731.866666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7523552E12, 84031.55], [1.75235514E12, 12388.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523552E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1826.9950708564381, "minX": 1.75235514E12, "maxY": 2481.307580505974, "series": [{"data": [[1.7523552E12, 2481.307580505974], [1.75235514E12, 1826.9950708564381]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523552E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1826.9698089956885, "minX": 1.75235514E12, "maxY": 2481.3004950720187, "series": [{"data": [[1.7523552E12, 2481.3004950720187], [1.75235514E12, 1826.9698089956885]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523552E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75235514E12, "maxY": 2.675292667898959, "series": [{"data": [[1.7523552E12, 0.0], [1.75235514E12, 2.675292667898959]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523552E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 69.0, "minX": 1.75235514E12, "maxY": 3392.0, "series": [{"data": [[1.7523552E12, 3392.0], [1.75235514E12, 3374.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7523552E12, 2712.0], [1.75235514E12, 2695.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7523552E12, 2815.0], [1.75235514E12, 3123.7699999999977]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7523552E12, 2745.0], [1.75235514E12, 2751.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7523552E12, 1781.0], [1.75235514E12, 69.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7523552E12, 2437.0], [1.75235514E12, 2157.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523552E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 220.0, "minX": 274.0, "maxY": 2926.0, "series": [{"data": [[274.0, 2502.0], [335.0, 2570.0], [333.0, 2650.0], [334.0, 2926.0], [337.0, 220.0], [359.0, 2804.0], [393.0, 2814.0], [394.0, 2713.0], [397.0, 2575.0], [401.0, 2493.0], [406.0, 2269.0], [411.0, 2434.0], [410.0, 2550.0], [405.0, 2468.5], [404.0, 2479.0], [409.0, 2443.0], [400.0, 2398.5], [407.0, 2361.0], [415.0, 2394.0], [413.0, 2392.0], [403.0, 2417.0], [402.0, 2563.5], [408.0, 2369.0], [419.0, 2561.0], [420.0, 2432.5], [416.0, 2397.0], [421.0, 2352.0], [418.0, 2456.0], [425.0, 2352.0], [438.0, 777.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 438.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 219.0, "minX": 274.0, "maxY": 2926.0, "series": [{"data": [[274.0, 2502.0], [335.0, 2570.0], [333.0, 2650.0], [334.0, 2926.0], [337.0, 219.0], [359.0, 2804.0], [393.0, 2814.0], [394.0, 2712.5], [397.0, 2575.0], [401.0, 2493.0], [406.0, 2269.0], [411.0, 2434.0], [410.0, 2550.0], [405.0, 2468.5], [404.0, 2479.0], [409.0, 2443.0], [400.0, 2398.5], [407.0, 2361.0], [415.0, 2394.0], [413.0, 2392.0], [403.0, 2417.0], [402.0, 2563.5], [408.0, 2369.0], [419.0, 2561.0], [420.0, 2432.5], [416.0, 2397.0], [421.0, 2352.0], [418.0, 2456.0], [425.0, 2352.0], [438.0, 777.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 438.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 70.76666666666667, "minX": 1.75235514E12, "maxY": 350.28333333333336, "series": [{"data": [[1.7523552E12, 350.28333333333336], [1.75235514E12, 70.76666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523552E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 54.1, "minX": 1.75235514E12, "maxY": 366.95, "series": [{"data": [[1.7523552E12, 366.95], [1.75235514E12, 54.1]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523552E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 54.1, "minX": 1.75235514E12, "maxY": 366.95, "series": [{"data": [[1.7523552E12, 366.95], [1.75235514E12, 54.1]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523552E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 54.1, "minX": 1.75235514E12, "maxY": 366.95, "series": [{"data": [[1.7523552E12, 366.95], [1.75235514E12, 54.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523552E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

