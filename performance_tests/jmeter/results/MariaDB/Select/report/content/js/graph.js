/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 2901.0, "series": [{"data": [[0.0, 2.0], [0.1, 18.0], [0.2, 39.0], [0.3, 58.0], [0.4, 59.0], [0.5, 61.0], [0.6, 63.0], [0.7, 65.0], [0.8, 67.0], [0.9, 72.0], [1.0, 80.0], [1.1, 87.0], [1.2, 97.0], [1.3, 105.0], [1.4, 111.0], [1.5, 112.0], [1.6, 114.0], [1.7, 115.0], [1.8, 116.0], [1.9, 118.0], [2.0, 119.0], [2.1, 121.0], [2.2, 125.0], [2.3, 127.0], [2.4, 128.0], [2.5, 130.0], [2.6, 131.0], [2.7, 132.0], [2.8, 133.0], [2.9, 134.0], [3.0, 135.0], [3.1, 137.0], [3.2, 138.0], [3.3, 139.0], [3.4, 141.0], [3.5, 142.0], [3.6, 143.0], [3.7, 144.0], [3.8, 145.0], [3.9, 146.0], [4.0, 147.0], [4.1, 149.0], [4.2, 151.0], [4.3, 152.0], [4.4, 152.0], [4.5, 153.0], [4.6, 154.0], [4.7, 156.0], [4.8, 156.0], [4.9, 157.0], [5.0, 158.0], [5.1, 159.0], [5.2, 160.0], [5.3, 161.0], [5.4, 162.0], [5.5, 163.0], [5.6, 164.0], [5.7, 165.0], [5.8, 166.0], [5.9, 168.0], [6.0, 170.0], [6.1, 172.0], [6.2, 174.0], [6.3, 175.0], [6.4, 176.0], [6.5, 177.0], [6.6, 178.0], [6.7, 179.0], [6.8, 180.0], [6.9, 182.0], [7.0, 183.0], [7.1, 184.0], [7.2, 185.0], [7.3, 188.0], [7.4, 188.0], [7.5, 190.0], [7.6, 191.0], [7.7, 192.0], [7.8, 193.0], [7.9, 194.0], [8.0, 194.0], [8.1, 195.0], [8.2, 196.0], [8.3, 196.0], [8.4, 197.0], [8.5, 198.0], [8.6, 199.0], [8.7, 200.0], [8.8, 201.0], [8.9, 202.0], [9.0, 203.0], [9.1, 203.0], [9.2, 204.0], [9.3, 205.0], [9.4, 206.0], [9.5, 206.0], [9.6, 207.0], [9.7, 208.0], [9.8, 208.0], [9.9, 209.0], [10.0, 209.0], [10.1, 210.0], [10.2, 210.0], [10.3, 210.0], [10.4, 211.0], [10.5, 211.0], [10.6, 212.0], [10.7, 212.0], [10.8, 213.0], [10.9, 214.0], [11.0, 214.0], [11.1, 215.0], [11.2, 216.0], [11.3, 216.0], [11.4, 217.0], [11.5, 217.0], [11.6, 217.0], [11.7, 218.0], [11.8, 218.0], [11.9, 219.0], [12.0, 219.0], [12.1, 220.0], [12.2, 220.0], [12.3, 221.0], [12.4, 221.0], [12.5, 222.0], [12.6, 223.0], [12.7, 223.0], [12.8, 224.0], [12.9, 225.0], [13.0, 225.0], [13.1, 226.0], [13.2, 227.0], [13.3, 228.0], [13.4, 228.0], [13.5, 229.0], [13.6, 230.0], [13.7, 230.0], [13.8, 231.0], [13.9, 231.0], [14.0, 231.0], [14.1, 232.0], [14.2, 232.0], [14.3, 232.0], [14.4, 233.0], [14.5, 233.0], [14.6, 233.0], [14.7, 234.0], [14.8, 234.0], [14.9, 235.0], [15.0, 235.0], [15.1, 235.0], [15.2, 236.0], [15.3, 236.0], [15.4, 236.0], [15.5, 237.0], [15.6, 237.0], [15.7, 238.0], [15.8, 238.0], [15.9, 239.0], [16.0, 240.0], [16.1, 240.0], [16.2, 241.0], [16.3, 242.0], [16.4, 243.0], [16.5, 244.0], [16.6, 245.0], [16.7, 245.0], [16.8, 246.0], [16.9, 247.0], [17.0, 248.0], [17.1, 248.0], [17.2, 249.0], [17.3, 250.0], [17.4, 250.0], [17.5, 251.0], [17.6, 251.0], [17.7, 252.0], [17.8, 252.0], [17.9, 253.0], [18.0, 254.0], [18.1, 254.0], [18.2, 255.0], [18.3, 255.0], [18.4, 256.0], [18.5, 256.0], [18.6, 256.0], [18.7, 257.0], [18.8, 257.0], [18.9, 257.0], [19.0, 258.0], [19.1, 258.0], [19.2, 258.0], [19.3, 258.0], [19.4, 259.0], [19.5, 259.0], [19.6, 259.0], [19.7, 259.0], [19.8, 260.0], [19.9, 260.0], [20.0, 260.0], [20.1, 260.0], [20.2, 260.0], [20.3, 261.0], [20.4, 261.0], [20.5, 261.0], [20.6, 261.0], [20.7, 261.0], [20.8, 262.0], [20.9, 262.0], [21.0, 262.0], [21.1, 262.0], [21.2, 262.0], [21.3, 263.0], [21.4, 263.0], [21.5, 263.0], [21.6, 263.0], [21.7, 263.0], [21.8, 263.0], [21.9, 264.0], [22.0, 264.0], [22.1, 264.0], [22.2, 264.0], [22.3, 264.0], [22.4, 264.0], [22.5, 264.0], [22.6, 265.0], [22.7, 265.0], [22.8, 265.0], [22.9, 265.0], [23.0, 265.0], [23.1, 265.0], [23.2, 266.0], [23.3, 266.0], [23.4, 266.0], [23.5, 266.0], [23.6, 266.0], [23.7, 267.0], [23.8, 267.0], [23.9, 267.0], [24.0, 267.0], [24.1, 267.0], [24.2, 267.0], [24.3, 268.0], [24.4, 268.0], [24.5, 268.0], [24.6, 268.0], [24.7, 268.0], [24.8, 268.0], [24.9, 269.0], [25.0, 269.0], [25.1, 269.0], [25.2, 269.0], [25.3, 269.0], [25.4, 270.0], [25.5, 270.0], [25.6, 270.0], [25.7, 270.0], [25.8, 270.0], [25.9, 270.0], [26.0, 270.0], [26.1, 271.0], [26.2, 271.0], [26.3, 271.0], [26.4, 271.0], [26.5, 271.0], [26.6, 271.0], [26.7, 271.0], [26.8, 271.0], [26.9, 272.0], [27.0, 272.0], [27.1, 272.0], [27.2, 272.0], [27.3, 272.0], [27.4, 272.0], [27.5, 273.0], [27.6, 273.0], [27.7, 273.0], [27.8, 273.0], [27.9, 273.0], [28.0, 273.0], [28.1, 274.0], [28.2, 274.0], [28.3, 274.0], [28.4, 274.0], [28.5, 274.0], [28.6, 274.0], [28.7, 275.0], [28.8, 275.0], [28.9, 275.0], [29.0, 275.0], [29.1, 275.0], [29.2, 275.0], [29.3, 275.0], [29.4, 276.0], [29.5, 276.0], [29.6, 276.0], [29.7, 276.0], [29.8, 276.0], [29.9, 276.0], [30.0, 276.0], [30.1, 277.0], [30.2, 277.0], [30.3, 277.0], [30.4, 277.0], [30.5, 277.0], [30.6, 277.0], [30.7, 277.0], [30.8, 278.0], [30.9, 278.0], [31.0, 278.0], [31.1, 278.0], [31.2, 278.0], [31.3, 278.0], [31.4, 279.0], [31.5, 279.0], [31.6, 279.0], [31.7, 279.0], [31.8, 279.0], [31.9, 279.0], [32.0, 280.0], [32.1, 280.0], [32.2, 280.0], [32.3, 280.0], [32.4, 280.0], [32.5, 280.0], [32.6, 280.0], [32.7, 281.0], [32.8, 281.0], [32.9, 281.0], [33.0, 281.0], [33.1, 281.0], [33.2, 281.0], [33.3, 282.0], [33.4, 282.0], [33.5, 282.0], [33.6, 282.0], [33.7, 282.0], [33.8, 283.0], [33.9, 283.0], [34.0, 283.0], [34.1, 283.0], [34.2, 283.0], [34.3, 284.0], [34.4, 284.0], [34.5, 284.0], [34.6, 284.0], [34.7, 284.0], [34.8, 285.0], [34.9, 285.0], [35.0, 285.0], [35.1, 285.0], [35.2, 285.0], [35.3, 285.0], [35.4, 286.0], [35.5, 286.0], [35.6, 286.0], [35.7, 286.0], [35.8, 286.0], [35.9, 287.0], [36.0, 287.0], [36.1, 287.0], [36.2, 287.0], [36.3, 288.0], [36.4, 288.0], [36.5, 288.0], [36.6, 288.0], [36.7, 289.0], [36.8, 289.0], [36.9, 289.0], [37.0, 290.0], [37.1, 290.0], [37.2, 290.0], [37.3, 291.0], [37.4, 291.0], [37.5, 291.0], [37.6, 292.0], [37.7, 292.0], [37.8, 292.0], [37.9, 292.0], [38.0, 293.0], [38.1, 293.0], [38.2, 293.0], [38.3, 294.0], [38.4, 294.0], [38.5, 294.0], [38.6, 294.0], [38.7, 295.0], [38.8, 295.0], [38.9, 295.0], [39.0, 296.0], [39.1, 296.0], [39.2, 296.0], [39.3, 296.0], [39.4, 297.0], [39.5, 297.0], [39.6, 297.0], [39.7, 297.0], [39.8, 298.0], [39.9, 298.0], [40.0, 298.0], [40.1, 298.0], [40.2, 299.0], [40.3, 299.0], [40.4, 299.0], [40.5, 299.0], [40.6, 299.0], [40.7, 300.0], [40.8, 300.0], [40.9, 300.0], [41.0, 300.0], [41.1, 301.0], [41.2, 301.0], [41.3, 301.0], [41.4, 301.0], [41.5, 301.0], [41.6, 302.0], [41.7, 302.0], [41.8, 302.0], [41.9, 302.0], [42.0, 303.0], [42.1, 303.0], [42.2, 303.0], [42.3, 303.0], [42.4, 304.0], [42.5, 304.0], [42.6, 304.0], [42.7, 304.0], [42.8, 305.0], [42.9, 305.0], [43.0, 305.0], [43.1, 306.0], [43.2, 306.0], [43.3, 306.0], [43.4, 306.0], [43.5, 306.0], [43.6, 307.0], [43.7, 307.0], [43.8, 307.0], [43.9, 307.0], [44.0, 308.0], [44.1, 308.0], [44.2, 308.0], [44.3, 308.0], [44.4, 308.0], [44.5, 309.0], [44.6, 309.0], [44.7, 309.0], [44.8, 309.0], [44.9, 309.0], [45.0, 310.0], [45.1, 310.0], [45.2, 310.0], [45.3, 310.0], [45.4, 311.0], [45.5, 311.0], [45.6, 311.0], [45.7, 311.0], [45.8, 311.0], [45.9, 312.0], [46.0, 312.0], [46.1, 312.0], [46.2, 312.0], [46.3, 313.0], [46.4, 313.0], [46.5, 313.0], [46.6, 313.0], [46.7, 313.0], [46.8, 314.0], [46.9, 314.0], [47.0, 314.0], [47.1, 314.0], [47.2, 314.0], [47.3, 315.0], [47.4, 315.0], [47.5, 315.0], [47.6, 315.0], [47.7, 315.0], [47.8, 316.0], [47.9, 316.0], [48.0, 316.0], [48.1, 316.0], [48.2, 316.0], [48.3, 317.0], [48.4, 317.0], [48.5, 317.0], [48.6, 317.0], [48.7, 318.0], [48.8, 318.0], [48.9, 318.0], [49.0, 318.0], [49.1, 319.0], [49.2, 319.0], [49.3, 319.0], [49.4, 319.0], [49.5, 320.0], [49.6, 320.0], [49.7, 320.0], [49.8, 320.0], [49.9, 320.0], [50.0, 321.0], [50.1, 321.0], [50.2, 321.0], [50.3, 321.0], [50.4, 321.0], [50.5, 322.0], [50.6, 322.0], [50.7, 322.0], [50.8, 322.0], [50.9, 322.0], [51.0, 323.0], [51.1, 323.0], [51.2, 323.0], [51.3, 323.0], [51.4, 323.0], [51.5, 324.0], [51.6, 324.0], [51.7, 324.0], [51.8, 324.0], [51.9, 324.0], [52.0, 325.0], [52.1, 325.0], [52.2, 325.0], [52.3, 325.0], [52.4, 325.0], [52.5, 325.0], [52.6, 326.0], [52.7, 326.0], [52.8, 326.0], [52.9, 326.0], [53.0, 326.0], [53.1, 326.0], [53.2, 327.0], [53.3, 327.0], [53.4, 327.0], [53.5, 327.0], [53.6, 327.0], [53.7, 328.0], [53.8, 328.0], [53.9, 328.0], [54.0, 328.0], [54.1, 328.0], [54.2, 328.0], [54.3, 329.0], [54.4, 329.0], [54.5, 329.0], [54.6, 329.0], [54.7, 329.0], [54.8, 329.0], [54.9, 330.0], [55.0, 330.0], [55.1, 330.0], [55.2, 330.0], [55.3, 330.0], [55.4, 330.0], [55.5, 331.0], [55.6, 331.0], [55.7, 331.0], [55.8, 331.0], [55.9, 331.0], [56.0, 331.0], [56.1, 332.0], [56.2, 332.0], [56.3, 332.0], [56.4, 332.0], [56.5, 333.0], [56.6, 333.0], [56.7, 333.0], [56.8, 333.0], [56.9, 333.0], [57.0, 334.0], [57.1, 334.0], [57.2, 334.0], [57.3, 334.0], [57.4, 334.0], [57.5, 335.0], [57.6, 335.0], [57.7, 335.0], [57.8, 335.0], [57.9, 335.0], [58.0, 335.0], [58.1, 336.0], [58.2, 336.0], [58.3, 336.0], [58.4, 336.0], [58.5, 336.0], [58.6, 336.0], [58.7, 337.0], [58.8, 337.0], [58.9, 337.0], [59.0, 337.0], [59.1, 337.0], [59.2, 338.0], [59.3, 338.0], [59.4, 338.0], [59.5, 338.0], [59.6, 339.0], [59.7, 339.0], [59.8, 339.0], [59.9, 339.0], [60.0, 340.0], [60.1, 340.0], [60.2, 340.0], [60.3, 340.0], [60.4, 340.0], [60.5, 341.0], [60.6, 341.0], [60.7, 341.0], [60.8, 341.0], [60.9, 342.0], [61.0, 342.0], [61.1, 342.0], [61.2, 342.0], [61.3, 342.0], [61.4, 343.0], [61.5, 343.0], [61.6, 343.0], [61.7, 343.0], [61.8, 343.0], [61.9, 344.0], [62.0, 344.0], [62.1, 344.0], [62.2, 344.0], [62.3, 345.0], [62.4, 345.0], [62.5, 345.0], [62.6, 345.0], [62.7, 346.0], [62.8, 346.0], [62.9, 346.0], [63.0, 346.0], [63.1, 346.0], [63.2, 347.0], [63.3, 347.0], [63.4, 347.0], [63.5, 347.0], [63.6, 347.0], [63.7, 348.0], [63.8, 348.0], [63.9, 348.0], [64.0, 348.0], [64.1, 348.0], [64.2, 349.0], [64.3, 349.0], [64.4, 349.0], [64.5, 349.0], [64.6, 350.0], [64.7, 350.0], [64.8, 350.0], [64.9, 350.0], [65.0, 351.0], [65.1, 351.0], [65.2, 351.0], [65.3, 351.0], [65.4, 352.0], [65.5, 352.0], [65.6, 352.0], [65.7, 352.0], [65.8, 353.0], [65.9, 353.0], [66.0, 353.0], [66.1, 353.0], [66.2, 354.0], [66.3, 354.0], [66.4, 354.0], [66.5, 354.0], [66.6, 355.0], [66.7, 355.0], [66.8, 355.0], [66.9, 355.0], [67.0, 355.0], [67.1, 356.0], [67.2, 356.0], [67.3, 356.0], [67.4, 356.0], [67.5, 357.0], [67.6, 357.0], [67.7, 357.0], [67.8, 357.0], [67.9, 357.0], [68.0, 357.0], [68.1, 358.0], [68.2, 358.0], [68.3, 358.0], [68.4, 358.0], [68.5, 358.0], [68.6, 359.0], [68.7, 359.0], [68.8, 359.0], [68.9, 359.0], [69.0, 360.0], [69.1, 360.0], [69.2, 360.0], [69.3, 360.0], [69.4, 360.0], [69.5, 361.0], [69.6, 361.0], [69.7, 361.0], [69.8, 361.0], [69.9, 362.0], [70.0, 362.0], [70.1, 362.0], [70.2, 362.0], [70.3, 363.0], [70.4, 363.0], [70.5, 363.0], [70.6, 363.0], [70.7, 364.0], [70.8, 364.0], [70.9, 364.0], [71.0, 365.0], [71.1, 365.0], [71.2, 365.0], [71.3, 366.0], [71.4, 366.0], [71.5, 366.0], [71.6, 367.0], [71.7, 367.0], [71.8, 367.0], [71.9, 368.0], [72.0, 368.0], [72.1, 369.0], [72.2, 369.0], [72.3, 369.0], [72.4, 370.0], [72.5, 370.0], [72.6, 370.0], [72.7, 370.0], [72.8, 371.0], [72.9, 371.0], [73.0, 371.0], [73.1, 371.0], [73.2, 372.0], [73.3, 372.0], [73.4, 372.0], [73.5, 372.0], [73.6, 372.0], [73.7, 373.0], [73.8, 373.0], [73.9, 373.0], [74.0, 373.0], [74.1, 374.0], [74.2, 374.0], [74.3, 374.0], [74.4, 375.0], [74.5, 375.0], [74.6, 375.0], [74.7, 375.0], [74.8, 376.0], [74.9, 376.0], [75.0, 376.0], [75.1, 377.0], [75.2, 377.0], [75.3, 377.0], [75.4, 378.0], [75.5, 378.0], [75.6, 378.0], [75.7, 379.0], [75.8, 379.0], [75.9, 379.0], [76.0, 380.0], [76.1, 380.0], [76.2, 380.0], [76.3, 381.0], [76.4, 381.0], [76.5, 381.0], [76.6, 381.0], [76.7, 382.0], [76.8, 382.0], [76.9, 382.0], [77.0, 383.0], [77.1, 383.0], [77.2, 383.0], [77.3, 384.0], [77.4, 384.0], [77.5, 384.0], [77.6, 385.0], [77.7, 385.0], [77.8, 385.0], [77.9, 386.0], [78.0, 386.0], [78.1, 386.0], [78.2, 387.0], [78.3, 387.0], [78.4, 388.0], [78.5, 388.0], [78.6, 389.0], [78.7, 389.0], [78.8, 389.0], [78.9, 390.0], [79.0, 390.0], [79.1, 391.0], [79.2, 391.0], [79.3, 392.0], [79.4, 392.0], [79.5, 393.0], [79.6, 393.0], [79.7, 394.0], [79.8, 394.0], [79.9, 395.0], [80.0, 395.0], [80.1, 396.0], [80.2, 396.0], [80.3, 397.0], [80.4, 397.0], [80.5, 397.0], [80.6, 398.0], [80.7, 398.0], [80.8, 399.0], [80.9, 399.0], [81.0, 400.0], [81.1, 400.0], [81.2, 401.0], [81.3, 401.0], [81.4, 402.0], [81.5, 402.0], [81.6, 403.0], [81.7, 403.0], [81.8, 404.0], [81.9, 404.0], [82.0, 405.0], [82.1, 405.0], [82.2, 406.0], [82.3, 406.0], [82.4, 407.0], [82.5, 407.0], [82.6, 408.0], [82.7, 408.0], [82.8, 409.0], [82.9, 409.0], [83.0, 410.0], [83.1, 410.0], [83.2, 411.0], [83.3, 411.0], [83.4, 412.0], [83.5, 412.0], [83.6, 413.0], [83.7, 413.0], [83.8, 414.0], [83.9, 414.0], [84.0, 415.0], [84.1, 416.0], [84.2, 416.0], [84.3, 417.0], [84.4, 418.0], [84.5, 419.0], [84.6, 419.0], [84.7, 420.0], [84.8, 421.0], [84.9, 421.0], [85.0, 422.0], [85.1, 422.0], [85.2, 423.0], [85.3, 423.0], [85.4, 424.0], [85.5, 424.0], [85.6, 425.0], [85.7, 426.0], [85.8, 426.0], [85.9, 427.0], [86.0, 428.0], [86.1, 429.0], [86.2, 429.0], [86.3, 430.0], [86.4, 431.0], [86.5, 431.0], [86.6, 432.0], [86.7, 433.0], [86.8, 433.0], [86.9, 434.0], [87.0, 435.0], [87.1, 435.0], [87.2, 436.0], [87.3, 437.0], [87.4, 438.0], [87.5, 438.0], [87.6, 439.0], [87.7, 440.0], [87.8, 440.0], [87.9, 441.0], [88.0, 442.0], [88.1, 443.0], [88.2, 444.0], [88.3, 446.0], [88.4, 447.0], [88.5, 448.0], [88.6, 450.0], [88.7, 452.0], [88.8, 453.0], [88.9, 455.0], [89.0, 456.0], [89.1, 458.0], [89.2, 459.0], [89.3, 460.0], [89.4, 461.0], [89.5, 462.0], [89.6, 464.0], [89.7, 465.0], [89.8, 466.0], [89.9, 467.0], [90.0, 469.0], [90.1, 471.0], [90.2, 473.0], [90.3, 475.0], [90.4, 477.0], [90.5, 478.0], [90.6, 480.0], [90.7, 482.0], [90.8, 484.0], [90.9, 486.0], [91.0, 487.0], [91.1, 489.0], [91.2, 490.0], [91.3, 492.0], [91.4, 493.0], [91.5, 495.0], [91.6, 497.0], [91.7, 499.0], [91.8, 501.0], [91.9, 504.0], [92.0, 506.0], [92.1, 508.0], [92.2, 510.0], [92.3, 512.0], [92.4, 515.0], [92.5, 517.0], [92.6, 519.0], [92.7, 522.0], [92.8, 524.0], [92.9, 527.0], [93.0, 530.0], [93.1, 533.0], [93.2, 536.0], [93.3, 539.0], [93.4, 543.0], [93.5, 546.0], [93.6, 548.0], [93.7, 552.0], [93.8, 556.0], [93.9, 560.0], [94.0, 564.0], [94.1, 567.0], [94.2, 570.0], [94.3, 574.0], [94.4, 577.0], [94.5, 580.0], [94.6, 583.0], [94.7, 587.0], [94.8, 589.0], [94.9, 592.0], [95.0, 595.0], [95.1, 597.0], [95.2, 599.0], [95.3, 602.0], [95.4, 604.0], [95.5, 606.0], [95.6, 608.0], [95.7, 610.0], [95.8, 613.0], [95.9, 616.0], [96.0, 621.0], [96.1, 625.0], [96.2, 631.0], [96.3, 635.0], [96.4, 643.0], [96.5, 648.0], [96.6, 652.0], [96.7, 658.0], [96.8, 663.0], [96.9, 668.0], [97.0, 675.0], [97.1, 685.0], [97.2, 697.0], [97.3, 706.0], [97.4, 712.0], [97.5, 718.0], [97.6, 724.0], [97.7, 728.0], [97.8, 733.0], [97.9, 738.0], [98.0, 747.0], [98.1, 753.0], [98.2, 764.0], [98.3, 774.0], [98.4, 786.0], [98.5, 796.0], [98.6, 809.0], [98.7, 842.0], [98.8, 879.0], [98.9, 907.0], [99.0, 951.0], [99.1, 1008.0], [99.2, 1047.0], [99.3, 1107.0], [99.4, 1201.0], [99.5, 1316.0], [99.6, 1457.0], [99.7, 1607.0], [99.8, 1730.0], [99.9, 1857.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 70306.0, "series": [{"data": [[0.0, 2136.0], [600.0, 3516.0], [700.0, 2287.0], [800.0, 581.0], [900.0, 380.0], [1000.0, 365.0], [1100.0, 181.0], [1200.0, 138.0], [1300.0, 123.0], [1400.0, 133.0], [1500.0, 127.0], [100.0, 12911.0], [1600.0, 121.0], [1700.0, 141.0], [1800.0, 126.0], [1900.0, 110.0], [2100.0, 5.0], [2200.0, 7.0], [2300.0, 4.0], [2500.0, 3.0], [2600.0, 5.0], [2700.0, 4.0], [2900.0, 1.0], [200.0, 55686.0], [300.0, 70306.0], [400.0, 18699.0], [500.0, 6086.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 159823.0, "series": [{"data": [[0.0, 159823.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 13702.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 653.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 989.5930615318466, "minX": 1.7523549E12, "maxY": 992.9687646204244, "series": [{"data": [[1.75235496E12, 992.9687646204244], [1.7523549E12, 989.5930615318466]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235496E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.0, "maxY": 1068.0, "series": [{"data": [[2.0, 1068.0], [3.0, 434.0], [4.0, 435.0], [5.0, 433.0], [6.0, 433.0], [7.0, 459.0], [8.0, 467.0], [9.0, 456.0], [10.0, 457.0], [11.0, 456.0], [12.0, 454.0], [13.0, 451.0], [14.0, 449.0], [15.0, 447.0], [16.0, 447.0], [17.0, 446.0], [18.0, 447.0], [19.0, 446.0], [20.0, 445.0], [21.0, 443.0], [22.0, 445.0], [23.0, 459.0], [24.0, 462.0], [25.0, 454.0], [26.0, 453.0], [27.0, 452.0], [28.0, 486.0], [29.0, 487.0], [30.0, 486.0], [31.0, 486.0], [33.0, 487.5], [35.0, 484.0], [34.0, 485.0], [37.0, 483.0], [36.0, 485.0], [39.0, 484.0], [38.0, 485.0], [41.0, 485.0], [40.0, 484.0], [43.0, 484.0], [42.0, 484.0], [45.0, 488.0], [44.0, 483.0], [47.0, 498.0], [46.0, 493.0], [49.0, 499.0], [48.0, 502.0], [51.0, 394.0], [50.0, 499.0], [53.0, 292.0], [52.0, 496.0], [55.0, 317.0], [54.0, 498.0], [57.0, 317.0], [56.0, 499.0], [59.0, 498.0], [58.0, 316.0], [61.0, 498.0], [60.0, 316.0], [63.0, 498.0], [62.0, 316.0], [67.0, 407.5], [65.0, 499.0], [64.0, 316.0], [71.0, 498.0], [70.0, 320.0], [69.0, 497.0], [68.0, 320.0], [75.0, 501.0], [74.0, 319.0], [73.0, 497.0], [72.0, 320.0], [79.0, 501.0], [78.0, 319.0], [77.0, 501.0], [76.0, 319.0], [83.0, 501.0], [82.0, 318.0], [81.0, 502.0], [80.0, 318.0], [87.0, 317.0], [86.0, 502.0], [85.0, 317.0], [84.0, 500.0], [91.0, 317.0], [90.0, 501.0], [89.0, 318.0], [88.0, 501.0], [95.0, 500.0], [94.0, 318.0], [93.0, 408.0], [99.0, 501.0], [98.0, 322.0], [97.0, 501.0], [96.0, 319.0], [103.0, 500.0], [102.0, 333.0], [101.0, 500.0], [100.0, 323.0], [107.0, 337.0], [106.0, 499.0], [105.0, 893.0], [104.0, 500.0], [110.0, 342.0], [109.0, 494.0], [108.0, 341.0], [115.0, 346.0], [114.0, 346.0], [113.0, 495.0], [112.0, 419.5], [119.0, 345.0], [118.0, 493.0], [117.0, 345.0], [116.0, 493.0], [123.0, 345.0], [122.0, 492.0], [121.0, 346.0], [120.0, 492.0], [127.0, 360.0], [126.0, 492.0], [125.0, 356.0], [124.0, 493.0], [135.0, 492.0], [134.0, 363.0], [133.0, 492.0], [132.0, 363.0], [131.0, 491.0], [130.0, 363.0], [129.0, 428.0], [143.0, 490.0], [142.0, 363.0], [141.0, 363.0], [140.0, 491.5], [138.0, 363.0], [137.0, 364.0], [136.0, 363.0], [151.0, 490.0], [150.0, 364.0], [149.0, 491.0], [148.0, 362.0], [147.0, 491.0], [146.0, 363.0], [145.0, 491.0], [144.0, 363.0], [158.0, 364.0], [157.0, 490.0], [156.0, 364.0], [155.0, 490.0], [154.0, 364.0], [153.0, 491.0], [152.0, 364.0], [167.0, 489.0], [166.0, 372.0], [165.0, 431.0], [163.0, 371.0], [162.0, 364.0], [161.0, 490.0], [160.0, 427.0], [175.0, 374.0], [174.0, 431.0], [172.0, 372.0], [171.0, 372.0], [170.0, 491.0], [168.0, 372.0], [183.0, 487.0], [182.0, 375.0], [181.0, 376.0], [180.0, 488.0], [179.0, 431.5], [177.0, 375.0], [176.0, 489.0], [191.0, 376.0], [190.0, 277.5], [188.0, 486.0], [187.0, 541.0], [186.0, 378.0], [185.0, 487.0], [184.0, 377.0], [199.0, 380.0], [198.0, 176.0], [197.0, 379.0], [196.0, 486.0], [195.0, 176.0], [194.0, 276.5], [192.0, 487.0], [207.0, 277.5], [205.0, 176.0], [204.0, 379.0], [203.0, 483.0], [202.0, 175.0], [201.0, 379.0], [200.0, 175.0], [214.0, 175.0], [213.0, 160.0], [212.0, 278.0], [210.0, 152.0], [209.0, 277.5], [223.0, 430.25], [219.0, 170.0], [218.0, 177.0], [217.0, 343.0], [231.0, 479.0], [230.0, 177.0], [229.0, 382.0], [228.0, 171.0], [227.0, 178.0], [226.0, 171.0], [225.0, 176.0], [224.0, 171.0], [239.0, 176.0], [238.0, 381.0], [237.0, 179.0], [236.0, 478.0], [235.0, 171.0], [234.0, 381.0], [233.0, 177.0], [232.0, 170.0], [247.0, 478.0], [246.0, 278.0], [244.0, 200.0], [243.0, 175.0], [242.0, 381.0], [241.0, 478.0], [240.0, 188.0], [254.0, 206.0], [253.0, 280.0], [251.0, 201.0], [250.0, 280.5], [248.0, 202.0], [270.0, 187.0], [271.0, 209.0], [269.0, 293.5], [258.0, 180.0], [257.0, 206.0], [256.0, 280.5], [267.0, 187.0], [266.0, 206.0], [265.0, 382.0], [264.0, 187.0], [263.0, 206.0], [262.0, 381.0], [261.0, 187.0], [260.0, 294.5], [286.0, 212.0], [287.0, 380.0], [285.0, 380.0], [284.0, 348.0], [282.0, 381.0], [281.0, 211.0], [280.0, 486.0], [279.0, 210.0], [273.0, 210.0], [272.0, 381.0], [275.0, 381.0], [274.0, 381.0], [278.0, 381.0], [277.0, 195.0], [276.0, 211.0], [302.0, 381.0], [303.0, 200.0], [301.0, 197.0], [300.0, 433.0], [298.0, 196.0], [297.0, 483.0], [296.0, 381.0], [295.0, 432.5], [291.0, 380.0], [290.0, 193.0], [289.0, 485.0], [288.0, 214.0], [293.0, 202.5], [317.0, 481.0], [318.0, 103.0], [316.0, 211.5], [307.0, 200.0], [306.0, 382.0], [305.0, 482.0], [304.0, 222.0], [315.0, 382.0], [313.0, 97.0], [312.0, 223.0], [311.0, 340.5], [309.0, 382.0], [308.0, 221.0], [334.0, 225.5], [332.0, 106.0], [331.0, 363.6666666666667], [330.0, 222.0], [327.0, 106.0], [326.0, 214.0], [325.0, 302.5], [323.0, 294.0], [321.0, 273.0], [351.0, 246.5], [349.0, 355.5], [339.0, 230.0], [337.0, 107.0], [336.0, 432.0], [347.0, 223.0], [346.0, 106.0], [345.0, 385.0], [344.0, 226.0], [342.0, 479.0], [341.0, 107.0], [340.0, 303.5], [365.0, 232.0], [367.0, 172.5], [364.0, 388.0], [363.0, 274.6666666666667], [360.0, 232.0], [359.0, 387.0], [358.0, 115.0], [357.0, 231.0], [355.0, 251.5], [353.0, 227.0], [380.0, 231.0], [375.0, 300.5], [373.0, 233.0], [372.0, 390.0], [371.0, 232.0], [370.0, 233.0], [369.0, 475.0], [368.0, 389.0], [398.0, 432.5], [399.0, 239.0], [396.0, 234.0], [387.0, 131.0], [385.0, 238.0], [384.0, 276.0], [395.0, 132.0], [394.0, 239.0], [393.0, 392.0], [392.0, 182.5], [390.0, 356.0], [388.0, 313.5], [402.0, 393.0], [414.0, 467.0], [415.0, 234.0], [413.0, 257.3333333333333], [401.0, 234.0], [400.0, 133.0], [410.0, 234.0], [409.0, 188.0], [407.0, 397.0], [406.0, 233.0], [405.0, 470.0], [404.0, 187.5], [419.0, 239.0], [431.0, 244.0], [430.0, 264.3333333333333], [427.0, 357.0], [425.0, 192.5], [423.0, 396.0], [422.0, 244.0], [421.0, 308.5], [418.0, 397.0], [417.0, 244.0], [416.0, 135.0], [446.0, 248.0], [447.0, 259.0], [445.0, 267.0], [442.0, 259.0], [441.0, 195.5], [439.0, 395.0], [438.0, 202.0], [436.0, 244.0], [435.0, 396.0], [434.0, 289.3333333333333], [461.0, 64.5], [455.0, 139.75], [453.0, 43.999999999999964], [452.0, 150.0], [459.0, 103.83333333333333], [463.0, 154.0], [462.0, 259.5], [460.0, 465.0], [451.0, 261.0], [450.0, 249.0], [449.0, 467.0], [448.0, 249.0], [458.0, 258.5], [456.0, 150.0], [477.0, 274.0], [465.0, 133.4], [464.0, 154.5], [471.0, 273.0], [467.0, 27.8], [466.0, 154.0], [476.0, 205.0], [469.0, 13.0], [468.0, 366.5], [470.0, 101.4], [472.0, 13.0], [473.0, 143.66666666666666], [474.0, 172.0], [475.0, 20.5], [479.0, 80.42857142857143], [494.0, 154.0], [482.0, 27.666666666666664], [486.0, 94.0], [481.0, 336.0], [484.0, 248.0], [492.0, 27.0], [483.0, 317.5], [495.0, 206.5], [493.0, 213.0], [491.0, 398.0], [490.0, 366.5], [489.0, 177.0], [488.0, 248.0], [499.0, 29.5], [497.0, 24.5], [496.0, 84.0], [498.0, 184.0], [502.0, 120.6], [500.0, 288.0], [503.0, 29.666666666666668], [504.0, 203.33333333333334], [509.0, 218.5], [508.0, 276.0], [510.0, 76.66666666666666], [505.0, 237.5], [506.0, 59.8], [507.0, 132.5], [515.0, 79.66666666666666], [514.0, 172.33333333333334], [513.0, 306.0], [518.0, 99.8], [516.0, 397.0], [519.0, 455.0], [536.0, 143.0], [538.0, 30.0], [539.0, 235.33333333333334], [540.0, 171.33333333333334], [541.0, 38.0], [543.0, 286.3333333333333], [521.0, 130.2], [522.0, 246.0], [523.0, 68.4], [526.0, 77.5], [525.0, 453.0], [524.0, 289.5], [527.0, 24.0], [528.0, 162.28571428571428], [531.0, 210.5], [530.0, 182.0], [529.0, 454.0], [532.0, 107.0], [535.0, 304.6666666666667], [569.0, 33.333333333333336], [562.0, 69.75], [545.0, 37.666666666666664], [550.0, 34.333333333333336], [548.0, 231.0], [547.0, 396.0], [546.0, 455.0], [568.0, 292.0], [573.0, 124.25], [572.0, 235.5], [570.0, 262.0], [575.0, 347.0], [561.0, 397.0], [560.0, 279.0], [553.0, 185.0], [552.0, 350.5], [554.0, 42.0], [557.0, 106.6], [556.0, 237.66666666666666], [559.0, 185.0], [544.0, 246.0], [558.0, 245.0], [563.0, 160.0], [564.0, 33.5], [565.0, 124.25], [566.0, 167.66666666666666], [600.0, 98.6], [589.0, 293.25], [580.0, 178.33333333333334], [578.0, 397.0], [577.0, 235.5], [582.0, 448.0], [581.0, 236.0], [604.0, 128.0], [603.0, 396.0], [602.0, 320.5], [605.0, 110.0], [606.0, 45.0], [607.0, 231.5], [594.0, 397.0], [593.0, 448.0], [592.0, 239.0], [584.0, 243.25], [586.0, 244.0], [585.0, 189.0], [587.0, 57.0], [588.0, 43.0], [590.0, 219.5], [591.0, 42.0], [595.0, 99.33333333333334], [596.0, 40.0], [597.0, 178.0], [599.0, 395.0], [598.0, 194.0], [609.0, 45.0], [608.0, 178.66666666666666], [610.0, 41.5], [611.0, 376.3333333333333], [613.0, 196.0], [612.0, 250.0], [614.0, 45.0], [617.0, 41.5], [616.0, 196.0], [618.0, 348.0], [620.0, 167.0], [621.0, 211.0], [622.0, 248.0], [623.0, 286.0], [624.0, 41.0], [626.0, 346.0], [637.0, 266.0], [638.0, 289.0], [639.0, 200.0], [633.0, 240.25], [632.0, 200.0], [615.0, 340.5], [635.0, 200.0], [634.0, 288.0], [636.0, 129.75], [627.0, 123.33333333333333], [630.0, 143.5], [629.0, 392.0], [628.0, 224.0], [631.0, 288.0], [645.0, 237.42857142857144], [654.0, 119.0], [640.0, 132.28571428571428], [641.0, 41.0], [642.0, 196.0], [644.0, 394.0], [656.0, 170.0], [670.0, 361.0], [669.0, 328.6666666666667], [671.0, 133.875], [666.0, 239.66666666666666], [667.0, 82.0], [664.0, 194.0], [647.0, 269.0], [665.0, 71.66666666666667], [657.0, 98.66666666666666], [658.0, 203.5], [659.0, 247.5], [660.0, 165.8], [661.0, 112.0], [662.0, 80.78571428571429], [663.0, 360.6666666666667], [649.0, 172.375], [650.0, 249.0], [651.0, 104.2], [653.0, 166.0], [652.0, 347.3333333333333], [655.0, 255.0], [700.0, 267.09999999999997], [677.0, 243.4], [676.0, 163.5], [675.0, 297.0], [674.0, 252.0], [673.0, 295.0], [672.0, 445.0], [678.0, 134.5], [696.0, 346.0], [679.0, 343.75], [697.0, 264.75], [698.0, 270.7142857142857], [699.0, 367.0], [701.0, 201.0], [702.0, 300.83333333333337], [703.0, 382.1840490797547], [688.0, 254.0], [690.0, 386.0], [689.0, 291.0], [680.0, 105.71193415637859], [681.0, 220.25], [682.0, 213.31100478468895], [684.0, 291.0], [683.0, 273.0], [686.0, 385.0], [685.0, 343.5], [687.0, 590.5], [691.0, 430.6666666666667], [693.0, 446.0], [692.0, 305.5], [695.0, 183.0], [694.0, 344.0], [707.0, 362.5], [704.0, 508.96202531645554], [718.0, 435.0], [719.0, 289.2666666666667], [716.0, 329.33333333333337], [717.0, 278.7777777777777], [714.0, 436.4166666666667], [715.0, 296.0], [705.0, 453.1454545454544], [706.0, 429.0], [708.0, 368.50000000000006], [709.0, 434.73043478260854], [710.0, 348.0], [711.0, 334.8], [720.0, 237.75], [734.0, 208.36363636363637], [735.0, 229.42857142857142], [731.0, 207.74637681159433], [730.0, 328.0], [732.0, 386.0], [733.0, 193.11111111111111], [728.0, 256.6], [729.0, 241.33333333333334], [721.0, 393.125], [722.0, 264.8], [723.0, 342.4285714285714], [724.0, 256.625], [725.0, 299.4166666666667], [726.0, 244.82352941176464], [727.0, 340.2142857142857], [712.0, 407.92857142857144], [713.0, 309.63157894736844], [741.0, 238.4], [737.0, 182.5], [736.0, 217.0], [751.0, 203.25], [749.0, 180.0], [750.0, 387.625], [747.0, 238.16666666666666], [746.0, 306.75], [748.0, 221.0], [738.0, 275.5], [739.0, 205.4], [740.0, 261.0], [742.0, 324.7692307692308], [760.0, 206.75], [761.0, 252.49999999999997], [762.0, 257.25], [763.0, 238.16666666666669], [764.0, 255.11111111111111], [765.0, 282.42857142857144], [766.0, 273.8333333333333], [767.0, 201.875], [752.0, 277.00000000000006], [753.0, 303.2], [754.0, 232.66666666666666], [755.0, 252.33333333333334], [756.0, 219.69565217391303], [757.0, 198.78571428571428], [758.0, 275.08333333333337], [759.0, 219.6923076923077], [744.0, 321.625], [745.0, 227.5], [773.0, 197.40000000000003], [769.0, 191.25], [768.0, 237.3333333333334], [783.0, 196.42424242424244], [781.0, 203.25], [782.0, 268.6666666666667], [779.0, 228.625], [780.0, 262.8181818181818], [770.0, 279.46153846153845], [771.0, 203.9242424242424], [772.0, 196.08571428571432], [774.0, 209.85714285714286], [792.0, 259.14285714285717], [775.0, 442.0], [793.0, 221.6], [796.0, 254.16666666666669], [795.0, 258.0], [794.0, 252.0], [797.0, 265.0], [798.0, 203.5], [799.0, 210.0], [784.0, 233.11111111111111], [785.0, 206.66666666666666], [786.0, 193.0], [787.0, 269.25], [788.0, 277.0], [790.0, 229.57142857142858], [789.0, 293.5], [777.0, 213.31578947368422], [778.0, 205.0], [803.0, 181.0], [800.0, 335.5], [802.0, 312.0], [801.0, 305.5], [804.0, 232.83333333333334], [805.0, 328.5], [806.0, 240.16666666666669], [807.0, 202.4], [824.0, 209.0], [827.0, 285.3333333333333], [828.0, 269.5], [829.0, 277.2], [831.0, 226.66666666666666], [811.0, 408.2], [810.0, 329.0], [809.0, 296.6666666666667], [808.0, 361.6666666666667], [813.0, 204.2307692307692], [814.0, 201.33333333333334], [815.0, 328.5], [816.0, 217.0], [817.0, 227.4], [818.0, 258.5], [820.0, 209.12499999999997], [819.0, 425.0], [821.0, 266.6666666666667], [822.0, 211.66666666666669], [823.0, 197.0], [839.0, 277.4], [834.0, 270.8], [832.0, 290.5], [833.0, 297.0], [845.0, 240.0], [846.0, 315.0], [847.0, 276.25], [836.0, 277.8], [835.0, 281.5], [837.0, 293.0], [838.0, 259.0], [848.0, 238.66666666666666], [850.0, 293.75], [861.0, 226.42857142857142], [862.0, 381.0], [863.0, 303.5], [859.0, 264.5], [860.0, 264.0], [857.0, 185.33333333333334], [856.0, 300.3333333333333], [858.0, 249.0], [851.0, 283.0], [852.0, 178.0], [853.0, 275.4], [854.0, 423.0], [855.0, 244.42857142857144], [840.0, 267.8], [841.0, 371.0], [842.0, 274.25], [843.0, 244.0], [870.0, 236.0], [876.0, 234.75], [866.0, 271.4], [864.0, 233.0], [865.0, 417.0], [878.0, 243.37500000000003], [877.0, 327.2857142857143], [879.0, 295.75], [868.0, 233.16666666666666], [867.0, 327.6666666666667], [871.0, 203.00000000000003], [888.0, 335.0], [889.0, 267.2], [890.0, 169.0], [891.0, 296.1666666666667], [893.0, 209.66666666666666], [892.0, 299.0], [895.0, 321.0], [894.0, 319.4], [880.0, 203.25], [882.0, 295.1666666666667], [883.0, 304.83333333333337], [884.0, 303.0], [885.0, 277.6666666666667], [886.0, 210.33333333333334], [887.0, 287.8571428571429], [873.0, 253.14285714285714], [872.0, 382.0], [874.0, 293.4545454545455], [875.0, 240.50000000000003], [899.0, 268.52380952380946], [896.0, 254.0], [910.0, 241.42857142857144], [908.0, 256.3], [909.0, 235.23076923076923], [906.0, 252.2], [907.0, 237.51063829787236], [897.0, 277.0], [898.0, 281.0], [900.0, 274.33333333333326], [901.0, 234.8571428571429], [902.0, 220.58823529411765], [903.0, 244.08333333333334], [912.0, 261.85714285714283], [927.0, 266.85714285714283], [926.0, 310.6875], [924.0, 280.14285714285717], [925.0, 369.1666666666667], [920.0, 254.85714285714286], [921.0, 266.3333333333333], [922.0, 233.0], [913.0, 240.85714285714286], [915.0, 266.57142857142856], [914.0, 331.5], [916.0, 380.0], [917.0, 254.0909090909091], [919.0, 248.2857142857143], [918.0, 380.0], [904.0, 204.43750000000003], [905.0, 190.0], [933.0, 269.3333333333333], [941.0, 336.42857142857144], [930.0, 269.14285714285717], [929.0, 269.4], [928.0, 295.25], [942.0, 259.0], [943.0, 318.85714285714283], [932.0, 263.6666666666667], [931.0, 280.0], [934.0, 304.75], [935.0, 324.0], [952.0, 233.09090909090907], [954.0, 276.2], [953.0, 303.09999999999997], [955.0, 287.3333333333333], [956.0, 227.66666666666666], [957.0, 290.3913043478262], [958.0, 243.25], [959.0, 314.45454545454544], [944.0, 278.7272727272727], [945.0, 329.55555555555554], [946.0, 334.2121212121212], [947.0, 290.20000000000005], [948.0, 249.75], [949.0, 274.44444444444446], [950.0, 269.2352941176471], [951.0, 232.8], [936.0, 285.1666666666667], [937.0, 260.8571428571429], [939.0, 249.25], [938.0, 296.3333333333333], [940.0, 330.5], [967.0, 288.1111111111111], [961.0, 235.66666666666666], [960.0, 303.75000000000006], [974.0, 292.0], [975.0, 236.0], [962.0, 296.0], [964.0, 339.55555555555554], [965.0, 252.57142857142858], [966.0, 412.5], [976.0, 247.75], [977.0, 326.31818181818176], [991.0, 318.14285714285717], [989.0, 286.8], [990.0, 413.59999999999997], [987.0, 319.0625], [986.0, 322.7142857142857], [988.0, 316.6666666666667], [984.0, 289.6666666666667], [985.0, 311.5789473684211], [978.0, 285.6363636363636], [980.0, 269.25], [979.0, 335.2307692307693], [981.0, 319.5], [982.0, 297.54545454545456], [983.0, 333.7142857142857], [968.0, 295.30769230769226], [969.0, 264.7142857142857], [971.0, 306.8235294117647], [970.0, 332.1111111111111], [973.0, 321.1333333333333], [993.0, 309.81250000000006], [992.0, 311.9999999999999], [995.0, 293.8], [997.0, 304.1875], [999.0, 284.84210526315786], [1000.0, 344.0264569985062], [998.0, 288.28571428571433], [996.0, 327.65], [994.0, 327.04999999999995], [1.0, 531.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[991.167181453883, 341.28397308563007]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 193579.1, "minX": 1.7523549E12, "maxY": 703176.45, "series": [{"data": [[1.75235496E12, 613905.5333333333], [1.7523549E12, 703176.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235496E12, 193579.1], [1.7523549E12, 221554.66666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235496E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 320.1109401893301, "minX": 1.7523549E12, "maxY": 365.5168796631451, "series": [{"data": [[1.75235496E12, 365.5168796631451], [1.7523549E12, 320.1109401893301]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235496E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 320.0478915662683, "minX": 1.7523549E12, "maxY": 365.51076063135565, "series": [{"data": [[1.75235496E12, 365.51076063135565], [1.7523549E12, 320.0478915662683]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235496E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.015574598015316252, "minX": 1.7523549E12, "maxY": 1.6674268502581742, "series": [{"data": [[1.75235496E12, 0.015574598015316252], [1.7523549E12, 1.6674268502581742]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235496E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.7523549E12, "maxY": 2901.0, "series": [{"data": [[1.75235496E12, 2901.0], [1.7523549E12, 1384.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235496E12, 440.0], [1.7523549E12, 409.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235496E12, 490.0], [1.7523549E12, 487.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235496E12, 461.0], [1.7523549E12, 436.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235496E12, 97.0], [1.7523549E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235496E12, 307.0], [1.7523549E12, 333.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235496E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 42.0, "minX": 781.0, "maxY": 707.0, "series": [{"data": [[781.0, 42.0], [966.0, 460.0], [1308.0, 411.0], [1867.0, 707.0], [2067.0, 288.0], [2347.0, 427.0], [2434.0, 410.0], [2573.0, 361.0], [2687.0, 343.0], [2813.0, 400.0], [2806.0, 212.0], [2742.0, 316.0], [2761.0, 318.0], [2914.0, 332.0], [2943.0, 201.0], [2841.0, 307.0], [2840.0, 348.0], [2847.0, 324.0], [2849.0, 205.0], [2942.0, 213.0], [2937.0, 255.0], [2882.0, 362.0], [2905.0, 347.0], [3010.0, 331.0], [3041.0, 314.0], [3026.0, 328.0], [3027.0, 360.0], [3038.0, 363.0], [3035.0, 291.0], [3062.0, 332.0], [3061.0, 317.0], [3044.0, 301.0], [3016.0, 403.0], [3018.0, 301.0], [3014.0, 312.0], [2992.0, 308.0], [3009.0, 218.0], [2967.0, 341.0], [2997.0, 345.0], [3077.0, 332.0], [3172.0, 326.0], [3179.0, 308.0], [3107.0, 322.0], [3108.0, 322.0], [3110.0, 371.0], [3168.0, 324.0], [3112.0, 328.0], [3085.0, 329.0], [3129.0, 323.0], [3118.0, 315.0], [3116.0, 310.0], [3117.0, 343.0], [3137.0, 319.0], [3139.0, 321.0], [3197.0, 307.0], [3092.0, 336.0], [3090.0, 326.0], [3101.0, 313.0], [3088.0, 307.0], [3254.0, 307.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2742.0, 217.0], [3016.0, 154.0], [2967.0, 406.0], [2997.0, 144.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3254.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 42.0, "minX": 781.0, "maxY": 707.0, "series": [{"data": [[781.0, 42.0], [966.0, 460.0], [1308.0, 411.0], [1867.0, 707.0], [2067.0, 288.0], [2347.0, 427.0], [2434.0, 410.0], [2573.0, 361.0], [2687.0, 343.0], [2813.0, 400.0], [2806.0, 212.0], [2742.0, 316.0], [2761.0, 318.0], [2914.0, 332.0], [2943.0, 201.0], [2841.0, 307.0], [2840.0, 348.0], [2847.0, 324.0], [2849.0, 205.0], [2942.0, 213.0], [2937.0, 255.0], [2882.0, 362.0], [2905.0, 347.0], [3010.0, 331.0], [3041.0, 314.0], [3026.0, 328.0], [3027.0, 360.0], [3038.0, 363.0], [3035.0, 291.0], [3062.0, 332.0], [3061.0, 317.0], [3044.0, 301.0], [3016.0, 403.0], [3018.0, 301.0], [3014.0, 312.0], [2992.0, 308.0], [3009.0, 218.0], [2967.0, 341.0], [2997.0, 345.0], [3077.0, 332.0], [3172.0, 326.0], [3179.0, 308.0], [3107.0, 322.0], [3108.0, 322.0], [3110.0, 371.0], [3168.0, 324.0], [3112.0, 328.0], [3085.0, 329.0], [3129.0, 323.0], [3118.0, 315.0], [3116.0, 310.0], [3117.0, 343.0], [3137.0, 319.0], [3139.0, 321.0], [3197.0, 307.0], [3092.0, 336.0], [3090.0, 326.0], [3101.0, 313.0], [3088.0, 307.0], [3254.0, 307.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2742.0, 217.0], [3016.0, 154.0], [2967.0, 406.0], [2997.0, 144.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3254.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1337.0333333333333, "minX": 1.7523549E12, "maxY": 1566.0, "series": [{"data": [[1.75235496E12, 1337.0333333333333], [1.7523549E12, 1566.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235496E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.7523549E12, "maxY": 1549.3333333333333, "series": [{"data": [[1.75235496E12, 1353.6333333333334], [1.7523549E12, 1549.3333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75235496E12, 0.06666666666666667]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235496E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.7523549E12, "maxY": 1549.3333333333333, "series": [{"data": [[1.75235496E12, 1353.6333333333334], [1.7523549E12, 1549.3333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75235496E12, 0.06666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235496E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.7523549E12, "maxY": 1549.3333333333333, "series": [{"data": [[1.75235496E12, 1353.6333333333334], [1.7523549E12, 1549.3333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75235496E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235496E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

