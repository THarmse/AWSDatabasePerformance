/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 3201.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 7.0], [0.3, 56.0], [0.4, 85.0], [0.5, 96.0], [0.6, 111.0], [0.7, 124.0], [0.8, 140.0], [0.9, 149.0], [1.0, 154.0], [1.1, 172.0], [1.2, 195.0], [1.3, 217.0], [1.4, 223.0], [1.5, 231.0], [1.6, 239.0], [1.7, 251.0], [1.8, 267.0], [1.9, 288.0], [2.0, 313.0], [2.1, 330.0], [2.2, 346.0], [2.3, 361.0], [2.4, 376.0], [2.5, 381.0], [2.6, 383.0], [2.7, 385.0], [2.8, 386.0], [2.9, 387.0], [3.0, 388.0], [3.1, 389.0], [3.2, 392.0], [3.3, 394.0], [3.4, 397.0], [3.5, 403.0], [3.6, 416.0], [3.7, 434.0], [3.8, 448.0], [3.9, 454.0], [4.0, 471.0], [4.1, 490.0], [4.2, 517.0], [4.3, 535.0], [4.4, 553.0], [4.5, 570.0], [4.6, 571.0], [4.7, 574.0], [4.8, 575.0], [4.9, 576.0], [5.0, 577.0], [5.1, 581.0], [5.2, 587.0], [5.3, 590.0], [5.4, 594.0], [5.5, 596.0], [5.6, 598.0], [5.7, 604.0], [5.8, 607.0], [5.9, 611.0], [6.0, 615.0], [6.1, 621.0], [6.2, 629.0], [6.3, 638.0], [6.4, 664.0], [6.5, 668.0], [6.6, 674.0], [6.7, 679.0], [6.8, 681.0], [6.9, 683.0], [7.0, 685.0], [7.1, 686.0], [7.2, 687.0], [7.3, 687.0], [7.4, 688.0], [7.5, 688.0], [7.6, 688.0], [7.7, 689.0], [7.8, 689.0], [7.9, 689.0], [8.0, 689.0], [8.1, 690.0], [8.2, 690.0], [8.3, 690.0], [8.4, 690.0], [8.5, 691.0], [8.6, 691.0], [8.7, 691.0], [8.8, 691.0], [8.9, 692.0], [9.0, 692.0], [9.1, 692.0], [9.2, 692.0], [9.3, 692.0], [9.4, 693.0], [9.5, 693.0], [9.6, 693.0], [9.7, 693.0], [9.8, 693.0], [9.9, 694.0], [10.0, 694.0], [10.1, 694.0], [10.2, 694.0], [10.3, 694.0], [10.4, 695.0], [10.5, 695.0], [10.6, 695.0], [10.7, 695.0], [10.8, 695.0], [10.9, 696.0], [11.0, 696.0], [11.1, 696.0], [11.2, 696.0], [11.3, 696.0], [11.4, 696.0], [11.5, 696.0], [11.6, 697.0], [11.7, 697.0], [11.8, 697.0], [11.9, 697.0], [12.0, 697.0], [12.1, 697.0], [12.2, 698.0], [12.3, 698.0], [12.4, 698.0], [12.5, 698.0], [12.6, 698.0], [12.7, 698.0], [12.8, 699.0], [12.9, 699.0], [13.0, 699.0], [13.1, 699.0], [13.2, 699.0], [13.3, 699.0], [13.4, 700.0], [13.5, 700.0], [13.6, 700.0], [13.7, 700.0], [13.8, 700.0], [13.9, 700.0], [14.0, 701.0], [14.1, 701.0], [14.2, 701.0], [14.3, 701.0], [14.4, 701.0], [14.5, 701.0], [14.6, 702.0], [14.7, 702.0], [14.8, 702.0], [14.9, 702.0], [15.0, 702.0], [15.1, 702.0], [15.2, 703.0], [15.3, 703.0], [15.4, 703.0], [15.5, 703.0], [15.6, 704.0], [15.7, 704.0], [15.8, 704.0], [15.9, 704.0], [16.0, 704.0], [16.1, 705.0], [16.2, 705.0], [16.3, 705.0], [16.4, 705.0], [16.5, 706.0], [16.6, 706.0], [16.7, 706.0], [16.8, 706.0], [16.9, 707.0], [17.0, 707.0], [17.1, 707.0], [17.2, 708.0], [17.3, 708.0], [17.4, 708.0], [17.5, 708.0], [17.6, 708.0], [17.7, 709.0], [17.8, 709.0], [17.9, 709.0], [18.0, 710.0], [18.1, 710.0], [18.2, 710.0], [18.3, 711.0], [18.4, 711.0], [18.5, 711.0], [18.6, 712.0], [18.7, 712.0], [18.8, 712.0], [18.9, 712.0], [19.0, 713.0], [19.1, 713.0], [19.2, 713.0], [19.3, 714.0], [19.4, 714.0], [19.5, 714.0], [19.6, 715.0], [19.7, 715.0], [19.8, 715.0], [19.9, 716.0], [20.0, 716.0], [20.1, 716.0], [20.2, 716.0], [20.3, 717.0], [20.4, 717.0], [20.5, 717.0], [20.6, 718.0], [20.7, 718.0], [20.8, 718.0], [20.9, 718.0], [21.0, 719.0], [21.1, 719.0], [21.2, 719.0], [21.3, 720.0], [21.4, 720.0], [21.5, 721.0], [21.6, 721.0], [21.7, 721.0], [21.8, 722.0], [21.9, 722.0], [22.0, 722.0], [22.1, 723.0], [22.2, 723.0], [22.3, 723.0], [22.4, 723.0], [22.5, 724.0], [22.6, 724.0], [22.7, 724.0], [22.8, 725.0], [22.9, 725.0], [23.0, 725.0], [23.1, 726.0], [23.2, 726.0], [23.3, 726.0], [23.4, 727.0], [23.5, 727.0], [23.6, 728.0], [23.7, 728.0], [23.8, 729.0], [23.9, 729.0], [24.0, 729.0], [24.1, 730.0], [24.2, 730.0], [24.3, 730.0], [24.4, 731.0], [24.5, 731.0], [24.6, 731.0], [24.7, 732.0], [24.8, 732.0], [24.9, 732.0], [25.0, 733.0], [25.1, 733.0], [25.2, 733.0], [25.3, 733.0], [25.4, 734.0], [25.5, 734.0], [25.6, 734.0], [25.7, 734.0], [25.8, 734.0], [25.9, 735.0], [26.0, 735.0], [26.1, 735.0], [26.2, 735.0], [26.3, 735.0], [26.4, 736.0], [26.5, 736.0], [26.6, 736.0], [26.7, 736.0], [26.8, 737.0], [26.9, 737.0], [27.0, 737.0], [27.1, 737.0], [27.2, 737.0], [27.3, 738.0], [27.4, 738.0], [27.5, 738.0], [27.6, 738.0], [27.7, 738.0], [27.8, 739.0], [27.9, 739.0], [28.0, 739.0], [28.1, 739.0], [28.2, 740.0], [28.3, 740.0], [28.4, 740.0], [28.5, 740.0], [28.6, 741.0], [28.7, 741.0], [28.8, 741.0], [28.9, 741.0], [29.0, 741.0], [29.1, 742.0], [29.2, 742.0], [29.3, 742.0], [29.4, 742.0], [29.5, 742.0], [29.6, 743.0], [29.7, 743.0], [29.8, 743.0], [29.9, 743.0], [30.0, 743.0], [30.1, 743.0], [30.2, 744.0], [30.3, 744.0], [30.4, 744.0], [30.5, 744.0], [30.6, 744.0], [30.7, 745.0], [30.8, 745.0], [30.9, 745.0], [31.0, 745.0], [31.1, 745.0], [31.2, 745.0], [31.3, 746.0], [31.4, 746.0], [31.5, 746.0], [31.6, 746.0], [31.7, 746.0], [31.8, 747.0], [31.9, 747.0], [32.0, 747.0], [32.1, 747.0], [32.2, 748.0], [32.3, 748.0], [32.4, 748.0], [32.5, 748.0], [32.6, 749.0], [32.7, 749.0], [32.8, 749.0], [32.9, 749.0], [33.0, 750.0], [33.1, 750.0], [33.2, 750.0], [33.3, 751.0], [33.4, 751.0], [33.5, 751.0], [33.6, 751.0], [33.7, 751.0], [33.8, 752.0], [33.9, 752.0], [34.0, 752.0], [34.1, 752.0], [34.2, 752.0], [34.3, 753.0], [34.4, 753.0], [34.5, 753.0], [34.6, 753.0], [34.7, 753.0], [34.8, 754.0], [34.9, 754.0], [35.0, 754.0], [35.1, 754.0], [35.2, 754.0], [35.3, 755.0], [35.4, 755.0], [35.5, 755.0], [35.6, 755.0], [35.7, 755.0], [35.8, 755.0], [35.9, 756.0], [36.0, 756.0], [36.1, 756.0], [36.2, 756.0], [36.3, 756.0], [36.4, 756.0], [36.5, 756.0], [36.6, 757.0], [36.7, 757.0], [36.8, 757.0], [36.9, 757.0], [37.0, 757.0], [37.1, 757.0], [37.2, 758.0], [37.3, 758.0], [37.4, 758.0], [37.5, 758.0], [37.6, 758.0], [37.7, 758.0], [37.8, 758.0], [37.9, 758.0], [38.0, 758.0], [38.1, 759.0], [38.2, 759.0], [38.3, 759.0], [38.4, 759.0], [38.5, 759.0], [38.6, 759.0], [38.7, 759.0], [38.8, 759.0], [38.9, 759.0], [39.0, 760.0], [39.1, 760.0], [39.2, 760.0], [39.3, 760.0], [39.4, 760.0], [39.5, 760.0], [39.6, 760.0], [39.7, 760.0], [39.8, 760.0], [39.9, 760.0], [40.0, 761.0], [40.1, 761.0], [40.2, 761.0], [40.3, 761.0], [40.4, 761.0], [40.5, 761.0], [40.6, 761.0], [40.7, 761.0], [40.8, 761.0], [40.9, 761.0], [41.0, 761.0], [41.1, 761.0], [41.2, 762.0], [41.3, 762.0], [41.4, 762.0], [41.5, 762.0], [41.6, 762.0], [41.7, 762.0], [41.8, 762.0], [41.9, 762.0], [42.0, 762.0], [42.1, 762.0], [42.2, 763.0], [42.3, 763.0], [42.4, 763.0], [42.5, 763.0], [42.6, 763.0], [42.7, 763.0], [42.8, 763.0], [42.9, 763.0], [43.0, 763.0], [43.1, 763.0], [43.2, 763.0], [43.3, 763.0], [43.4, 763.0], [43.5, 764.0], [43.6, 764.0], [43.7, 764.0], [43.8, 764.0], [43.9, 764.0], [44.0, 764.0], [44.1, 764.0], [44.2, 764.0], [44.3, 764.0], [44.4, 764.0], [44.5, 764.0], [44.6, 765.0], [44.7, 765.0], [44.8, 765.0], [44.9, 765.0], [45.0, 765.0], [45.1, 765.0], [45.2, 765.0], [45.3, 765.0], [45.4, 765.0], [45.5, 765.0], [45.6, 765.0], [45.7, 765.0], [45.8, 766.0], [45.9, 766.0], [46.0, 766.0], [46.1, 766.0], [46.2, 766.0], [46.3, 766.0], [46.4, 766.0], [46.5, 766.0], [46.6, 766.0], [46.7, 766.0], [46.8, 767.0], [46.9, 767.0], [47.0, 767.0], [47.1, 767.0], [47.2, 767.0], [47.3, 767.0], [47.4, 767.0], [47.5, 767.0], [47.6, 767.0], [47.7, 767.0], [47.8, 767.0], [47.9, 768.0], [48.0, 768.0], [48.1, 768.0], [48.2, 768.0], [48.3, 768.0], [48.4, 768.0], [48.5, 768.0], [48.6, 768.0], [48.7, 768.0], [48.8, 768.0], [48.9, 769.0], [49.0, 769.0], [49.1, 769.0], [49.2, 769.0], [49.3, 769.0], [49.4, 769.0], [49.5, 769.0], [49.6, 770.0], [49.7, 770.0], [49.8, 770.0], [49.9, 770.0], [50.0, 770.0], [50.1, 770.0], [50.2, 770.0], [50.3, 771.0], [50.4, 771.0], [50.5, 771.0], [50.6, 771.0], [50.7, 771.0], [50.8, 771.0], [50.9, 771.0], [51.0, 772.0], [51.1, 772.0], [51.2, 772.0], [51.3, 772.0], [51.4, 772.0], [51.5, 772.0], [51.6, 773.0], [51.7, 773.0], [51.8, 773.0], [51.9, 773.0], [52.0, 773.0], [52.1, 773.0], [52.2, 774.0], [52.3, 774.0], [52.4, 774.0], [52.5, 774.0], [52.6, 774.0], [52.7, 774.0], [52.8, 775.0], [52.9, 775.0], [53.0, 775.0], [53.1, 775.0], [53.2, 776.0], [53.3, 776.0], [53.4, 776.0], [53.5, 776.0], [53.6, 776.0], [53.7, 777.0], [53.8, 777.0], [53.9, 777.0], [54.0, 777.0], [54.1, 777.0], [54.2, 778.0], [54.3, 778.0], [54.4, 778.0], [54.5, 778.0], [54.6, 778.0], [54.7, 779.0], [54.8, 779.0], [54.9, 779.0], [55.0, 779.0], [55.1, 779.0], [55.2, 779.0], [55.3, 780.0], [55.4, 780.0], [55.5, 780.0], [55.6, 780.0], [55.7, 781.0], [55.8, 781.0], [55.9, 781.0], [56.0, 781.0], [56.1, 782.0], [56.2, 782.0], [56.3, 782.0], [56.4, 782.0], [56.5, 782.0], [56.6, 783.0], [56.7, 783.0], [56.8, 783.0], [56.9, 783.0], [57.0, 784.0], [57.1, 784.0], [57.2, 784.0], [57.3, 784.0], [57.4, 785.0], [57.5, 785.0], [57.6, 785.0], [57.7, 785.0], [57.8, 785.0], [57.9, 786.0], [58.0, 786.0], [58.1, 786.0], [58.2, 786.0], [58.3, 787.0], [58.4, 787.0], [58.5, 787.0], [58.6, 787.0], [58.7, 788.0], [58.8, 788.0], [58.9, 788.0], [59.0, 788.0], [59.1, 789.0], [59.2, 789.0], [59.3, 789.0], [59.4, 790.0], [59.5, 790.0], [59.6, 790.0], [59.7, 791.0], [59.8, 791.0], [59.9, 791.0], [60.0, 792.0], [60.1, 792.0], [60.2, 792.0], [60.3, 793.0], [60.4, 793.0], [60.5, 793.0], [60.6, 794.0], [60.7, 794.0], [60.8, 795.0], [60.9, 796.0], [61.0, 796.0], [61.1, 796.0], [61.2, 797.0], [61.3, 797.0], [61.4, 798.0], [61.5, 798.0], [61.6, 798.0], [61.7, 799.0], [61.8, 799.0], [61.9, 800.0], [62.0, 800.0], [62.1, 800.0], [62.2, 801.0], [62.3, 801.0], [62.4, 801.0], [62.5, 802.0], [62.6, 802.0], [62.7, 803.0], [62.8, 803.0], [62.9, 803.0], [63.0, 803.0], [63.1, 804.0], [63.2, 804.0], [63.3, 805.0], [63.4, 805.0], [63.5, 806.0], [63.6, 806.0], [63.7, 807.0], [63.8, 808.0], [63.9, 808.0], [64.0, 809.0], [64.1, 810.0], [64.2, 811.0], [64.3, 812.0], [64.4, 813.0], [64.5, 814.0], [64.6, 814.0], [64.7, 815.0], [64.8, 816.0], [64.9, 816.0], [65.0, 817.0], [65.1, 817.0], [65.2, 817.0], [65.3, 818.0], [65.4, 818.0], [65.5, 818.0], [65.6, 819.0], [65.7, 819.0], [65.8, 820.0], [65.9, 820.0], [66.0, 820.0], [66.1, 821.0], [66.2, 821.0], [66.3, 822.0], [66.4, 822.0], [66.5, 823.0], [66.6, 823.0], [66.7, 823.0], [66.8, 824.0], [66.9, 824.0], [67.0, 824.0], [67.1, 825.0], [67.2, 825.0], [67.3, 826.0], [67.4, 826.0], [67.5, 827.0], [67.6, 828.0], [67.7, 828.0], [67.8, 829.0], [67.9, 829.0], [68.0, 830.0], [68.1, 830.0], [68.2, 831.0], [68.3, 831.0], [68.4, 831.0], [68.5, 832.0], [68.6, 832.0], [68.7, 832.0], [68.8, 833.0], [68.9, 833.0], [69.0, 833.0], [69.1, 833.0], [69.2, 834.0], [69.3, 834.0], [69.4, 835.0], [69.5, 835.0], [69.6, 835.0], [69.7, 836.0], [69.8, 836.0], [69.9, 837.0], [70.0, 837.0], [70.1, 838.0], [70.2, 838.0], [70.3, 839.0], [70.4, 839.0], [70.5, 839.0], [70.6, 840.0], [70.7, 840.0], [70.8, 841.0], [70.9, 841.0], [71.0, 841.0], [71.1, 842.0], [71.2, 842.0], [71.3, 842.0], [71.4, 843.0], [71.5, 843.0], [71.6, 844.0], [71.7, 844.0], [71.8, 844.0], [71.9, 844.0], [72.0, 845.0], [72.1, 845.0], [72.2, 845.0], [72.3, 846.0], [72.4, 846.0], [72.5, 846.0], [72.6, 846.0], [72.7, 847.0], [72.8, 847.0], [72.9, 847.0], [73.0, 847.0], [73.1, 848.0], [73.2, 848.0], [73.3, 848.0], [73.4, 849.0], [73.5, 849.0], [73.6, 849.0], [73.7, 849.0], [73.8, 850.0], [73.9, 850.0], [74.0, 850.0], [74.1, 851.0], [74.2, 851.0], [74.3, 851.0], [74.4, 852.0], [74.5, 852.0], [74.6, 852.0], [74.7, 853.0], [74.8, 853.0], [74.9, 854.0], [75.0, 854.0], [75.1, 855.0], [75.2, 855.0], [75.3, 856.0], [75.4, 856.0], [75.5, 857.0], [75.6, 857.0], [75.7, 858.0], [75.8, 858.0], [75.9, 859.0], [76.0, 859.0], [76.1, 859.0], [76.2, 860.0], [76.3, 860.0], [76.4, 860.0], [76.5, 861.0], [76.6, 861.0], [76.7, 861.0], [76.8, 862.0], [76.9, 862.0], [77.0, 862.0], [77.1, 863.0], [77.2, 863.0], [77.3, 864.0], [77.4, 864.0], [77.5, 865.0], [77.6, 865.0], [77.7, 866.0], [77.8, 866.0], [77.9, 866.0], [78.0, 867.0], [78.1, 867.0], [78.2, 867.0], [78.3, 868.0], [78.4, 868.0], [78.5, 868.0], [78.6, 869.0], [78.7, 869.0], [78.8, 870.0], [78.9, 870.0], [79.0, 870.0], [79.1, 871.0], [79.2, 871.0], [79.3, 872.0], [79.4, 872.0], [79.5, 873.0], [79.6, 873.0], [79.7, 874.0], [79.8, 874.0], [79.9, 875.0], [80.0, 875.0], [80.1, 876.0], [80.2, 876.0], [80.3, 878.0], [80.4, 879.0], [80.5, 880.0], [80.6, 880.0], [80.7, 881.0], [80.8, 882.0], [80.9, 883.0], [81.0, 884.0], [81.1, 885.0], [81.2, 886.0], [81.3, 886.0], [81.4, 888.0], [81.5, 889.0], [81.6, 889.0], [81.7, 890.0], [81.8, 891.0], [81.9, 894.0], [82.0, 896.0], [82.1, 899.0], [82.2, 906.0], [82.3, 909.0], [82.4, 911.0], [82.5, 912.0], [82.6, 913.0], [82.7, 915.0], [82.8, 915.0], [82.9, 916.0], [83.0, 917.0], [83.1, 917.0], [83.2, 918.0], [83.3, 919.0], [83.4, 919.0], [83.5, 920.0], [83.6, 920.0], [83.7, 921.0], [83.8, 921.0], [83.9, 922.0], [84.0, 922.0], [84.1, 923.0], [84.2, 924.0], [84.3, 925.0], [84.4, 925.0], [84.5, 925.0], [84.6, 926.0], [84.7, 927.0], [84.8, 927.0], [84.9, 928.0], [85.0, 928.0], [85.1, 929.0], [85.2, 929.0], [85.3, 930.0], [85.4, 930.0], [85.5, 931.0], [85.6, 931.0], [85.7, 931.0], [85.8, 932.0], [85.9, 932.0], [86.0, 933.0], [86.1, 933.0], [86.2, 934.0], [86.3, 935.0], [86.4, 935.0], [86.5, 936.0], [86.6, 936.0], [86.7, 937.0], [86.8, 938.0], [86.9, 938.0], [87.0, 939.0], [87.1, 940.0], [87.2, 940.0], [87.3, 941.0], [87.4, 941.0], [87.5, 942.0], [87.6, 942.0], [87.7, 943.0], [87.8, 943.0], [87.9, 944.0], [88.0, 944.0], [88.1, 945.0], [88.2, 945.0], [88.3, 946.0], [88.4, 946.0], [88.5, 947.0], [88.6, 947.0], [88.7, 947.0], [88.8, 948.0], [88.9, 948.0], [89.0, 948.0], [89.1, 949.0], [89.2, 949.0], [89.3, 949.0], [89.4, 950.0], [89.5, 950.0], [89.6, 950.0], [89.7, 951.0], [89.8, 951.0], [89.9, 952.0], [90.0, 952.0], [90.1, 952.0], [90.2, 953.0], [90.3, 953.0], [90.4, 953.0], [90.5, 954.0], [90.6, 954.0], [90.7, 954.0], [90.8, 955.0], [90.9, 955.0], [91.0, 955.0], [91.1, 956.0], [91.2, 956.0], [91.3, 956.0], [91.4, 957.0], [91.5, 957.0], [91.6, 957.0], [91.7, 958.0], [91.8, 958.0], [91.9, 958.0], [92.0, 959.0], [92.1, 959.0], [92.2, 960.0], [92.3, 960.0], [92.4, 961.0], [92.5, 961.0], [92.6, 962.0], [92.7, 962.0], [92.8, 963.0], [92.9, 964.0], [93.0, 964.0], [93.1, 965.0], [93.2, 966.0], [93.3, 966.0], [93.4, 967.0], [93.5, 968.0], [93.6, 968.0], [93.7, 968.0], [93.8, 969.0], [93.9, 969.0], [94.0, 970.0], [94.1, 971.0], [94.2, 971.0], [94.3, 972.0], [94.4, 972.0], [94.5, 973.0], [94.6, 973.0], [94.7, 974.0], [94.8, 975.0], [94.9, 976.0], [95.0, 977.0], [95.1, 977.0], [95.2, 978.0], [95.3, 979.0], [95.4, 979.0], [95.5, 980.0], [95.6, 981.0], [95.7, 982.0], [95.8, 983.0], [95.9, 983.0], [96.0, 984.0], [96.1, 985.0], [96.2, 986.0], [96.3, 987.0], [96.4, 988.0], [96.5, 990.0], [96.6, 991.0], [96.7, 992.0], [96.8, 993.0], [96.9, 994.0], [97.0, 995.0], [97.1, 996.0], [97.2, 998.0], [97.3, 999.0], [97.4, 1000.0], [97.5, 1001.0], [97.6, 1003.0], [97.7, 1006.0], [97.8, 1008.0], [97.9, 1009.0], [98.0, 1010.0], [98.1, 1012.0], [98.2, 1015.0], [98.3, 1017.0], [98.4, 1019.0], [98.5, 1021.0], [98.6, 1023.0], [98.7, 1025.0], [98.8, 1028.0], [98.9, 1034.0], [99.0, 1040.0], [99.1, 1046.0], [99.2, 1048.0], [99.3, 1054.0], [99.4, 1061.0], [99.5, 1284.0], [99.6, 1676.0], [99.7, 2087.0], [99.8, 2249.0], [99.9, 2639.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 36880.0, "series": [{"data": [[0.0, 394.0], [600.0, 5825.0], [700.0, 36880.0], [800.0, 15398.0], [900.0, 11547.0], [1000.0, 1583.0], [1100.0, 34.0], [1200.0, 43.0], [1300.0, 10.0], [1400.0, 8.0], [1500.0, 34.0], [100.0, 540.0], [1600.0, 19.0], [1700.0, 37.0], [1800.0, 19.0], [1900.0, 3.0], [2000.0, 15.0], [2100.0, 58.0], [2200.0, 48.0], [2300.0, 6.0], [2400.0, 7.0], [2500.0, 9.0], [2600.0, 38.0], [2700.0, 19.0], [2800.0, 39.0], [2900.0, 1.0], [200.0, 534.0], [3200.0, 1.0], [300.0, 1153.0], [400.0, 526.0], [500.0, 1157.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 204.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 72484.0, "series": [{"data": [[0.0, 2944.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 72484.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 353.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 204.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 956.87761948329, "minX": 1.7523954E12, "maxY": 984.9937584854426, "series": [{"data": [[1.7523954E12, 956.87761948329], [1.75239546E12, 984.9937584854426]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239546E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 977.0, "series": [{"data": [[2.0, 156.0], [3.0, 156.0], [4.0, 154.0], [5.0, 155.0], [6.0, 154.0], [7.0, 154.0], [8.0, 154.0], [9.0, 197.0], [10.0, 198.0], [11.0, 201.0], [12.0, 205.0], [13.0, 337.0], [14.0, 338.0], [15.0, 341.0], [16.0, 344.0], [17.0, 345.0], [18.0, 345.0], [19.0, 344.0], [20.0, 345.0], [21.0, 219.0], [22.0, 345.0], [23.0, 220.0], [24.0, 343.0], [25.0, 220.0], [27.0, 280.5], [29.0, 281.0], [30.0, 342.0], [31.0, 219.0], [33.0, 220.0], [32.0, 342.0], [35.0, 341.0], [34.0, 50.0], [37.0, 50.0], [36.0, 220.0], [39.0, 342.0], [38.0, 38.0], [41.0, 39.0], [40.0, 219.0], [43.0, 49.0], [42.0, 343.0], [45.0, 342.0], [44.0, 39.0], [47.0, 168.0], [49.0, 342.0], [48.0, 39.0], [51.0, 286.0], [50.0, 49.0], [53.0, 210.0], [52.0, 40.0], [55.0, 50.0], [54.0, 342.0], [57.0, 41.0], [56.0, 290.0], [59.0, 342.0], [58.0, 211.0], [60.0, 50.0], [63.0, 210.0], [62.0, 168.0], [66.0, 303.0], [65.0, 50.0], [64.0, 342.0], [71.0, 41.0], [70.0, 135.5], [68.0, 191.5], [75.0, 59.0], [74.0, 222.0], [73.0, 343.0], [72.0, 303.0], [79.0, 303.0], [78.0, 222.0], [77.0, 344.0], [76.0, 43.0], [83.0, 213.0], [82.0, 292.5], [80.0, 58.0], [87.0, 344.0], [86.0, 240.66666666666666], [84.0, 56.0], [91.0, 693.0], [90.0, 145.0], [89.0, 343.0], [88.0, 282.25], [95.0, 311.6], [93.0, 194.5], [92.0, 343.0], [99.0, 397.66666666666663], [98.0, 190.0], [97.0, 394.66666666666663], [96.0, 257.0], [102.0, 322.6], [100.0, 195.75], [106.0, 793.0], [105.0, 257.0], [104.0, 322.6], [111.0, 793.0], [110.0, 226.5], [108.0, 269.5], [114.0, 224.5], [112.0, 348.0], [119.0, 348.0], [118.0, 497.5], [117.0, 257.0], [116.0, 572.5], [123.0, 348.0], [122.0, 499.5], [121.0, 257.0], [120.0, 183.0], [127.0, 803.0], [126.0, 347.0], [125.0, 227.0], [124.0, 183.0], [135.0, 808.0], [134.0, 273.0], [133.0, 258.0], [132.0, 184.0], [131.0, 808.0], [130.0, 348.0], [129.0, 227.5], [128.0, 183.0], [143.0, 184.0], [142.0, 273.0], [141.0, 258.0], [140.0, 183.0], [139.0, 808.0], [138.0, 273.0], [137.0, 221.0], [151.0, 184.0], [150.0, 273.0], [149.0, 257.0], [148.0, 808.0], [147.0, 184.0], [146.0, 273.0], [145.0, 258.0], [144.0, 808.0], [158.0, 830.0], [157.0, 257.0], [156.0, 242.33333333333334], [155.0, 544.0], [153.0, 408.25], [165.0, 258.0], [164.0, 198.0], [163.0, 263.5], [162.0, 831.0], [161.0, 228.0], [160.0, 264.0], [175.0, 181.0], [174.0, 258.0], [173.0, 830.0], [172.0, 200.0], [171.0, 264.0], [170.0, 257.0], [169.0, 199.0], [168.0, 453.0], [183.0, 208.0], [182.0, 829.0], [181.0, 257.0], [180.0, 181.0], [179.0, 387.0], [178.0, 208.0], [177.0, 258.0], [176.0, 829.0], [191.0, 257.0], [190.0, 181.0], [189.0, 412.0], [188.0, 556.0], [186.0, 219.5], [184.0, 413.0], [199.0, 258.0], [198.0, 436.25], [195.0, 257.0], [194.0, 299.0], [193.0, 573.0], [207.0, 258.0], [206.0, 837.0], [205.0, 320.3333333333333], [203.0, 258.0], [202.0, 506.5], [201.0, 318.0], [200.0, 421.0], [215.0, 840.0], [214.0, 221.5], [213.0, 318.0], [212.0, 477.0], [211.0, 839.0], [210.0, 221.0], [209.0, 319.0], [208.0, 457.0], [222.0, 318.0], [221.0, 318.0], [220.0, 507.0], [218.0, 258.0], [217.0, 319.0], [216.0, 477.0], [228.0, 179.71428571428572], [229.0, 155.0], [230.0, 190.4], [227.0, 656.0], [226.0, 328.0], [225.0, 228.0], [224.0, 456.25], [232.0, 205.375], [233.0, 254.33333333333334], [234.0, 161.89999999999998], [235.0, 167.83333333333334], [236.0, 236.85714285714286], [237.0, 396.66666666666663], [238.0, 158.00000000000003], [239.0, 225.0], [241.0, 298.16666666666663], [242.0, 203.0], [243.0, 166.0], [244.0, 257.25], [245.0, 160.5], [246.0, 233.79999999999998], [247.0, 281.8], [240.0, 516.5], [248.0, 119.4], [249.0, 145.11111111111111], [250.0, 134.9090909090909], [251.0, 129.33333333333334], [252.0, 178.9], [254.0, 142.25], [255.0, 113.33333333333334], [253.0, 842.0], [268.0, 232.57142857142856], [257.0, 288.6666666666667], [259.0, 145.85714285714286], [258.0, 329.0], [260.0, 205.4], [261.0, 842.0], [262.0, 167.16666666666669], [263.0, 289.0], [256.0, 516.5], [264.0, 90.375], [265.0, 429.33333333333337], [266.0, 230.71428571428572], [270.0, 156.28571428571428], [269.0, 693.0], [271.0, 329.0], [275.0, 161.30927835051548], [273.0, 218.16666666666666], [272.0, 177.14285714285717], [279.0, 632.5], [274.0, 114.43749999999999], [277.0, 409.0], [276.0, 330.0], [278.0, 109.5], [280.0, 137.16666666666666], [286.0, 332.0], [287.0, 243.44444444444446], [284.0, 181.0], [285.0, 170.75], [281.0, 150.5], [282.0, 274.6666666666667], [283.0, 335.6], [288.0, 190.0], [289.0, 130.5], [291.0, 250.0], [290.0, 517.0], [300.0, 197.0], [302.0, 260.2], [301.0, 844.0], [303.0, 241.66666666666669], [292.0, 485.0], [293.0, 233.66666666666666], [294.0, 437.5], [295.0, 124.0], [296.0, 221.6], [298.0, 295.8], [297.0, 844.0], [299.0, 125.0], [319.0, 181.0], [307.0, 223.0], [310.0, 363.5], [308.0, 478.5], [311.0, 489.0], [306.0, 628.3333333333334], [304.0, 250.0], [312.0, 266.3333333333333], [313.0, 537.4], [318.0, 92.0], [317.0, 5.0], [316.0, 541.0], [315.0, 384.0], [314.0, 848.0], [334.0, 405.125], [323.0, 341.42857142857144], [325.0, 388.7058823529412], [324.0, 534.0], [327.0, 558.0], [320.0, 491.0], [322.0, 269.0], [321.0, 713.0], [326.0, 462.30769230769226], [329.0, 498.8125000000001], [331.0, 250.0], [333.0, 403.75], [335.0, 402.4], [328.0, 558.0], [332.0, 572.8], [330.0, 719.0], [337.0, 212.61538461538458], [336.0, 273.0], [338.0, 349.0], [339.0, 376.57142857142856], [340.0, 231.57142857142856], [341.0, 184.66666666666666], [342.0, 213.5], [343.0, 234.14285714285714], [344.0, 327.42857142857144], [351.0, 273.8], [350.0, 581.0], [348.0, 289.3333333333333], [349.0, 563.8333333333334], [345.0, 262.57142857142856], [346.0, 362.42857142857144], [347.0, 895.0], [359.0, 579.3333333333334], [356.0, 446.875], [357.0, 331.8333333333333], [358.0, 466.33333333333337], [360.0, 273.5], [367.0, 221.0401785714285], [361.0, 604.0], [362.0, 372.5], [363.0, 568.5], [364.0, 269.0], [355.0, 716.5], [353.0, 599.0], [352.0, 711.0], [365.0, 685.5], [366.0, 348.4], [369.0, 426.3636363636364], [368.0, 298.8], [370.0, 257.4], [371.0, 529.75], [372.0, 330.35714285714283], [373.0, 357.75], [374.0, 364.0], [375.0, 309.42857142857144], [376.0, 179.66666666666666], [380.0, 242.16666666666669], [381.0, 664.5714285714286], [383.0, 287.92307692307696], [382.0, 932.0], [377.0, 457.44444444444446], [379.0, 703.0], [378.0, 526.0], [397.0, 316.16666666666663], [385.0, 440.125], [386.0, 247.0], [396.0, 850.5], [387.0, 946.0], [388.0, 368.4285714285714], [389.0, 250.6], [390.0, 329.0], [391.0, 642.5], [384.0, 944.0], [392.0, 556.6666666666666], [394.0, 419.5], [395.0, 639.0], [399.0, 411.0], [398.0, 708.5], [412.0, 460.1666666666667], [401.0, 302.7142857142857], [400.0, 722.6666666666666], [402.0, 540.0], [404.0, 390.0], [405.0, 711.0], [407.0, 327.4], [410.0, 270.6], [411.0, 484.8571428571429], [415.0, 502.8888888888889], [413.0, 720.0], [409.0, 713.0], [408.0, 735.3333333333334], [431.0, 708.5], [418.0, 388.9166666666667], [421.0, 487.8571428571429], [420.0, 729.0], [423.0, 959.0], [417.0, 720.0], [416.0, 726.0], [422.0, 685.0], [425.0, 495.0], [424.0, 658.0], [428.0, 469.5], [419.0, 703.5], [430.0, 958.0], [429.0, 672.5], [427.0, 668.0], [426.0, 958.0], [444.0, 585.2], [434.0, 472.5], [432.0, 484.5], [433.0, 958.0], [435.0, 545.5], [436.0, 452.66666666666663], [438.0, 708.5], [437.0, 956.0], [439.0, 548.0], [441.0, 339.5], [442.0, 504.55555555555554], [443.0, 367.27272727272725], [445.0, 563.6363636363636], [447.0, 378.2857142857143], [440.0, 813.0], [446.0, 758.0], [449.0, 479.99999999999994], [448.0, 537.4], [450.0, 547.1111111111111], [451.0, 532.0], [452.0, 373.9166666666667], [453.0, 526.2857142857142], [454.0, 536.2857142857143], [455.0, 560.5], [456.0, 537.5714285714286], [463.0, 705.0], [461.0, 433.0], [460.0, 704.75], [462.0, 566.6666666666666], [457.0, 324.6666666666667], [459.0, 353.7142857142857], [458.0, 704.5], [466.0, 555.0], [464.0, 374.2], [465.0, 769.0], [467.0, 641.75], [476.0, 761.6], [468.0, 365.8888888888889], [469.0, 962.0], [470.0, 525.5], [471.0, 547.625], [474.0, 399.6], [475.0, 527.0], [477.0, 434.66666666666663], [479.0, 433.66666666666663], [473.0, 708.0], [472.0, 714.0], [478.0, 856.5], [492.0, 251.0], [482.0, 411.8], [483.0, 839.0], [487.0, 838.0], [481.0, 954.0], [480.0, 716.0], [484.0, 439.66666666666663], [485.0, 779.6666666666666], [486.0, 480.5], [488.0, 505.0], [489.0, 440.33333333333337], [491.0, 230.0], [490.0, 837.0], [493.0, 661.6], [494.0, 415.5], [508.0, 326.55555555555554], [498.0, 608.0], [502.0, 849.6666666666666], [496.0, 686.0], [497.0, 953.0], [500.0, 459.5], [501.0, 292.0], [504.0, 537.0], [505.0, 530.5], [506.0, 392.75], [509.0, 418.5], [511.0, 953.0], [510.0, 762.0], [539.0, 562.0], [516.0, 620.0], [513.0, 255.4], [512.0, 744.0], [515.0, 762.0], [514.0, 738.0], [527.0, 783.6666666666666], [526.0, 705.0], [518.0, 426.25], [517.0, 745.0], [536.0, 763.0], [519.0, 762.0], [537.0, 483.0], [538.0, 443.0], [543.0, 493.0], [542.0, 675.0], [541.0, 795.0], [540.0, 944.0], [520.0, 440.0], [521.0, 611.0], [522.0, 390.3333333333333], [524.0, 841.0], [523.0, 744.0], [525.0, 262.75], [528.0, 222.0], [533.0, 362.8], [532.0, 844.0], [531.0, 700.0], [530.0, 949.0], [529.0, 803.0], [535.0, 844.0], [534.0, 700.5], [546.0, 469.0], [545.0, 478.5714285714286], [559.0, 759.0], [544.0, 943.0], [548.0, 672.25], [547.0, 805.75], [549.0, 365.25], [554.0, 606.5], [553.0, 773.0], [552.0, 808.5], [555.0, 583.0], [556.0, 228.0], [557.0, 724.0], [558.0, 545.0], [561.0, 518.5], [560.0, 943.0], [562.0, 779.0], [574.0, 539.0], [575.0, 853.0], [571.0, 470.0], [572.0, 759.0], [573.0, 373.33333333333337], [569.0, 515.6666666666666], [568.0, 759.0], [551.0, 850.0], [550.0, 756.0], [570.0, 559.6666666666666], [564.0, 611.3333333333334], [566.0, 417.25], [565.0, 808.5], [567.0, 977.0], [600.0, 570.1666666666667], [577.0, 706.3333333333334], [582.0, 942.5], [581.0, 854.0], [580.0, 778.0], [579.0, 808.5], [583.0, 674.0], [585.0, 548.2], [586.0, 733.3333333333334], [591.0, 770.0], [576.0, 762.0], [590.0, 855.0], [589.0, 941.0], [588.0, 726.5], [587.0, 763.0], [592.0, 616.3333333333334], [593.0, 359.0], [594.0, 678.8], [597.0, 952.0], [596.0, 727.0], [595.0, 770.0], [599.0, 940.0], [598.0, 773.0], [602.0, 579.0], [601.0, 855.0], [603.0, 939.0], [604.0, 564.6666666666666], [607.0, 780.0], [606.0, 774.0], [605.0, 855.0], [632.0, 915.0], [619.0, 680.0], [608.0, 548.6], [613.0, 470.66666666666663], [612.0, 697.0], [611.0, 780.0], [610.0, 855.6666666666666], [615.0, 750.3333333333334], [614.0, 774.0], [633.0, 480.33333333333337], [635.0, 677.75], [636.0, 510.0], [637.0, 733.6666666666666], [638.0, 811.0], [625.0, 848.0], [624.0, 703.0], [616.0, 689.0], [617.0, 510.5], [618.0, 605.5], [620.0, 670.75], [621.0, 774.0], [623.0, 682.5], [622.0, 775.0], [626.0, 679.2], [628.0, 620.6666666666666], [627.0, 739.5], [629.0, 938.0], [630.0, 358.0], [631.0, 741.5], [665.0, 333.6666666666667], [653.0, 471.0], [640.0, 442.0], [641.0, 365.75], [643.0, 650.6], [645.0, 813.0], [664.0, 814.0], [646.0, 709.0], [666.0, 316.0], [667.0, 291.0], [668.0, 418.64285714285717], [669.0, 431.56], [670.0, 482.3333333333333], [671.0, 287.6666666666667], [659.0, 814.0], [657.0, 775.0], [656.0, 710.0], [648.0, 513.2], [649.0, 547.5], [652.0, 657.5], [651.0, 709.0], [650.0, 779.0], [654.0, 513.5], [655.0, 813.5], [660.0, 791.0], [661.0, 520.0], [663.0, 290.8333333333333], [662.0, 775.0], [675.0, 300.4], [672.0, 506.0], [687.0, 473.25000000000006], [685.0, 375.0], [686.0, 379.3333333333333], [683.0, 430.6666666666667], [684.0, 369.8571428571429], [673.0, 213.16666666666669], [674.0, 430.5], [676.0, 376.7647058823529], [677.0, 327.125], [678.0, 356.5], [679.0, 469.1428571428571], [688.0, 266.71428571428567], [703.0, 544.1666666666666], [702.0, 817.5], [700.0, 388.0], [701.0, 413.99999999999994], [698.0, 273.75], [699.0, 538.0], [696.0, 370.6], [697.0, 362.0], [689.0, 433.0], [690.0, 270.0], [691.0, 656.1428571428571], [693.0, 337.4], [692.0, 775.0], [694.0, 421.1666666666667], [695.0, 360.6666666666667], [681.0, 514.3333333333334], [680.0, 780.0], [682.0, 441.125], [707.0, 437.1666666666667], [704.0, 409.5], [718.0, 423.16666666666663], [719.0, 928.0], [716.0, 562.25], [717.0, 553.0], [714.0, 628.2857142857142], [715.0, 412.0], [705.0, 304.7142857142857], [706.0, 654.3333333333334], [708.0, 393.125], [709.0, 341.4285714285714], [710.0, 448.66666666666663], [711.0, 427.0], [721.0, 360.19047619047615], [720.0, 774.5], [722.0, 780.5], [735.0, 511.5], [734.0, 851.0], [733.0, 778.0], [730.0, 410.6315789473684], [732.0, 366.2], [728.0, 465.8333333333333], [729.0, 375.4545454545455], [723.0, 410.5], [724.0, 503.66666666666663], [725.0, 710.0], [726.0, 515.0], [727.0, 494.5714285714286], [712.0, 546.8], [713.0, 330.8], [743.0, 531.2857142857143], [737.0, 544.0], [736.0, 710.8333333333333], [750.0, 499.875], [749.0, 711.0], [751.0, 557.2], [738.0, 556.5714285714286], [739.0, 382.1428571428571], [740.0, 516.5], [741.0, 810.5], [752.0, 590.8333333333333], [766.0, 871.5], [765.0, 854.0], [767.0, 592.75], [761.0, 471.0], [760.0, 781.0], [762.0, 850.0], [764.0, 595.4285714285714], [753.0, 506.2857142857143], [754.0, 639.0], [755.0, 387.4], [756.0, 579.1428571428571], [757.0, 478.0], [758.0, 647.4285714285714], [759.0, 377.0], [744.0, 405.66666666666663], [745.0, 520.0], [747.0, 419.09999999999997], [746.0, 820.5], [748.0, 679.6666666666666], [792.0, 599.5], [769.0, 726.5], [768.0, 545.0], [783.0, 818.0], [782.0, 777.5], [781.0, 933.0], [770.0, 777.9705882352941], [771.0, 800.0], [773.0, 779.0], [772.0, 821.5], [774.0, 612.25], [775.0, 384.73376623376635], [794.0, 663.0], [795.0, 862.5], [796.0, 677.6666666666666], [799.0, 630.8], [798.0, 870.5], [797.0, 776.25], [784.0, 539.5], [788.0, 655.5], [787.0, 850.5], [786.0, 779.0], [785.0, 808.2], [789.0, 650.0], [791.0, 472.2857142857143], [790.0, 775.0], [776.0, 501.66666666666663], [777.0, 498.75], [778.0, 485.62499999999994], [779.0, 744.0], [780.0, 463.27272727272725], [805.0, 694.5], [812.0, 762.0], [802.0, 774.8000000000001], [801.0, 380.0], [815.0, 764.0], [800.0, 812.8], [813.0, 564.25], [814.0, 601.125], [803.0, 655.1666666666666], [804.0, 832.5], [807.0, 548.0], [806.0, 813.3333333333334], [824.0, 590.25], [825.0, 578.8571428571428], [826.0, 734.1428571428571], [827.0, 605.6666666666666], [828.0, 668.5], [829.0, 661.0], [830.0, 622.9999999999999], [831.0, 525.3333333333334], [816.0, 539.6], [817.0, 691.0], [818.0, 489.5333333333334], [819.0, 716.6666666666666], [820.0, 495.0], [821.0, 614.25], [823.0, 629.1666666666666], [822.0, 783.0], [808.0, 683.0], [809.0, 626.5], [811.0, 639.25], [810.0, 708.0], [839.0, 525.6111111111111], [835.0, 561.25], [832.0, 703.5], [847.0, 788.0], [846.0, 813.6], [844.0, 813.6], [842.0, 753.25], [843.0, 389.0], [833.0, 712.0], [834.0, 656.375], [836.0, 688.0], [837.0, 669.2], [838.0, 586.4444444444445], [848.0, 528.5], [863.0, 577.8], [862.0, 768.0], [860.0, 664.7777777777778], [861.0, 581.0], [858.0, 678.8461538461538], [859.0, 504.1538461538462], [856.0, 725.8], [857.0, 725.8333333333334], [849.0, 655.5], [852.0, 713.625], [851.0, 813.2], [853.0, 766.7142857142857], [854.0, 399.75], [855.0, 708.4], [840.0, 714.0], [841.0, 477.8], [871.0, 636.0714285714284], [867.0, 648.3333333333334], [864.0, 742.6666666666666], [877.0, 624.375], [876.0, 745.0], [874.0, 884.0], [879.0, 842.5], [865.0, 530.5714285714286], [866.0, 650.2857142857143], [868.0, 680.25], [869.0, 620.6666666666666], [870.0, 658.6], [880.0, 352.5], [895.0, 705.0], [893.0, 402.0], [892.0, 821.4], [894.0, 679.5], [889.0, 535.125], [888.0, 788.0], [890.0, 906.5], [891.0, 638.0], [881.0, 641.7777777777778], [884.0, 723.0], [883.0, 816.0], [882.0, 705.0], [885.0, 787.0], [887.0, 494.0], [886.0, 775.0], [872.0, 700.4], [873.0, 689.6666666666666], [903.0, 607.6], [899.0, 672.2], [896.0, 559.0], [911.0, 792.0], [909.0, 712.375], [907.0, 792.0], [906.0, 790.0], [910.0, 754.1666666666666], [897.0, 592.0], [898.0, 631.0], [900.0, 574.3333333333334], [901.0, 626.2], [902.0, 780.2], [914.0, 914.0], [927.0, 710.0], [912.0, 712.0], [913.0, 912.0], [925.0, 392.0], [926.0, 818.0], [920.0, 766.5], [921.0, 845.3333333333334], [923.0, 817.0], [922.0, 820.6666666666666], [924.0, 420.6666666666667], [915.0, 438.6], [917.0, 660.3333333333334], [916.0, 912.0], [919.0, 711.8333333333333], [918.0, 826.2], [904.0, 842.2], [905.0, 680.0], [934.0, 752.8], [941.0, 259.0], [930.0, 394.0], [929.0, 674.25], [928.0, 852.3333333333334], [942.0, 603.1428571428572], [943.0, 710.0], [932.0, 788.9285714285714], [931.0, 854.6666666666666], [933.0, 826.625], [935.0, 716.25], [953.0, 808.25], [952.0, 912.5], [954.0, 682.6], [955.0, 549.4], [956.0, 811.7058823529411], [957.0, 640.0], [958.0, 646.5714285714286], [959.0, 808.5], [944.0, 676.5], [946.0, 549.0], [945.0, 825.3333333333334], [948.0, 831.1428571428571], [949.0, 719.3333333333334], [950.0, 387.0], [951.0, 636.4285714285714], [936.0, 594.5], [937.0, 805.0], [938.0, 730.5], [940.0, 742.7142857142858], [939.0, 783.6666666666667], [961.0, 815.3333333333334], [960.0, 633.2857142857142], [963.0, 503.5], [962.0, 794.0], [964.0, 802.75], [966.0, 820.75], [965.0, 805.1052631578948], [967.0, 628.0], [968.0, 630.7777777777778], [970.0, 848.0], [969.0, 812.7333333333333], [972.0, 941.0], [971.0, 780.75], [973.0, 552.0], [974.0, 646.5714285714287], [975.0, 596.0], [979.0, 707.0], [978.0, 782.3333333333334], [977.0, 859.0], [976.0, 821.5], [990.0, 883.7857142857142], [991.0, 659.125], [987.0, 807.0666666666667], [986.0, 844.6666666666666], [985.0, 777.0], [984.0, 826.0], [988.0, 824.6666666666666], [989.0, 701.5714285714287], [980.0, 654.875], [982.0, 727.75], [981.0, 701.0], [995.0, 860.0], [996.0, 783.0555555555557], [997.0, 767.0], [999.0, 822.346153846154], [1000.0, 804.2512093457592], [998.0, 807.4615384615385], [994.0, 818.5454545454546], [993.0, 827.0], [992.0, 751.0], [1.0, 148.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[976.5006382838632, 786.3575047706745]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 54597.6, "minX": 1.7523954E12, "maxY": 403902.9, "series": [{"data": [[1.7523954E12, 180384.01666666666], [1.75239546E12, 403902.9]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7523954E12, 54597.6], [1.75239546E12, 127276.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239546E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 746.4746220537585, "minX": 1.7523954E12, "maxY": 803.6193807512444, "series": [{"data": [[1.7523954E12, 746.4746220537585], [1.75239546E12, 803.6193807512444]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239546E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 746.2223674465276, "minX": 1.7523954E12, "maxY": 803.6148740383095, "series": [{"data": [[1.7523954E12, 746.2223674465276], [1.75239546E12, 803.6148740383095]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239546E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2.0742193392668577E-4, "minX": 1.7523954E12, "maxY": 2.4873437023483023, "series": [{"data": [[1.7523954E12, 2.4873437023483023], [1.75239546E12, 2.0742193392668577E-4]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239546E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.7523954E12, "maxY": 3201.0, "series": [{"data": [[1.7523954E12, 3201.0], [1.75239546E12, 1073.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7523954E12, 953.0], [1.75239546E12, 934.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7523954E12, 2138.970000000005], [1.75239546E12, 988.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7523954E12, 976.0], [1.75239546E12, 959.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7523954E12, 9.0], [1.75239546E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7523954E12, 763.0], [1.75239546E12, 778.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239546E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 358.0, "maxY": 801.0, "series": [{"data": [[1069.0, 676.0], [1213.0, 797.0], [1187.0, 801.0], [1209.0, 780.0], [1220.0, 763.0], [1248.0, 754.0], [1253.0, 717.0], [1237.0, 734.0], [1236.0, 783.0], [1238.0, 774.0], [1239.0, 779.0], [1235.0, 781.0], [1232.0, 770.0], [1234.0, 766.0], [1254.0, 787.0], [1258.0, 779.0], [1255.0, 775.0], [1260.0, 771.0], [1249.0, 758.0], [1251.0, 766.0], [1270.0, 765.0], [1269.0, 759.0], [1266.0, 758.0], [1223.0, 775.5], [1221.0, 780.0], [1224.0, 794.0], [1227.0, 768.0], [1226.0, 779.0], [1230.0, 786.0], [1225.0, 768.0], [1240.0, 765.0], [1241.0, 774.0], [1242.0, 762.0], [1245.0, 795.0], [1247.0, 775.5], [1244.0, 764.0], [1377.0, 399.0], [358.0, 113.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1253.0, 1.0], [1248.0, 5.0], [1377.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1377.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 358.0, "maxY": 801.0, "series": [{"data": [[1069.0, 676.0], [1213.0, 797.0], [1187.0, 801.0], [1209.0, 780.0], [1220.0, 763.0], [1248.0, 754.0], [1253.0, 717.0], [1237.0, 734.0], [1236.0, 783.0], [1238.0, 774.0], [1239.0, 779.0], [1235.0, 781.0], [1232.0, 770.0], [1234.0, 766.0], [1254.0, 787.0], [1258.0, 779.0], [1255.0, 775.0], [1260.0, 771.0], [1249.0, 758.0], [1251.0, 766.0], [1270.0, 765.0], [1269.0, 759.0], [1266.0, 758.0], [1223.0, 775.0], [1221.0, 780.0], [1224.0, 794.0], [1227.0, 768.0], [1226.0, 779.0], [1230.0, 786.0], [1225.0, 768.0], [1240.0, 765.0], [1241.0, 774.0], [1242.0, 762.0], [1245.0, 795.0], [1247.0, 775.0], [1244.0, 764.0], [1377.0, 399.0], [358.0, 113.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1253.0, 0.0], [1248.0, 0.0], [1377.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1377.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 399.2, "minX": 1.7523954E12, "maxY": 867.2166666666667, "series": [{"data": [[1.7523954E12, 399.2], [1.75239546E12, 867.2166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239546E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.4, "minX": 1.7523954E12, "maxY": 883.8666666666667, "series": [{"data": [[1.7523954E12, 379.15], [1.75239546E12, 883.8666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7523954E12, 3.4]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239546E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.4, "minX": 1.7523954E12, "maxY": 883.8666666666667, "series": [{"data": [[1.7523954E12, 379.15], [1.75239546E12, 883.8666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7523954E12, 3.4]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239546E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.4, "minX": 1.7523954E12, "maxY": 883.8666666666667, "series": [{"data": [[1.7523954E12, 379.15], [1.75239546E12, 883.8666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7523954E12, 3.4]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239546E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

