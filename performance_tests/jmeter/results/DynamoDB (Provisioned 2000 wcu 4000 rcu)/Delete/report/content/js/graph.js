/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 226.0, "minX": 0.0, "maxY": 34881.0, "series": [{"data": [[0.0, 226.0], [0.1, 477.0], [0.2, 495.0], [0.3, 503.0], [0.4, 523.0], [0.5, 576.0], [0.6, 710.0], [0.7, 760.0], [0.8, 860.0], [0.9, 956.0], [1.0, 1030.0], [1.1, 1115.0], [1.2, 1212.0], [1.3, 1313.0], [1.4, 1368.0], [1.5, 1469.0], [1.6, 1528.0], [1.7, 1627.0], [1.8, 1704.0], [1.9, 1797.0], [2.0, 1880.0], [2.1, 1904.0], [2.2, 2030.0], [2.3, 2137.0], [2.4, 2198.0], [2.5, 2271.0], [2.6, 2321.0], [2.7, 2427.0], [2.8, 2478.0], [2.9, 2554.0], [3.0, 2601.0], [3.1, 2662.0], [3.2, 2694.0], [3.3, 2821.0], [3.4, 2916.0], [3.5, 2962.0], [3.6, 3029.0], [3.7, 3169.0], [3.8, 3228.0], [3.9, 3285.0], [4.0, 3340.0], [4.1, 3421.0], [4.2, 3483.0], [4.3, 3589.0], [4.4, 3652.0], [4.5, 3709.0], [4.6, 3745.0], [4.7, 3761.0], [4.8, 3773.0], [4.9, 3804.0], [5.0, 3817.0], [5.1, 3827.0], [5.2, 3837.0], [5.3, 3862.0], [5.4, 3898.0], [5.5, 3916.0], [5.6, 3953.0], [5.7, 3989.0], [5.8, 3999.0], [5.9, 4049.0], [6.0, 4134.0], [6.1, 4234.0], [6.2, 4269.0], [6.3, 4302.0], [6.4, 4304.0], [6.5, 4326.0], [6.6, 4334.0], [6.7, 4337.0], [6.8, 4359.0], [6.9, 4370.0], [7.0, 4388.0], [7.1, 4401.0], [7.2, 4414.0], [7.3, 4422.0], [7.4, 4428.0], [7.5, 4432.0], [7.6, 4438.0], [7.7, 4447.0], [7.8, 4450.0], [7.9, 4456.0], [8.0, 4469.0], [8.1, 4487.0], [8.2, 4490.0], [8.3, 4500.0], [8.4, 4504.0], [8.5, 4513.0], [8.6, 4606.0], [8.7, 4764.0], [8.8, 4957.0], [8.9, 5131.0], [9.0, 5308.0], [9.1, 5413.0], [9.2, 5553.0], [9.3, 5624.0], [9.4, 5776.0], [9.5, 5880.0], [9.6, 5962.0], [9.7, 6105.0], [9.8, 6187.0], [9.9, 6213.0], [10.0, 6240.0], [10.1, 6246.0], [10.2, 6251.0], [10.3, 6256.0], [10.4, 6266.0], [10.5, 6274.0], [10.6, 6279.0], [10.7, 6283.0], [10.8, 6292.0], [10.9, 6325.0], [11.0, 6339.0], [11.1, 6349.0], [11.2, 6357.0], [11.3, 6371.0], [11.4, 6378.0], [11.5, 6382.0], [11.6, 6386.0], [11.7, 6387.0], [11.8, 6390.0], [11.9, 6392.0], [12.0, 6393.0], [12.1, 6396.0], [12.2, 6399.0], [12.3, 6404.0], [12.4, 6410.0], [12.5, 6414.0], [12.6, 6421.0], [12.7, 6429.0], [12.8, 6438.0], [12.9, 6443.0], [13.0, 6456.0], [13.1, 6510.0], [13.2, 6965.0], [13.3, 7258.0], [13.4, 7597.0], [13.5, 7873.0], [13.6, 8095.0], [13.7, 8213.0], [13.8, 8456.0], [13.9, 8642.0], [14.0, 8778.0], [14.1, 8968.0], [14.2, 9121.0], [14.3, 9214.0], [14.4, 9339.0], [14.5, 9645.0], [14.6, 9788.0], [14.7, 9928.0], [14.8, 10143.0], [14.9, 10292.0], [15.0, 10493.0], [15.1, 10623.0], [15.2, 10826.0], [15.3, 11013.0], [15.4, 11262.0], [15.5, 11468.0], [15.6, 11634.0], [15.7, 11872.0], [15.8, 11937.0], [15.9, 11959.0], [16.0, 11970.0], [16.1, 11978.0], [16.2, 11985.0], [16.3, 11993.0], [16.4, 12003.0], [16.5, 12007.0], [16.6, 12018.0], [16.7, 12031.0], [16.8, 12042.0], [16.9, 12050.0], [17.0, 12063.0], [17.1, 12075.0], [17.2, 12087.0], [17.3, 12092.0], [17.4, 12100.0], [17.5, 12121.0], [17.6, 12141.0], [17.7, 12168.0], [17.8, 12202.0], [17.9, 12218.0], [18.0, 12272.0], [18.1, 12334.0], [18.2, 12399.0], [18.3, 12434.0], [18.4, 12775.0], [18.5, 12886.0], [18.6, 13043.0], [18.7, 13143.0], [18.8, 13231.0], [18.9, 13361.0], [19.0, 13426.0], [19.1, 13519.0], [19.2, 13613.0], [19.3, 13735.0], [19.4, 13851.0], [19.5, 13963.0], [19.6, 14072.0], [19.7, 14116.0], [19.8, 14237.0], [19.9, 14314.0], [20.0, 14435.0], [20.1, 14520.0], [20.2, 14617.0], [20.3, 14763.0], [20.4, 14833.0], [20.5, 14967.0], [20.6, 15054.0], [20.7, 15135.0], [20.8, 15224.0], [20.9, 15326.0], [21.0, 15422.0], [21.1, 15491.0], [21.2, 15648.0], [21.3, 15749.0], [21.4, 15825.0], [21.5, 15945.0], [21.6, 16055.0], [21.7, 16114.0], [21.8, 16275.0], [21.9, 16364.0], [22.0, 16455.0], [22.1, 16580.0], [22.2, 16652.0], [22.3, 16730.0], [22.4, 16826.0], [22.5, 16925.0], [22.6, 17080.0], [22.7, 17134.0], [22.8, 17242.0], [22.9, 17308.0], [23.0, 17446.0], [23.1, 17576.0], [23.2, 17670.0], [23.3, 17771.0], [23.4, 17863.0], [23.5, 18019.0], [23.6, 18101.0], [23.7, 18185.0], [23.8, 18271.0], [23.9, 18419.0], [24.0, 18519.0], [24.1, 18602.0], [24.2, 18701.0], [24.3, 18767.0], [24.4, 18896.0], [24.5, 18982.0], [24.6, 19072.0], [24.7, 19169.0], [24.8, 19253.0], [24.9, 19343.0], [25.0, 19464.0], [25.1, 19563.0], [25.2, 19572.0], [25.3, 19594.0], [25.4, 19612.0], [25.5, 19626.0], [25.6, 19631.0], [25.7, 19638.0], [25.8, 19647.0], [25.9, 19655.0], [26.0, 19666.0], [26.1, 19674.0], [26.2, 19701.0], [26.3, 19706.0], [26.4, 19725.0], [26.5, 19780.0], [26.6, 19786.0], [26.7, 19810.0], [26.8, 19821.0], [26.9, 19841.0], [27.0, 19843.0], [27.1, 19851.0], [27.2, 19857.0], [27.3, 19864.0], [27.4, 19867.0], [27.5, 19884.0], [27.6, 19890.0], [27.7, 19898.0], [27.8, 19911.0], [27.9, 19923.0], [28.0, 19931.0], [28.1, 19938.0], [28.2, 19948.0], [28.3, 19958.0], [28.4, 19963.0], [28.5, 19967.0], [28.6, 19983.0], [28.7, 19992.0], [28.8, 19999.0], [28.9, 20008.0], [29.0, 20014.0], [29.1, 20031.0], [29.2, 20043.0], [29.3, 20052.0], [29.4, 20066.0], [29.5, 20073.0], [29.6, 20083.0], [29.7, 20088.0], [29.8, 20100.0], [29.9, 20105.0], [30.0, 20110.0], [30.1, 20119.0], [30.2, 20128.0], [30.3, 20131.0], [30.4, 20137.0], [30.5, 20143.0], [30.6, 20145.0], [30.7, 20148.0], [30.8, 20152.0], [30.9, 20158.0], [31.0, 20162.0], [31.1, 20168.0], [31.2, 20172.0], [31.3, 20177.0], [31.4, 20181.0], [31.5, 20187.0], [31.6, 20192.0], [31.7, 20197.0], [31.8, 20201.0], [31.9, 20203.0], [32.0, 20205.0], [32.1, 20209.0], [32.2, 20216.0], [32.3, 20218.0], [32.4, 20232.0], [32.5, 20234.0], [32.6, 20239.0], [32.7, 20243.0], [32.8, 20246.0], [32.9, 20249.0], [33.0, 20253.0], [33.1, 20258.0], [33.2, 20260.0], [33.3, 20265.0], [33.4, 20266.0], [33.5, 20269.0], [33.6, 20271.0], [33.7, 20275.0], [33.8, 20279.0], [33.9, 20282.0], [34.0, 20287.0], [34.1, 20293.0], [34.2, 20298.0], [34.3, 20301.0], [34.4, 20302.0], [34.5, 20304.0], [34.6, 20309.0], [34.7, 20314.0], [34.8, 20318.0], [34.9, 20319.0], [35.0, 20320.0], [35.1, 20322.0], [35.2, 20324.0], [35.3, 20328.0], [35.4, 20331.0], [35.5, 20332.0], [35.6, 20336.0], [35.7, 20341.0], [35.8, 20347.0], [35.9, 20350.0], [36.0, 20353.0], [36.1, 20356.0], [36.2, 20359.0], [36.3, 20361.0], [36.4, 20368.0], [36.5, 20372.0], [36.6, 20378.0], [36.7, 20385.0], [36.8, 20386.0], [36.9, 20393.0], [37.0, 20402.0], [37.1, 20405.0], [37.2, 20414.0], [37.3, 20419.0], [37.4, 20423.0], [37.5, 20425.0], [37.6, 20433.0], [37.7, 20435.0], [37.8, 20442.0], [37.9, 20447.0], [38.0, 20456.0], [38.1, 20468.0], [38.2, 20474.0], [38.3, 20488.0], [38.4, 20499.0], [38.5, 20506.0], [38.6, 20524.0], [38.7, 20539.0], [38.8, 20644.0], [38.9, 20687.0], [39.0, 20828.0], [39.1, 20889.0], [39.2, 20990.0], [39.3, 21091.0], [39.4, 21205.0], [39.5, 21305.0], [39.6, 21428.0], [39.7, 21501.0], [39.8, 21596.0], [39.9, 21738.0], [40.0, 21787.0], [40.1, 21891.0], [40.2, 21987.0], [40.3, 22018.0], [40.4, 22037.0], [40.5, 22045.0], [40.6, 22058.0], [40.7, 22073.0], [40.8, 22079.0], [40.9, 22082.0], [41.0, 22091.0], [41.1, 22093.0], [41.2, 22104.0], [41.3, 22120.0], [41.4, 22130.0], [41.5, 22134.0], [41.6, 22139.0], [41.7, 22151.0], [41.8, 22165.0], [41.9, 22174.0], [42.0, 22213.0], [42.1, 22232.0], [42.2, 22266.0], [42.3, 22272.0], [42.4, 22282.0], [42.5, 22295.0], [42.6, 22310.0], [42.7, 22322.0], [42.8, 22326.0], [42.9, 22339.0], [43.0, 22346.0], [43.1, 22354.0], [43.2, 22357.0], [43.3, 22360.0], [43.4, 22364.0], [43.5, 22366.0], [43.6, 22374.0], [43.7, 22380.0], [43.8, 22385.0], [43.9, 22389.0], [44.0, 22398.0], [44.1, 22400.0], [44.2, 22405.0], [44.3, 22406.0], [44.4, 22411.0], [44.5, 22416.0], [44.6, 22424.0], [44.7, 22429.0], [44.8, 22430.0], [44.9, 22437.0], [45.0, 22441.0], [45.1, 22446.0], [45.2, 22451.0], [45.3, 22457.0], [45.4, 22466.0], [45.5, 22470.0], [45.6, 22475.0], [45.7, 22477.0], [45.8, 22481.0], [45.9, 22487.0], [46.0, 22501.0], [46.1, 22509.0], [46.2, 22515.0], [46.3, 22531.0], [46.4, 22541.0], [46.5, 22556.0], [46.6, 22578.0], [46.7, 22580.0], [46.8, 22590.0], [46.9, 22595.0], [47.0, 22605.0], [47.1, 22608.0], [47.2, 22616.0], [47.3, 22624.0], [47.4, 22634.0], [47.5, 22640.0], [47.6, 22645.0], [47.7, 22661.0], [47.8, 22665.0], [47.9, 22671.0], [48.0, 22672.0], [48.1, 22674.0], [48.2, 22676.0], [48.3, 22684.0], [48.4, 22687.0], [48.5, 22689.0], [48.6, 22695.0], [48.7, 22697.0], [48.8, 22705.0], [48.9, 22708.0], [49.0, 22711.0], [49.1, 22712.0], [49.2, 22715.0], [49.3, 22721.0], [49.4, 22723.0], [49.5, 22729.0], [49.6, 22735.0], [49.7, 22743.0], [49.8, 22748.0], [49.9, 22763.0], [50.0, 22769.0], [50.1, 22777.0], [50.2, 22784.0], [50.3, 22790.0], [50.4, 22796.0], [50.5, 22799.0], [50.6, 22803.0], [50.7, 22809.0], [50.8, 22818.0], [50.9, 22837.0], [51.0, 22841.0], [51.1, 22852.0], [51.2, 22873.0], [51.3, 22889.0], [51.4, 22905.0], [51.5, 22914.0], [51.6, 22918.0], [51.7, 22931.0], [51.8, 22940.0], [51.9, 22958.0], [52.0, 22972.0], [52.1, 22976.0], [52.2, 22992.0], [52.3, 22997.0], [52.4, 23005.0], [52.5, 23016.0], [52.6, 23027.0], [52.7, 23030.0], [52.8, 23036.0], [52.9, 23038.0], [53.0, 23044.0], [53.1, 23047.0], [53.2, 23051.0], [53.3, 23062.0], [53.4, 23068.0], [53.5, 23071.0], [53.6, 23078.0], [53.7, 23083.0], [53.8, 23085.0], [53.9, 23091.0], [54.0, 23100.0], [54.1, 23106.0], [54.2, 23117.0], [54.3, 23128.0], [54.4, 23136.0], [54.5, 23141.0], [54.6, 23144.0], [54.7, 23152.0], [54.8, 23156.0], [54.9, 23162.0], [55.0, 23170.0], [55.1, 23174.0], [55.2, 23181.0], [55.3, 23188.0], [55.4, 23195.0], [55.5, 23201.0], [55.6, 23205.0], [55.7, 23211.0], [55.8, 23213.0], [55.9, 23217.0], [56.0, 23219.0], [56.1, 23224.0], [56.2, 23228.0], [56.3, 23233.0], [56.4, 23236.0], [56.5, 23240.0], [56.6, 23245.0], [56.7, 23249.0], [56.8, 23254.0], [56.9, 23264.0], [57.0, 23282.0], [57.1, 23284.0], [57.2, 23289.0], [57.3, 23303.0], [57.4, 23306.0], [57.5, 23312.0], [57.6, 23333.0], [57.7, 23351.0], [57.8, 23356.0], [57.9, 23385.0], [58.0, 23408.0], [58.1, 23423.0], [58.2, 23490.0], [58.3, 23504.0], [58.4, 23543.0], [58.5, 23559.0], [58.6, 23583.0], [58.7, 23597.0], [58.8, 23632.0], [58.9, 23648.0], [59.0, 23666.0], [59.1, 23696.0], [59.2, 23707.0], [59.3, 23735.0], [59.4, 23749.0], [59.5, 23760.0], [59.6, 23775.0], [59.7, 23797.0], [59.8, 23813.0], [59.9, 23823.0], [60.0, 23835.0], [60.1, 23838.0], [60.2, 23862.0], [60.3, 23866.0], [60.4, 23878.0], [60.5, 23883.0], [60.6, 23896.0], [60.7, 23901.0], [60.8, 23908.0], [60.9, 23915.0], [61.0, 23919.0], [61.1, 23926.0], [61.2, 23933.0], [61.3, 23940.0], [61.4, 23942.0], [61.5, 23944.0], [61.6, 23953.0], [61.7, 23954.0], [61.8, 23959.0], [61.9, 23965.0], [62.0, 23971.0], [62.1, 23976.0], [62.2, 23987.0], [62.3, 23988.0], [62.4, 23992.0], [62.5, 23998.0], [62.6, 24001.0], [62.7, 24006.0], [62.8, 24009.0], [62.9, 24014.0], [63.0, 24019.0], [63.1, 24023.0], [63.2, 24024.0], [63.3, 24026.0], [63.4, 24028.0], [63.5, 24031.0], [63.6, 24033.0], [63.7, 24035.0], [63.8, 24039.0], [63.9, 24045.0], [64.0, 24047.0], [64.1, 24053.0], [64.2, 24054.0], [64.3, 24056.0], [64.4, 24057.0], [64.5, 24060.0], [64.6, 24062.0], [64.7, 24064.0], [64.8, 24068.0], [64.9, 24069.0], [65.0, 24072.0], [65.1, 24073.0], [65.2, 24075.0], [65.3, 24078.0], [65.4, 24081.0], [65.5, 24084.0], [65.6, 24087.0], [65.7, 24090.0], [65.8, 24095.0], [65.9, 24104.0], [66.0, 24106.0], [66.1, 24107.0], [66.2, 24108.0], [66.3, 24112.0], [66.4, 24119.0], [66.5, 24123.0], [66.6, 24127.0], [66.7, 24128.0], [66.8, 24134.0], [66.9, 24137.0], [67.0, 24151.0], [67.1, 24160.0], [67.2, 24164.0], [67.3, 24172.0], [67.4, 24175.0], [67.5, 24182.0], [67.6, 24189.0], [67.7, 24198.0], [67.8, 24215.0], [67.9, 24219.0], [68.0, 24225.0], [68.1, 24246.0], [68.2, 24250.0], [68.3, 24253.0], [68.4, 24264.0], [68.5, 24269.0], [68.6, 24274.0], [68.7, 24278.0], [68.8, 24280.0], [68.9, 24291.0], [69.0, 24295.0], [69.1, 24305.0], [69.2, 24308.0], [69.3, 24312.0], [69.4, 24316.0], [69.5, 24317.0], [69.6, 24323.0], [69.7, 24330.0], [69.8, 24336.0], [69.9, 24341.0], [70.0, 24344.0], [70.1, 24352.0], [70.2, 24359.0], [70.3, 24372.0], [70.4, 24380.0], [70.5, 24395.0], [70.6, 24403.0], [70.7, 24406.0], [70.8, 24417.0], [70.9, 24433.0], [71.0, 24456.0], [71.1, 24462.0], [71.2, 24475.0], [71.3, 24485.0], [71.4, 24500.0], [71.5, 24510.0], [71.6, 24544.0], [71.7, 24550.0], [71.8, 24556.0], [71.9, 24568.0], [72.0, 24578.0], [72.1, 24589.0], [72.2, 24598.0], [72.3, 24605.0], [72.4, 24618.0], [72.5, 24625.0], [72.6, 24628.0], [72.7, 24631.0], [72.8, 24645.0], [72.9, 24649.0], [73.0, 24654.0], [73.1, 24657.0], [73.2, 24666.0], [73.3, 24670.0], [73.4, 24678.0], [73.5, 24684.0], [73.6, 24687.0], [73.7, 24695.0], [73.8, 24697.0], [73.9, 24726.0], [74.0, 24740.0], [74.1, 24752.0], [74.2, 24760.0], [74.3, 24773.0], [74.4, 24784.0], [74.5, 24793.0], [74.6, 24798.0], [74.7, 24806.0], [74.8, 24816.0], [74.9, 24820.0], [75.0, 24836.0], [75.1, 24853.0], [75.2, 24863.0], [75.3, 24872.0], [75.4, 24876.0], [75.5, 24908.0], [75.6, 24920.0], [75.7, 24928.0], [75.8, 24930.0], [75.9, 24942.0], [76.0, 24963.0], [76.1, 24970.0], [76.2, 24979.0], [76.3, 24984.0], [76.4, 24989.0], [76.5, 24998.0], [76.6, 25004.0], [76.7, 25025.0], [76.8, 25035.0], [76.9, 25048.0], [77.0, 25054.0], [77.1, 25056.0], [77.2, 25060.0], [77.3, 25078.0], [77.4, 25099.0], [77.5, 25113.0], [77.6, 25116.0], [77.7, 25140.0], [77.8, 25151.0], [77.9, 25161.0], [78.0, 25169.0], [78.1, 25178.0], [78.2, 25187.0], [78.3, 25189.0], [78.4, 25196.0], [78.5, 25203.0], [78.6, 25203.0], [78.7, 25208.0], [78.8, 25210.0], [78.9, 25223.0], [79.0, 25226.0], [79.1, 25234.0], [79.2, 25237.0], [79.3, 25243.0], [79.4, 25260.0], [79.5, 25270.0], [79.6, 25274.0], [79.7, 25287.0], [79.8, 25314.0], [79.9, 25330.0], [80.0, 25336.0], [80.1, 25348.0], [80.2, 25363.0], [80.3, 25364.0], [80.4, 25373.0], [80.5, 25384.0], [80.6, 25409.0], [80.7, 25417.0], [80.8, 25425.0], [80.9, 25429.0], [81.0, 25434.0], [81.1, 25437.0], [81.2, 25439.0], [81.3, 25450.0], [81.4, 25459.0], [81.5, 25474.0], [81.6, 25480.0], [81.7, 25493.0], [81.8, 25497.0], [81.9, 25502.0], [82.0, 25505.0], [82.1, 25513.0], [82.2, 25518.0], [82.3, 25521.0], [82.4, 25531.0], [82.5, 25536.0], [82.6, 25538.0], [82.7, 25542.0], [82.8, 25547.0], [82.9, 25552.0], [83.0, 25559.0], [83.1, 25562.0], [83.2, 25566.0], [83.3, 25574.0], [83.4, 25577.0], [83.5, 25580.0], [83.6, 25581.0], [83.7, 25584.0], [83.8, 25585.0], [83.9, 25588.0], [84.0, 25591.0], [84.1, 25592.0], [84.2, 25596.0], [84.3, 25599.0], [84.4, 25604.0], [84.5, 25608.0], [84.6, 25611.0], [84.7, 25617.0], [84.8, 25618.0], [84.9, 25621.0], [85.0, 25622.0], [85.1, 25625.0], [85.2, 25627.0], [85.3, 25629.0], [85.4, 25632.0], [85.5, 25636.0], [85.6, 25637.0], [85.7, 25640.0], [85.8, 25641.0], [85.9, 25642.0], [86.0, 25645.0], [86.1, 25647.0], [86.2, 25652.0], [86.3, 25653.0], [86.4, 25659.0], [86.5, 25664.0], [86.6, 25669.0], [86.7, 25672.0], [86.8, 25674.0], [86.9, 25680.0], [87.0, 25684.0], [87.1, 25688.0], [87.2, 25702.0], [87.3, 25707.0], [87.4, 25710.0], [87.5, 25713.0], [87.6, 25720.0], [87.7, 25730.0], [87.8, 25742.0], [87.9, 25772.0], [88.0, 25801.0], [88.1, 25818.0], [88.2, 25820.0], [88.3, 25830.0], [88.4, 25834.0], [88.5, 25844.0], [88.6, 25849.0], [88.7, 25880.0], [88.8, 25899.0], [88.9, 25900.0], [89.0, 25906.0], [89.1, 25921.0], [89.2, 25937.0], [89.3, 25949.0], [89.4, 25975.0], [89.5, 25989.0], [89.6, 26012.0], [89.7, 26027.0], [89.8, 26030.0], [89.9, 26055.0], [90.0, 26078.0], [90.1, 26081.0], [90.2, 26107.0], [90.3, 26120.0], [90.4, 26126.0], [90.5, 26128.0], [90.6, 26145.0], [90.7, 26154.0], [90.8, 26172.0], [90.9, 26195.0], [91.0, 26202.0], [91.1, 26214.0], [91.2, 26234.0], [91.3, 26246.0], [91.4, 26257.0], [91.5, 26271.0], [91.6, 26279.0], [91.7, 26294.0], [91.8, 26301.0], [91.9, 26320.0], [92.0, 26329.0], [92.1, 26333.0], [92.2, 26340.0], [92.3, 26353.0], [92.4, 26364.0], [92.5, 26375.0], [92.6, 26382.0], [92.7, 26399.0], [92.8, 26408.0], [92.9, 26414.0], [93.0, 26420.0], [93.1, 26435.0], [93.2, 26440.0], [93.3, 26453.0], [93.4, 26459.0], [93.5, 26476.0], [93.6, 26480.0], [93.7, 26484.0], [93.8, 26490.0], [93.9, 26493.0], [94.0, 26499.0], [94.1, 26506.0], [94.2, 26510.0], [94.3, 26515.0], [94.4, 26517.0], [94.5, 26524.0], [94.6, 26531.0], [94.7, 26533.0], [94.8, 26537.0], [94.9, 26541.0], [95.0, 26546.0], [95.1, 26549.0], [95.2, 26553.0], [95.3, 26560.0], [95.4, 26567.0], [95.5, 26571.0], [95.6, 26581.0], [95.7, 26590.0], [95.8, 26597.0], [95.9, 26603.0], [96.0, 26606.0], [96.1, 26623.0], [96.2, 26633.0], [96.3, 26646.0], [96.4, 26662.0], [96.5, 26746.0], [96.6, 26841.0], [96.7, 26951.0], [96.8, 27074.0], [96.9, 27138.0], [97.0, 27214.0], [97.1, 27292.0], [97.2, 27427.0], [97.3, 27513.0], [97.4, 27634.0], [97.5, 27738.0], [97.6, 27833.0], [97.7, 27947.0], [97.8, 27995.0], [97.9, 28167.0], [98.0, 28326.0], [98.1, 28517.0], [98.2, 28678.0], [98.3, 28920.0], [98.4, 29168.0], [98.5, 29313.0], [98.6, 29517.0], [98.7, 29719.0], [98.8, 30111.0], [98.9, 30424.0], [99.0, 30874.0], [99.1, 31226.0], [99.2, 31679.0], [99.3, 32148.0], [99.4, 32516.0], [99.5, 32977.0], [99.6, 33281.0], [99.7, 33738.0], [99.8, 34118.0], [99.9, 34540.0], [100.0, 34881.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 117.0, "series": [{"data": [[32900.0, 1.0], [33300.0, 1.0], [33700.0, 1.0], [34100.0, 1.0], [34500.0, 1.0], [200.0, 2.0], [300.0, 1.0], [400.0, 6.0], [500.0, 10.0], [600.0, 1.0], [700.0, 6.0], [800.0, 5.0], [900.0, 3.0], [1000.0, 3.0], [1100.0, 5.0], [1200.0, 4.0], [1300.0, 4.0], [1400.0, 5.0], [1500.0, 5.0], [1600.0, 4.0], [1700.0, 4.0], [1800.0, 6.0], [1900.0, 2.0], [2000.0, 5.0], [2100.0, 5.0], [2200.0, 5.0], [2300.0, 4.0], [2400.0, 6.0], [2500.0, 5.0], [2600.0, 8.0], [2800.0, 5.0], [2700.0, 2.0], [2900.0, 5.0], [3000.0, 4.0], [3100.0, 4.0], [3200.0, 6.0], [3300.0, 6.0], [3400.0, 4.0], [3500.0, 4.0], [3600.0, 6.0], [3700.0, 14.0], [3800.0, 19.0], [3900.0, 14.0], [4000.0, 5.0], [4100.0, 5.0], [4300.0, 28.0], [4200.0, 6.0], [4400.0, 44.0], [4500.0, 11.0], [4600.0, 1.0], [4700.0, 3.0], [4800.0, 2.0], [4900.0, 3.0], [5000.0, 2.0], [5100.0, 2.0], [5200.0, 1.0], [5300.0, 3.0], [5400.0, 3.0], [5500.0, 5.0], [5600.0, 2.0], [5700.0, 2.0], [5800.0, 5.0], [5900.0, 3.0], [6100.0, 6.0], [6000.0, 2.0], [6300.0, 50.0], [6200.0, 34.0], [6400.0, 31.0], [6500.0, 1.0], [6600.0, 1.0], [6700.0, 1.0], [6800.0, 1.0], [6900.0, 1.0], [7000.0, 1.0], [7100.0, 1.0], [7200.0, 1.0], [7300.0, 1.0], [7400.0, 1.0], [7500.0, 2.0], [7700.0, 2.0], [7800.0, 2.0], [8000.0, 3.0], [8100.0, 2.0], [8200.0, 1.0], [8300.0, 3.0], [8400.0, 2.0], [8500.0, 1.0], [8600.0, 3.0], [8700.0, 2.0], [8800.0, 2.0], [8900.0, 2.0], [9000.0, 2.0], [9100.0, 4.0], [9200.0, 3.0], [9300.0, 1.0], [9400.0, 1.0], [9500.0, 2.0], [9600.0, 2.0], [9700.0, 3.0], [9800.0, 1.0], [9900.0, 2.0], [10000.0, 3.0], [10100.0, 1.0], [10200.0, 3.0], [10300.0, 1.0], [10400.0, 3.0], [10500.0, 2.0], [10600.0, 2.0], [10700.0, 2.0], [10800.0, 1.0], [10900.0, 2.0], [11000.0, 2.0], [11100.0, 2.0], [11200.0, 2.0], [11300.0, 1.0], [11400.0, 2.0], [11500.0, 1.0], [11600.0, 2.0], [11700.0, 2.0], [11800.0, 2.0], [11900.0, 24.0], [12000.0, 35.0], [12100.0, 15.0], [12200.0, 8.0], [12300.0, 7.0], [12400.0, 4.0], [12500.0, 1.0], [12600.0, 1.0], [12700.0, 1.0], [12800.0, 3.0], [13000.0, 5.0], [12900.0, 1.0], [13100.0, 3.0], [13200.0, 4.0], [13300.0, 2.0], [13400.0, 4.0], [13500.0, 4.0], [13600.0, 4.0], [13700.0, 4.0], [13800.0, 4.0], [13900.0, 3.0], [14000.0, 4.0], [14100.0, 3.0], [14200.0, 4.0], [14300.0, 2.0], [14400.0, 4.0], [14500.0, 4.0], [14600.0, 4.0], [14700.0, 4.0], [14800.0, 3.0], [14900.0, 4.0], [15000.0, 3.0], [15100.0, 4.0], [15200.0, 3.0], [15300.0, 5.0], [15400.0, 4.0], [15600.0, 3.0], [15500.0, 2.0], [15700.0, 4.0], [15800.0, 3.0], [15900.0, 4.0], [16000.0, 3.0], [16100.0, 5.0], [16200.0, 3.0], [16300.0, 3.0], [17200.0, 4.0], [16400.0, 3.0], [16600.0, 4.0], [16800.0, 4.0], [17000.0, 3.0], [17400.0, 4.0], [18200.0, 2.0], [17600.0, 4.0], [17800.0, 4.0], [18000.0, 3.0], [18400.0, 3.0], [19200.0, 4.0], [18600.0, 4.0], [18800.0, 4.0], [19000.0, 3.0], [19400.0, 2.0], [19600.0, 30.0], [19800.0, 38.0], [20000.0, 35.0], [20200.0, 89.0], [20400.0, 54.0], [20600.0, 5.0], [20800.0, 4.0], [21000.0, 3.0], [21200.0, 3.0], [21400.0, 5.0], [21600.0, 3.0], [21800.0, 4.0], [22000.0, 32.0], [22200.0, 23.0], [22400.0, 68.0], [22600.0, 64.0], [22800.0, 30.0], [23000.0, 59.0], [23200.0, 64.0], [23400.0, 11.0], [23600.0, 17.0], [23800.0, 34.0], [24000.0, 117.0], [24200.0, 47.0], [24400.0, 30.0], [24600.0, 57.0], [24800.0, 29.0], [25000.0, 32.0], [25200.0, 47.0], [25400.0, 47.0], [25600.0, 103.0], [25800.0, 33.0], [26000.0, 21.0], [26200.0, 27.0], [26400.0, 47.0], [26600.0, 21.0], [26800.0, 3.0], [27000.0, 4.0], [27200.0, 4.0], [27400.0, 4.0], [27600.0, 4.0], [27800.0, 4.0], [28000.0, 3.0], [28400.0, 2.0], [28600.0, 2.0], [28800.0, 2.0], [29000.0, 2.0], [29200.0, 1.0], [29400.0, 2.0], [29600.0, 1.0], [29800.0, 1.0], [30200.0, 2.0], [30400.0, 1.0], [30600.0, 1.0], [30800.0, 1.0], [31200.0, 1.0], [31400.0, 1.0], [31600.0, 1.0], [31800.0, 1.0], [32000.0, 1.0], [32400.0, 1.0], [32600.0, 1.0], [32800.0, 1.0], [33200.0, 1.0], [33600.0, 1.0], [34000.0, 1.0], [34400.0, 1.0], [34800.0, 1.0], [33100.0, 1.0], [34300.0, 1.0], [34700.0, 1.0], [16500.0, 4.0], [16700.0, 3.0], [16900.0, 5.0], [17100.0, 2.0], [17300.0, 3.0], [17500.0, 3.0], [17700.0, 2.0], [17900.0, 3.0], [18100.0, 6.0], [18300.0, 3.0], [18500.0, 4.0], [18700.0, 4.0], [18900.0, 4.0], [19100.0, 3.0], [19300.0, 5.0], [19500.0, 12.0], [19700.0, 16.0], [19900.0, 39.0], [20100.0, 71.0], [20300.0, 94.0], [20500.0, 12.0], [20700.0, 3.0], [20900.0, 4.0], [21100.0, 3.0], [21300.0, 3.0], [21500.0, 4.0], [21700.0, 4.0], [21900.0, 5.0], [22100.0, 28.0], [22300.0, 53.0], [22500.0, 33.0], [22700.0, 64.0], [22900.0, 35.0], [23100.0, 53.0], [23300.0, 25.0], [23500.0, 15.0], [23700.0, 19.0], [23900.0, 68.0], [24100.0, 66.0], [24300.0, 54.0], [24500.0, 30.0], [24700.0, 29.0], [24900.0, 37.0], [25100.0, 36.0], [25300.0, 30.0], [25500.0, 86.0], [25900.0, 24.0], [25700.0, 27.0], [26100.0, 30.0], [26300.0, 34.0], [26500.0, 65.0], [26700.0, 4.0], [26900.0, 4.0], [27100.0, 5.0], [27300.0, 2.0], [27500.0, 3.0], [27700.0, 4.0], [27900.0, 4.0], [28100.0, 3.0], [28300.0, 2.0], [28500.0, 2.0], [28700.0, 1.0], [28900.0, 2.0], [29100.0, 2.0], [29300.0, 2.0], [29500.0, 2.0], [29700.0, 2.0], [29900.0, 1.0], [30100.0, 1.0], [30500.0, 1.0], [30700.0, 1.0], [30900.0, 1.0], [31100.0, 1.0], [31300.0, 1.0], [31500.0, 1.0], [31900.0, 1.0], [32100.0, 1.0], [32300.0, 1.0], [32500.0, 1.0], [32700.0, 1.0], [33000.0, 1.0], [33400.0, 1.0], [33800.0, 1.0], [34200.0, 1.0], [34600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 34800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3507.0, "series": [{"data": [[0.0, 9.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 46.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3507.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 712.2799539170506, "minX": 1.75239192E12, "maxY": 995.1949616648411, "series": [{"data": [[1.75239192E12, 995.1949616648411], [1.75239198E12, 712.2799539170506]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239198E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 488.0, "minX": 1.0, "maxY": 26618.0, "series": [{"data": [[2.0, 26567.0], [3.0, 26579.0], [4.0, 26544.0], [5.0, 26603.0], [6.0, 26618.0], [7.0, 26563.0], [8.0, 26589.0], [9.0, 26597.0], [10.0, 26515.0], [11.0, 26568.0], [12.0, 26581.0], [13.0, 26507.0], [14.0, 26549.0], [15.0, 26560.0], [16.0, 26476.0], [17.0, 26559.0], [18.0, 26534.0], [19.0, 24853.0], [20.0, 26513.0], [21.0, 24855.0], [22.0, 26508.0], [23.0, 24869.0], [24.0, 26603.0], [25.0, 24921.0], [26.0, 26543.0], [27.0, 24926.0], [28.0, 26533.0], [29.0, 24930.0], [30.0, 26585.0], [31.0, 24872.0], [33.0, 24942.0], [32.0, 26568.0], [35.0, 24934.0], [34.0, 26491.0], [37.0, 23582.0], [36.0, 26533.0], [39.0, 23672.0], [38.0, 24873.0], [41.0, 24948.0], [40.0, 26521.0], [43.0, 26453.0], [42.0, 23632.0], [45.0, 23639.0], [44.0, 24960.0], [47.0, 24963.0], [46.0, 26486.0], [49.0, 23725.0], [48.0, 26484.0], [51.0, 26440.0], [50.0, 23699.0], [53.0, 26509.0], [52.0, 24977.0], [55.0, 23633.0], [54.0, 24991.0], [57.0, 24995.0], [56.0, 26493.0], [59.0, 26450.0], [58.0, 23715.0], [61.0, 24985.0], [60.0, 23749.0], [63.0, 23697.0], [62.0, 26490.0], [67.0, 25018.0], [66.0, 23762.0], [65.0, 26475.0], [64.0, 25001.0], [71.0, 26497.0], [70.0, 25036.0], [69.0, 26427.0], [68.0, 23774.0], [75.0, 26482.0], [74.0, 22322.0], [73.0, 25048.0], [72.0, 23745.0], [79.0, 23824.0], [78.0, 22324.0], [77.0, 25059.0], [76.0, 23813.0], [83.0, 26420.0], [82.0, 22273.0], [81.0, 25054.0], [80.0, 26435.0], [87.0, 26467.0], [86.0, 22346.0], [85.0, 25055.0], [84.0, 23797.0], [91.0, 23835.0], [90.0, 22333.0], [89.0, 25056.0], [88.0, 23816.0], [95.0, 26373.0], [94.0, 22287.0], [93.0, 25069.0], [92.0, 26388.0], [99.0, 26415.0], [98.0, 22266.0], [97.0, 23775.0], [96.0, 25086.0], [103.0, 26414.0], [102.0, 22344.0], [101.0, 23862.0], [100.0, 25073.0], [107.0, 25132.0], [106.0, 22297.0], [105.0, 25031.0], [104.0, 23863.0], [111.0, 25155.0], [110.0, 22266.0], [109.0, 23836.0], [108.0, 26354.0], [114.0, 22319.0], [113.0, 23834.0], [112.0, 26408.0], [119.0, 25144.0], [118.0, 22282.0], [117.0, 25078.0], [116.0, 25154.0], [123.0, 25161.0], [122.0, 22295.0], [121.0, 26328.0], [120.0, 23863.0], [126.0, 26375.0], [125.0, 22354.0], [124.0, 23880.0], [135.0, 22429.0], [134.0, 26279.0], [133.0, 25201.0], [132.0, 22327.0], [131.0, 23964.0], [130.0, 22310.0], [129.0, 26340.0], [128.0, 24557.5], [143.0, 22357.0], [142.0, 26329.0], [141.0, 25203.0], [140.0, 22355.0], [139.0, 23920.0], [138.0, 26333.0], [137.0, 25201.0], [136.0, 23883.0], [151.0, 26320.0], [150.0, 25203.0], [149.0, 22429.0], [148.0, 23878.0], [147.0, 26271.0], [146.0, 25203.0], [145.0, 22440.0], [144.0, 23919.0], [159.0, 22410.0], [158.0, 26281.0], [157.0, 25209.0], [156.0, 22357.0], [155.0, 23951.0], [154.0, 26338.0], [153.0, 25206.0], [152.0, 23940.0], [167.0, 26353.0], [166.0, 25210.0], [165.0, 23964.0], [164.0, 22406.0], [163.0, 26353.0], [162.0, 25206.0], [161.0, 19626.0], [160.0, 23878.0], [175.0, 23942.0], [174.0, 26271.0], [173.0, 25216.0], [172.0, 22405.0], [171.0, 19614.0], [170.0, 22339.0], [169.0, 23991.0], [168.0, 19572.0], [183.0, 22929.0], [181.0, 25235.0], [180.0, 24027.0], [179.0, 26243.0], [178.0, 25201.0], [177.0, 22402.0], [176.0, 19638.0], [191.0, 23976.0], [190.0, 26228.0], [189.0, 19655.0], [188.0, 25230.0], [187.0, 22360.0], [186.0, 19570.0], [185.0, 22353.0], [184.0, 24024.0], [199.0, 24038.0], [198.0, 26214.0], [197.0, 25262.0], [196.0, 24024.0], [195.0, 26191.0], [194.0, 19638.0], [193.0, 25256.0], [192.0, 22423.0], [207.0, 19663.0], [206.0, 24013.0], [205.0, 19647.0], [204.0, 23783.5], [202.0, 26203.0], [201.0, 19581.0], [200.0, 22366.0], [215.0, 19575.0], [214.0, 24095.0], [213.0, 26205.0], [212.0, 25273.0], [211.0, 26126.0], [210.0, 24026.0], [209.0, 25270.0], [208.0, 22408.0], [223.0, 22439.0], [222.0, 19654.0], [221.0, 25166.0], [220.0, 24056.0], [219.0, 22374.0], [218.0, 26166.0], [217.0, 19647.0], [216.0, 22363.0], [231.0, 22354.0], [230.0, 25216.0], [229.0, 24137.0], [228.0, 26128.0], [227.0, 19615.0], [226.0, 25210.0], [225.0, 24071.0], [224.0, 26107.0], [239.0, 24113.0], [238.0, 22411.0], [237.0, 19665.0], [236.0, 25188.0], [235.0, 22369.0], [234.0, 26116.0], [233.0, 24167.0], [232.0, 19649.0], [247.0, 19632.0], [246.0, 25182.0], [245.0, 22326.0], [244.0, 26081.0], [243.0, 24189.0], [242.0, 19594.0], [241.0, 25189.0], [240.0, 26029.0], [255.0, 26022.0], [254.0, 24110.0], [253.0, 22402.0], [252.0, 25187.0], [251.0, 19631.0], [250.0, 22340.0], [249.0, 26078.0], [248.0, 24172.0], [270.0, 19619.0], [271.0, 25937.0], [269.0, 24079.0], [268.0, 25151.0], [267.0, 22413.0], [266.0, 26027.0], [265.0, 19666.0], [264.0, 24159.0], [263.0, 22361.0], [257.0, 22398.0], [256.0, 19584.0], [259.0, 24160.0], [258.0, 25196.0], [262.0, 25169.0], [261.0, 26062.0], [260.0, 19643.0], [286.0, 21050.0], [287.0, 25877.0], [284.0, 24054.0], [275.0, 25153.0], [274.0, 19689.0], [273.0, 24108.0], [272.0, 22423.0], [283.0, 25194.0], [282.0, 22444.0], [281.0, 25934.0], [280.0, 24108.0], [279.0, 25183.0], [278.0, 19714.0], [277.0, 22360.0], [276.0, 25971.0], [302.0, 24146.0], [303.0, 19608.0], [301.0, 22441.0], [300.0, 25166.0], [299.0, 25847.0], [298.0, 24083.0], [297.0, 19668.0], [296.0, 22385.0], [295.0, 25189.0], [289.0, 19599.0], [288.0, 24075.0], [291.0, 22380.0], [290.0, 25187.0], [294.0, 25818.0], [293.0, 19674.0], [292.0, 24109.0], [318.0, 24239.0], [319.0, 19641.0], [317.0, 22507.0], [316.0, 24151.0], [315.0, 25743.0], [314.0, 22425.0], [313.0, 21906.5], [311.0, 25228.0], [304.0, 25203.0], [306.0, 24163.0], [305.0, 25742.0], [310.0, 25713.0], [309.0, 19682.0], [308.0, 23809.5], [334.0, 25676.0], [335.0, 25196.0], [333.0, 19659.0], [332.0, 22512.0], [331.0, 25692.0], [330.0, 24182.0], [329.0, 22455.0], [328.0, 19703.0], [327.0, 25270.0], [321.0, 25439.5], [323.0, 19706.0], [322.0, 25243.0], [326.0, 25641.0], [325.0, 24175.0], [324.0, 22457.0], [350.0, 24161.0], [351.0, 25629.0], [349.0, 19669.0], [348.0, 25237.0], [347.0, 22555.0], [346.0, 25635.0], [345.0, 24123.0], [344.0, 25226.0], [343.0, 22484.0], [336.0, 24225.0], [339.0, 24197.0], [338.0, 21094.5], [342.0, 22654.0], [340.0, 25237.0], [365.0, 25234.0], [366.0, 22630.0], [364.0, 19842.0], [355.0, 19786.0], [354.0, 24165.0], [353.0, 22515.0], [352.0, 19758.0], [363.0, 22595.0], [362.0, 24115.0], [361.0, 25632.0], [360.0, 19764.0], [359.0, 25239.0], [358.0, 22524.0], [357.0, 25589.0], [356.0, 25234.0], [382.0, 24147.0], [383.0, 22642.0], [381.0, 19934.0], [380.0, 25267.0], [379.0, 25549.0], [378.0, 19904.0], [377.0, 22635.0], [376.0, 24090.0], [375.0, 19810.0], [369.0, 19843.0], [368.0, 24886.5], [371.0, 25260.0], [370.0, 24176.0], [374.0, 25280.0], [373.0, 22578.0], [372.0, 25515.0], [398.0, 25538.0], [399.0, 20027.0], [397.0, 19999.0], [396.0, 25325.0], [395.0, 24235.0], [394.0, 22674.0], [393.0, 25560.0], [392.0, 19915.0], [391.0, 24151.0], [385.0, 24174.0], [384.0, 25556.0], [387.0, 19894.0], [386.0, 25285.0], [390.0, 25305.0], [389.0, 22587.0], [388.0, 25496.0], [414.0, 25536.0], [415.0, 24264.0], [413.0, 20148.0], [412.0, 25336.0], [411.0, 22610.0], [410.0, 24285.0], [409.0, 25478.0], [408.0, 20092.0], [407.0, 25332.0], [401.0, 22671.0], [400.0, 24251.0], [403.0, 25480.0], [402.0, 25330.0], [406.0, 22609.0], [405.0, 22111.0], [430.0, 25561.0], [431.0, 20210.0], [429.0, 24248.0], [428.0, 22595.0], [427.0, 25374.0], [426.0, 25493.0], [425.0, 20238.0], [424.0, 24196.0], [423.0, 22607.0], [417.0, 20145.0], [416.0, 22672.0], [419.0, 24198.0], [418.0, 25368.0], [422.0, 25373.0], [421.0, 20208.0], [420.0, 25474.0], [446.0, 25532.0], [447.0, 24318.0], [445.0, 24295.0], [444.0, 22683.0], [443.0, 20293.0], [442.0, 25452.0], [441.0, 25463.0], [440.0, 24209.0], [439.0, 22673.0], [433.0, 25560.0], [432.0, 22687.0], [435.0, 20291.0], [434.0, 25332.0], [438.0, 25439.0], [437.0, 20318.0], [436.0, 24189.0], [462.0, 25525.0], [463.0, 20418.0], [461.0, 22336.5], [451.0, 25521.0], [450.0, 25375.0], [449.0, 21539.0], [459.0, 22676.0], [458.0, 25498.0], [457.0, 25472.0], [456.0, 20325.0], [455.0, 25460.0], [454.0, 24252.0], [453.0, 22671.0], [452.0, 20378.0], [478.0, 20414.0], [479.0, 24323.0], [477.0, 25518.0], [476.0, 22657.0], [475.0, 24314.0], [474.0, 25513.0], [473.0, 20419.0], [472.0, 25458.0], [471.0, 22644.0], [465.0, 24280.0], [464.0, 25497.0], [467.0, 25521.0], [466.0, 22708.0], [470.0, 25503.0], [469.0, 24255.0], [468.0, 20386.0], [494.0, 24310.0], [495.0, 25539.0], [493.0, 20423.0], [492.0, 25518.0], [491.0, 24316.0], [490.0, 22664.0], [489.0, 25537.0], [488.0, 20368.0], [487.0, 25450.0], [481.0, 22713.0], [480.0, 25507.0], [483.0, 20377.0], [482.0, 25491.0], [486.0, 25505.0], [485.0, 24265.0], [484.0, 22722.0], [510.0, 24323.0], [511.0, 20437.0], [509.0, 25627.0], [508.0, 21528.0], [506.0, 25562.0], [505.0, 24312.0], [504.0, 25590.0], [503.0, 20382.0], [497.0, 25539.0], [496.0, 22704.0], [499.0, 22692.0], [498.0, 20439.0], [502.0, 25553.0], [501.0, 24259.0], [500.0, 25502.0], [540.0, 25642.0], [543.0, 20433.0], [529.0, 24363.0], [528.0, 25602.0], [531.0, 25577.0], [530.0, 22691.0], [533.0, 25643.0], [532.0, 20354.0], [542.0, 25641.0], [541.0, 22638.0], [539.0, 24406.0], [538.0, 22608.0], [537.0, 20425.0], [536.0, 25642.0], [527.0, 20404.0], [513.0, 22665.0], [512.0, 25585.0], [515.0, 22681.0], [514.0, 25590.0], [517.0, 20366.0], [516.0, 24292.0], [519.0, 24388.0], [518.0, 25596.0], [526.0, 22624.0], [525.0, 25642.0], [524.0, 20404.0], [523.0, 25593.0], [522.0, 24427.0], [521.0, 22651.0], [520.0, 25592.0], [535.0, 25596.0], [534.0, 24351.0], [573.0, 488.0], [569.0, 6043.75], [575.0, 13129.0], [574.0, 23558.0], [572.0, 25609.0], [571.0, 20467.0], [570.0, 25730.0], [568.0, 24274.0], [551.0, 24313.0], [550.0, 25580.0], [549.0, 22689.0], [548.0, 20368.0], [547.0, 25597.0], [546.0, 24309.0], [545.0, 22715.0], [544.0, 25659.0], [559.0, 22803.0], [558.0, 24342.0], [557.0, 20459.0], [556.0, 25709.0], [555.0, 25645.0], [554.0, 22735.0], [553.0, 20432.0], [552.0, 25688.0], [567.0, 25733.0], [566.0, 25567.0], [565.0, 20470.0], [564.0, 22708.0], [563.0, 25640.0], [562.0, 20405.0], [561.0, 24341.0], [560.0, 25636.0], [583.0, 11525.5], [578.0, 12406.0], [577.0, 10470.0], [576.0, 25582.0], [579.0, 11495.0], [580.0, 20506.0], [581.0, 8909.666666666666], [582.0, 13014.0], [584.0, 12371.5], [585.0, 10503.0], [586.0, 13040.0], [588.0, 22769.0], [587.0, 25671.0], [590.0, 25580.0], [589.0, 24293.0], [591.0, 25682.0], [607.0, 25661.0], [593.0, 22770.0], [592.0, 20436.0], [595.0, 20434.0], [594.0, 24269.0], [597.0, 25672.0], [596.0, 25518.0], [599.0, 20504.0], [598.0, 22726.0], [606.0, 25586.0], [605.0, 20499.0], [604.0, 24316.0], [603.0, 22794.0], [602.0, 25664.0], [601.0, 25592.0], [600.0, 24213.0], [632.0, 25640.0], [638.0, 20433.0], [634.0, 10530.0], [619.0, 10514.0], [618.0, 25637.0], [617.0, 25653.0], [616.0, 20470.0], [621.0, 22783.0], [620.0, 24330.0], [623.0, 24303.0], [609.0, 24305.0], [608.0, 22781.0], [611.0, 25543.0], [610.0, 20442.0], [613.0, 24277.0], [612.0, 25644.0], [615.0, 25621.0], [614.0, 22721.0], [622.0, 25665.0], [639.0, 24317.0], [625.0, 25572.0], [624.0, 22777.0], [627.0, 25639.0], [626.0, 20421.0], [629.0, 20475.0], [628.0, 25585.0], [631.0, 22715.0], [630.0, 24250.0], [637.0, 25630.0], [636.0, 22682.0], [635.0, 24318.0], [633.0, 25647.0], [668.0, 25584.0], [671.0, 22825.0], [657.0, 20525.0], [656.0, 24344.0], [659.0, 25510.0], [658.0, 25554.0], [661.0, 22741.0], [660.0, 20516.0], [670.0, 20559.0], [669.0, 25552.0], [667.0, 24271.0], [666.0, 20488.0], [665.0, 22769.0], [664.0, 25578.0], [655.0, 22791.0], [641.0, 22747.0], [640.0, 25574.0], [643.0, 25653.0], [642.0, 20495.0], [645.0, 22710.0], [644.0, 25576.0], [647.0, 20499.0], [646.0, 24276.0], [654.0, 25577.0], [653.0, 25627.0], [652.0, 20461.0], [651.0, 24283.0], [650.0, 22722.0], [649.0, 25626.0], [648.0, 25642.0], [663.0, 25611.0], [662.0, 24265.0], [700.0, 25498.0], [699.0, 7080.0], [703.0, 25543.0], [689.0, 25520.0], [688.0, 20512.0], [691.0, 22805.0], [690.0, 25510.0], [693.0, 25572.0], [692.0, 24354.0], [702.0, 24402.0], [701.0, 22852.0], [698.0, 24309.0], [697.0, 22808.0], [696.0, 25566.0], [687.0, 24352.0], [673.0, 20531.0], [672.0, 24341.0], [675.0, 25498.0], [674.0, 25474.0], [677.0, 24342.0], [676.0, 22796.0], [679.0, 25530.0], [678.0, 20468.0], [686.0, 25531.0], [685.0, 25542.0], [684.0, 20528.0], [683.0, 22899.0], [682.0, 24280.0], [681.0, 22801.0], [680.0, 25536.0], [695.0, 25505.0], [694.0, 20443.0], [732.0, 25411.0], [735.0, 22767.0], [721.0, 24433.0], [720.0, 20447.0], [723.0, 22786.0], [722.0, 25438.0], [725.0, 20449.0], [724.0, 25615.0], [734.0, 25546.0], [733.0, 20419.0], [731.0, 24468.0], [730.0, 22712.0], [729.0, 25531.0], [728.0, 20370.0], [719.0, 25618.0], [705.0, 25487.0], [704.0, 20456.0], [707.0, 24417.0], [706.0, 22839.0], [709.0, 20452.0], [708.0, 25601.0], [711.0, 24369.0], [710.0, 25604.0], [718.0, 22818.0], [717.0, 25439.0], [716.0, 24424.0], [715.0, 25547.0], [714.0, 20391.0], [713.0, 22763.0], [712.0, 25452.0], [727.0, 25411.0], [726.0, 24409.0], [760.0, 25439.0], [765.0, 25503.0], [737.0, 13031.0], [736.0, 24456.0], [739.0, 25609.0], [738.0, 20400.0], [741.0, 24403.0], [740.0, 22765.0], [743.0, 20331.0], [742.0, 25437.0], [751.0, 22684.0], [750.0, 25582.0], [749.0, 22443.0], [747.0, 25435.0], [746.0, 22697.0], [745.0, 24500.0], [744.0, 25566.0], [767.0, 21523.5], [753.0, 25421.0], [752.0, 20386.0], [755.0, 24458.0], [754.0, 25652.0], [757.0, 25636.0], [756.0, 22750.0], [763.0, 24544.0], [762.0, 20359.0], [761.0, 22687.0], [759.0, 24460.0], [758.0, 20318.0], [796.0, 25426.0], [799.0, 22624.0], [784.0, 25617.0], [786.0, 22708.0], [785.0, 25434.0], [789.0, 20196.0], [788.0, 25087.0], [798.0, 25636.0], [797.0, 20241.0], [795.0, 24624.0], [794.0, 25565.0], [793.0, 22640.0], [792.0, 20233.0], [783.0, 22665.0], [769.0, 25425.0], [768.0, 25654.0], [771.0, 22735.0], [770.0, 24485.0], [773.0, 20281.0], [772.0, 25659.0], [775.0, 25364.0], [774.0, 24504.0], [782.0, 20265.0], [781.0, 24600.0], [780.0, 25429.0], [779.0, 25580.0], [778.0, 22674.0], [777.0, 22445.0], [791.0, 25363.0], [790.0, 24630.0], [829.0, 20192.0], [820.0, 11709.5], [819.0, 25625.0], [818.0, 22712.0], [817.0, 25425.0], [816.0, 24610.0], [821.0, 24670.0], [823.0, 25433.0], [822.0, 20161.0], [831.0, 22732.0], [830.0, 25649.0], [828.0, 25432.0], [827.0, 22671.0], [826.0, 24684.0], [825.0, 25578.0], [824.0, 20218.0], [807.0, 20121.0], [806.0, 24653.0], [805.0, 25430.0], [804.0, 20151.0], [803.0, 25633.0], [802.0, 22705.0], [801.0, 24578.0], [800.0, 25417.0], [815.0, 20216.0], [814.0, 25633.0], [813.0, 22641.0], [812.0, 25437.0], [811.0, 20185.0], [810.0, 22624.0], [809.0, 24670.0], [808.0, 25586.0], [860.0, 25620.0], [845.0, 710.0], [844.0, 22798.0], [843.0, 20131.0], [842.0, 24651.0], [841.0, 25592.0], [840.0, 22717.0], [846.0, 25486.5], [863.0, 24593.0], [849.0, 20105.0], [848.0, 24584.0], [851.0, 25364.0], [850.0, 25659.0], [853.0, 20150.0], [852.0, 24668.0], [862.0, 25390.0], [861.0, 22872.0], [859.0, 20131.0], [858.0, 23733.0], [856.0, 25617.0], [839.0, 20144.0], [838.0, 25415.0], [837.0, 24678.0], [836.0, 20115.0], [835.0, 22747.0], [834.0, 25641.0], [833.0, 25429.0], [832.0, 24634.0], [847.0, 22799.0], [855.0, 25363.0], [854.0, 22769.0], [892.0, 24659.0], [869.0, 13213.5], [879.0, 12669.0], [864.0, 25682.0], [866.0, 25376.0], [865.0, 20054.0], [868.0, 24568.0], [867.0, 22787.0], [878.0, 25714.0], [877.0, 25371.0], [876.0, 22837.0], [875.0, 25624.0], [874.0, 20103.0], [873.0, 22790.0], [872.0, 24627.0], [895.0, 20053.0], [881.0, 25384.0], [880.0, 20051.0], [883.0, 22795.0], [882.0, 24598.0], [885.0, 20130.0], [884.0, 25712.0], [887.0, 22796.0], [886.0, 25364.0], [894.0, 25684.0], [893.0, 25270.0], [891.0, 24248.5], [889.0, 20137.0], [888.0, 24620.0], [871.0, 25364.0], [870.0, 20100.0], [924.0, 25287.0], [897.0, 13052.0], [896.0, 22814.0], [900.0, 25658.0], [899.0, 22384.0], [911.0, 22849.0], [910.0, 25652.0], [909.0, 25250.0], [908.0, 20143.0], [907.0, 25595.0], [906.0, 24673.0], [905.0, 22914.0], [904.0, 25348.0], [901.0, 11816.0], [927.0, 24645.0], [913.0, 24632.0], [912.0, 20172.0], [915.0, 22848.0], [914.0, 25314.0], [917.0, 25652.0], [916.0, 24696.0], [919.0, 24696.0], [918.0, 20240.0], [926.0, 20237.0], [925.0, 22909.0], [923.0, 25600.0], [922.0, 24112.5], [920.0, 20265.0], [903.0, 20193.0], [902.0, 24678.0], [954.0, 22763.5], [958.0, 20375.0], [959.0, 25178.0], [945.0, 24780.0], [944.0, 20349.0], [947.0, 22836.0], [946.0, 25695.0], [949.0, 24750.0], [948.0, 20347.0], [957.0, 22927.0], [956.0, 24678.0], [955.0, 25623.0], [952.0, 22919.0], [935.0, 20299.0], [934.0, 24784.0], [933.0, 22847.0], [932.0, 25292.0], [931.0, 25652.0], [930.0, 24726.0], [929.0, 20302.0], [928.0, 25622.0], [943.0, 25226.0], [942.0, 25672.0], [941.0, 22882.0], [940.0, 24740.0], [939.0, 20269.0], [938.0, 25243.0], [937.0, 25629.0], [936.0, 22904.0], [951.0, 25621.0], [950.0, 25224.0], [984.0, 20413.0], [989.0, 25617.0], [986.0, 12983.0], [970.0, 10620.5], [969.0, 25146.0], [968.0, 25608.0], [972.0, 22952.0], [971.0, 24695.0], [975.0, 22762.5], [961.0, 25677.0], [960.0, 20402.0], [963.0, 22879.0], [962.0, 24743.0], [965.0, 25178.0], [964.0, 24752.0], [967.0, 22889.0], [966.0, 20359.0], [973.0, 25620.0], [990.0, 25116.0], [977.0, 24695.0], [976.0, 25707.0], [979.0, 25704.0], [978.0, 22905.0], [981.0, 20340.0], [980.0, 24726.0], [988.0, 24626.0], [987.0, 20435.0], [985.0, 23005.0], [983.0, 25116.0], [982.0, 22940.0], [996.0, 24668.0], [1000.0, 18684.60577303283], [999.0, 23541.5], [998.0, 23854.5], [997.0, 23743.666666666668], [995.0, 22958.0], [994.0, 20405.0], [993.0, 25674.0], [992.0, 23786.5], [1.0, 26483.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[857.3116226838841, 19984.42925322857]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6654.666666666667, "minX": 1.75239192E12, "maxY": 8324.966666666667, "series": [{"data": [[1.75239192E12, 8324.966666666667], [1.75239198E12, 7880.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75239192E12, 6999.666666666667], [1.75239198E12, 6654.666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239198E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16454.94194961664, "minX": 1.75239192E12, "maxY": 23696.89688940093, "series": [{"data": [[1.75239192E12, 16454.94194961664], [1.75239198E12, 23696.89688940093]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239198E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 16454.901971522453, "minX": 1.75239192E12, "maxY": 23696.87615207373, "series": [{"data": [[1.75239192E12, 16454.901971522453], [1.75239198E12, 23696.87615207373]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239198E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75239192E12, "maxY": 11.732749178532277, "series": [{"data": [[1.75239192E12, 11.732749178532277], [1.75239198E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239198E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 226.0, "minX": 1.75239192E12, "maxY": 34881.0, "series": [{"data": [[1.75239192E12, 34881.0], [1.75239198E12, 26666.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75239192E12, 26175.6], [1.75239198E12, 25955.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75239192E12, 32931.91], [1.75239198E12, 26599.52]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75239192E12, 27657.199999999997], [1.75239198E12, 26487.45]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75239192E12, 226.0], [1.75239198E12, 19557.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75239192E12, 20064.5], [1.75239198E12, 24184.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239198E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3329.0, "minX": 1.0, "maxY": 26561.5, "series": [{"data": [[33.0, 25036.0], [35.0, 23953.0], [37.0, 23991.0], [9.0, 26561.5], [39.0, 24274.0], [41.0, 23249.0], [40.0, 24027.5], [42.0, 23624.5], [43.0, 22766.0], [44.0, 20276.0], [45.0, 23078.0], [46.0, 6444.5], [47.0, 3329.0], [48.0, 6379.5], [1.0, 26483.0], [18.0, 25716.5], [27.0, 24977.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3329.0, "minX": 1.0, "maxY": 26561.5, "series": [{"data": [[33.0, 25036.0], [35.0, 23953.0], [37.0, 23991.0], [9.0, 26561.5], [39.0, 24274.0], [41.0, 23249.0], [40.0, 24027.5], [42.0, 23624.5], [43.0, 22766.0], [44.0, 20276.0], [45.0, 23078.0], [46.0, 6444.5], [47.0, 3329.0], [48.0, 6379.5], [1.0, 26483.0], [18.0, 25716.5], [27.0, 24977.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 12.266666666666667, "minX": 1.75239192E12, "maxY": 47.1, "series": [{"data": [[1.75239192E12, 47.1], [1.75239198E12, 12.266666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239198E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 28.933333333333334, "minX": 1.75239192E12, "maxY": 30.433333333333334, "series": [{"data": [[1.75239192E12, 30.433333333333334], [1.75239198E12, 28.933333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239198E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 28.933333333333334, "minX": 1.75239192E12, "maxY": 30.433333333333334, "series": [{"data": [[1.75239192E12, 30.433333333333334], [1.75239198E12, 28.933333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239198E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 28.933333333333334, "minX": 1.75239192E12, "maxY": 30.433333333333334, "series": [{"data": [[1.75239192E12, 30.433333333333334], [1.75239198E12, 28.933333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239198E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

