/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 101.0, "minX": 0.0, "maxY": 30215.0, "series": [{"data": [[0.0, 101.0], [0.1, 175.0], [0.2, 207.0], [0.3, 298.0], [0.4, 365.0], [0.5, 461.0], [0.6, 511.0], [0.7, 628.0], [0.8, 704.0], [0.9, 781.0], [1.0, 892.0], [1.1, 980.0], [1.2, 1058.0], [1.3, 1097.0], [1.4, 1179.0], [1.5, 1327.0], [1.6, 1390.0], [1.7, 1447.0], [1.8, 1550.0], [1.9, 1649.0], [2.0, 1736.0], [2.1, 1807.0], [2.2, 1877.0], [2.3, 1979.0], [2.4, 2056.0], [2.5, 2083.0], [2.6, 2152.0], [2.7, 2248.0], [2.8, 2329.0], [2.9, 2420.0], [3.0, 2463.0], [3.1, 2517.0], [3.2, 2530.0], [3.3, 2550.0], [3.4, 2574.0], [3.5, 2594.0], [3.6, 2602.0], [3.7, 2618.0], [3.8, 2627.0], [3.9, 2632.0], [4.0, 2665.0], [4.1, 2675.0], [4.2, 2694.0], [4.3, 2714.0], [4.4, 2723.0], [4.5, 2762.0], [4.6, 2812.0], [4.7, 2845.0], [4.8, 2962.0], [4.9, 3050.0], [5.0, 3108.0], [5.1, 3135.0], [5.2, 3143.0], [5.3, 3153.0], [5.4, 3171.0], [5.5, 3188.0], [5.6, 3193.0], [5.7, 3202.0], [5.8, 3248.0], [5.9, 3272.0], [6.0, 3275.0], [6.1, 3292.0], [6.2, 3298.0], [6.3, 3308.0], [6.4, 3328.0], [6.5, 3358.0], [6.6, 3362.0], [6.7, 3374.0], [6.8, 3409.0], [6.9, 3427.0], [7.0, 3454.0], [7.1, 3471.0], [7.2, 3518.0], [7.3, 3534.0], [7.4, 3581.0], [7.5, 3607.0], [7.6, 3629.0], [7.7, 3673.0], [7.8, 3682.0], [7.9, 3689.0], [8.0, 3699.0], [8.1, 3701.0], [8.2, 3716.0], [8.3, 3721.0], [8.4, 3728.0], [8.5, 3730.0], [8.6, 3738.0], [8.7, 3771.0], [8.8, 3918.0], [8.9, 4088.0], [9.0, 4137.0], [9.1, 4169.0], [9.2, 4203.0], [9.3, 4209.0], [9.4, 4227.0], [9.5, 4241.0], [9.6, 4269.0], [9.7, 4288.0], [9.8, 4299.0], [9.9, 4313.0], [10.0, 4319.0], [10.1, 4339.0], [10.2, 4354.0], [10.3, 4360.0], [10.4, 4369.0], [10.5, 4381.0], [10.6, 4395.0], [10.7, 4408.0], [10.8, 4420.0], [10.9, 4466.0], [11.0, 4474.0], [11.1, 4778.0], [11.2, 5222.0], [11.3, 5545.0], [11.4, 5981.0], [11.5, 6297.0], [11.6, 6616.0], [11.7, 6997.0], [11.8, 7398.0], [11.9, 7654.0], [12.0, 7938.0], [12.1, 7967.0], [12.2, 7979.0], [12.3, 8018.0], [12.4, 8036.0], [12.5, 8057.0], [12.6, 8134.0], [12.7, 8164.0], [12.8, 8172.0], [12.9, 8176.0], [13.0, 8208.0], [13.1, 8212.0], [13.2, 8218.0], [13.3, 8223.0], [13.4, 8430.0], [13.5, 8939.0], [13.6, 9315.0], [13.7, 9632.0], [13.8, 9794.0], [13.9, 9911.0], [14.0, 10163.0], [14.1, 10385.0], [14.2, 10530.0], [14.3, 10728.0], [14.4, 10820.0], [14.5, 10953.0], [14.6, 11106.0], [14.7, 11204.0], [14.8, 11370.0], [14.9, 11534.0], [15.0, 11632.0], [15.1, 11813.0], [15.2, 11909.0], [15.3, 12065.0], [15.4, 12225.0], [15.5, 12363.0], [15.6, 12439.0], [15.7, 12577.0], [15.8, 12672.0], [15.9, 12755.0], [16.0, 12852.0], [16.1, 12925.0], [16.2, 13014.0], [16.3, 13110.0], [16.4, 13226.0], [16.5, 13321.0], [16.6, 13388.0], [16.7, 13479.0], [16.8, 13577.0], [16.9, 13645.0], [17.0, 13717.0], [17.1, 13797.0], [17.2, 13880.0], [17.3, 13971.0], [17.4, 14066.0], [17.5, 14119.0], [17.6, 14206.0], [17.7, 14310.0], [17.8, 14363.0], [17.9, 14444.0], [18.0, 14525.0], [18.1, 14587.0], [18.2, 14664.0], [18.3, 14811.0], [18.4, 14853.0], [18.5, 14926.0], [18.6, 15015.0], [18.7, 15045.0], [18.8, 15143.0], [18.9, 15235.0], [19.0, 15310.0], [19.1, 15413.0], [19.2, 15500.0], [19.3, 15585.0], [19.4, 15632.0], [19.5, 15704.0], [19.6, 15842.0], [19.7, 15869.0], [19.8, 15960.0], [19.9, 16002.0], [20.0, 16090.0], [20.1, 16164.0], [20.2, 16261.0], [20.3, 16292.0], [20.4, 16350.0], [20.5, 16426.0], [20.6, 16539.0], [20.7, 16598.0], [20.8, 16684.0], [20.9, 16732.0], [21.0, 16841.0], [21.1, 16910.0], [21.2, 16950.0], [21.3, 17021.0], [21.4, 17141.0], [21.5, 17173.0], [21.6, 17265.0], [21.7, 17321.0], [21.8, 17461.0], [21.9, 17480.0], [22.0, 17572.0], [22.1, 17633.0], [22.2, 17714.0], [22.3, 17813.0], [22.4, 17882.0], [22.5, 17931.0], [22.6, 18040.0], [22.7, 18138.0], [22.8, 18198.0], [22.9, 18280.0], [23.0, 18355.0], [23.1, 18438.0], [23.2, 18543.0], [23.3, 18589.0], [23.4, 18689.0], [23.5, 18757.0], [23.6, 18865.0], [23.7, 18944.0], [23.8, 19024.0], [23.9, 19093.0], [24.0, 19193.0], [24.1, 19246.0], [24.2, 19342.0], [24.3, 19391.0], [24.4, 19488.0], [24.5, 19582.0], [24.6, 19670.0], [24.7, 19746.0], [24.8, 19850.0], [24.9, 19940.0], [25.0, 19961.0], [25.1, 20079.0], [25.2, 20169.0], [25.3, 20218.0], [25.4, 20303.0], [25.5, 20423.0], [25.6, 20501.0], [25.7, 20568.0], [25.8, 20661.0], [25.9, 20719.0], [26.0, 20818.0], [26.1, 20916.0], [26.2, 20934.0], [26.3, 20957.0], [26.4, 20966.0], [26.5, 20978.0], [26.6, 20986.0], [26.7, 20998.0], [26.8, 21005.0], [26.9, 21014.0], [27.0, 21018.0], [27.1, 21021.0], [27.2, 21023.0], [27.3, 21026.0], [27.4, 21036.0], [27.5, 21039.0], [27.6, 21050.0], [27.7, 21057.0], [27.8, 21058.0], [27.9, 21063.0], [28.0, 21066.0], [28.1, 21068.0], [28.2, 21072.0], [28.3, 21076.0], [28.4, 21078.0], [28.5, 21082.0], [28.6, 21084.0], [28.7, 21085.0], [28.8, 21090.0], [28.9, 21092.0], [29.0, 21095.0], [29.1, 21096.0], [29.2, 21100.0], [29.3, 21104.0], [29.4, 21108.0], [29.5, 21110.0], [29.6, 21111.0], [29.7, 21113.0], [29.8, 21117.0], [29.9, 21120.0], [30.0, 21122.0], [30.1, 21127.0], [30.2, 21129.0], [30.3, 21130.0], [30.4, 21131.0], [30.5, 21132.0], [30.6, 21134.0], [30.7, 21137.0], [30.8, 21140.0], [30.9, 21141.0], [31.0, 21142.0], [31.1, 21144.0], [31.2, 21145.0], [31.3, 21147.0], [31.4, 21147.0], [31.5, 21147.0], [31.6, 21148.0], [31.7, 21150.0], [31.8, 21151.0], [31.9, 21155.0], [32.0, 21157.0], [32.1, 21157.0], [32.2, 21161.0], [32.3, 21163.0], [32.4, 21165.0], [32.5, 21168.0], [32.6, 21173.0], [32.7, 21174.0], [32.8, 21177.0], [32.9, 21181.0], [33.0, 21184.0], [33.1, 21186.0], [33.2, 21188.0], [33.3, 21192.0], [33.4, 21192.0], [33.5, 21194.0], [33.6, 21196.0], [33.7, 21198.0], [33.8, 21199.0], [33.9, 21201.0], [34.0, 21204.0], [34.1, 21207.0], [34.2, 21210.0], [34.3, 21211.0], [34.4, 21212.0], [34.5, 21213.0], [34.6, 21214.0], [34.7, 21215.0], [34.8, 21216.0], [34.9, 21218.0], [35.0, 21220.0], [35.1, 21221.0], [35.2, 21227.0], [35.3, 21228.0], [35.4, 21231.0], [35.5, 21232.0], [35.6, 21236.0], [35.7, 21240.0], [35.8, 21246.0], [35.9, 21252.0], [36.0, 21253.0], [36.1, 21254.0], [36.2, 21256.0], [36.3, 21257.0], [36.4, 21262.0], [36.5, 21263.0], [36.6, 21266.0], [36.7, 21270.0], [36.8, 21272.0], [36.9, 21279.0], [37.0, 21283.0], [37.1, 21284.0], [37.2, 21291.0], [37.3, 21297.0], [37.4, 21299.0], [37.5, 21301.0], [37.6, 21307.0], [37.7, 21309.0], [37.8, 21316.0], [37.9, 21317.0], [38.0, 21324.0], [38.1, 21325.0], [38.2, 21329.0], [38.3, 21330.0], [38.4, 21333.0], [38.5, 21349.0], [38.6, 21350.0], [38.7, 21356.0], [38.8, 21365.0], [38.9, 21376.0], [39.0, 21381.0], [39.1, 21390.0], [39.2, 21412.0], [39.3, 21415.0], [39.4, 21421.0], [39.5, 21423.0], [39.6, 21428.0], [39.7, 21430.0], [39.8, 21436.0], [39.9, 21441.0], [40.0, 21446.0], [40.1, 21454.0], [40.2, 21462.0], [40.3, 21475.0], [40.4, 21479.0], [40.5, 21487.0], [40.6, 21512.0], [40.7, 21522.0], [40.8, 21532.0], [40.9, 21541.0], [41.0, 21553.0], [41.1, 21557.0], [41.2, 21570.0], [41.3, 21588.0], [41.4, 21594.0], [41.5, 21595.0], [41.6, 21599.0], [41.7, 21602.0], [41.8, 21608.0], [41.9, 21614.0], [42.0, 21619.0], [42.1, 21625.0], [42.2, 21628.0], [42.3, 21630.0], [42.4, 21632.0], [42.5, 21634.0], [42.6, 21638.0], [42.7, 21642.0], [42.8, 21646.0], [42.9, 21658.0], [43.0, 21659.0], [43.1, 21662.0], [43.2, 21667.0], [43.3, 21673.0], [43.4, 21675.0], [43.5, 21682.0], [43.6, 21713.0], [43.7, 21748.0], [43.8, 21791.0], [43.9, 21819.0], [44.0, 21834.0], [44.1, 21867.0], [44.2, 21910.0], [44.3, 21939.0], [44.4, 21965.0], [44.5, 21968.0], [44.6, 21981.0], [44.7, 21988.0], [44.8, 21994.0], [44.9, 21995.0], [45.0, 22007.0], [45.1, 22011.0], [45.2, 22021.0], [45.3, 22025.0], [45.4, 22032.0], [45.5, 22036.0], [45.6, 22038.0], [45.7, 22042.0], [45.8, 22048.0], [45.9, 22050.0], [46.0, 22053.0], [46.1, 22054.0], [46.2, 22061.0], [46.3, 22063.0], [46.4, 22065.0], [46.5, 22068.0], [46.6, 22069.0], [46.7, 22069.0], [46.8, 22070.0], [46.9, 22075.0], [47.0, 22080.0], [47.1, 22082.0], [47.2, 22084.0], [47.3, 22085.0], [47.4, 22086.0], [47.5, 22090.0], [47.6, 22092.0], [47.7, 22094.0], [47.8, 22096.0], [47.9, 22099.0], [48.0, 22104.0], [48.1, 22106.0], [48.2, 22109.0], [48.3, 22111.0], [48.4, 22113.0], [48.5, 22115.0], [48.6, 22117.0], [48.7, 22119.0], [48.8, 22120.0], [48.9, 22121.0], [49.0, 22123.0], [49.1, 22127.0], [49.2, 22130.0], [49.3, 22130.0], [49.4, 22132.0], [49.5, 22133.0], [49.6, 22135.0], [49.7, 22138.0], [49.8, 22140.0], [49.9, 22141.0], [50.0, 22145.0], [50.1, 22148.0], [50.2, 22151.0], [50.3, 22152.0], [50.4, 22154.0], [50.5, 22158.0], [50.6, 22160.0], [50.7, 22162.0], [50.8, 22164.0], [50.9, 22166.0], [51.0, 22169.0], [51.1, 22170.0], [51.2, 22174.0], [51.3, 22177.0], [51.4, 22179.0], [51.5, 22181.0], [51.6, 22182.0], [51.7, 22184.0], [51.8, 22184.0], [51.9, 22186.0], [52.0, 22187.0], [52.1, 22188.0], [52.2, 22189.0], [52.3, 22191.0], [52.4, 22192.0], [52.5, 22194.0], [52.6, 22197.0], [52.7, 22198.0], [52.8, 22200.0], [52.9, 22201.0], [53.0, 22202.0], [53.1, 22205.0], [53.2, 22207.0], [53.3, 22209.0], [53.4, 22211.0], [53.5, 22213.0], [53.6, 22213.0], [53.7, 22215.0], [53.8, 22216.0], [53.9, 22218.0], [54.0, 22221.0], [54.1, 22223.0], [54.2, 22227.0], [54.3, 22229.0], [54.4, 22231.0], [54.5, 22234.0], [54.6, 22236.0], [54.7, 22240.0], [54.8, 22241.0], [54.9, 22244.0], [55.0, 22246.0], [55.1, 22247.0], [55.2, 22249.0], [55.3, 22251.0], [55.4, 22253.0], [55.5, 22254.0], [55.6, 22255.0], [55.7, 22256.0], [55.8, 22257.0], [55.9, 22260.0], [56.0, 22262.0], [56.1, 22263.0], [56.2, 22265.0], [56.3, 22269.0], [56.4, 22272.0], [56.5, 22273.0], [56.6, 22275.0], [56.7, 22275.0], [56.8, 22277.0], [56.9, 22278.0], [57.0, 22280.0], [57.1, 22282.0], [57.2, 22283.0], [57.3, 22285.0], [57.4, 22286.0], [57.5, 22288.0], [57.6, 22291.0], [57.7, 22292.0], [57.8, 22294.0], [57.9, 22296.0], [58.0, 22298.0], [58.1, 22299.0], [58.2, 22300.0], [58.3, 22301.0], [58.4, 22304.0], [58.5, 22307.0], [58.6, 22308.0], [58.7, 22310.0], [58.8, 22310.0], [58.9, 22311.0], [59.0, 22312.0], [59.1, 22312.0], [59.2, 22313.0], [59.3, 22315.0], [59.4, 22316.0], [59.5, 22317.0], [59.6, 22318.0], [59.7, 22319.0], [59.8, 22320.0], [59.9, 22321.0], [60.0, 22322.0], [60.1, 22325.0], [60.2, 22326.0], [60.3, 22327.0], [60.4, 22329.0], [60.5, 22329.0], [60.6, 22331.0], [60.7, 22331.0], [60.8, 22332.0], [60.9, 22333.0], [61.0, 22334.0], [61.1, 22334.0], [61.2, 22335.0], [61.3, 22336.0], [61.4, 22337.0], [61.5, 22338.0], [61.6, 22339.0], [61.7, 22340.0], [61.8, 22341.0], [61.9, 22342.0], [62.0, 22343.0], [62.1, 22343.0], [62.2, 22344.0], [62.3, 22346.0], [62.4, 22346.0], [62.5, 22348.0], [62.6, 22348.0], [62.7, 22350.0], [62.8, 22350.0], [62.9, 22352.0], [63.0, 22353.0], [63.1, 22353.0], [63.2, 22355.0], [63.3, 22358.0], [63.4, 22359.0], [63.5, 22361.0], [63.6, 22364.0], [63.7, 22365.0], [63.8, 22366.0], [63.9, 22367.0], [64.0, 22371.0], [64.1, 22372.0], [64.2, 22373.0], [64.3, 22375.0], [64.4, 22376.0], [64.5, 22377.0], [64.6, 22378.0], [64.7, 22380.0], [64.8, 22382.0], [64.9, 22385.0], [65.0, 22386.0], [65.1, 22387.0], [65.2, 22389.0], [65.3, 22392.0], [65.4, 22394.0], [65.5, 22395.0], [65.6, 22396.0], [65.7, 22399.0], [65.8, 22400.0], [65.9, 22401.0], [66.0, 22403.0], [66.1, 22403.0], [66.2, 22406.0], [66.3, 22409.0], [66.4, 22410.0], [66.5, 22412.0], [66.6, 22414.0], [66.7, 22415.0], [66.8, 22416.0], [66.9, 22418.0], [67.0, 22419.0], [67.1, 22420.0], [67.2, 22421.0], [67.3, 22422.0], [67.4, 22423.0], [67.5, 22425.0], [67.6, 22426.0], [67.7, 22427.0], [67.8, 22429.0], [67.9, 22432.0], [68.0, 22434.0], [68.1, 22435.0], [68.2, 22436.0], [68.3, 22439.0], [68.4, 22440.0], [68.5, 22441.0], [68.6, 22442.0], [68.7, 22445.0], [68.8, 22447.0], [68.9, 22449.0], [69.0, 22451.0], [69.1, 22453.0], [69.2, 22454.0], [69.3, 22456.0], [69.4, 22457.0], [69.5, 22458.0], [69.6, 22459.0], [69.7, 22460.0], [69.8, 22461.0], [69.9, 22464.0], [70.0, 22466.0], [70.1, 22469.0], [70.2, 22472.0], [70.3, 22474.0], [70.4, 22475.0], [70.5, 22477.0], [70.6, 22480.0], [70.7, 22481.0], [70.8, 22482.0], [70.9, 22483.0], [71.0, 22484.0], [71.1, 22485.0], [71.2, 22486.0], [71.3, 22488.0], [71.4, 22490.0], [71.5, 22494.0], [71.6, 22497.0], [71.7, 22498.0], [71.8, 22500.0], [71.9, 22502.0], [72.0, 22504.0], [72.1, 22507.0], [72.2, 22507.0], [72.3, 22509.0], [72.4, 22511.0], [72.5, 22515.0], [72.6, 22516.0], [72.7, 22518.0], [72.8, 22520.0], [72.9, 22520.0], [73.0, 22527.0], [73.1, 22529.0], [73.2, 22530.0], [73.3, 22531.0], [73.4, 22531.0], [73.5, 22534.0], [73.6, 22537.0], [73.7, 22539.0], [73.8, 22542.0], [73.9, 22543.0], [74.0, 22546.0], [74.1, 22549.0], [74.2, 22551.0], [74.3, 22555.0], [74.4, 22558.0], [74.5, 22559.0], [74.6, 22561.0], [74.7, 22567.0], [74.8, 22568.0], [74.9, 22572.0], [75.0, 22572.0], [75.1, 22574.0], [75.2, 22576.0], [75.3, 22578.0], [75.4, 22578.0], [75.5, 22582.0], [75.6, 22584.0], [75.7, 22588.0], [75.8, 22594.0], [75.9, 22598.0], [76.0, 22600.0], [76.1, 22601.0], [76.2, 22604.0], [76.3, 22607.0], [76.4, 22608.0], [76.5, 22610.0], [76.6, 22613.0], [76.7, 22615.0], [76.8, 22617.0], [76.9, 22622.0], [77.0, 22625.0], [77.1, 22626.0], [77.2, 22627.0], [77.3, 22628.0], [77.4, 22629.0], [77.5, 22629.0], [77.6, 22631.0], [77.7, 22633.0], [77.8, 22634.0], [77.9, 22635.0], [78.0, 22637.0], [78.1, 22639.0], [78.2, 22641.0], [78.3, 22644.0], [78.4, 22648.0], [78.5, 22653.0], [78.6, 22654.0], [78.7, 22656.0], [78.8, 22659.0], [78.9, 22661.0], [79.0, 22664.0], [79.1, 22667.0], [79.2, 22670.0], [79.3, 22676.0], [79.4, 22678.0], [79.5, 22680.0], [79.6, 22685.0], [79.7, 22688.0], [79.8, 22689.0], [79.9, 22691.0], [80.0, 22696.0], [80.1, 22700.0], [80.2, 22704.0], [80.3, 22704.0], [80.4, 22705.0], [80.5, 22707.0], [80.6, 22715.0], [80.7, 22717.0], [80.8, 22720.0], [80.9, 22724.0], [81.0, 22728.0], [81.1, 22735.0], [81.2, 22736.0], [81.3, 22739.0], [81.4, 22744.0], [81.5, 22748.0], [81.6, 22751.0], [81.7, 22753.0], [81.8, 22755.0], [81.9, 22764.0], [82.0, 22765.0], [82.1, 22770.0], [82.2, 22775.0], [82.3, 22777.0], [82.4, 22783.0], [82.5, 22790.0], [82.6, 22793.0], [82.7, 22795.0], [82.8, 22797.0], [82.9, 22801.0], [83.0, 22803.0], [83.1, 22808.0], [83.2, 22812.0], [83.3, 22816.0], [83.4, 22824.0], [83.5, 22829.0], [83.6, 22833.0], [83.7, 22837.0], [83.8, 22840.0], [83.9, 22842.0], [84.0, 22844.0], [84.1, 22850.0], [84.2, 22851.0], [84.3, 22855.0], [84.4, 22858.0], [84.5, 22860.0], [84.6, 22863.0], [84.7, 22865.0], [84.8, 22869.0], [84.9, 22873.0], [85.0, 22877.0], [85.1, 22880.0], [85.2, 22889.0], [85.3, 22892.0], [85.4, 22893.0], [85.5, 22897.0], [85.6, 22902.0], [85.7, 22907.0], [85.8, 22915.0], [85.9, 22919.0], [86.0, 22925.0], [86.1, 22929.0], [86.2, 22931.0], [86.3, 22936.0], [86.4, 22946.0], [86.5, 22956.0], [86.6, 22965.0], [86.7, 22974.0], [86.8, 22977.0], [86.9, 22998.0], [87.0, 23016.0], [87.1, 23022.0], [87.2, 23034.0], [87.3, 23043.0], [87.4, 23049.0], [87.5, 23057.0], [87.6, 23066.0], [87.7, 23072.0], [87.8, 23080.0], [87.9, 23092.0], [88.0, 23104.0], [88.1, 23119.0], [88.2, 23124.0], [88.3, 23132.0], [88.4, 23142.0], [88.5, 23148.0], [88.6, 23152.0], [88.7, 23155.0], [88.8, 23163.0], [88.9, 23173.0], [89.0, 23183.0], [89.1, 23184.0], [89.2, 23193.0], [89.3, 23201.0], [89.4, 23208.0], [89.5, 23211.0], [89.6, 23217.0], [89.7, 23225.0], [89.8, 23226.0], [89.9, 23229.0], [90.0, 23235.0], [90.1, 23242.0], [90.2, 23257.0], [90.3, 23263.0], [90.4, 23275.0], [90.5, 23286.0], [90.6, 23291.0], [90.7, 23303.0], [90.8, 23311.0], [90.9, 23314.0], [91.0, 23316.0], [91.1, 23329.0], [91.2, 23348.0], [91.3, 23357.0], [91.4, 23368.0], [91.5, 23378.0], [91.6, 23389.0], [91.7, 23402.0], [91.8, 23406.0], [91.9, 23413.0], [92.0, 23424.0], [92.1, 23428.0], [92.2, 23439.0], [92.3, 23443.0], [92.4, 23453.0], [92.5, 23467.0], [92.6, 23492.0], [92.7, 23508.0], [92.8, 23519.0], [92.9, 23526.0], [93.0, 23531.0], [93.1, 23534.0], [93.2, 23540.0], [93.3, 23547.0], [93.4, 23558.0], [93.5, 23562.0], [93.6, 23564.0], [93.7, 23572.0], [93.8, 23575.0], [93.9, 23583.0], [94.0, 23591.0], [94.1, 23611.0], [94.2, 23622.0], [94.3, 23630.0], [94.4, 23670.0], [94.5, 23740.0], [94.6, 23819.0], [94.7, 23888.0], [94.8, 23952.0], [94.9, 24028.0], [95.0, 24107.0], [95.1, 24168.0], [95.2, 24260.0], [95.3, 24358.0], [95.4, 24392.0], [95.5, 24510.0], [95.6, 24599.0], [95.7, 24643.0], [95.8, 24738.0], [95.9, 24810.0], [96.0, 24868.0], [96.1, 24937.0], [96.2, 25042.0], [96.3, 25126.0], [96.4, 25182.0], [96.5, 25274.0], [96.6, 25378.0], [96.7, 25429.0], [96.8, 25496.0], [96.9, 25560.0], [97.0, 25656.0], [97.1, 25730.0], [97.2, 25802.0], [97.3, 25908.0], [97.4, 26002.0], [97.5, 26056.0], [97.6, 26121.0], [97.7, 26222.0], [97.8, 26322.0], [97.9, 26354.0], [98.0, 26441.0], [98.1, 26522.0], [98.2, 26590.0], [98.3, 26686.0], [98.4, 26770.0], [98.5, 26844.0], [98.6, 26949.0], [98.7, 27063.0], [98.8, 27113.0], [98.9, 27216.0], [99.0, 27343.0], [99.1, 27429.0], [99.2, 27554.0], [99.3, 27701.0], [99.4, 27856.0], [99.5, 28147.0], [99.6, 28545.0], [99.7, 28910.0], [99.8, 29381.0], [99.9, 29849.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 280.0, "series": [{"data": [[100.0, 5.0], [200.0, 7.0], [300.0, 6.0], [400.0, 3.0], [500.0, 3.0], [600.0, 5.0], [700.0, 5.0], [800.0, 3.0], [900.0, 5.0], [1000.0, 6.0], [1100.0, 4.0], [1200.0, 3.0], [1300.0, 5.0], [1400.0, 4.0], [1500.0, 4.0], [1600.0, 4.0], [1700.0, 5.0], [1800.0, 5.0], [1900.0, 4.0], [2000.0, 6.0], [2100.0, 5.0], [2200.0, 5.0], [2300.0, 4.0], [2400.0, 7.0], [2500.0, 19.0], [2600.0, 24.0], [2700.0, 12.0], [2800.0, 6.0], [2900.0, 4.0], [3000.0, 5.0], [3100.0, 25.0], [3200.0, 22.0], [3300.0, 20.0], [3400.0, 14.0], [3500.0, 10.0], [3600.0, 21.0], [3700.0, 26.0], [3800.0, 1.0], [3900.0, 2.0], [4000.0, 4.0], [4100.0, 9.0], [4200.0, 24.0], [4300.0, 32.0], [4400.0, 13.0], [4500.0, 1.0], [4600.0, 1.0], [4700.0, 1.0], [4800.0, 2.0], [4900.0, 1.0], [5200.0, 1.0], [5300.0, 2.0], [5500.0, 1.0], [5600.0, 1.0], [5700.0, 1.0], [5800.0, 1.0], [5900.0, 1.0], [6000.0, 1.0], [6100.0, 1.0], [6200.0, 2.0], [6300.0, 1.0], [6500.0, 1.0], [6600.0, 1.0], [6700.0, 1.0], [6800.0, 1.0], [6900.0, 2.0], [7000.0, 1.0], [7200.0, 2.0], [7300.0, 1.0], [7500.0, 1.0], [7600.0, 2.0], [7700.0, 1.0], [7800.0, 2.0], [7900.0, 9.0], [8000.0, 11.0], [8100.0, 17.0], [8200.0, 13.0], [8300.0, 1.0], [8400.0, 1.0], [8500.0, 1.0], [8600.0, 1.0], [8700.0, 1.0], [8900.0, 1.0], [9000.0, 1.0], [9100.0, 1.0], [9200.0, 1.0], [9300.0, 2.0], [9400.0, 1.0], [9500.0, 1.0], [9600.0, 1.0], [9700.0, 3.0], [9800.0, 3.0], [9900.0, 1.0], [10000.0, 2.0], [10100.0, 2.0], [10200.0, 1.0], [10300.0, 3.0], [10400.0, 2.0], [10500.0, 3.0], [10600.0, 1.0], [10700.0, 3.0], [10800.0, 3.0], [10900.0, 3.0], [11000.0, 2.0], [11100.0, 3.0], [11200.0, 3.0], [11300.0, 2.0], [11400.0, 3.0], [11500.0, 2.0], [11600.0, 3.0], [11700.0, 2.0], [11800.0, 3.0], [11900.0, 3.0], [12000.0, 3.0], [12100.0, 2.0], [12200.0, 3.0], [12300.0, 3.0], [12400.0, 3.0], [12500.0, 3.0], [12600.0, 6.0], [12700.0, 3.0], [12800.0, 3.0], [12900.0, 3.0], [13000.0, 4.0], [13100.0, 6.0], [13200.0, 4.0], [13300.0, 5.0], [13400.0, 4.0], [13500.0, 4.0], [13600.0, 4.0], [13700.0, 6.0], [13800.0, 3.0], [13900.0, 4.0], [14000.0, 4.0], [14100.0, 6.0], [14200.0, 3.0], [14300.0, 6.0], [14400.0, 5.0], [14500.0, 5.0], [14600.0, 5.0], [14700.0, 2.0], [14800.0, 7.0], [14900.0, 4.0], [15000.0, 4.0], [15100.0, 5.0], [15200.0, 6.0], [15300.0, 3.0], [15400.0, 4.0], [15500.0, 7.0], [15700.0, 3.0], [15800.0, 7.0], [15600.0, 3.0], [15900.0, 6.0], [16000.0, 4.0], [16100.0, 6.0], [16200.0, 5.0], [16300.0, 6.0], [17200.0, 6.0], [16400.0, 3.0], [16600.0, 4.0], [16800.0, 4.0], [17000.0, 5.0], [17400.0, 6.0], [18200.0, 5.0], [17600.0, 5.0], [17800.0, 6.0], [18000.0, 4.0], [18400.0, 4.0], [19200.0, 7.0], [18600.0, 3.0], [18800.0, 4.0], [19000.0, 6.0], [19400.0, 4.0], [19600.0, 5.0], [19800.0, 4.0], [20000.0, 3.0], [20200.0, 5.0], [20400.0, 4.0], [20600.0, 6.0], [20800.0, 2.0], [21000.0, 91.0], [21200.0, 132.0], [21400.0, 49.0], [21600.0, 71.0], [21800.0, 13.0], [22000.0, 109.0], [22200.0, 198.0], [22400.0, 220.0], [22600.0, 150.0], [22800.0, 101.0], [23000.0, 38.0], [23200.0, 50.0], [23400.0, 34.0], [23600.0, 17.0], [23800.0, 5.0], [24000.0, 6.0], [24200.0, 5.0], [24400.0, 3.0], [24600.0, 5.0], [24800.0, 5.0], [25000.0, 5.0], [25200.0, 5.0], [25400.0, 6.0], [25600.0, 3.0], [25800.0, 4.0], [26000.0, 6.0], [26200.0, 4.0], [26400.0, 5.0], [26600.0, 4.0], [26800.0, 6.0], [27000.0, 4.0], [27200.0, 2.0], [27400.0, 3.0], [27600.0, 2.0], [27800.0, 2.0], [28200.0, 1.0], [28600.0, 1.0], [29000.0, 1.0], [29200.0, 1.0], [29400.0, 1.0], [29600.0, 1.0], [29800.0, 1.0], [30000.0, 1.0], [30200.0, 1.0], [16500.0, 6.0], [16700.0, 5.0], [16900.0, 7.0], [17100.0, 4.0], [17300.0, 4.0], [17500.0, 4.0], [17700.0, 4.0], [17900.0, 3.0], [18100.0, 6.0], [18300.0, 3.0], [18500.0, 7.0], [18700.0, 5.0], [18900.0, 4.0], [19100.0, 3.0], [19300.0, 4.0], [19500.0, 5.0], [19700.0, 4.0], [19900.0, 5.0], [20100.0, 5.0], [20300.0, 3.0], [20500.0, 5.0], [20700.0, 4.0], [20900.0, 25.0], [21100.0, 170.0], [21300.0, 66.0], [21500.0, 41.0], [21700.0, 9.0], [21900.0, 29.0], [22100.0, 178.0], [22300.0, 280.0], [22500.0, 157.0], [22700.0, 102.0], [22900.0, 49.0], [23100.0, 49.0], [23300.0, 38.0], [23500.0, 52.0], [23700.0, 4.0], [23900.0, 4.0], [24100.0, 4.0], [24300.0, 6.0], [24500.0, 5.0], [24700.0, 4.0], [24900.0, 5.0], [25100.0, 6.0], [25300.0, 3.0], [25500.0, 5.0], [25700.0, 5.0], [25900.0, 4.0], [26100.0, 5.0], [26300.0, 5.0], [26500.0, 5.0], [26700.0, 4.0], [26900.0, 3.0], [27100.0, 4.0], [27300.0, 4.0], [27500.0, 3.0], [27700.0, 3.0], [27900.0, 3.0], [28100.0, 2.0], [28300.0, 1.0], [28500.0, 1.0], [28700.0, 1.0], [28900.0, 1.0], [29100.0, 1.0], [29300.0, 1.0], [29700.0, 1.0], [30100.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 30200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3615.0, "series": [{"data": [[0.0, 18.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 43.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3615.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 54.5, "minX": 1.75239168E12, "maxY": 979.5277136258662, "series": [{"data": [[1.75239168E12, 979.5277136258662], [1.75239174E12, 853.0957486136791], [1.7523918E12, 54.5]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523918E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3538.1428571428573, "minX": 1.0, "maxY": 22931.0, "series": [{"data": [[2.0, 22341.0], [3.0, 22528.0], [4.0, 22312.0], [5.0, 22376.0], [6.0, 22459.0], [7.0, 22449.0], [8.0, 22181.0], [9.0, 22321.0], [10.0, 22508.0], [11.0, 22161.0], [12.0, 22310.0], [13.0, 22171.0], [14.0, 22335.0], [15.0, 22451.0], [16.0, 22443.0], [17.0, 22160.0], [18.0, 22304.0], [19.0, 22474.0], [20.0, 22300.0], [21.0, 22140.0], [22.0, 22350.0], [23.0, 22426.0], [24.0, 22107.0], [25.0, 21356.0], [26.0, 22435.0], [27.0, 22484.0], [28.0, 21423.0], [29.0, 22099.0], [30.0, 22249.0], [31.0, 21455.0], [33.0, 22294.0], [32.0, 21307.0], [35.0, 22419.0], [34.0, 22089.0], [37.0, 21306.0], [36.0, 21461.0], [39.0, 22452.0], [38.0, 22343.0], [41.0, 21454.0], [40.0, 22084.0], [43.0, 22320.0], [42.0, 22507.0], [45.0, 22084.0], [44.0, 21214.0], [47.0, 22512.0], [46.0, 21452.0], [49.0, 21479.0], [48.0, 21240.0], [51.0, 22254.0], [50.0, 22053.0], [53.0, 22049.0], [52.0, 21238.0], [55.0, 22315.0], [54.0, 22442.0], [57.0, 22466.0], [56.0, 21473.0], [59.0, 22308.0], [58.0, 21214.0], [61.0, 21477.0], [60.0, 22547.0], [63.0, 21487.0], [62.0, 22034.0], [67.0, 22482.0], [66.0, 22254.0], [65.0, 22044.0], [64.0, 21205.0], [71.0, 21501.0], [70.0, 22273.0], [69.0, 21195.0], [68.0, 22069.0], [75.0, 22334.0], [74.0, 21518.0], [73.0, 21192.0], [72.0, 22489.0], [79.0, 22093.0], [78.0, 21504.0], [77.0, 22007.0], [76.0, 22543.0], [83.0, 22069.0], [82.0, 22266.0], [81.0, 22519.0], [80.0, 21207.0], [87.0, 22274.0], [86.0, 21512.0], [85.0, 22520.0], [84.0, 21206.0], [91.0, 22338.0], [90.0, 21185.0], [89.0, 21518.0], [88.0, 22602.0], [95.0, 22046.0], [94.0, 22575.0], [93.0, 21541.0], [92.0, 21977.0], [99.0, 22681.0], [98.0, 22283.0], [97.0, 21192.0], [96.0, 22601.0], [103.0, 22255.0], [102.0, 21191.0], [101.0, 22039.0], [100.0, 21540.0], [107.0, 22280.0], [106.0, 21150.0], [105.0, 21588.0], [104.0, 21554.0], [111.0, 22038.0], [110.0, 22629.0], [109.0, 21949.0], [108.0, 22628.0], [115.0, 22726.0], [114.0, 22190.0], [113.0, 21132.0], [112.0, 21557.0], [119.0, 22093.0], [118.0, 21109.0], [117.0, 21590.0], [116.0, 22066.0], [123.0, 22247.0], [122.0, 21112.0], [121.0, 22670.0], [120.0, 22189.0], [127.0, 22147.0], [126.0, 22672.0], [125.0, 22121.0], [124.0, 21564.0], [135.0, 22177.0], [134.0, 21571.0], [133.0, 21133.0], [132.0, 22147.0], [131.0, 22187.0], [130.0, 21522.0], [129.0, 22735.0], [128.0, 21066.0], [143.0, 22217.0], [142.0, 21549.0], [141.0, 22676.0], [140.0, 22221.0], [139.0, 22173.0], [138.0, 21145.0], [137.0, 21553.0], [136.0, 22703.0], [151.0, 21113.0], [150.0, 22133.0], [149.0, 21526.0], [148.0, 22765.0], [147.0, 22215.0], [146.0, 21050.0], [145.0, 22191.0], [144.0, 22764.0], [159.0, 22187.0], [158.0, 21482.0], [157.0, 22746.0], [156.0, 21090.0], [155.0, 22188.0], [154.0, 22198.0], [153.0, 22717.0], [152.0, 21498.0], [167.0, 22776.0], [166.0, 21072.0], [165.0, 21449.0], [164.0, 22153.0], [163.0, 22223.0], [162.0, 22802.0], [161.0, 21098.0], [160.0, 22194.0], [175.0, 21416.0], [174.0, 22231.0], [173.0, 22781.0], [172.0, 22240.0], [171.0, 21072.0], [170.0, 22130.0], [169.0, 21430.0], [168.0, 22240.0], [183.0, 21079.0], [182.0, 22806.0], [181.0, 22209.0], [180.0, 21429.0], [179.0, 22191.0], [178.0, 22201.0], [177.0, 21076.0], [176.0, 22863.0], [188.0, 3673.666666666667], [191.0, 22897.0], [190.0, 22206.0], [189.0, 21445.0], [187.0, 22277.0], [186.0, 22114.0], [185.0, 22833.0], [184.0, 21446.0], [199.0, 21060.0], [198.0, 22215.0], [197.0, 21512.0], [196.0, 22848.0], [195.0, 22211.0], [194.0, 21487.0], [193.0, 22205.0], [192.0, 21084.0], [207.0, 21096.0], [206.0, 22919.0], [205.0, 22252.0], [204.0, 21064.0], [203.0, 21532.0], [202.0, 22219.0], [200.0, 22860.0], [215.0, 21100.0], [214.0, 22243.0], [213.0, 21522.0], [212.0, 22303.0], [211.0, 22853.0], [210.0, 22228.0], [209.0, 22278.0], [208.0, 21476.0], [223.0, 21134.0], [222.0, 22324.0], [221.0, 22910.0], [220.0, 21103.0], [219.0, 22324.0], [218.0, 22321.0], [217.0, 22850.0], [216.0, 21547.0], [231.0, 21556.0], [230.0, 21151.0], [229.0, 22264.0], [228.0, 22857.0], [227.0, 21541.0], [226.0, 22320.0], [225.0, 22262.0], [224.0, 21477.0], [239.0, 22336.0], [238.0, 22892.0], [237.0, 21220.0], [236.0, 21588.0], [235.0, 22340.0], [234.0, 21183.0], [233.0, 22327.0], [232.0, 22859.0], [247.0, 21638.0], [246.0, 21614.0], [245.0, 21173.0], [244.0, 22307.0], [243.0, 22335.0], [242.0, 22887.0], [241.0, 21611.0], [240.0, 22284.0], [255.0, 22334.0], [254.0, 22828.0], [253.0, 22364.0], [252.0, 21257.0], [251.0, 22330.0], [250.0, 22820.0], [249.0, 21235.0], [248.0, 22361.0], [270.0, 21316.0], [271.0, 22371.0], [269.0, 22840.0], [268.0, 22386.0], [267.0, 21842.0], [265.0, 21628.0], [264.0, 22842.0], [263.0, 22377.0], [257.0, 22892.0], [256.0, 21631.0], [259.0, 21199.0], [258.0, 22320.0], [262.0, 21278.0], [261.0, 21628.0], [260.0, 22333.0], [286.0, 21311.0], [287.0, 21619.0], [285.0, 22398.0], [284.0, 22801.0], [283.0, 21317.0], [282.0, 22373.0], [280.0, 21651.0], [279.0, 22803.0], [273.0, 21619.0], [272.0, 22342.0], [275.0, 22369.0], [274.0, 22858.0], [278.0, 21626.0], [277.0, 21311.0], [276.0, 22414.0], [302.0, 21636.0], [303.0, 22880.0], [301.0, 21258.0], [300.0, 22403.0], [299.0, 22799.0], [298.0, 21268.0], [297.0, 22392.0], [296.0, 22350.0], [295.0, 22792.0], [289.0, 22851.0], [288.0, 22336.0], [291.0, 22341.0], [290.0, 22400.0], [294.0, 21644.0], [293.0, 21272.0], [292.0, 21621.0], [318.0, 21610.0], [319.0, 22864.0], [317.0, 21236.0], [316.0, 22381.0], [315.0, 22423.0], [314.0, 22840.0], [313.0, 22329.0], [312.0, 21252.0], [311.0, 21632.0], [305.0, 22405.0], [304.0, 22347.0], [307.0, 22347.0], [306.0, 21629.0], [310.0, 22421.0], [309.0, 22844.0], [308.0, 21254.0], [335.0, 22415.0], [332.0, 11559.5], [323.0, 21215.0], [322.0, 21676.0], [321.0, 22384.0], [320.0, 22421.0], [333.0, 11350.5], [334.0, 21597.0], [331.0, 22383.0], [330.0, 21230.0], [329.0, 22803.0], [328.0, 21230.0], [327.0, 21673.0], [326.0, 22425.0], [325.0, 22420.0], [324.0, 22811.0], [350.0, 22488.0], [351.0, 22411.0], [349.0, 21218.0], [348.0, 21675.0], [347.0, 22857.0], [346.0, 22475.0], [345.0, 22409.0], [344.0, 22777.0], [343.0, 21672.0], [337.0, 21210.0], [336.0, 22436.0], [339.0, 22477.0], [338.0, 21675.0], [342.0, 21208.0], [341.0, 22451.0], [340.0, 22790.0], [366.0, 22918.0], [352.0, 7833.0], [359.0, 11371.5], [358.0, 21212.0], [357.0, 22845.0], [356.0, 21665.0], [367.0, 22398.0], [365.0, 21629.0], [364.0, 22520.0], [355.0, 22470.0], [354.0, 21161.0], [353.0, 22505.0], [363.0, 21211.0], [362.0, 22849.0], [361.0, 22517.0], [360.0, 21633.0], [382.0, 22399.0], [383.0, 22588.0], [381.0, 21570.0], [380.0, 22925.0], [379.0, 21215.0], [378.0, 22571.0], [377.0, 21600.0], [376.0, 22457.0], [375.0, 22866.0], [369.0, 22459.0], [368.0, 22538.0], [371.0, 22863.0], [370.0, 21150.0], [374.0, 21212.0], [373.0, 22568.0], [372.0, 21630.0], [399.0, 21227.0], [393.0, 3538.1428571428573], [396.0, 11044.5], [387.0, 21568.0], [386.0, 22406.0], [385.0, 22870.0], [384.0, 21218.0], [398.0, 22377.0], [397.0, 22616.0], [395.0, 22878.0], [394.0, 21214.0], [392.0, 21571.0], [391.0, 22435.0], [390.0, 21212.0], [389.0, 22841.0], [388.0, 22531.0], [414.0, 22339.0], [415.0, 22874.0], [413.0, 21231.0], [412.0, 22626.0], [411.0, 21630.0], [410.0, 21228.0], [409.0, 22610.0], [408.0, 22931.0], [407.0, 22421.0], [401.0, 21610.0], [400.0, 22855.0], [403.0, 22880.0], [402.0, 22372.0], [406.0, 21627.0], [405.0, 21227.0], [404.0, 22572.0], [431.0, 22644.0], [417.0, 11401.5], [422.0, 11449.5], [421.0, 21608.0], [420.0, 22556.0], [423.0, 21252.0], [416.0, 21638.0], [424.0, 11710.5], [425.0, 22613.0], [430.0, 22834.0], [429.0, 22327.0], [428.0, 22626.0], [419.0, 21254.0], [418.0, 22874.0], [427.0, 21264.0], [426.0, 21642.0], [446.0, 22812.0], [447.0, 21594.0], [445.0, 22652.0], [444.0, 22300.0], [443.0, 21298.0], [442.0, 22658.0], [441.0, 21663.0], [440.0, 22879.0], [439.0, 21284.0], [433.0, 22342.0], [432.0, 21599.0], [435.0, 22833.0], [434.0, 21287.0], [438.0, 22655.0], [437.0, 22401.0], [436.0, 21663.0], [462.0, 22572.0], [463.0, 21261.0], [461.0, 21635.0], [460.0, 22856.0], [459.0, 22601.0], [458.0, 22339.0], [457.0, 21325.0], [456.0, 21633.0], [455.0, 22860.0], [449.0, 21776.0], [451.0, 21662.0], [450.0, 22804.0], [454.0, 22625.0], [453.0, 22355.0], [452.0, 21324.0], [478.0, 21333.0], [479.0, 22287.0], [477.0, 21594.0], [476.0, 22568.0], [475.0, 22851.0], [474.0, 21343.0], [473.0, 21593.0], [472.0, 22555.0], [471.0, 22344.0], [465.0, 22801.0], [464.0, 22274.0], [467.0, 22348.0], [466.0, 21605.0], [470.0, 22797.0], [469.0, 22572.0], [468.0, 21349.0], [494.0, 22322.0], [495.0, 21662.0], [493.0, 21316.0], [492.0, 22839.0], [491.0, 22615.0], [490.0, 21659.0], [489.0, 21316.0], [488.0, 22371.0], [487.0, 21633.0], [481.0, 22793.0], [480.0, 22531.0], [483.0, 21608.0], [482.0, 22392.0], [486.0, 22795.0], [485.0, 22611.0], [484.0, 21319.0], [510.0, 21652.0], [511.0, 22736.0], [509.0, 22333.0], [508.0, 21330.0], [507.0, 22585.0], [506.0, 22813.0], [505.0, 21635.0], [504.0, 21340.0], [503.0, 22391.0], [497.0, 22532.0], [496.0, 22786.0], [499.0, 21306.0], [498.0, 22331.0], [502.0, 22583.0], [501.0, 22775.0], [500.0, 21638.0], [540.0, 22753.0], [541.0, 11092.5], [543.0, 21238.0], [529.0, 22311.0], [528.0, 21254.0], [531.0, 21658.0], [530.0, 22764.0], [533.0, 22377.0], [532.0, 21280.0], [542.0, 22500.0], [539.0, 22287.0], [538.0, 22500.0], [537.0, 21253.0], [536.0, 21658.0], [527.0, 21599.0], [512.0, 22509.0], [514.0, 21300.0], [513.0, 22334.0], [516.0, 22750.0], [515.0, 21643.0], [519.0, 21911.0], [517.0, 22400.0], [526.0, 22747.0], [525.0, 22531.0], [524.0, 22311.0], [523.0, 22529.0], [522.0, 21263.0], [521.0, 22228.5], [535.0, 22817.0], [534.0, 22525.0], [572.0, 21071.0], [571.0, 11692.0], [575.0, 22689.0], [561.0, 22739.0], [560.0, 21682.0], [563.0, 22289.0], [562.0, 21161.0], [565.0, 21679.0], [564.0, 22474.0], [574.0, 22256.0], [573.0, 22485.0], [570.0, 21652.0], [569.0, 22488.0], [568.0, 22317.0], [559.0, 22265.0], [545.0, 22753.0], [544.0, 22279.0], [547.0, 21668.0], [546.0, 21214.0], [549.0, 22469.0], [548.0, 22335.0], [551.0, 21203.0], [550.0, 22816.0], [558.0, 21133.0], [557.0, 22481.0], [556.0, 22259.0], [555.0, 22812.0], [554.0, 21688.0], [553.0, 22474.0], [552.0, 21667.0], [567.0, 22735.0], [566.0, 21145.0], [604.0, 21110.0], [582.0, 11136.5], [591.0, 22635.0], [577.0, 21627.0], [576.0, 21068.0], [579.0, 22478.0], [578.0, 22277.0], [581.0, 21045.0], [580.0, 22689.0], [590.0, 21063.0], [589.0, 22197.0], [588.0, 22484.0], [587.0, 21620.0], [586.0, 22722.0], [585.0, 21038.0], [584.0, 22477.0], [601.0, 11662.0], [602.0, 11111.5], [607.0, 21112.0], [593.0, 21597.0], [592.0, 22277.0], [595.0, 22427.0], [594.0, 21090.0], [597.0, 22637.0], [596.0, 22285.0], [599.0, 21103.0], [598.0, 21599.0], [606.0, 22254.0], [605.0, 22490.0], [603.0, 22249.0], [600.0, 22495.0], [583.0, 22260.0], [636.0, 21125.0], [639.0, 22181.0], [624.0, 21661.0], [626.0, 22633.0], [625.0, 21134.0], [629.0, 22038.0], [627.0, 22290.0], [638.0, 21645.0], [637.0, 22458.0], [635.0, 22638.0], [634.0, 22211.0], [633.0, 22470.0], [632.0, 21671.0], [623.0, 22604.0], [609.0, 21595.0], [608.0, 22589.0], [611.0, 22616.0], [610.0, 22317.0], [613.0, 21619.0], [612.0, 22423.0], [615.0, 22483.0], [614.0, 21110.0], [622.0, 21108.0], [621.0, 22213.0], [620.0, 22485.0], [619.0, 21095.0], [618.0, 22222.0], [617.0, 22656.0], [616.0, 21646.0], [631.0, 21117.0], [630.0, 22689.0], [669.0, 21147.0], [662.0, 10885.5], [661.0, 21818.0], [660.0, 22439.0], [659.0, 22262.0], [658.0, 22795.0], [657.0, 21791.0], [656.0, 21155.0], [663.0, 22794.0], [671.0, 21819.0], [670.0, 22202.0], [668.0, 22754.0], [667.0, 22423.0], [666.0, 22198.0], [665.0, 21147.0], [664.0, 21818.0], [647.0, 21152.0], [646.0, 21739.0], [645.0, 22753.0], [644.0, 22251.0], [643.0, 22459.0], [642.0, 21734.0], [641.0, 21146.0], [640.0, 22670.0], [655.0, 22704.0], [654.0, 22436.0], [653.0, 22201.0], [652.0, 21695.0], [651.0, 21157.0], [650.0, 22701.0], [649.0, 22444.0], [648.0, 22210.0], [696.0, 21714.0], [702.0, 22179.0], [698.0, 11566.0], [697.0, 11328.0], [703.0, 22417.0], [688.0, 21174.0], [690.0, 21834.0], [689.0, 22737.0], [692.0, 22420.0], [691.0, 22269.0], [701.0, 21939.0], [700.0, 21181.0], [699.0, 22736.0], [687.0, 22422.0], [673.0, 22743.0], [672.0, 22425.0], [675.0, 22255.0], [674.0, 21828.0], [677.0, 21092.0], [676.0, 22429.0], [679.0, 21837.0], [678.0, 22793.0], [686.0, 22195.0], [685.0, 21828.0], [684.0, 21151.0], [683.0, 22731.0], [682.0, 22419.0], [681.0, 21163.0], [680.0, 22252.0], [694.0, 21867.0], [693.0, 22797.0], [732.0, 22114.0], [735.0, 21167.0], [721.0, 22419.0], [720.0, 21168.0], [723.0, 22773.0], [722.0, 22113.0], [725.0, 22416.0], [724.0, 22086.0], [734.0, 22062.0], [733.0, 22665.0], [731.0, 22337.0], [730.0, 21159.0], [729.0, 22085.0], [728.0, 22693.0], [719.0, 22041.0], [705.0, 21173.0], [704.0, 22738.0], [707.0, 22177.0], [706.0, 21967.0], [709.0, 22417.0], [708.0, 22808.0], [711.0, 22217.0], [710.0, 21174.0], [718.0, 22129.0], [717.0, 22752.0], [716.0, 22353.0], [715.0, 22011.0], [714.0, 21171.0], [713.0, 22755.0], [712.0, 22007.0], [727.0, 22175.0], [726.0, 21168.0], [764.0, 22148.0], [742.0, 7955.0], [744.0, 11365.0], [746.0, 22119.0], [745.0, 21192.0], [749.0, 22283.0], [748.0, 22360.0], [751.0, 22706.0], [736.0, 22124.0], [739.0, 22008.0], [738.0, 22532.0], [741.0, 22193.0], [740.0, 21180.0], [750.0, 21184.0], [767.0, 22075.0], [753.0, 22313.0], [752.0, 22117.0], [755.0, 21135.0], [754.0, 22186.0], [757.0, 22314.0], [756.0, 22042.0], [759.0, 22140.0], [758.0, 22618.0], [766.0, 22684.0], [765.0, 21204.0], [763.0, 22094.0], [762.0, 22312.0], [761.0, 22621.0], [760.0, 21198.0], [743.0, 22113.0], [796.0, 21164.0], [799.0, 22188.0], [785.0, 21197.0], [784.0, 22341.0], [787.0, 22668.0], [786.0, 22164.0], [789.0, 22341.0], [788.0, 22173.0], [798.0, 22176.0], [797.0, 22555.0], [795.0, 22118.0], [794.0, 22177.0], [793.0, 22313.0], [792.0, 22582.0], [783.0, 22183.0], [768.0, 22156.0], [770.0, 22685.0], [769.0, 22311.0], [773.0, 22132.0], [772.0, 21624.5], [775.0, 22152.0], [774.0, 22321.0], [782.0, 22634.0], [781.0, 22082.0], [780.0, 21198.0], [779.0, 22184.0], [778.0, 22322.0], [777.0, 22633.0], [776.0, 21199.0], [791.0, 21190.0], [790.0, 22181.0], [828.0, 22583.0], [825.0, 11450.5], [831.0, 21088.0], [817.0, 22259.0], [816.0, 21132.0], [819.0, 22334.0], [818.0, 22136.0], [821.0, 22550.0], [820.0, 22103.0], [830.0, 22119.0], [829.0, 22092.0], [827.0, 21113.0], [826.0, 22084.0], [824.0, 22533.0], [815.0, 22629.0], [801.0, 22318.0], [800.0, 21155.0], [803.0, 22169.0], [802.0, 22588.0], [805.0, 22148.0], [804.0, 22316.0], [807.0, 22561.0], [806.0, 21147.0], [814.0, 22081.0], [813.0, 22117.0], [812.0, 21137.0], [811.0, 22575.0], [810.0, 22082.0], [809.0, 22147.0], [808.0, 22314.0], [823.0, 22333.0], [822.0, 21138.0], [857.0, 22116.0], [861.0, 22395.0], [863.0, 22350.5], [849.0, 22528.0], [848.0, 22174.0], [851.0, 21121.0], [850.0, 22378.0], [853.0, 22514.0], [852.0, 22053.0], [860.0, 21154.0], [859.0, 22159.0], [858.0, 22577.0], [856.0, 21145.0], [839.0, 22367.0], [838.0, 22559.0], [837.0, 21095.0], [836.0, 22338.0], [835.0, 22073.0], [834.0, 22559.0], [833.0, 22163.0], [832.0, 22273.0], [847.0, 22288.0], [846.0, 22127.0], [845.0, 21099.0], [844.0, 22114.0], [843.0, 22607.0], [842.0, 21095.0], [841.0, 22130.0], [840.0, 22120.0], [855.0, 22377.0], [854.0, 22133.0], [892.0, 21180.0], [895.0, 22036.0], [881.0, 22245.0], [880.0, 21128.0], [883.0, 22068.0], [882.0, 22388.0], [885.0, 22500.0], [884.0, 21177.0], [894.0, 22557.0], [893.0, 22240.0], [891.0, 22037.0], [890.0, 22386.0], [889.0, 22500.0], [888.0, 22185.0], [879.0, 22098.0], [865.0, 21128.0], [864.0, 22208.0], [867.0, 22111.0], [866.0, 22418.0], [869.0, 21182.0], [868.0, 22507.0], [871.0, 22447.0], [870.0, 22166.0], [878.0, 22546.0], [877.0, 22229.0], [876.0, 22099.0], [875.0, 22490.0], [874.0, 22418.0], [873.0, 22168.0], [872.0, 21210.0], [887.0, 21181.0], [886.0, 22382.0], [924.0, 22529.0], [896.0, 8012.0], [897.0, 22385.0], [911.0, 22016.0], [910.0, 22453.0], [909.0, 22535.0], [908.0, 22010.0], [907.0, 22280.0], [906.0, 21206.0], [905.0, 22480.0], [904.0, 22207.0], [898.0, 11032.0], [899.0, 11644.5], [901.0, 22504.0], [900.0, 22036.0], [903.0, 22440.0], [902.0, 21196.0], [921.0, 22202.0], [920.0, 21265.0], [927.0, 21995.0], [913.0, 21232.0], [912.0, 22278.0], [915.0, 22427.0], [914.0, 22481.0], [917.0, 22016.0], [916.0, 21263.0], [919.0, 22480.0], [918.0, 22456.0], [926.0, 21272.0], [925.0, 22421.0], [923.0, 22193.0], [922.0, 22030.0], [956.0, 22438.0], [959.0, 22184.0], [944.0, 21300.0], [946.0, 22411.0], [945.0, 22482.0], [949.0, 21871.5], [947.0, 21981.0], [958.0, 21331.0], [957.0, 21991.0], [955.0, 21309.0], [954.0, 22130.0], [953.0, 21903.0], [952.0, 22484.0], [943.0, 22189.0], [929.0, 22486.0], [928.0, 22211.0], [931.0, 22443.0], [930.0, 21292.0], [933.0, 22465.0], [932.0, 21996.0], [935.0, 22434.0], [934.0, 21282.0], [942.0, 21982.0], [941.0, 22413.0], [940.0, 21301.0], [939.0, 22127.0], [938.0, 21984.0], [937.0, 22460.0], [936.0, 22157.0], [951.0, 22130.0], [950.0, 22515.0], [988.0, 21351.0], [991.0, 22530.0], [977.0, 21324.0], [976.0, 22440.0], [979.0, 21965.0], [978.0, 22353.0], [981.0, 22471.0], [980.0, 22102.0], [990.0, 22241.0], [989.0, 22360.0], [987.0, 22213.0], [986.0, 21267.0], [985.0, 22318.0], [984.0, 21963.0], [975.0, 21949.0], [961.0, 22504.0], [960.0, 22389.0], [963.0, 21330.0], [962.0, 21990.0], [965.0, 22507.0], [964.0, 22399.0], [967.0, 22473.0], [966.0, 22106.0], [974.0, 21323.0], [973.0, 22165.0], [972.0, 22457.0], [971.0, 21889.0], [970.0, 21262.0], [969.0, 22104.0], [968.0, 22490.0], [983.0, 22499.0], [982.0, 22129.0], [998.0, 14816.166666666666], [999.0, 4077.5714285714284], [1000.0, 18313.011769172364], [996.0, 22308.0], [995.0, 21968.0], [994.0, 22507.0], [993.0, 21350.0], [992.0, 21967.0], [1.0, 22451.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[859.4131557488435, 19121.167436803495]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 259.2, "minX": 1.75239168E12, "maxY": 20602.483333333334, "series": [{"data": [[1.75239168E12, 6701.466666666666], [1.75239174E12, 20602.483333333334], [1.7523918E12, 810.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75239168E12, 2071.2], [1.75239174E12, 6492.0], [1.7523918E12, 259.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523918E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8416.469976905311, "minX": 1.75239168E12, "maxY": 22432.58373382625, "series": [{"data": [[1.75239168E12, 8416.469976905311], [1.75239174E12, 22432.58373382625], [1.7523918E12, 22018.26851851852]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523918E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8415.705542725167, "minX": 1.75239168E12, "maxY": 22432.562661737556, "series": [{"data": [[1.75239168E12, 8415.705542725167], [1.75239174E12, 22432.562661737556], [1.7523918E12, 22018.222222222226]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523918E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75239168E12, "maxY": 5.998845265588909, "series": [{"data": [[1.75239168E12, 5.998845265588909], [1.75239174E12, 0.19408502772643266], [1.7523918E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523918E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 174.0, "minX": 1.75239168E12, "maxY": 30215.0, "series": [{"data": [[1.75239168E12, 18848.0], [1.75239174E12, 30215.0], [1.7523918E12, 22681.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75239168E12, 16965.0], [1.75239174E12, 23505.0], [1.7523918E12, 22512.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75239168E12, 18595.84], [1.75239174E12, 27697.300000000003], [1.7523918E12, 22676.23]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75239168E12, 17862.6], [1.75239174E12, 25163.7], [1.7523918E12, 22562.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75239168E12, 174.0], [1.75239174E12, 18767.0], [1.7523918E12, 21150.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75239168E12, 7398.0], [1.75239174E12, 22347.0], [1.7523918E12, 22176.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523918E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 125.0, "minX": 15.0, "maxY": 22609.5, "series": [{"data": [[41.0, 3721.0], [43.0, 22146.0], [42.0, 22609.5], [45.0, 22065.0], [44.0, 22193.0], [46.0, 22092.0], [47.0, 22380.5], [49.0, 22329.0], [48.0, 22234.5], [50.0, 22212.0], [51.0, 22191.0], [15.0, 266.0], [19.0, 22341.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[45.0, 125.0], [46.0, 359.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 51.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 15.0, "maxY": 22609.5, "series": [{"data": [[41.0, 3721.0], [43.0, 22146.0], [42.0, 22609.5], [45.0, 22065.0], [44.0, 22193.0], [46.0, 22092.0], [47.0, 22380.5], [49.0, 22329.0], [48.0, 22234.5], [50.0, 22212.0], [51.0, 22191.0], [15.0, 266.0], [19.0, 22341.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[45.0, 0.0], [46.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 51.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 30.216666666666665, "minX": 1.75239168E12, "maxY": 31.1, "series": [{"data": [[1.75239168E12, 31.1], [1.75239174E12, 30.216666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239174E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.75239168E12, "maxY": 45.083333333333336, "series": [{"data": [[1.75239168E12, 14.383333333333333], [1.75239174E12, 45.083333333333336], [1.7523918E12, 1.8]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75239168E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523918E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.75239168E12, "maxY": 45.083333333333336, "series": [{"data": [[1.75239168E12, 14.383333333333333], [1.75239174E12, 45.083333333333336], [1.7523918E12, 1.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75239168E12, 0.05]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523918E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.75239168E12, "maxY": 45.083333333333336, "series": [{"data": [[1.75239168E12, 14.383333333333333], [1.75239174E12, 45.083333333333336], [1.7523918E12, 1.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75239168E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523918E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

