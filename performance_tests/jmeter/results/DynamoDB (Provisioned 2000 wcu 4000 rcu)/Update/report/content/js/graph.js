/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 224.0, "minX": 0.0, "maxY": 53111.0, "series": [{"data": [[0.0, 224.0], [0.1, 379.0], [0.2, 532.0], [0.3, 647.0], [0.4, 659.0], [0.5, 839.0], [0.6, 864.0], [0.7, 989.0], [0.8, 1082.0], [0.9, 1131.0], [1.0, 1179.0], [1.1, 1289.0], [1.2, 1395.0], [1.3, 1476.0], [1.4, 1526.0], [1.5, 1678.0], [1.6, 1740.0], [1.7, 1835.0], [1.8, 1857.0], [1.9, 1995.0], [2.0, 2081.0], [2.1, 2141.0], [2.2, 2209.0], [2.3, 2306.0], [2.4, 2355.0], [2.5, 2436.0], [2.6, 2530.0], [2.7, 2589.0], [2.8, 2708.0], [2.9, 2807.0], [3.0, 2879.0], [3.1, 2910.0], [3.2, 3005.0], [3.3, 3135.0], [3.4, 3231.0], [3.5, 3260.0], [3.6, 3345.0], [3.7, 3497.0], [3.8, 3548.0], [3.9, 3647.0], [4.0, 3719.0], [4.1, 3801.0], [4.2, 3861.0], [4.3, 3963.0], [4.4, 4031.0], [4.5, 4095.0], [4.6, 4159.0], [4.7, 4264.0], [4.8, 4345.0], [4.9, 4408.0], [5.0, 4529.0], [5.1, 4591.0], [5.2, 4727.0], [5.3, 4787.0], [5.4, 4841.0], [5.5, 4966.0], [5.6, 5033.0], [5.7, 5093.0], [5.8, 5174.0], [5.9, 5278.0], [6.0, 5317.0], [6.1, 5423.0], [6.2, 5495.0], [6.3, 5614.0], [6.4, 5710.0], [6.5, 5780.0], [6.6, 5829.0], [6.7, 5896.0], [6.8, 5956.0], [6.9, 6063.0], [7.0, 6172.0], [7.1, 6249.0], [7.2, 6312.0], [7.3, 6421.0], [7.4, 6464.0], [7.5, 6528.0], [7.6, 6624.0], [7.7, 6674.0], [7.8, 6844.0], [7.9, 6872.0], [8.0, 6943.0], [8.1, 7071.0], [8.2, 7145.0], [8.3, 7252.0], [8.4, 7295.0], [8.5, 7341.0], [8.6, 7375.0], [8.7, 7412.0], [8.8, 7519.0], [8.9, 7647.0], [9.0, 7766.0], [9.1, 7879.0], [9.2, 7916.0], [9.3, 8006.0], [9.4, 8111.0], [9.5, 8158.0], [9.6, 8240.0], [9.7, 8340.0], [9.8, 8394.0], [9.9, 8533.0], [10.0, 8612.0], [10.1, 8750.0], [10.2, 8796.0], [10.3, 8837.0], [10.4, 8929.0], [10.5, 9060.0], [10.6, 9121.0], [10.7, 9230.0], [10.8, 9280.0], [10.9, 9374.0], [11.0, 9401.0], [11.1, 9503.0], [11.2, 9638.0], [11.3, 9705.0], [11.4, 9768.0], [11.5, 9822.0], [11.6, 9896.0], [11.7, 9982.0], [11.8, 10136.0], [11.9, 10175.0], [12.0, 10268.0], [12.1, 10435.0], [12.2, 10477.0], [12.3, 10527.0], [12.4, 10633.0], [12.5, 10687.0], [12.6, 10780.0], [12.7, 10897.0], [12.8, 10977.0], [12.9, 11065.0], [13.0, 11115.0], [13.1, 11164.0], [13.2, 11209.0], [13.3, 11380.0], [13.4, 11427.0], [13.5, 11534.0], [13.6, 11588.0], [13.7, 11682.0], [13.8, 11740.0], [13.9, 11840.0], [14.0, 11874.0], [14.1, 11970.0], [14.2, 12058.0], [14.3, 12125.0], [14.4, 12210.0], [14.5, 12253.0], [14.6, 12326.0], [14.7, 12410.0], [14.8, 12511.0], [14.9, 12570.0], [15.0, 12681.0], [15.1, 12762.0], [15.2, 12806.0], [15.3, 12921.0], [15.4, 12998.0], [15.5, 13081.0], [15.6, 13156.0], [15.7, 13256.0], [15.8, 13296.0], [15.9, 13402.0], [16.0, 13444.0], [16.1, 13561.0], [16.2, 13599.0], [16.3, 13609.0], [16.4, 13644.0], [16.5, 13646.0], [16.6, 13652.0], [16.7, 13655.0], [16.8, 13669.0], [16.9, 13672.0], [17.0, 13673.0], [17.1, 13676.0], [17.2, 13690.0], [17.3, 13699.0], [17.4, 13702.0], [17.5, 13709.0], [17.6, 13712.0], [17.7, 13717.0], [17.8, 13721.0], [17.9, 13727.0], [18.0, 13733.0], [18.1, 13736.0], [18.2, 13738.0], [18.3, 13743.0], [18.4, 13747.0], [18.5, 13753.0], [18.6, 13771.0], [18.7, 13776.0], [18.8, 13802.0], [18.9, 13805.0], [19.0, 13812.0], [19.1, 13826.0], [19.2, 13833.0], [19.3, 13834.0], [19.4, 13846.0], [19.5, 13850.0], [19.6, 13853.0], [19.7, 13855.0], [19.8, 13859.0], [19.9, 13865.0], [20.0, 13867.0], [20.1, 13872.0], [20.2, 13874.0], [20.3, 13880.0], [20.4, 13881.0], [20.5, 13883.0], [20.6, 13884.0], [20.7, 13889.0], [20.8, 13891.0], [20.9, 13892.0], [21.0, 13894.0], [21.1, 13896.0], [21.2, 13901.0], [21.3, 13904.0], [21.4, 13906.0], [21.5, 13908.0], [21.6, 13910.0], [21.7, 13914.0], [21.8, 13918.0], [21.9, 13922.0], [22.0, 13925.0], [22.1, 13926.0], [22.2, 13929.0], [22.3, 13931.0], [22.4, 13931.0], [22.5, 13935.0], [22.6, 13936.0], [22.7, 13937.0], [22.8, 13939.0], [22.9, 13940.0], [23.0, 13944.0], [23.1, 13948.0], [23.2, 13951.0], [23.3, 13956.0], [23.4, 13960.0], [23.5, 13962.0], [23.6, 13965.0], [23.7, 13966.0], [23.8, 13970.0], [23.9, 13979.0], [24.0, 13986.0], [24.1, 13988.0], [24.2, 13990.0], [24.3, 13998.0], [24.4, 14004.0], [24.5, 14023.0], [24.6, 14033.0], [24.7, 14037.0], [24.8, 14043.0], [24.9, 14044.0], [25.0, 14045.0], [25.1, 14050.0], [25.2, 14055.0], [25.3, 14062.0], [25.4, 14065.0], [25.5, 14069.0], [25.6, 14079.0], [25.7, 14081.0], [25.8, 14086.0], [25.9, 14089.0], [26.0, 14091.0], [26.1, 14092.0], [26.2, 14097.0], [26.3, 14099.0], [26.4, 14105.0], [26.5, 14111.0], [26.6, 14117.0], [26.7, 14130.0], [26.8, 14147.0], [26.9, 14157.0], [27.0, 14160.0], [27.1, 14191.0], [27.2, 14292.0], [27.3, 14431.0], [27.4, 14505.0], [27.5, 14628.0], [27.6, 14806.0], [27.7, 14985.0], [27.8, 15130.0], [27.9, 15246.0], [28.0, 15263.0], [28.1, 15278.0], [28.2, 15290.0], [28.3, 15305.0], [28.4, 15310.0], [28.5, 15315.0], [28.6, 15322.0], [28.7, 15333.0], [28.8, 15334.0], [28.9, 15338.0], [29.0, 15341.0], [29.1, 15347.0], [29.2, 15354.0], [29.3, 15367.0], [29.4, 15376.0], [29.5, 15385.0], [29.6, 15388.0], [29.7, 15401.0], [29.8, 15403.0], [29.9, 15414.0], [30.0, 15419.0], [30.1, 15431.0], [30.2, 15437.0], [30.3, 15446.0], [30.4, 15459.0], [30.5, 15477.0], [30.6, 15489.0], [30.7, 15495.0], [30.8, 15499.0], [30.9, 15504.0], [31.0, 15506.0], [31.1, 15512.0], [31.2, 15521.0], [31.3, 15524.0], [31.4, 15531.0], [31.5, 15540.0], [31.6, 15545.0], [31.7, 15549.0], [31.8, 15555.0], [31.9, 15565.0], [32.0, 15575.0], [32.1, 15593.0], [32.2, 15595.0], [32.3, 15605.0], [32.4, 15610.0], [32.5, 15614.0], [32.6, 15622.0], [32.7, 15624.0], [32.8, 15629.0], [32.9, 15636.0], [33.0, 15646.0], [33.1, 15653.0], [33.2, 15658.0], [33.3, 15667.0], [33.4, 15673.0], [33.5, 15678.0], [33.6, 15684.0], [33.7, 15686.0], [33.8, 15696.0], [33.9, 15710.0], [34.0, 15715.0], [34.1, 15725.0], [34.2, 15728.0], [34.3, 15741.0], [34.4, 15751.0], [34.5, 15755.0], [34.6, 15764.0], [34.7, 15780.0], [34.8, 15792.0], [34.9, 15808.0], [35.0, 15816.0], [35.1, 15823.0], [35.2, 15833.0], [35.3, 15848.0], [35.4, 15863.0], [35.5, 15875.0], [35.6, 15897.0], [35.7, 16047.0], [35.8, 16197.0], [35.9, 16384.0], [36.0, 16581.0], [36.1, 16759.0], [36.2, 16932.0], [36.3, 17016.0], [36.4, 17102.0], [36.5, 17237.0], [36.6, 17282.0], [36.7, 17336.0], [36.8, 17360.0], [36.9, 17379.0], [37.0, 17389.0], [37.1, 17406.0], [37.2, 17417.0], [37.3, 17424.0], [37.4, 17478.0], [37.5, 17483.0], [37.6, 17490.0], [37.7, 17511.0], [37.8, 17583.0], [37.9, 17593.0], [38.0, 17603.0], [38.1, 17607.0], [38.2, 17612.0], [38.3, 17619.0], [38.4, 17623.0], [38.5, 17626.0], [38.6, 17633.0], [38.7, 17644.0], [38.8, 17646.0], [38.9, 17655.0], [39.0, 17660.0], [39.1, 17668.0], [39.2, 17670.0], [39.3, 17689.0], [39.4, 17697.0], [39.5, 17708.0], [39.6, 17716.0], [39.7, 17737.0], [39.8, 17741.0], [39.9, 17743.0], [40.0, 17753.0], [40.1, 17771.0], [40.2, 17786.0], [40.3, 17794.0], [40.4, 17804.0], [40.5, 17815.0], [40.6, 17831.0], [40.7, 17922.0], [40.8, 18264.0], [40.9, 18697.0], [41.0, 18921.0], [41.1, 18939.0], [41.2, 18973.0], [41.3, 18975.0], [41.4, 18982.0], [41.5, 18992.0], [41.6, 19006.0], [41.7, 19021.0], [41.8, 19033.0], [41.9, 19049.0], [42.0, 19081.0], [42.1, 19094.0], [42.2, 19107.0], [42.3, 19123.0], [42.4, 19144.0], [42.5, 19159.0], [42.6, 19167.0], [42.7, 19185.0], [42.8, 19193.0], [42.9, 19198.0], [43.0, 19206.0], [43.1, 19215.0], [43.2, 19218.0], [43.3, 19224.0], [43.4, 19227.0], [43.5, 19233.0], [43.6, 19238.0], [43.7, 19245.0], [43.8, 19253.0], [43.9, 19263.0], [44.0, 19267.0], [44.1, 19275.0], [44.2, 19284.0], [44.3, 19288.0], [44.4, 19297.0], [44.5, 19300.0], [44.6, 19311.0], [44.7, 19325.0], [44.8, 19331.0], [44.9, 19352.0], [45.0, 19367.0], [45.1, 19372.0], [45.2, 19375.0], [45.3, 19385.0], [45.4, 19393.0], [45.5, 19403.0], [45.6, 19406.0], [45.7, 19413.0], [45.8, 19415.0], [45.9, 19419.0], [46.0, 19423.0], [46.1, 19425.0], [46.2, 19428.0], [46.3, 19433.0], [46.4, 19436.0], [46.5, 19442.0], [46.6, 19443.0], [46.7, 19446.0], [46.8, 19448.0], [46.9, 19449.0], [47.0, 19450.0], [47.1, 19451.0], [47.2, 19461.0], [47.3, 19462.0], [47.4, 19464.0], [47.5, 19467.0], [47.6, 19471.0], [47.7, 19474.0], [47.8, 19476.0], [47.9, 19481.0], [48.0, 19483.0], [48.1, 19486.0], [48.2, 19488.0], [48.3, 19490.0], [48.4, 19493.0], [48.5, 19497.0], [48.6, 19498.0], [48.7, 19500.0], [48.8, 19504.0], [48.9, 19507.0], [49.0, 19508.0], [49.1, 19509.0], [49.2, 19516.0], [49.3, 19516.0], [49.4, 19520.0], [49.5, 19520.0], [49.6, 19526.0], [49.7, 19527.0], [49.8, 19529.0], [49.9, 19532.0], [50.0, 19533.0], [50.1, 19536.0], [50.2, 19538.0], [50.3, 19543.0], [50.4, 19544.0], [50.5, 19549.0], [50.6, 19554.0], [50.7, 19564.0], [50.8, 19573.0], [50.9, 19582.0], [51.0, 19585.0], [51.1, 19597.0], [51.2, 19601.0], [51.3, 19607.0], [51.4, 19613.0], [51.5, 19632.0], [51.6, 19652.0], [51.7, 19662.0], [51.8, 20070.0], [51.9, 20392.0], [52.0, 20867.0], [52.1, 21177.0], [52.2, 21631.0], [52.3, 21768.0], [52.4, 21782.0], [52.5, 21823.0], [52.6, 21828.0], [52.7, 21838.0], [52.8, 21842.0], [52.9, 21844.0], [53.0, 21850.0], [53.1, 21856.0], [53.2, 21859.0], [53.3, 21861.0], [53.4, 21865.0], [53.5, 21871.0], [53.6, 21876.0], [53.7, 21881.0], [53.8, 21886.0], [53.9, 21888.0], [54.0, 21890.0], [54.1, 21897.0], [54.2, 21901.0], [54.3, 21906.0], [54.4, 21911.0], [54.5, 21913.0], [54.6, 21919.0], [54.7, 21921.0], [54.8, 21923.0], [54.9, 21925.0], [55.0, 21929.0], [55.1, 21935.0], [55.2, 21937.0], [55.3, 21942.0], [55.4, 21945.0], [55.5, 21947.0], [55.6, 21950.0], [55.7, 21954.0], [55.8, 21956.0], [55.9, 21960.0], [56.0, 21966.0], [56.1, 21968.0], [56.2, 21977.0], [56.3, 21979.0], [56.4, 21984.0], [56.5, 21988.0], [56.6, 21995.0], [56.7, 22002.0], [56.8, 22012.0], [56.9, 22015.0], [57.0, 22018.0], [57.1, 22027.0], [57.2, 22028.0], [57.3, 22042.0], [57.4, 22049.0], [57.5, 22058.0], [57.6, 22060.0], [57.7, 22065.0], [57.8, 22070.0], [57.9, 22078.0], [58.0, 22080.0], [58.1, 22084.0], [58.2, 22085.0], [58.3, 22089.0], [58.4, 22097.0], [58.5, 22102.0], [58.6, 22106.0], [58.7, 22108.0], [58.8, 22113.0], [58.9, 22114.0], [59.0, 22116.0], [59.1, 22118.0], [59.2, 22121.0], [59.3, 22124.0], [59.4, 22128.0], [59.5, 22131.0], [59.6, 22132.0], [59.7, 22137.0], [59.8, 22139.0], [59.9, 22141.0], [60.0, 22143.0], [60.1, 22146.0], [60.2, 22150.0], [60.3, 22153.0], [60.4, 22153.0], [60.5, 22156.0], [60.6, 22159.0], [60.7, 22160.0], [60.8, 22161.0], [60.9, 22164.0], [61.0, 22166.0], [61.1, 22167.0], [61.2, 22168.0], [61.3, 22168.0], [61.4, 22172.0], [61.5, 22172.0], [61.6, 22174.0], [61.7, 22176.0], [61.8, 22176.0], [61.9, 22178.0], [62.0, 22179.0], [62.1, 22181.0], [62.2, 22182.0], [62.3, 22187.0], [62.4, 22190.0], [62.5, 22192.0], [62.6, 22193.0], [62.7, 22198.0], [62.8, 22201.0], [62.9, 22205.0], [63.0, 22210.0], [63.1, 22218.0], [63.2, 22220.0], [63.3, 22221.0], [63.4, 22225.0], [63.5, 22227.0], [63.6, 22236.0], [63.7, 22240.0], [63.8, 22244.0], [63.9, 22248.0], [64.0, 22255.0], [64.1, 22259.0], [64.2, 22263.0], [64.3, 22267.0], [64.4, 22271.0], [64.5, 22280.0], [64.6, 22286.0], [64.7, 22294.0], [64.8, 22300.0], [64.9, 22306.0], [65.0, 22308.0], [65.1, 22315.0], [65.2, 22319.0], [65.3, 22321.0], [65.4, 22327.0], [65.5, 22332.0], [65.6, 22336.0], [65.7, 22339.0], [65.8, 22345.0], [65.9, 22350.0], [66.0, 22354.0], [66.1, 22359.0], [66.2, 22363.0], [66.3, 22365.0], [66.4, 22367.0], [66.5, 22368.0], [66.6, 22372.0], [66.7, 22376.0], [66.8, 22378.0], [66.9, 22380.0], [67.0, 22382.0], [67.1, 22384.0], [67.2, 22388.0], [67.3, 22391.0], [67.4, 22393.0], [67.5, 22396.0], [67.6, 22397.0], [67.7, 22398.0], [67.8, 22402.0], [67.9, 22405.0], [68.0, 22408.0], [68.1, 22410.0], [68.2, 22414.0], [68.3, 22418.0], [68.4, 22423.0], [68.5, 22424.0], [68.6, 22426.0], [68.7, 22431.0], [68.8, 22433.0], [68.9, 22436.0], [69.0, 22441.0], [69.1, 22443.0], [69.2, 22444.0], [69.3, 22447.0], [69.4, 22449.0], [69.5, 22454.0], [69.6, 22456.0], [69.7, 22462.0], [69.8, 22469.0], [69.9, 22470.0], [70.0, 22474.0], [70.1, 22480.0], [70.2, 22488.0], [70.3, 22489.0], [70.4, 22494.0], [70.5, 22498.0], [70.6, 22508.0], [70.7, 22520.0], [70.8, 22540.0], [70.9, 22566.0], [71.0, 22620.0], [71.1, 22651.0], [71.2, 22666.0], [71.3, 22685.0], [71.4, 22719.0], [71.5, 22820.0], [71.6, 24621.0], [71.7, 24717.0], [71.8, 24754.0], [71.9, 24763.0], [72.0, 24767.0], [72.1, 24782.0], [72.2, 24806.0], [72.3, 24814.0], [72.4, 24831.0], [72.5, 24844.0], [72.6, 24879.0], [72.7, 24893.0], [72.8, 24918.0], [72.9, 24972.0], [73.0, 25019.0], [73.1, 25032.0], [73.2, 25049.0], [73.3, 25063.0], [73.4, 25066.0], [73.5, 25083.0], [73.6, 25088.0], [73.7, 25091.0], [73.8, 25096.0], [73.9, 25101.0], [74.0, 25106.0], [74.1, 25109.0], [74.2, 25110.0], [74.3, 25120.0], [74.4, 25126.0], [74.5, 25129.0], [74.6, 25133.0], [74.7, 25136.0], [74.8, 25149.0], [74.9, 25157.0], [75.0, 25162.0], [75.1, 25166.0], [75.2, 25174.0], [75.3, 25177.0], [75.4, 25214.0], [75.5, 25225.0], [75.6, 25240.0], [75.7, 25252.0], [75.8, 25264.0], [75.9, 25274.0], [76.0, 25279.0], [76.1, 25292.0], [76.2, 25295.0], [76.3, 25308.0], [76.4, 25317.0], [76.5, 25319.0], [76.6, 25325.0], [76.7, 25326.0], [76.8, 25328.0], [76.9, 25332.0], [77.0, 25338.0], [77.1, 25340.0], [77.2, 25345.0], [77.3, 25347.0], [77.4, 25354.0], [77.5, 25362.0], [77.6, 25365.0], [77.7, 25374.0], [77.8, 25378.0], [77.9, 25381.0], [78.0, 25386.0], [78.1, 25391.0], [78.2, 25394.0], [78.3, 25400.0], [78.4, 25404.0], [78.5, 25408.0], [78.6, 25412.0], [78.7, 25417.0], [78.8, 25425.0], [78.9, 25430.0], [79.0, 25439.0], [79.1, 25442.0], [79.2, 25443.0], [79.3, 25444.0], [79.4, 25447.0], [79.5, 25450.0], [79.6, 25457.0], [79.7, 25463.0], [79.8, 25472.0], [79.9, 25479.0], [80.0, 25492.0], [80.1, 25494.0], [80.2, 25516.0], [80.3, 25523.0], [80.4, 25534.0], [80.5, 25553.0], [80.6, 25565.0], [80.7, 25576.0], [80.8, 25581.0], [80.9, 25586.0], [81.0, 25589.0], [81.1, 25596.0], [81.2, 25604.0], [81.3, 25611.0], [81.4, 25614.0], [81.5, 25616.0], [81.6, 25641.0], [81.7, 25645.0], [81.8, 25650.0], [81.9, 25655.0], [82.0, 25665.0], [82.1, 25682.0], [82.2, 26125.0], [82.3, 26143.0], [82.4, 26153.0], [82.5, 26154.0], [82.6, 26175.0], [82.7, 26185.0], [82.8, 26207.0], [82.9, 26218.0], [83.0, 26223.0], [83.1, 26240.0], [83.2, 26268.0], [83.3, 26286.0], [83.4, 26302.0], [83.5, 26319.0], [83.6, 26334.0], [83.7, 26350.0], [83.8, 26362.0], [83.9, 26374.0], [84.0, 26381.0], [84.1, 26389.0], [84.2, 26391.0], [84.3, 26398.0], [84.4, 26405.0], [84.5, 26409.0], [84.6, 26413.0], [84.7, 26414.0], [84.8, 26417.0], [84.9, 26418.0], [85.0, 26420.0], [85.1, 26421.0], [85.2, 26423.0], [85.3, 26429.0], [85.4, 26432.0], [85.5, 26434.0], [85.6, 26435.0], [85.7, 26438.0], [85.8, 26439.0], [85.9, 26441.0], [86.0, 26441.0], [86.1, 26445.0], [86.2, 26449.0], [86.3, 26450.0], [86.4, 26452.0], [86.5, 26454.0], [86.6, 26457.0], [86.7, 26460.0], [86.8, 26463.0], [86.9, 26466.0], [87.0, 26467.0], [87.1, 26469.0], [87.2, 26471.0], [87.3, 26478.0], [87.4, 26480.0], [87.5, 26483.0], [87.6, 26485.0], [87.7, 26487.0], [87.8, 26488.0], [87.9, 26490.0], [88.0, 26493.0], [88.1, 26495.0], [88.2, 26498.0], [88.3, 26502.0], [88.4, 26506.0], [88.5, 26507.0], [88.6, 26511.0], [88.7, 26513.0], [88.8, 26516.0], [88.9, 26519.0], [89.0, 26526.0], [89.1, 26529.0], [89.2, 26534.0], [89.3, 26536.0], [89.4, 26539.0], [89.5, 26544.0], [89.6, 26551.0], [89.7, 26556.0], [89.8, 26558.0], [89.9, 26563.0], [90.0, 26568.0], [90.1, 26575.0], [90.2, 26578.0], [90.3, 26580.0], [90.4, 26585.0], [90.5, 26588.0], [90.6, 26592.0], [90.7, 26595.0], [90.8, 26603.0], [90.9, 26608.0], [91.0, 26617.0], [91.1, 26619.0], [91.2, 26620.0], [91.3, 26628.0], [91.4, 26640.0], [91.5, 26648.0], [91.6, 26660.0], [91.7, 26674.0], [91.8, 26687.0], [91.9, 26718.0], [92.0, 27793.0], [92.1, 28294.0], [92.2, 28674.0], [92.3, 29129.0], [92.4, 29492.0], [92.5, 29892.0], [92.6, 30188.0], [92.7, 30653.0], [92.8, 31030.0], [92.9, 31541.0], [93.0, 31907.0], [93.1, 32335.0], [93.2, 34970.0], [93.3, 35318.0], [93.4, 35778.0], [93.5, 36144.0], [93.6, 36570.0], [93.7, 36911.0], [93.8, 37415.0], [93.9, 37798.0], [94.0, 38288.0], [94.1, 38662.0], [94.2, 39061.0], [94.3, 39324.0], [94.4, 39431.0], [94.5, 39678.0], [94.6, 39842.0], [94.7, 40082.0], [94.8, 40228.0], [94.9, 40490.0], [95.0, 40688.0], [95.1, 40883.0], [95.2, 41048.0], [95.3, 41360.0], [95.4, 41476.0], [95.5, 41578.0], [95.6, 41720.0], [95.7, 41812.0], [95.8, 41981.0], [95.9, 42052.0], [96.0, 42308.0], [96.1, 42414.0], [96.2, 42682.0], [96.3, 42867.0], [96.4, 43058.0], [96.5, 43163.0], [96.6, 43436.0], [96.7, 43671.0], [96.8, 43904.0], [96.9, 44438.0], [97.0, 44704.0], [97.1, 45100.0], [97.2, 45328.0], [97.3, 45819.0], [97.4, 46106.0], [97.5, 46446.0], [97.6, 46643.0], [97.7, 46873.0], [97.8, 47100.0], [97.9, 47247.0], [98.0, 47499.0], [98.1, 47648.0], [98.2, 47828.0], [98.3, 48031.0], [98.4, 48276.0], [98.5, 48396.0], [98.6, 48641.0], [98.7, 48801.0], [98.8, 49032.0], [98.9, 49275.0], [99.0, 49447.0], [99.1, 49653.0], [99.2, 49830.0], [99.3, 50183.0], [99.4, 50649.0], [99.5, 51105.0], [99.6, 51435.0], [99.7, 51939.0], [99.8, 52248.0], [99.9, 52796.0], [100.0, 53111.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 155.0, "series": [{"data": [[35300.0, 1.0], [36100.0, 1.0], [36900.0, 1.0], [37700.0, 1.0], [39300.0, 2.0], [40100.0, 2.0], [40900.0, 1.0], [41700.0, 3.0], [42500.0, 2.0], [43300.0, 2.0], [44900.0, 2.0], [46500.0, 2.0], [47300.0, 2.0], [48100.0, 2.0], [48900.0, 1.0], [49700.0, 1.0], [50500.0, 1.0], [200.0, 2.0], [51300.0, 1.0], [52100.0, 1.0], [52900.0, 1.0], [300.0, 2.0], [400.0, 3.0], [500.0, 3.0], [600.0, 6.0], [700.0, 1.0], [800.0, 5.0], [900.0, 3.0], [1000.0, 4.0], [1100.0, 7.0], [1200.0, 3.0], [1300.0, 5.0], [1400.0, 4.0], [1500.0, 2.0], [1600.0, 4.0], [1700.0, 6.0], [1800.0, 5.0], [1900.0, 3.0], [2000.0, 3.0], [2100.0, 6.0], [2200.0, 3.0], [2300.0, 6.0], [2400.0, 6.0], [2500.0, 4.0], [2600.0, 3.0], [2700.0, 3.0], [2800.0, 7.0], [2900.0, 3.0], [3000.0, 4.0], [3100.0, 3.0], [3200.0, 8.0], [3300.0, 1.0], [3400.0, 4.0], [3500.0, 5.0], [3600.0, 4.0], [3700.0, 4.0], [3800.0, 5.0], [3900.0, 4.0], [4000.0, 6.0], [4100.0, 4.0], [4200.0, 5.0], [4300.0, 4.0], [4500.0, 5.0], [4400.0, 3.0], [4600.0, 2.0], [4700.0, 5.0], [4800.0, 5.0], [4900.0, 3.0], [5000.0, 6.0], [5100.0, 5.0], [5200.0, 4.0], [5300.0, 4.0], [5400.0, 5.0], [5500.0, 1.0], [5600.0, 5.0], [5700.0, 6.0], [5800.0, 6.0], [5900.0, 5.0], [6000.0, 2.0], [6100.0, 4.0], [6200.0, 6.0], [6300.0, 3.0], [6400.0, 7.0], [6500.0, 3.0], [6600.0, 5.0], [6700.0, 3.0], [6800.0, 6.0], [6900.0, 3.0], [7000.0, 3.0], [7100.0, 4.0], [7200.0, 7.0], [7300.0, 8.0], [7400.0, 3.0], [7500.0, 4.0], [7600.0, 3.0], [7700.0, 3.0], [7800.0, 5.0], [7900.0, 4.0], [8000.0, 4.0], [8100.0, 4.0], [8200.0, 5.0], [8400.0, 1.0], [8600.0, 4.0], [8800.0, 5.0], [9000.0, 4.0], [9200.0, 7.0], [9400.0, 4.0], [9600.0, 5.0], [9800.0, 5.0], [10000.0, 2.0], [10200.0, 3.0], [10400.0, 6.0], [10600.0, 6.0], [10800.0, 3.0], [11000.0, 3.0], [11200.0, 2.0], [11400.0, 4.0], [11600.0, 4.0], [11800.0, 7.0], [12000.0, 4.0], [12200.0, 4.0], [12400.0, 4.0], [12600.0, 4.0], [12800.0, 3.0], [13000.0, 4.0], [13200.0, 6.0], [13400.0, 5.0], [13600.0, 38.0], [13800.0, 85.0], [14200.0, 3.0], [14000.0, 69.0], [14400.0, 3.0], [14600.0, 1.0], [14800.0, 3.0], [15000.0, 1.0], [15200.0, 14.0], [15400.0, 41.0], [15600.0, 56.0], [15800.0, 28.0], [16000.0, 2.0], [16200.0, 1.0], [17200.0, 5.0], [16400.0, 2.0], [16800.0, 2.0], [17600.0, 51.0], [18000.0, 1.0], [18400.0, 1.0], [18800.0, 1.0], [19200.0, 56.0], [19600.0, 19.0], [20000.0, 1.0], [20800.0, 1.0], [21200.0, 1.0], [21600.0, 1.0], [22000.0, 62.0], [22400.0, 99.0], [22800.0, 1.0], [25200.0, 30.0], [24800.0, 20.0], [26400.0, 139.0], [25600.0, 34.0], [27600.0, 1.0], [28000.0, 1.0], [28800.0, 1.0], [30000.0, 2.0], [30400.0, 1.0], [30800.0, 1.0], [31200.0, 1.0], [31600.0, 1.0], [32000.0, 2.0], [32400.0, 1.0], [35200.0, 1.0], [36000.0, 1.0], [36800.0, 1.0], [37600.0, 1.0], [38400.0, 1.0], [39200.0, 1.0], [40000.0, 2.0], [40800.0, 2.0], [41600.0, 3.0], [42400.0, 1.0], [44000.0, 1.0], [44800.0, 1.0], [45600.0, 1.0], [46400.0, 2.0], [47200.0, 1.0], [48000.0, 1.0], [48800.0, 2.0], [49600.0, 2.0], [51200.0, 1.0], [52000.0, 1.0], [52800.0, 1.0], [35500.0, 1.0], [37100.0, 1.0], [37900.0, 1.0], [38700.0, 1.0], [39500.0, 2.0], [40300.0, 2.0], [41100.0, 1.0], [41900.0, 5.0], [42700.0, 2.0], [43500.0, 2.0], [45100.0, 2.0], [45900.0, 2.0], [46700.0, 2.0], [47500.0, 2.0], [48300.0, 2.0], [49100.0, 3.0], [49900.0, 1.0], [50700.0, 1.0], [51500.0, 1.0], [53100.0, 1.0], [16500.0, 2.0], [16900.0, 4.0], [17300.0, 15.0], [18100.0, 1.0], [17700.0, 34.0], [18500.0, 1.0], [18900.0, 21.0], [19300.0, 36.0], [19700.0, 1.0], [20500.0, 1.0], [20900.0, 1.0], [21300.0, 1.0], [21700.0, 8.0], [22100.0, 155.0], [22500.0, 17.0], [22900.0, 1.0], [24100.0, 1.0], [25300.0, 74.0], [24900.0, 8.0], [26500.0, 87.0], [26100.0, 23.0], [27700.0, 1.0], [28100.0, 1.0], [28500.0, 1.0], [29300.0, 2.0], [29700.0, 1.0], [30100.0, 1.0], [30500.0, 1.0], [30900.0, 1.0], [31700.0, 1.0], [35400.0, 1.0], [36200.0, 1.0], [37000.0, 1.0], [38600.0, 1.0], [39400.0, 2.0], [40200.0, 1.0], [41000.0, 2.0], [41800.0, 1.0], [42600.0, 2.0], [43400.0, 2.0], [44200.0, 1.0], [45800.0, 1.0], [46600.0, 2.0], [47400.0, 2.0], [48200.0, 3.0], [49000.0, 2.0], [49800.0, 2.0], [50600.0, 1.0], [51400.0, 1.0], [52200.0, 1.0], [34900.0, 1.0], [35700.0, 1.0], [36500.0, 1.0], [38100.0, 1.0], [39700.0, 2.0], [40500.0, 2.0], [41300.0, 3.0], [42900.0, 3.0], [43700.0, 1.0], [44500.0, 1.0], [45300.0, 1.0], [46100.0, 1.0], [46900.0, 2.0], [47700.0, 3.0], [49300.0, 2.0], [50100.0, 1.0], [50900.0, 1.0], [51700.0, 2.0], [52500.0, 1.0], [8300.0, 6.0], [8500.0, 4.0], [8700.0, 5.0], [8900.0, 4.0], [9100.0, 3.0], [9300.0, 4.0], [9500.0, 2.0], [9700.0, 6.0], [9900.0, 5.0], [10100.0, 5.0], [10500.0, 4.0], [10300.0, 1.0], [10700.0, 4.0], [10900.0, 6.0], [11100.0, 8.0], [11300.0, 4.0], [11500.0, 6.0], [11700.0, 4.0], [12100.0, 4.0], [11900.0, 4.0], [12500.0, 5.0], [12300.0, 6.0], [12700.0, 5.0], [12900.0, 5.0], [13300.0, 3.0], [13100.0, 4.0], [13700.0, 53.0], [13500.0, 7.0], [13900.0, 112.0], [14100.0, 29.0], [14300.0, 3.0], [14500.0, 4.0], [14700.0, 2.0], [14900.0, 3.0], [15100.0, 3.0], [15300.0, 50.0], [15500.0, 50.0], [15700.0, 36.0], [15900.0, 2.0], [16100.0, 3.0], [16300.0, 2.0], [16600.0, 1.0], [17000.0, 3.0], [17400.0, 21.0], [18200.0, 1.0], [17800.0, 12.0], [18600.0, 1.0], [19400.0, 112.0], [19000.0, 22.0], [19800.0, 1.0], [20200.0, 1.0], [20600.0, 1.0], [21000.0, 1.0], [21800.0, 59.0], [22200.0, 70.0], [22600.0, 12.0], [25000.0, 33.0], [25400.0, 65.0], [24600.0, 3.0], [26600.0, 40.0], [26200.0, 22.0], [28200.0, 1.0], [28600.0, 1.0], [29000.0, 1.0], [29400.0, 1.0], [29800.0, 2.0], [30600.0, 1.0], [31000.0, 1.0], [31400.0, 1.0], [32200.0, 1.0], [32600.0, 1.0], [35600.0, 1.0], [36400.0, 2.0], [37200.0, 1.0], [38000.0, 1.0], [38800.0, 1.0], [39600.0, 2.0], [40400.0, 2.0], [41200.0, 2.0], [42000.0, 3.0], [42800.0, 1.0], [43600.0, 3.0], [44400.0, 1.0], [45200.0, 1.0], [46800.0, 1.0], [47600.0, 1.0], [48400.0, 2.0], [49200.0, 1.0], [50000.0, 1.0], [52400.0, 1.0], [36700.0, 1.0], [37500.0, 1.0], [38300.0, 1.0], [39100.0, 2.0], [39900.0, 1.0], [40700.0, 1.0], [41500.0, 3.0], [42300.0, 3.0], [43100.0, 2.0], [43900.0, 2.0], [44700.0, 1.0], [45500.0, 1.0], [46300.0, 1.0], [47100.0, 3.0], [47900.0, 2.0], [48700.0, 1.0], [49500.0, 2.0], [50300.0, 1.0], [51100.0, 1.0], [51900.0, 1.0], [52700.0, 1.0], [16700.0, 3.0], [17100.0, 3.0], [17500.0, 12.0], [17900.0, 1.0], [18300.0, 1.0], [18700.0, 1.0], [19100.0, 25.0], [19500.0, 89.0], [19900.0, 1.0], [20300.0, 2.0], [20700.0, 1.0], [21100.0, 1.0], [21500.0, 1.0], [21900.0, 91.0], [22300.0, 104.0], [22700.0, 6.0], [25100.0, 52.0], [25500.0, 36.0], [24700.0, 18.0], [26300.0, 34.0], [26700.0, 4.0], [27900.0, 1.0], [28300.0, 1.0], [28700.0, 1.0], [29100.0, 1.0], [29500.0, 1.0], [30300.0, 1.0], [31100.0, 1.0], [31500.0, 1.0], [31900.0, 1.0], [32300.0, 1.0], [32700.0, 1.0], [35000.0, 1.0], [35800.0, 1.0], [37400.0, 1.0], [38200.0, 1.0], [39000.0, 2.0], [39800.0, 2.0], [40600.0, 2.0], [41400.0, 2.0], [42200.0, 2.0], [43000.0, 2.0], [44600.0, 1.0], [45400.0, 1.0], [46200.0, 1.0], [47000.0, 1.0], [47800.0, 1.0], [48600.0, 3.0], [49400.0, 2.0], [51000.0, 1.0], [52600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 53100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3495.0, "series": [{"data": [[0.0, 7.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 41.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3495.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 669.2125827814566, "minX": 1.7523918E12, "maxY": 998.9842597147068, "series": [{"data": [[1.75239186E12, 669.2125827814566], [1.7523918E12, 998.9842597147068]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239186E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6753.0, "minX": 1.0, "maxY": 26697.0, "series": [{"data": [[2.0, 26615.0], [3.0, 26617.0], [4.0, 26617.0], [5.0, 26674.0], [6.0, 26587.0], [7.0, 26479.0], [8.0, 26506.0], [9.0, 26446.0], [10.0, 26434.0], [11.0, 26511.0], [12.0, 26433.0], [13.0, 26435.0], [14.0, 26512.0], [15.0, 26450.0], [16.0, 24621.0], [17.0, 26483.0], [18.0, 24798.0], [19.0, 26539.0], [20.0, 24795.0], [21.0, 26467.0], [22.0, 24699.0], [23.0, 26498.0], [24.0, 24757.0], [25.0, 26559.0], [26.0, 24767.0], [27.0, 26529.0], [28.0, 24693.0], [29.0, 26556.0], [30.0, 24770.0], [31.0, 26630.0], [33.0, 26579.0], [32.0, 24782.0], [35.0, 26581.0], [34.0, 24717.0], [37.0, 26553.0], [36.0, 24767.0], [39.0, 26620.0], [38.0, 24777.0], [41.0, 24765.0], [40.0, 24716.0], [43.0, 26555.0], [42.0, 26550.0], [45.0, 26624.0], [44.0, 24763.0], [47.0, 24814.0], [46.0, 24738.0], [49.0, 24814.0], [48.0, 26532.0], [51.0, 26634.0], [50.0, 26538.0], [53.0, 24747.0], [52.0, 24759.0], [55.0, 24806.0], [54.0, 26563.0], [57.0, 26563.0], [56.0, 26538.0], [59.0, 24765.0], [58.0, 24754.0], [61.0, 24830.0], [60.0, 26489.0], [63.0, 24831.0], [62.0, 26489.0], [67.0, 22139.0], [66.0, 24754.0], [65.0, 26545.0], [64.0, 22143.0], [71.0, 22129.0], [70.0, 24821.0], [69.0, 26473.0], [68.0, 21968.0], [75.0, 22121.0], [74.0, 26491.0], [73.0, 21923.0], [72.0, 24831.0], [79.0, 22109.0], [78.0, 24800.0], [77.0, 26580.0], [76.0, 21925.0], [83.0, 26510.0], [82.0, 21956.0], [81.0, 24879.0], [80.0, 21965.0], [87.0, 22164.0], [86.0, 26526.0], [85.0, 24853.0], [84.0, 22106.0], [91.0, 21935.0], [90.0, 26620.0], [89.0, 24808.0], [88.0, 21897.0], [95.0, 21925.0], [94.0, 26572.0], [93.0, 22102.0], [92.0, 24876.0], [99.0, 22124.0], [98.0, 26575.0], [97.0, 22082.0], [96.0, 24889.0], [103.0, 24903.0], [102.0, 21859.0], [101.0, 26589.0], [100.0, 24823.0], [107.0, 24893.0], [106.0, 22085.0], [105.0, 26641.0], [104.0, 21922.0], [111.0, 22187.0], [110.0, 26585.0], [109.0, 22113.0], [108.0, 21937.0], [115.0, 21921.0], [114.0, 26588.0], [113.0, 21871.0], [112.0, 24843.0], [119.0, 21937.0], [118.0, 26650.0], [117.0, 22131.0], [116.0, 24907.0], [123.0, 26588.0], [122.0, 21886.0], [121.0, 22132.0], [120.0, 24894.0], [127.0, 26592.0], [126.0, 21958.0], [125.0, 24844.0], [124.0, 22118.0], [135.0, 26601.0], [134.0, 21910.0], [133.0, 22138.0], [132.0, 24925.0], [131.0, 26648.0], [130.0, 21956.0], [129.0, 22138.0], [128.0, 24861.0], [143.0, 24974.0], [142.0, 21933.0], [141.0, 22166.0], [140.0, 26602.0], [139.0, 24918.0], [138.0, 21881.0], [137.0, 24880.0], [136.0, 22156.0], [151.0, 24932.0], [150.0, 21856.0], [149.0, 26595.0], [148.0, 22178.0], [147.0, 21860.0], [146.0, 24990.0], [145.0, 22174.0], [144.0, 26660.0], [159.0, 21871.0], [158.0, 25032.0], [157.0, 22168.0], [156.0, 26674.0], [155.0, 25007.0], [154.0, 22192.0], [153.0, 26592.0], [152.0, 21932.0], [167.0, 26604.0], [166.0, 25063.0], [165.0, 21938.0], [164.0, 19138.0], [163.0, 24972.0], [162.0, 26603.0], [161.0, 21880.0], [160.0, 22186.0], [175.0, 21889.0], [174.0, 22158.0], [173.0, 19298.0], [172.0, 26662.0], [171.0, 25064.0], [170.0, 21935.0], [169.0, 19267.0], [168.0, 22159.0], [183.0, 25120.0], [182.0, 22192.0], [181.0, 19233.0], [180.0, 25098.0], [179.0, 26608.0], [178.0, 21963.0], [177.0, 22161.0], [176.0, 25019.0], [191.0, 21924.0], [190.0, 25091.0], [189.0, 26656.0], [188.0, 19311.0], [187.0, 22166.0], [186.0, 22973.0], [184.0, 21947.0], [199.0, 21975.0], [198.0, 22229.0], [197.0, 26588.0], [196.0, 19238.0], [195.0, 25173.0], [194.0, 21987.0], [193.0, 22167.0], [192.0, 25146.0], [207.0, 25133.0], [206.0, 26600.0], [205.0, 22140.0], [204.0, 21917.0], [203.0, 19329.0], [202.0, 25090.0], [201.0, 26594.0], [200.0, 19298.0], [215.0, 19359.0], [214.0, 22210.0], [213.0, 21967.0], [212.0, 19275.0], [211.0, 25154.0], [210.0, 22145.0], [209.0, 26670.0], [208.0, 21979.0], [223.0, 21950.0], [222.0, 22143.0], [221.0, 26580.0], [220.0, 25122.0], [219.0, 19364.0], [218.0, 21919.0], [217.0, 26571.0], [216.0, 25128.0], [231.0, 21872.0], [230.0, 25133.0], [229.0, 22175.0], [228.0, 19306.0], [227.0, 21921.0], [226.0, 26620.0], [225.0, 22160.0], [224.0, 25177.0], [239.0, 19405.0], [238.0, 26517.0], [237.0, 25245.0], [236.0, 21884.0], [235.0, 22169.0], [234.0, 25166.0], [233.0, 22924.5], [247.0, 25157.0], [246.0, 21857.0], [245.0, 19325.0], [244.0, 22168.0], [243.0, 26562.0], [242.0, 25221.0], [241.0, 22168.0], [240.0, 21920.0], [255.0, 22192.0], [254.0, 26460.0], [253.0, 19408.0], [252.0, 25241.0], [251.0, 22166.0], [250.0, 21870.0], [249.0, 19327.0], [248.0, 26469.0], [270.0, 25304.0], [271.0, 19433.0], [269.0, 22192.0], [268.0, 21913.0], [267.0, 26422.0], [266.0, 25285.0], [265.0, 19371.0], [264.0, 22198.0], [263.0, 21861.0], [257.0, 25270.0], [256.0, 21890.0], [259.0, 19426.0], [258.0, 22220.0], [262.0, 25227.0], [261.0, 21841.0], [260.0, 26513.0], [286.0, 22193.0], [287.0, 19445.0], [285.0, 26409.0], [284.0, 25319.0], [283.0, 21878.0], [282.0, 19374.0], [281.0, 22182.0], [280.0, 26389.0], [279.0, 25308.0], [273.0, 21912.0], [272.0, 26423.0], [275.0, 22190.0], [274.0, 19443.0], [278.0, 21835.0], [277.0, 25249.0], [276.0, 26470.0], [302.0, 22161.0], [303.0, 19466.0], [301.0, 26420.0], [300.0, 21906.0], [299.0, 25316.0], [298.0, 19403.0], [297.0, 26421.0], [296.0, 21888.0], [295.0, 25317.0], [289.0, 26471.0], [288.0, 21892.0], [291.0, 25252.0], [290.0, 22188.0], [294.0, 22255.0], [293.0, 21842.0], [292.0, 19443.0], [318.0, 26420.0], [319.0, 25280.0], [317.0, 19498.0], [316.0, 22168.0], [315.0, 21863.0], [314.0, 26417.0], [313.0, 19428.0], [312.0, 25330.0], [311.0, 25328.0], [304.0, 22172.0], [307.0, 21838.0], [306.0, 25878.0], [310.0, 21882.0], [309.0, 22225.0], [308.0, 19476.0], [334.0, 25325.0], [335.0, 21782.0], [333.0, 26416.0], [332.0, 19485.0], [331.0, 22180.0], [330.0, 21850.0], [329.0, 19451.0], [328.0, 25365.0], [327.0, 26488.0], [321.0, 19520.0], [320.0, 21809.0], [323.0, 26433.0], [322.0, 22169.0], [326.0, 22238.0], [325.0, 21851.0], [324.0, 25276.0], [350.0, 26419.0], [351.0, 19529.0], [349.0, 21769.0], [348.0, 22191.0], [347.0, 19461.0], [346.0, 25447.0], [345.0, 19433.0], [344.0, 21832.0], [343.0, 26493.0], [337.0, 26444.0], [336.0, 22179.0], [339.0, 19483.0], [338.0, 25340.0], [342.0, 22180.0], [341.0, 25441.0], [340.0, 21780.0], [366.0, 25397.0], [367.0, 21768.0], [365.0, 26444.0], [364.0, 19452.0], [363.0, 22176.0], [362.0, 21781.0], [361.0, 19450.0], [360.0, 25455.0], [359.0, 26496.0], [353.0, 22159.0], [352.0, 25362.0], [355.0, 26417.0], [354.0, 21755.0], [358.0, 21823.0], [357.0, 22178.0], [356.0, 25447.0], [382.0, 21783.0], [383.0, 19525.0], [381.0, 25374.0], [380.0, 26452.0], [379.0, 20820.5], [377.0, 21829.0], [376.0, 25427.0], [375.0, 26517.0], [369.0, 22160.0], [368.0, 19538.0], [371.0, 25425.0], [370.0, 26452.0], [374.0, 22168.0], [373.0, 19535.0], [372.0, 21828.0], [398.0, 21886.0], [399.0, 19519.0], [397.0, 26453.0], [396.0, 25381.0], [395.0, 22141.0], [394.0, 21807.0], [393.0, 19462.0], [392.0, 23640.0], [390.0, 26514.0], [385.0, 26448.0], [384.0, 22152.0], [387.0, 21842.0], [386.0, 25439.0], [389.0, 22156.0], [388.0, 19498.0], [414.0, 21946.0], [415.0, 26436.0], [413.0, 22239.0], [412.0, 25403.0], [411.0, 19443.0], [410.0, 21948.0], [409.0, 22267.0], [408.0, 21866.0], [407.0, 26496.0], [401.0, 25443.0], [400.0, 22150.0], [403.0, 21915.0], [402.0, 26457.0], [406.0, 25444.0], [405.0, 22176.0], [404.0, 19517.0], [430.0, 26432.0], [431.0, 22275.0], [429.0, 21982.0], [428.0, 19415.0], [427.0, 25394.0], [426.0, 22286.0], [425.0, 21955.0], [424.0, 26512.0], [423.0, 22318.0], [417.0, 25466.0], [416.0, 19503.0], [419.0, 26438.0], [418.0, 22235.0], [422.0, 25450.0], [421.0, 19497.0], [420.0, 21902.0], [446.0, 19564.0], [447.0, 22319.0], [445.0, 26492.0], [444.0, 25374.0], [443.0, 22292.0], [442.0, 19455.0], [441.0, 22013.0], [440.0, 26429.0], [439.0, 21993.0], [433.0, 19474.0], [432.0, 25384.0], [435.0, 26423.0], [434.0, 21966.0], [438.0, 25446.0], [437.0, 22350.0], [436.0, 19501.0], [462.0, 19516.0], [463.0, 21923.0], [461.0, 22359.0], [460.0, 26534.0], [459.0, 22343.0], [458.0, 21979.0], [457.0, 19508.0], [456.0, 25429.0], [455.0, 26445.0], [449.0, 25377.0], [448.0, 21945.0], [451.0, 22344.0], [450.0, 19576.0], [454.0, 25430.0], [453.0, 24192.0], [477.0, 26478.0], [478.0, 25339.0], [476.0, 22420.0], [467.0, 21949.0], [466.0, 26441.0], [465.0, 25345.0], [464.0, 22391.0], [475.0, 19508.0], [474.0, 22044.0], [473.0, 25404.0], [472.0, 26438.0], [471.0, 22419.0], [470.0, 22018.0], [469.0, 25408.0], [468.0, 19583.0], [494.0, 21988.0], [495.0, 19538.0], [493.0, 25343.0], [492.0, 22405.0], [491.0, 26465.0], [490.0, 22028.0], [489.0, 22510.5], [487.0, 22434.0], [481.0, 21976.0], [480.0, 20966.0], [483.0, 26406.0], [482.0, 25409.0], [486.0, 26430.0], [485.0, 22027.0], [484.0, 19570.0], [510.0, 19543.0], [511.0, 22367.0], [509.0, 21999.0], [508.0, 25326.0], [507.0, 26411.0], [506.0, 22397.0], [505.0, 19615.0], [504.0, 22370.0], [503.0, 26381.0], [497.0, 25391.0], [496.0, 22407.0], [499.0, 22035.0], [498.0, 26379.0], [502.0, 22057.0], [501.0, 25381.0], [500.0, 19601.0], [540.0, 22078.0], [543.0, 22280.0], [529.0, 19613.0], [528.0, 25387.0], [531.0, 26307.0], [530.0, 22095.0], [533.0, 25401.0], [532.0, 22363.0], [542.0, 25343.0], [541.0, 19538.0], [539.0, 26403.0], [538.0, 25341.0], [537.0, 22283.0], [536.0, 22050.0], [527.0, 22335.0], [513.0, 25367.0], [512.0, 22080.0], [515.0, 19597.0], [514.0, 26340.0], [517.0, 22078.0], [516.0, 22421.0], [519.0, 19613.0], [518.0, 25365.0], [526.0, 22120.0], [525.0, 19544.0], [524.0, 25317.0], [523.0, 26390.0], [522.0, 22025.0], [521.0, 22330.0], [520.0, 26344.0], [535.0, 19614.0], [534.0, 26323.0], [572.0, 22153.0], [575.0, 19492.0], [561.0, 25340.0], [560.0, 26319.0], [563.0, 19582.0], [562.0, 22233.0], [565.0, 25338.0], [564.0, 22120.0], [574.0, 25337.0], [573.0, 22204.0], [571.0, 25271.0], [570.0, 26218.0], [569.0, 22240.0], [568.0, 22132.0], [559.0, 19516.0], [545.0, 26294.0], [544.0, 22131.0], [547.0, 22354.0], [546.0, 19597.0], [549.0, 22084.0], [548.0, 25368.0], [551.0, 19594.0], [550.0, 26286.0], [558.0, 22265.0], [557.0, 22181.0], [556.0, 25317.0], [555.0, 26274.0], [554.0, 22097.0], [553.0, 22267.0], [552.0, 25310.0], [567.0, 19573.0], [566.0, 26216.0], [604.0, 26139.0], [607.0, 22152.0], [592.0, 22862.5], [594.0, 22211.0], [593.0, 22172.0], [596.0, 25328.0], [595.0, 19473.0], [606.0, 22220.0], [605.0, 25386.0], [603.0, 19532.0], [602.0, 22136.0], [601.0, 22214.0], [600.0, 25363.0], [590.0, 25354.0], [576.0, 26288.0], [579.0, 22140.0], [578.0, 23769.0], [581.0, 26222.0], [580.0, 19461.0], [583.0, 22118.0], [582.0, 25303.0], [589.0, 22223.0], [588.0, 25327.0], [587.0, 26207.0], [586.0, 22176.0], [585.0, 22220.0], [584.0, 19520.0], [599.0, 19533.0], [598.0, 24148.5], [636.0, 22258.0], [639.0, 26229.0], [625.0, 22248.0], [624.0, 26230.0], [627.0, 25449.0], [626.0, 22125.0], [629.0, 22308.0], [628.0, 19450.0], [638.0, 19479.0], [637.0, 25443.0], [635.0, 26180.0], [634.0, 22174.0], [633.0, 19508.0], [632.0, 26154.0], [623.0, 25393.0], [609.0, 22221.0], [608.0, 26185.0], [611.0, 19464.0], [610.0, 25338.0], [613.0, 25417.0], [612.0, 22094.0], [615.0, 26122.0], [614.0, 19526.0], [622.0, 19520.0], [621.0, 22236.0], [620.0, 22159.0], [619.0, 26147.0], [618.0, 25443.0], [617.0, 22225.0], [616.0, 22155.0], [631.0, 25472.0], [630.0, 22172.0], [668.0, 26168.0], [665.0, 6753.0], [671.0, 22305.0], [657.0, 25453.0], [656.0, 22288.0], [659.0, 22332.0], [658.0, 22116.0], [661.0, 25513.0], [660.0, 22169.0], [670.0, 19540.0], [669.0, 22116.0], [667.0, 22114.0], [666.0, 22307.0], [664.0, 25518.0], [655.0, 26241.0], [641.0, 22259.0], [640.0, 22114.0], [643.0, 22126.0], [642.0, 25478.0], [645.0, 22327.0], [644.0, 19425.0], [647.0, 22180.0], [646.0, 25492.0], [654.0, 19504.0], [653.0, 22113.0], [652.0, 25442.0], [651.0, 22299.0], [650.0, 26200.0], [649.0, 19509.0], [648.0, 26175.0], [663.0, 26165.0], [662.0, 19450.0], [700.0, 25526.0], [703.0, 19561.0], [689.0, 26151.0], [688.0, 22196.0], [691.0, 22346.0], [690.0, 22221.0], [693.0, 19486.0], [692.0, 25546.0], [702.0, 22345.0], [701.0, 26143.0], [699.0, 22197.0], [698.0, 19487.0], [697.0, 22361.0], [696.0, 22163.0], [687.0, 19553.0], [673.0, 22150.0], [672.0, 25463.0], [675.0, 22398.0], [674.0, 26155.0], [677.0, 19471.0], [676.0, 25516.0], [679.0, 26218.0], [678.0, 22165.0], [686.0, 25495.0], [685.0, 22339.0], [684.0, 26148.0], [683.0, 22143.0], [682.0, 19560.0], [681.0, 22336.0], [680.0, 25523.0], [695.0, 25572.0], [694.0, 26212.0], [728.0, 26177.0], [733.0, 22395.0], [730.0, 12997.5], [710.0, 13331.0], [709.0, 25584.0], [708.0, 22163.0], [707.0, 26141.0], [706.0, 22335.0], [705.0, 25564.0], [704.0, 22209.0], [711.0, 19477.0], [719.0, 22385.0], [718.0, 26154.0], [717.0, 22225.0], [716.0, 19472.0], [715.0, 25530.0], [714.0, 22388.0], [713.0, 22199.0], [712.0, 22373.0], [735.0, 25865.5], [721.0, 19535.0], [720.0, 25593.0], [723.0, 26154.0], [722.0, 22179.0], [725.0, 19527.0], [724.0, 25607.0], [732.0, 19447.0], [731.0, 22381.0], [729.0, 22262.0], [727.0, 22382.0], [726.0, 22253.0], [764.0, 22254.0], [767.0, 22397.0], [753.0, 19498.0], [752.0, 26153.0], [755.0, 25608.0], [754.0, 22254.0], [757.0, 22449.0], [756.0, 26240.0], [766.0, 19424.0], [765.0, 26223.0], [763.0, 25578.0], [762.0, 22397.0], [761.0, 25576.0], [760.0, 26212.0], [751.0, 22396.0], [737.0, 19514.0], [736.0, 22218.0], [739.0, 22461.0], [738.0, 26112.0], [741.0, 22219.0], [740.0, 25589.0], [743.0, 26186.0], [742.0, 19505.0], [750.0, 25614.0], [749.0, 22260.0], [748.0, 19462.0], [747.0, 26125.0], [746.0, 22397.0], [745.0, 25553.0], [744.0, 22278.0], [759.0, 22308.0], [758.0, 19508.0], [796.0, 13384.0], [799.0, 22426.0], [784.0, 22395.0], [786.0, 25593.0], [785.0, 26268.0], [788.0, 22300.0], [787.0, 19462.0], [798.0, 22199.0], [797.0, 19449.0], [795.0, 25561.0], [794.0, 22443.0], [793.0, 22264.0], [792.0, 22443.0], [782.0, 19432.0], [768.0, 22271.0], [771.0, 22550.5], [769.0, 26313.0], [773.0, 22320.0], [772.0, 22461.0], [775.0, 19487.0], [774.0, 25596.0], [781.0, 25542.0], [780.0, 26268.0], [779.0, 22436.0], [778.0, 22320.0], [777.0, 22405.0], [776.0, 26259.0], [791.0, 25966.5], [789.0, 19493.0], [828.0, 22128.0], [800.0, 13090.5], [801.0, 19507.0], [803.0, 22245.0], [802.0, 26306.0], [805.0, 26398.0], [804.0, 25581.0], [807.0, 22220.0], [806.0, 19508.0], [815.0, 22404.0], [814.0, 25600.0], [813.0, 22153.0], [812.0, 19447.0], [811.0, 26334.0], [810.0, 22408.0], [809.0, 25534.0], [808.0, 22425.0], [831.0, 25650.0], [817.0, 25632.0], [816.0, 26319.0], [819.0, 19454.0], [818.0, 22187.0], [821.0, 19540.0], [820.0, 26390.0], [823.0, 22408.0], [822.0, 22167.0], [830.0, 19467.0], [829.0, 26358.0], [827.0, 22418.0], [826.0, 25666.0], [825.0, 26355.0], [824.0, 25597.0], [857.0, 19523.0], [862.0, 22388.0], [863.0, 26498.0], [849.0, 22210.0], [848.0, 26483.0], [851.0, 19473.0], [850.0, 22393.0], [853.0, 22444.0], [852.0, 25615.0], [861.0, 19515.0], [860.0, 25682.0], [859.0, 24298.0], [856.0, 22165.0], [839.0, 26396.0], [838.0, 19533.0], [837.0, 25611.0], [836.0, 22153.0], [835.0, 19461.0], [834.0, 26445.0], [833.0, 22293.0], [847.0, 25655.0], [846.0, 22241.0], [845.0, 22395.0], [844.0, 26405.0], [843.0, 19549.0], [842.0, 25656.0], [841.0, 22160.0], [840.0, 22401.0], [855.0, 25676.0], [854.0, 26432.0], [891.0, 11367.0], [871.0, 13545.0], [879.0, 25645.0], [864.0, 22194.0], [866.0, 25613.0], [865.0, 22379.0], [868.0, 22441.0], [867.0, 19431.0], [870.0, 25615.0], [869.0, 22149.0], [878.0, 22183.0], [877.0, 22378.0], [876.0, 19499.0], [875.0, 25650.0], [874.0, 26443.0], [873.0, 22122.0], [872.0, 19486.0], [895.0, 22172.0], [881.0, 22396.0], [880.0, 26507.0], [883.0, 19436.0], [882.0, 22182.0], [885.0, 25565.0], [884.0, 22462.0], [887.0, 22111.0], [886.0, 26441.0], [894.0, 26454.0], [893.0, 19470.0], [892.0, 22400.0], [890.0, 25643.0], [889.0, 26472.0], [888.0, 19488.0], [924.0, 22367.0], [899.0, 10029.5], [908.0, 11446.0], [907.0, 22177.0], [906.0, 26462.0], [905.0, 19469.0], [904.0, 23902.5], [909.0, 25646.0], [911.0, 26467.0], [896.0, 25641.0], [898.0, 26524.0], [897.0, 22367.0], [910.0, 19462.0], [927.0, 22368.0], [912.0, 22348.0], [914.0, 26536.0], [913.0, 22123.0], [917.0, 22350.0], [916.0, 22493.5], [919.0, 19500.0], [918.0, 22168.0], [926.0, 26466.0], [925.0, 25618.0], [923.0, 19529.0], [922.0, 26463.0], [921.0, 22146.0], [920.0, 25620.0], [902.0, 22433.0], [901.0, 25581.0], [900.0, 22107.0], [956.0, 19578.0], [959.0, 26451.0], [945.0, 25611.0], [944.0, 19497.0], [947.0, 22384.0], [946.0, 22181.0], [949.0, 26529.0], [948.0, 19516.0], [958.0, 22380.0], [957.0, 22100.0], [955.0, 26450.0], [954.0, 22382.0], [953.0, 25641.0], [952.0, 19563.0], [943.0, 26463.0], [929.0, 19490.0], [928.0, 22094.0], [931.0, 26531.0], [930.0, 25583.0], [933.0, 22379.0], [932.0, 22154.0], [935.0, 19483.0], [934.0, 25663.0], [942.0, 22392.0], [941.0, 22131.0], [940.0, 26457.0], [939.0, 22376.0], [938.0, 25665.0], [937.0, 19544.0], [936.0, 22153.0], [951.0, 22178.0], [950.0, 25662.0], [988.0, 19588.0], [991.0, 26467.0], [977.0, 25586.0], [976.0, 22059.0], [979.0, 22332.0], [978.0, 26524.0], [981.0, 22104.0], [980.0, 19500.0], [990.0, 22315.0], [989.0, 22060.0], [987.0, 25604.0], [986.0, 26471.0], [985.0, 22102.0], [984.0, 19573.0], [975.0, 26457.0], [961.0, 25591.0], [960.0, 22105.0], [963.0, 22372.0], [962.0, 19523.0], [965.0, 22144.0], [964.0, 26516.0], [967.0, 19599.0], [966.0, 25650.0], [974.0, 22333.0], [973.0, 25588.0], [972.0, 19600.0], [971.0, 22058.0], [970.0, 26459.0], [969.0, 25650.0], [968.0, 22410.0], [983.0, 22389.0], [982.0, 25613.0], [1000.0, 18783.657842749904], [999.0, 25991.5], [998.0, 22377.0], [997.0, 20846.5], [996.0, 23934.0], [995.0, 26541.0], [994.0, 19536.0], [993.0, 22114.0], [992.0, 25522.0], [1.0, 26697.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[858.4380468529496, 20034.04064352248]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5914.166666666667, "minX": 1.7523918E12, "maxY": 9891.7, "series": [{"data": [[1.75239186E12, 7319.766666666666], [1.7523918E12, 9891.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75239186E12, 5914.166666666667], [1.7523918E12, 7962.583333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239186E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16573.293162813592, "minX": 1.7523918E12, "maxY": 24693.44437086093, "series": [{"data": [[1.75239186E12, 24693.44437086093], [1.7523918E12, 16573.293162813592]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239186E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 16573.257255287757, "minX": 1.7523918E12, "maxY": 24693.42582781462, "series": [{"data": [[1.75239186E12, 24693.42582781462], [1.7523918E12, 16573.257255287757]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239186E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.18476821192053014, "minX": 1.7523918E12, "maxY": 38.88785046728974, "series": [{"data": [[1.75239186E12, 0.18476821192053014], [1.7523918E12, 38.88785046728974]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239186E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 224.0, "minX": 1.7523918E12, "maxY": 53111.0, "series": [{"data": [[1.75239186E12, 53111.0], [1.7523918E12, 47171.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75239186E12, 26538.9], [1.7523918E12, 28357.000000000015]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75239186E12, 51424.88000000001], [1.7523918E12, 45769.02000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75239186E12, 47183.75000000001], [1.7523918E12, 40689.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75239186E12, 19138.0], [1.7523918E12, 224.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75239186E12, 22459.5], [1.7523918E12, 15333.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239186E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 560.0, "minX": 5.0, "maxY": 26617.0, "series": [{"data": [[32.0, 24777.0], [37.0, 23507.5], [40.0, 6152.0], [41.0, 19257.0], [43.0, 22065.0], [42.0, 17556.0], [44.0, 20690.0], [45.0, 19443.0], [46.0, 19474.5], [14.0, 26442.5], [15.0, 560.0], [17.0, 24830.0], [18.0, 25655.5], [5.0, 26617.0], [7.0, 26479.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 46.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 560.0, "minX": 5.0, "maxY": 26617.0, "series": [{"data": [[32.0, 24777.0], [37.0, 23507.5], [40.0, 6152.0], [41.0, 19257.0], [43.0, 22065.0], [42.0, 17556.0], [44.0, 20690.0], [45.0, 19443.0], [46.0, 19474.5], [14.0, 26442.5], [15.0, 560.0], [17.0, 24830.0], [18.0, 25655.5], [5.0, 26617.0], [7.0, 26479.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 46.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.5, "minX": 1.7523918E12, "maxY": 50.55, "series": [{"data": [[1.75239186E12, 8.5], [1.7523918E12, 50.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239186E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 25.166666666666668, "minX": 1.7523918E12, "maxY": 33.88333333333333, "series": [{"data": [[1.75239186E12, 25.166666666666668], [1.7523918E12, 33.88333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239186E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 25.166666666666668, "minX": 1.7523918E12, "maxY": 33.88333333333333, "series": [{"data": [[1.75239186E12, 25.166666666666668], [1.7523918E12, 33.88333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239186E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.166666666666668, "minX": 1.7523918E12, "maxY": 33.88333333333333, "series": [{"data": [[1.75239186E12, 25.166666666666668], [1.7523918E12, 33.88333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239186E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

