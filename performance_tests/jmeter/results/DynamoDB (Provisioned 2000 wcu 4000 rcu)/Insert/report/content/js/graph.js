/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 105.0, "minX": 0.0, "maxY": 43673.0, "series": [{"data": [[0.0, 105.0], [0.1, 208.0], [0.2, 254.0], [0.3, 345.0], [0.4, 456.0], [0.5, 659.0], [0.6, 749.0], [0.7, 767.0], [0.8, 816.0], [0.9, 935.0], [1.0, 971.0], [1.1, 1056.0], [1.2, 1149.0], [1.3, 1208.0], [1.4, 1281.0], [1.5, 1342.0], [1.6, 1445.0], [1.7, 1494.0], [1.8, 1561.0], [1.9, 1686.0], [2.0, 1741.0], [2.1, 1844.0], [2.2, 1954.0], [2.3, 2032.0], [2.4, 2122.0], [2.5, 2214.0], [2.6, 2275.0], [2.7, 2363.0], [2.8, 2502.0], [2.9, 2573.0], [3.0, 2696.0], [3.1, 2745.0], [3.2, 2855.0], [3.3, 2914.0], [3.4, 2951.0], [3.5, 3019.0], [3.6, 3170.0], [3.7, 3222.0], [3.8, 3293.0], [3.9, 3405.0], [4.0, 3445.0], [4.1, 3538.0], [4.2, 3597.0], [4.3, 3633.0], [4.4, 3691.0], [4.5, 3879.0], [4.6, 4015.0], [4.7, 4047.0], [4.8, 4120.0], [4.9, 4161.0], [5.0, 4231.0], [5.1, 4319.0], [5.2, 4432.0], [5.3, 4460.0], [5.4, 4540.0], [5.5, 4607.0], [5.6, 4750.0], [5.7, 4840.0], [5.8, 4893.0], [5.9, 4973.0], [6.0, 5047.0], [6.1, 5158.0], [6.2, 5238.0], [6.3, 5319.0], [6.4, 5416.0], [6.5, 5500.0], [6.6, 5539.0], [6.7, 5614.0], [6.8, 5686.0], [6.9, 5854.0], [7.0, 5890.0], [7.1, 5944.0], [7.2, 6010.0], [7.3, 6065.0], [7.4, 6128.0], [7.5, 6198.0], [7.6, 6255.0], [7.7, 6399.0], [7.8, 6470.0], [7.9, 6623.0], [8.0, 6672.0], [8.1, 6751.0], [8.2, 6798.0], [8.3, 6868.0], [8.4, 7030.0], [8.5, 7108.0], [8.6, 7240.0], [8.7, 7268.0], [8.8, 7356.0], [8.9, 7492.0], [9.0, 7581.0], [9.1, 7648.0], [9.2, 7743.0], [9.3, 7792.0], [9.4, 7820.0], [9.5, 7831.0], [9.6, 7833.0], [9.7, 7847.0], [9.8, 7852.0], [9.9, 7862.0], [10.0, 7872.0], [10.1, 7873.0], [10.2, 7881.0], [10.3, 7886.0], [10.4, 7894.0], [10.5, 7907.0], [10.6, 7919.0], [10.7, 7955.0], [10.8, 7980.0], [10.9, 8006.0], [11.0, 8057.0], [11.1, 8068.0], [11.2, 8073.0], [11.3, 8080.0], [11.4, 8097.0], [11.5, 8125.0], [11.6, 8132.0], [11.7, 8219.0], [11.8, 8289.0], [11.9, 8340.0], [12.0, 8428.0], [12.1, 8465.0], [12.2, 8587.0], [12.3, 8681.0], [12.4, 8807.0], [12.5, 8922.0], [12.6, 8971.0], [12.7, 8990.0], [12.8, 9003.0], [12.9, 9011.0], [13.0, 9020.0], [13.1, 9022.0], [13.2, 9028.0], [13.3, 9032.0], [13.4, 9036.0], [13.5, 9052.0], [13.6, 9057.0], [13.7, 9091.0], [13.8, 9111.0], [13.9, 9119.0], [14.0, 9136.0], [14.1, 9173.0], [14.2, 9180.0], [14.3, 9189.0], [14.4, 9191.0], [14.5, 9201.0], [14.6, 9209.0], [14.7, 9218.0], [14.8, 9220.0], [14.9, 9228.0], [15.0, 9277.0], [15.1, 9317.0], [15.2, 9437.0], [15.3, 9514.0], [15.4, 9581.0], [15.5, 9597.0], [15.6, 9616.0], [15.7, 9631.0], [15.8, 9642.0], [15.9, 9646.0], [16.0, 9650.0], [16.1, 9656.0], [16.2, 9660.0], [16.3, 9673.0], [16.4, 9682.0], [16.5, 9689.0], [16.6, 9695.0], [16.7, 9700.0], [16.8, 9704.0], [16.9, 9711.0], [17.0, 9717.0], [17.1, 9730.0], [17.2, 9734.0], [17.3, 9741.0], [17.4, 9746.0], [17.5, 9749.0], [17.6, 9750.0], [17.7, 9754.0], [17.8, 9758.0], [17.9, 9760.0], [18.0, 9774.0], [18.1, 9780.0], [18.2, 9781.0], [18.3, 9783.0], [18.4, 9795.0], [18.5, 9803.0], [18.6, 9805.0], [18.7, 9818.0], [18.8, 9828.0], [18.9, 9833.0], [19.0, 9838.0], [19.1, 9872.0], [19.2, 9875.0], [19.3, 9907.0], [19.4, 9913.0], [19.5, 9941.0], [19.6, 9970.0], [19.7, 10000.0], [19.8, 10038.0], [19.9, 10128.0], [20.0, 10259.0], [20.1, 10424.0], [20.2, 10648.0], [20.3, 10964.0], [20.4, 11377.0], [20.5, 11759.0], [20.6, 12182.0], [20.7, 12569.0], [20.8, 12805.0], [20.9, 13108.0], [21.0, 13356.0], [21.1, 13368.0], [21.2, 13379.0], [21.3, 13401.0], [21.4, 13414.0], [21.5, 13422.0], [21.6, 13427.0], [21.7, 13430.0], [21.8, 13447.0], [21.9, 13454.0], [22.0, 13466.0], [22.1, 13471.0], [22.2, 13489.0], [22.3, 13517.0], [22.4, 13537.0], [22.5, 13558.0], [22.6, 13566.0], [22.7, 13583.0], [22.8, 13601.0], [22.9, 13609.0], [23.0, 13621.0], [23.1, 13629.0], [23.2, 13638.0], [23.3, 13655.0], [23.4, 13662.0], [23.5, 13681.0], [23.6, 13697.0], [23.7, 13705.0], [23.8, 13710.0], [23.9, 13722.0], [24.0, 14211.0], [24.1, 14222.0], [24.2, 14224.0], [24.3, 14230.0], [24.4, 14242.0], [24.5, 14266.0], [24.6, 14272.0], [24.7, 14279.0], [24.8, 14283.0], [24.9, 14290.0], [25.0, 14298.0], [25.1, 14300.0], [25.2, 14305.0], [25.3, 14311.0], [25.4, 14316.0], [25.5, 14318.0], [25.6, 14323.0], [25.7, 14334.0], [25.8, 14338.0], [25.9, 14354.0], [26.0, 14368.0], [26.1, 14373.0], [26.2, 15777.0], [26.3, 15826.0], [26.4, 15873.0], [26.5, 15915.0], [26.6, 15985.0], [26.7, 16038.0], [26.8, 16048.0], [26.9, 16069.0], [27.0, 16088.0], [27.1, 16093.0], [27.2, 16101.0], [27.3, 16134.0], [27.4, 16139.0], [27.5, 16151.0], [27.6, 16161.0], [27.7, 16164.0], [27.8, 16168.0], [27.9, 16170.0], [28.0, 16177.0], [28.1, 16185.0], [28.2, 16205.0], [28.3, 16221.0], [28.4, 16233.0], [28.5, 16257.0], [28.6, 16857.0], [28.7, 17289.0], [28.8, 17640.0], [28.9, 17954.0], [29.0, 18188.0], [29.1, 18274.0], [29.2, 18504.0], [29.3, 18741.0], [29.4, 18810.0], [29.5, 18941.0], [29.6, 19095.0], [29.7, 19225.0], [29.8, 19318.0], [29.9, 19518.0], [30.0, 19547.0], [30.1, 19568.0], [30.2, 19579.0], [30.3, 19589.0], [30.4, 19593.0], [30.5, 19598.0], [30.6, 19599.0], [30.7, 19601.0], [30.8, 19604.0], [30.9, 19606.0], [31.0, 19608.0], [31.1, 19611.0], [31.2, 19613.0], [31.3, 19615.0], [31.4, 19618.0], [31.5, 19622.0], [31.6, 19623.0], [31.7, 19638.0], [31.8, 19657.0], [31.9, 19664.0], [32.0, 19668.0], [32.1, 19678.0], [32.2, 19685.0], [32.3, 19692.0], [32.4, 19695.0], [32.5, 19718.0], [32.6, 19725.0], [32.7, 19727.0], [32.8, 19736.0], [32.9, 19747.0], [33.0, 19748.0], [33.1, 19749.0], [33.2, 19754.0], [33.3, 19756.0], [33.4, 19759.0], [33.5, 19765.0], [33.6, 19774.0], [33.7, 19780.0], [33.8, 19786.0], [33.9, 19791.0], [34.0, 19800.0], [34.1, 19812.0], [34.2, 19821.0], [34.3, 19828.0], [34.4, 19829.0], [34.5, 19834.0], [34.6, 19841.0], [34.7, 19851.0], [34.8, 19862.0], [34.9, 19881.0], [35.0, 19910.0], [35.1, 19922.0], [35.2, 19932.0], [35.3, 19950.0], [35.4, 19972.0], [35.5, 19995.0], [35.6, 20021.0], [35.7, 20043.0], [35.8, 20047.0], [35.9, 20050.0], [36.0, 20051.0], [36.1, 20058.0], [36.2, 20065.0], [36.3, 20076.0], [36.4, 20097.0], [36.5, 20106.0], [36.6, 20152.0], [36.7, 20178.0], [36.8, 20238.0], [36.9, 20296.0], [37.0, 20336.0], [37.1, 20386.0], [37.2, 20421.0], [37.3, 20441.0], [37.4, 20483.0], [37.5, 20496.0], [37.6, 20506.0], [37.7, 20525.0], [37.8, 20533.0], [37.9, 20538.0], [38.0, 20543.0], [38.1, 20546.0], [38.2, 20551.0], [38.3, 20554.0], [38.4, 20560.0], [38.5, 20564.0], [38.6, 20567.0], [38.7, 20569.0], [38.8, 20572.0], [38.9, 20576.0], [39.0, 20580.0], [39.1, 20585.0], [39.2, 20589.0], [39.3, 20591.0], [39.4, 20596.0], [39.5, 20606.0], [39.6, 20615.0], [39.7, 20619.0], [39.8, 20627.0], [39.9, 20640.0], [40.0, 20649.0], [40.1, 20656.0], [40.2, 20661.0], [40.3, 20661.0], [40.4, 20667.0], [40.5, 20669.0], [40.6, 20671.0], [40.7, 20677.0], [40.8, 20681.0], [40.9, 20685.0], [41.0, 20688.0], [41.1, 20696.0], [41.2, 20699.0], [41.3, 20703.0], [41.4, 20722.0], [41.5, 20728.0], [41.6, 20732.0], [41.7, 20746.0], [41.8, 20750.0], [41.9, 20752.0], [42.0, 20754.0], [42.1, 20755.0], [42.2, 20758.0], [42.3, 20760.0], [42.4, 20761.0], [42.5, 20764.0], [42.6, 20769.0], [42.7, 20774.0], [42.8, 20784.0], [42.9, 20788.0], [43.0, 20789.0], [43.1, 20791.0], [43.2, 20795.0], [43.3, 20797.0], [43.4, 20801.0], [43.5, 20806.0], [43.6, 20809.0], [43.7, 20812.0], [43.8, 20816.0], [43.9, 20817.0], [44.0, 20820.0], [44.1, 20822.0], [44.2, 20828.0], [44.3, 20830.0], [44.4, 20832.0], [44.5, 20835.0], [44.6, 20837.0], [44.7, 20839.0], [44.8, 20842.0], [44.9, 20843.0], [45.0, 20849.0], [45.1, 20855.0], [45.2, 20857.0], [45.3, 20859.0], [45.4, 20861.0], [45.5, 20864.0], [45.6, 20865.0], [45.7, 20869.0], [45.8, 20873.0], [45.9, 20875.0], [46.0, 20878.0], [46.1, 20882.0], [46.2, 20884.0], [46.3, 20885.0], [46.4, 20887.0], [46.5, 20890.0], [46.6, 20893.0], [46.7, 20897.0], [46.8, 20903.0], [46.9, 20906.0], [47.0, 20911.0], [47.1, 20915.0], [47.2, 20918.0], [47.3, 20920.0], [47.4, 20926.0], [47.5, 20932.0], [47.6, 20935.0], [47.7, 20938.0], [47.8, 20941.0], [47.9, 20942.0], [48.0, 20944.0], [48.1, 20945.0], [48.2, 20945.0], [48.3, 20946.0], [48.4, 20948.0], [48.5, 20950.0], [48.6, 20954.0], [48.7, 20957.0], [48.8, 20959.0], [48.9, 20962.0], [49.0, 20967.0], [49.1, 20976.0], [49.2, 20977.0], [49.3, 20980.0], [49.4, 20987.0], [49.5, 20989.0], [49.6, 20995.0], [49.7, 21003.0], [49.8, 21007.0], [49.9, 21011.0], [50.0, 21028.0], [50.1, 21033.0], [50.2, 21037.0], [50.3, 21041.0], [50.4, 21050.0], [50.5, 21053.0], [50.6, 21054.0], [50.7, 21060.0], [50.8, 21066.0], [50.9, 21070.0], [51.0, 21072.0], [51.1, 21074.0], [51.2, 21077.0], [51.3, 21081.0], [51.4, 21085.0], [51.5, 21087.0], [51.6, 21088.0], [51.7, 21090.0], [51.8, 21091.0], [51.9, 21094.0], [52.0, 21099.0], [52.1, 21102.0], [52.2, 21103.0], [52.3, 21104.0], [52.4, 21109.0], [52.5, 21109.0], [52.6, 21115.0], [52.7, 21117.0], [52.8, 21119.0], [52.9, 21122.0], [53.0, 21123.0], [53.1, 21126.0], [53.2, 21127.0], [53.3, 21132.0], [53.4, 21134.0], [53.5, 21136.0], [53.6, 21140.0], [53.7, 21142.0], [53.8, 21144.0], [53.9, 21148.0], [54.0, 21150.0], [54.1, 21151.0], [54.2, 21152.0], [54.3, 21154.0], [54.4, 21155.0], [54.5, 21159.0], [54.6, 21162.0], [54.7, 21163.0], [54.8, 21166.0], [54.9, 21170.0], [55.0, 21172.0], [55.1, 21179.0], [55.2, 21182.0], [55.3, 21188.0], [55.4, 21195.0], [55.5, 21200.0], [55.6, 21204.0], [55.7, 21214.0], [55.8, 21222.0], [55.9, 21234.0], [56.0, 21245.0], [56.1, 21249.0], [56.2, 21295.0], [56.3, 21406.0], [56.4, 21561.0], [56.5, 21589.0], [56.6, 21603.0], [56.7, 21607.0], [56.8, 21611.0], [56.9, 21614.0], [57.0, 21618.0], [57.1, 21623.0], [57.2, 21630.0], [57.3, 21638.0], [57.4, 21646.0], [57.5, 21647.0], [57.6, 21653.0], [57.7, 21654.0], [57.8, 21657.0], [57.9, 21662.0], [58.0, 21664.0], [58.1, 21667.0], [58.2, 21671.0], [58.3, 21674.0], [58.4, 21675.0], [58.5, 21675.0], [58.6, 21678.0], [58.7, 21682.0], [58.8, 21682.0], [58.9, 21688.0], [59.0, 21691.0], [59.1, 21692.0], [59.2, 21693.0], [59.3, 21694.0], [59.4, 21696.0], [59.5, 21697.0], [59.6, 21700.0], [59.7, 21702.0], [59.8, 21706.0], [59.9, 21710.0], [60.0, 21713.0], [60.1, 21714.0], [60.2, 21716.0], [60.3, 21722.0], [60.4, 21724.0], [60.5, 21726.0], [60.6, 21728.0], [60.7, 21728.0], [60.8, 21731.0], [60.9, 21734.0], [61.0, 21735.0], [61.1, 21737.0], [61.2, 21740.0], [61.3, 21741.0], [61.4, 21743.0], [61.5, 21744.0], [61.6, 21749.0], [61.7, 21752.0], [61.8, 21753.0], [61.9, 21756.0], [62.0, 21758.0], [62.1, 21760.0], [62.2, 21763.0], [62.3, 21765.0], [62.4, 21766.0], [62.5, 21768.0], [62.6, 21772.0], [62.7, 21773.0], [62.8, 21773.0], [62.9, 21776.0], [63.0, 21778.0], [63.1, 21779.0], [63.2, 21782.0], [63.3, 21786.0], [63.4, 21787.0], [63.5, 21791.0], [63.6, 21793.0], [63.7, 21794.0], [63.8, 21798.0], [63.9, 21803.0], [64.0, 21807.0], [64.1, 21810.0], [64.2, 21811.0], [64.3, 21812.0], [64.4, 21813.0], [64.5, 21814.0], [64.6, 21816.0], [64.7, 21818.0], [64.8, 21819.0], [64.9, 21820.0], [65.0, 21821.0], [65.1, 21823.0], [65.2, 21826.0], [65.3, 21830.0], [65.4, 21831.0], [65.5, 21838.0], [65.6, 21845.0], [65.7, 21846.0], [65.8, 21848.0], [65.9, 21852.0], [66.0, 21857.0], [66.1, 21860.0], [66.2, 21866.0], [66.3, 21871.0], [66.4, 21880.0], [66.5, 21883.0], [66.6, 21886.0], [66.7, 21893.0], [66.8, 21910.0], [66.9, 22028.0], [67.0, 22045.0], [67.1, 22105.0], [67.2, 22122.0], [67.3, 22127.0], [67.4, 22134.0], [67.5, 22143.0], [67.6, 22153.0], [67.7, 22156.0], [67.8, 22162.0], [67.9, 22166.0], [68.0, 22168.0], [68.1, 22175.0], [68.2, 22187.0], [68.3, 22220.0], [68.4, 22251.0], [68.5, 22329.0], [68.6, 22375.0], [68.7, 22387.0], [68.8, 22432.0], [68.9, 22453.0], [69.0, 22473.0], [69.1, 22481.0], [69.2, 22492.0], [69.3, 22495.0], [69.4, 22498.0], [69.5, 22500.0], [69.6, 22503.0], [69.7, 22508.0], [69.8, 22515.0], [69.9, 22520.0], [70.0, 22523.0], [70.1, 22526.0], [70.2, 22534.0], [70.3, 22538.0], [70.4, 22548.0], [70.5, 22556.0], [70.6, 22565.0], [70.7, 22572.0], [70.8, 22577.0], [70.9, 22581.0], [71.0, 22586.0], [71.1, 22590.0], [71.2, 22594.0], [71.3, 22596.0], [71.4, 22597.0], [71.5, 22599.0], [71.6, 22603.0], [71.7, 22606.0], [71.8, 22612.0], [71.9, 22613.0], [72.0, 22614.0], [72.1, 22616.0], [72.2, 22620.0], [72.3, 22621.0], [72.4, 22623.0], [72.5, 22630.0], [72.6, 22637.0], [72.7, 22642.0], [72.8, 22648.0], [72.9, 22652.0], [73.0, 22654.0], [73.1, 22657.0], [73.2, 22660.0], [73.3, 22661.0], [73.4, 22663.0], [73.5, 22664.0], [73.6, 22666.0], [73.7, 22668.0], [73.8, 22669.0], [73.9, 22671.0], [74.0, 22672.0], [74.1, 22674.0], [74.2, 22676.0], [74.3, 22677.0], [74.4, 22678.0], [74.5, 22681.0], [74.6, 22684.0], [74.7, 22687.0], [74.8, 22690.0], [74.9, 22691.0], [75.0, 22694.0], [75.1, 22696.0], [75.2, 22700.0], [75.3, 22706.0], [75.4, 22707.0], [75.5, 22711.0], [75.6, 22711.0], [75.7, 22715.0], [75.8, 22721.0], [75.9, 22724.0], [76.0, 22727.0], [76.1, 22737.0], [76.2, 22740.0], [76.3, 22742.0], [76.4, 22747.0], [76.5, 22750.0], [76.6, 22752.0], [76.7, 22754.0], [76.8, 22756.0], [76.9, 22758.0], [77.0, 22762.0], [77.1, 22769.0], [77.2, 22776.0], [77.3, 22781.0], [77.4, 22786.0], [77.5, 22791.0], [77.6, 22792.0], [77.7, 22795.0], [77.8, 22801.0], [77.9, 22804.0], [78.0, 22806.0], [78.1, 22807.0], [78.2, 22813.0], [78.3, 22814.0], [78.4, 22816.0], [78.5, 22819.0], [78.6, 22821.0], [78.7, 22824.0], [78.8, 22826.0], [78.9, 22832.0], [79.0, 22834.0], [79.1, 22840.0], [79.2, 22848.0], [79.3, 22850.0], [79.4, 22859.0], [79.5, 22883.0], [79.6, 22898.0], [79.7, 22911.0], [79.8, 22917.0], [79.9, 22918.0], [80.0, 22923.0], [80.1, 22936.0], [80.2, 22939.0], [80.3, 22953.0], [80.4, 22961.0], [80.5, 22972.0], [80.6, 22977.0], [80.7, 22983.0], [80.8, 22997.0], [80.9, 23001.0], [81.0, 23092.0], [81.1, 23187.0], [81.2, 23285.0], [81.3, 23398.0], [81.4, 23512.0], [81.5, 23631.0], [81.6, 23707.0], [81.7, 23867.0], [81.8, 23941.0], [81.9, 23979.0], [82.0, 24005.0], [82.1, 24029.0], [82.2, 24056.0], [82.3, 24122.0], [82.4, 24162.0], [82.5, 24213.0], [82.6, 24226.0], [82.7, 24246.0], [82.8, 24269.0], [82.9, 24279.0], [83.0, 24289.0], [83.1, 24296.0], [83.2, 24299.0], [83.3, 24314.0], [83.4, 24320.0], [83.5, 24322.0], [83.6, 24337.0], [83.7, 24344.0], [83.8, 24348.0], [83.9, 24352.0], [84.0, 24356.0], [84.1, 24373.0], [84.2, 24393.0], [84.3, 24411.0], [84.4, 24425.0], [84.5, 24443.0], [84.6, 24490.0], [84.7, 24507.0], [84.8, 24538.0], [84.9, 24550.0], [85.0, 24558.0], [85.1, 24564.0], [85.2, 24568.0], [85.3, 24570.0], [85.4, 24570.0], [85.5, 24573.0], [85.6, 24580.0], [85.7, 24583.0], [85.8, 24595.0], [85.9, 24599.0], [86.0, 24608.0], [86.1, 24610.0], [86.2, 24615.0], [86.3, 24620.0], [86.4, 24630.0], [86.5, 24631.0], [86.6, 24635.0], [86.7, 24653.0], [86.8, 24661.0], [86.9, 24666.0], [87.0, 24668.0], [87.1, 24672.0], [87.2, 24682.0], [87.3, 24697.0], [87.4, 24713.0], [87.5, 24723.0], [87.6, 24752.0], [87.7, 24777.0], [87.8, 24805.0], [87.9, 24823.0], [88.0, 24838.0], [88.1, 24863.0], [88.2, 24879.0], [88.3, 24887.0], [88.4, 24921.0], [88.5, 24948.0], [88.6, 24953.0], [88.7, 24966.0], [88.8, 24997.0], [88.9, 25014.0], [89.0, 25020.0], [89.1, 25027.0], [89.2, 25027.0], [89.3, 25033.0], [89.4, 25043.0], [89.5, 25046.0], [89.6, 25053.0], [89.7, 25055.0], [89.8, 25061.0], [89.9, 25062.0], [90.0, 25064.0], [90.1, 25067.0], [90.2, 25079.0], [90.3, 25085.0], [90.4, 25086.0], [90.5, 25087.0], [90.6, 25089.0], [90.7, 25091.0], [90.8, 25093.0], [90.9, 25095.0], [91.0, 25096.0], [91.1, 25098.0], [91.2, 25101.0], [91.3, 25109.0], [91.4, 25112.0], [91.5, 25113.0], [91.6, 25119.0], [91.7, 25125.0], [91.8, 25130.0], [91.9, 25136.0], [92.0, 25153.0], [92.1, 25161.0], [92.2, 25179.0], [92.3, 25256.0], [92.4, 25376.0], [92.5, 25464.0], [92.6, 25594.0], [92.7, 25676.0], [92.8, 25764.0], [92.9, 25865.0], [93.0, 25962.0], [93.1, 26050.0], [93.2, 26152.0], [93.3, 26245.0], [93.4, 26318.0], [93.5, 26400.0], [93.6, 26538.0], [93.7, 26703.0], [93.8, 26800.0], [93.9, 26925.0], [94.0, 27034.0], [94.1, 27175.0], [94.2, 27334.0], [94.3, 27435.0], [94.4, 27591.0], [94.5, 27678.0], [94.6, 27804.0], [94.7, 27950.0], [94.8, 28034.0], [94.9, 28153.0], [95.0, 28263.0], [95.1, 28357.0], [95.2, 28546.0], [95.3, 28654.0], [95.4, 28787.0], [95.5, 28923.0], [95.6, 29108.0], [95.7, 29333.0], [95.8, 29510.0], [95.9, 29793.0], [96.0, 30209.0], [96.1, 30518.0], [96.2, 32409.0], [96.3, 32893.0], [96.4, 33228.0], [96.5, 33663.0], [96.6, 34079.0], [96.7, 34419.0], [96.8, 34838.0], [96.9, 35289.0], [97.0, 35618.0], [97.1, 35767.0], [97.2, 35977.0], [97.3, 36149.0], [97.4, 36328.0], [97.5, 36471.0], [97.6, 36685.0], [97.7, 36928.0], [97.8, 37121.0], [97.9, 37367.0], [98.0, 37546.0], [98.1, 37732.0], [98.2, 37985.0], [98.3, 38143.0], [98.4, 38341.0], [98.5, 38536.0], [98.6, 38773.0], [98.7, 38921.0], [98.8, 39141.0], [98.9, 39374.0], [99.0, 39650.0], [99.1, 40017.0], [99.2, 40532.0], [99.3, 40953.0], [99.4, 41297.0], [99.5, 41729.0], [99.6, 42088.0], [99.7, 42407.0], [99.8, 42895.0], [99.9, 43324.0], [100.0, 43673.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 158.0, "series": [{"data": [[100.0, 3.0], [32900.0, 1.0], [33300.0, 1.0], [33700.0, 1.0], [34100.0, 1.0], [34500.0, 1.0], [34900.0, 1.0], [35300.0, 1.0], [35700.0, 2.0], [36100.0, 3.0], [36900.0, 2.0], [37300.0, 2.0], [37700.0, 2.0], [38100.0, 2.0], [38500.0, 2.0], [38900.0, 1.0], [39300.0, 2.0], [40100.0, 1.0], [40500.0, 1.0], [40900.0, 1.0], [41300.0, 1.0], [41700.0, 1.0], [42500.0, 1.0], [42900.0, 1.0], [43300.0, 1.0], [200.0, 8.0], [300.0, 3.0], [400.0, 1.0], [500.0, 2.0], [600.0, 3.0], [700.0, 7.0], [800.0, 6.0], [900.0, 4.0], [1000.0, 4.0], [1100.0, 6.0], [1200.0, 7.0], [1300.0, 4.0], [1400.0, 5.0], [1500.0, 5.0], [1600.0, 3.0], [1700.0, 6.0], [1800.0, 3.0], [1900.0, 2.0], [2000.0, 6.0], [2100.0, 3.0], [2200.0, 6.0], [2300.0, 4.0], [2400.0, 2.0], [2500.0, 6.0], [2600.0, 2.0], [2700.0, 4.0], [2800.0, 6.0], [2900.0, 8.0], [3000.0, 2.0], [3100.0, 4.0], [3200.0, 6.0], [3300.0, 3.0], [3400.0, 4.0], [3500.0, 8.0], [3600.0, 7.0], [3700.0, 2.0], [3800.0, 2.0], [3900.0, 3.0], [4000.0, 7.0], [4100.0, 6.0], [4200.0, 3.0], [4300.0, 6.0], [4400.0, 6.0], [4500.0, 5.0], [4600.0, 4.0], [4800.0, 5.0], [4700.0, 3.0], [4900.0, 4.0], [5000.0, 5.0], [5100.0, 2.0], [5200.0, 6.0], [5300.0, 2.0], [5400.0, 6.0], [5500.0, 6.0], [5600.0, 7.0], [5800.0, 4.0], [5700.0, 2.0], [5900.0, 7.0], [6000.0, 6.0], [6100.0, 6.0], [6200.0, 4.0], [6300.0, 3.0], [6600.0, 6.0], [6400.0, 4.0], [6500.0, 3.0], [6700.0, 6.0], [6800.0, 4.0], [6900.0, 2.0], [7000.0, 3.0], [7100.0, 4.0], [7200.0, 6.0], [7300.0, 4.0], [7400.0, 3.0], [7500.0, 5.0], [7600.0, 3.0], [7700.0, 7.0], [7800.0, 41.0], [7900.0, 15.0], [8000.0, 21.0], [8100.0, 9.0], [8200.0, 6.0], [8300.0, 6.0], [8400.0, 6.0], [8500.0, 4.0], [8600.0, 2.0], [8700.0, 3.0], [8800.0, 4.0], [8900.0, 8.0], [9000.0, 38.0], [9100.0, 27.0], [9200.0, 22.0], [9300.0, 4.0], [9400.0, 4.0], [9500.0, 9.0], [9600.0, 42.0], [9700.0, 65.0], [9800.0, 31.0], [9900.0, 16.0], [10000.0, 6.0], [10100.0, 3.0], [10200.0, 3.0], [10300.0, 3.0], [10400.0, 2.0], [10500.0, 1.0], [10600.0, 1.0], [10700.0, 1.0], [10800.0, 1.0], [10900.0, 2.0], [11000.0, 1.0], [11100.0, 1.0], [11200.0, 1.0], [11300.0, 1.0], [11400.0, 1.0], [11500.0, 1.0], [11700.0, 1.0], [11800.0, 1.0], [11900.0, 1.0], [12000.0, 1.0], [12100.0, 1.0], [12200.0, 1.0], [12300.0, 1.0], [12400.0, 1.0], [12500.0, 1.0], [12600.0, 1.0], [12700.0, 1.0], [12800.0, 1.0], [12900.0, 1.0], [13000.0, 2.0], [13100.0, 2.0], [13200.0, 2.0], [13300.0, 10.0], [13400.0, 36.0], [13600.0, 32.0], [13500.0, 20.0], [13700.0, 12.0], [13800.0, 1.0], [14200.0, 39.0], [14300.0, 41.0], [14400.0, 1.0], [15800.0, 7.0], [15700.0, 3.0], [16000.0, 21.0], [16100.0, 35.0], [16200.0, 16.0], [15900.0, 6.0], [16800.0, 1.0], [17200.0, 1.0], [18200.0, 2.0], [17600.0, 1.0], [17800.0, 1.0], [18000.0, 2.0], [18400.0, 2.0], [19200.0, 3.0], [18600.0, 2.0], [18800.0, 5.0], [19000.0, 2.0], [19400.0, 1.0], [19600.0, 66.0], [19800.0, 36.0], [20000.0, 33.0], [20200.0, 7.0], [20400.0, 12.0], [20600.0, 65.0], [20800.0, 125.0], [21000.0, 88.0], [21200.0, 27.0], [21400.0, 4.0], [21600.0, 111.0], [21800.0, 107.0], [22000.0, 7.0], [22200.0, 7.0], [22400.0, 29.0], [22600.0, 136.0], [22800.0, 67.0], [23000.0, 5.0], [23200.0, 3.0], [23400.0, 3.0], [23600.0, 2.0], [23800.0, 3.0], [24200.0, 26.0], [24400.0, 17.0], [24000.0, 10.0], [24600.0, 53.0], [25000.0, 86.0], [25400.0, 4.0], [24800.0, 23.0], [25200.0, 3.0], [25600.0, 4.0], [25800.0, 3.0], [26000.0, 5.0], [26200.0, 4.0], [26400.0, 3.0], [26600.0, 2.0], [26800.0, 4.0], [27000.0, 3.0], [27200.0, 3.0], [27400.0, 3.0], [27600.0, 3.0], [27800.0, 4.0], [28000.0, 3.0], [28200.0, 3.0], [28400.0, 3.0], [28600.0, 3.0], [28800.0, 1.0], [29000.0, 2.0], [29200.0, 1.0], [29400.0, 2.0], [29800.0, 1.0], [30000.0, 1.0], [30200.0, 1.0], [30400.0, 1.0], [30600.0, 1.0], [32400.0, 1.0], [32600.0, 1.0], [32800.0, 1.0], [33200.0, 1.0], [33600.0, 1.0], [34000.0, 2.0], [34400.0, 1.0], [34800.0, 1.0], [35200.0, 1.0], [35600.0, 3.0], [36000.0, 2.0], [36400.0, 3.0], [37200.0, 2.0], [37600.0, 2.0], [38000.0, 2.0], [38400.0, 2.0], [38800.0, 2.0], [39200.0, 1.0], [39600.0, 1.0], [40000.0, 1.0], [40800.0, 1.0], [41200.0, 2.0], [41600.0, 1.0], [42000.0, 2.0], [42400.0, 1.0], [42800.0, 1.0], [43200.0, 1.0], [43600.0, 1.0], [33500.0, 1.0], [33900.0, 1.0], [34300.0, 1.0], [34700.0, 1.0], [35100.0, 1.0], [35900.0, 2.0], [36300.0, 3.0], [36700.0, 2.0], [37100.0, 2.0], [37500.0, 1.0], [37900.0, 1.0], [38300.0, 2.0], [38700.0, 2.0], [39100.0, 3.0], [39500.0, 1.0], [39900.0, 1.0], [40300.0, 1.0], [40700.0, 1.0], [41500.0, 1.0], [41900.0, 1.0], [42300.0, 1.0], [42700.0, 1.0], [43500.0, 1.0], [16700.0, 1.0], [16900.0, 1.0], [17100.0, 2.0], [17300.0, 1.0], [17500.0, 1.0], [17700.0, 1.0], [17900.0, 2.0], [18100.0, 3.0], [18300.0, 1.0], [18500.0, 2.0], [18700.0, 2.0], [18900.0, 3.0], [19100.0, 3.0], [19300.0, 3.0], [19500.0, 28.0], [19700.0, 57.0], [19900.0, 21.0], [20100.0, 12.0], [20300.0, 10.0], [21300.0, 3.0], [20500.0, 72.0], [20700.0, 79.0], [20900.0, 107.0], [21100.0, 128.0], [21500.0, 6.0], [21700.0, 158.0], [21900.0, 6.0], [22100.0, 43.0], [22300.0, 10.0], [22500.0, 75.0], [22700.0, 96.0], [22900.0, 47.0], [23100.0, 4.0], [23300.0, 4.0], [23500.0, 4.0], [23700.0, 4.0], [23900.0, 9.0], [24100.0, 9.0], [24300.0, 37.0], [24500.0, 46.0], [24700.0, 15.0], [24900.0, 16.0], [25100.0, 41.0], [25300.0, 4.0], [25500.0, 3.0], [25700.0, 5.0], [25900.0, 4.0], [26100.0, 3.0], [26300.0, 4.0], [26500.0, 3.0], [26700.0, 3.0], [26900.0, 2.0], [27100.0, 3.0], [27300.0, 3.0], [27500.0, 3.0], [27700.0, 3.0], [27900.0, 3.0], [28100.0, 3.0], [28300.0, 3.0], [28500.0, 3.0], [28700.0, 3.0], [28900.0, 3.0], [29100.0, 2.0], [29300.0, 2.0], [29500.0, 3.0], [29700.0, 2.0], [30100.0, 1.0], [30300.0, 1.0], [30500.0, 1.0], [30700.0, 1.0], [32300.0, 1.0], [32500.0, 1.0], [32700.0, 1.0], [33000.0, 1.0], [33400.0, 1.0], [34600.0, 1.0], [35000.0, 1.0], [35400.0, 1.0], [35800.0, 2.0], [36600.0, 4.0], [37000.0, 2.0], [37400.0, 2.0], [37800.0, 2.0], [38200.0, 2.0], [38600.0, 1.0], [39000.0, 2.0], [39400.0, 2.0], [39800.0, 1.0], [40200.0, 1.0], [40600.0, 1.0], [41000.0, 1.0], [41800.0, 1.0], [42200.0, 1.0], [42600.0, 1.0], [43000.0, 1.0], [43400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 43600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3634.0, "series": [{"data": [[0.0, 15.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 48.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3634.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 633.2496328928044, "minX": 1.75239336E12, "maxY": 997.5336188436837, "series": [{"data": [[1.75239342E12, 633.2496328928044], [1.75239336E12, 997.5336188436837]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239342E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4020.0, "minX": 1.0, "maxY": 25199.0, "series": [{"data": [[2.0, 23941.0], [3.0, 24014.0], [4.0, 23935.0], [5.0, 23957.0], [6.0, 23983.0], [7.0, 24005.0], [8.0, 23979.0], [9.0, 23993.0], [10.0, 24005.0], [11.0, 24024.0], [12.0, 24051.0], [13.0, 24051.0], [14.0, 24081.0], [15.0, 24115.0], [16.0, 24098.0], [17.0, 22141.0], [18.0, 24122.0], [19.0, 22134.0], [20.0, 24144.0], [21.0, 24221.0], [22.0, 22105.0], [23.0, 21597.0], [24.0, 24162.0], [25.0, 22094.0], [26.0, 24163.0], [27.0, 22111.0], [28.0, 21611.0], [29.0, 24226.0], [30.0, 22122.0], [31.0, 21603.0], [33.0, 22124.0], [32.0, 24182.0], [35.0, 24186.0], [34.0, 21690.0], [37.0, 24271.0], [36.0, 22118.0], [39.0, 22129.0], [38.0, 21611.0], [41.0, 24232.0], [40.0, 21618.0], [43.0, 21702.0], [42.0, 22127.0], [45.0, 22126.0], [44.0, 24228.0], [47.0, 21627.0], [46.0, 24258.0], [49.0, 21622.0], [48.0, 22140.0], [51.0, 22145.0], [50.0, 24290.0], [53.0, 22983.5], [55.0, 24314.0], [54.0, 22158.0], [57.0, 22143.0], [56.0, 21675.0], [59.0, 21607.0], [58.0, 24337.0], [61.0, 22150.0], [60.0, 24355.0], [63.0, 22460.0], [67.0, 24401.0], [66.0, 21672.0], [65.0, 22155.0], [64.0, 21661.0], [71.0, 24393.0], [70.0, 20681.0], [69.0, 22166.0], [68.0, 20668.0], [75.0, 24411.0], [74.0, 20455.0], [73.0, 22162.0], [72.0, 21614.0], [79.0, 22166.0], [78.0, 20483.0], [77.0, 21692.0], [76.0, 20684.0], [83.0, 20675.0], [82.0, 24425.0], [81.0, 21696.0], [80.0, 20562.0], [87.0, 20666.0], [86.0, 24443.0], [85.0, 22112.0], [84.0, 20591.0], [91.0, 20549.0], [90.0, 24469.0], [89.0, 22180.0], [88.0, 21646.0], [95.0, 24538.0], [94.0, 22168.0], [93.0, 21728.0], [92.0, 20671.0], [99.0, 20688.0], [98.0, 21728.0], [97.0, 22155.0], [96.0, 20613.0], [103.0, 20554.0], [102.0, 20674.0], [101.0, 24493.0], [100.0, 20612.0], [107.0, 20681.0], [106.0, 23080.0], [104.0, 22153.0], [111.0, 21657.0], [110.0, 22158.0], [109.0, 24610.0], [108.0, 20652.0], [115.0, 21727.0], [114.0, 20617.0], [113.0, 22156.0], [112.0, 20627.0], [119.0, 20670.0], [118.0, 24585.0], [117.0, 20596.0], [116.0, 24568.0], [123.0, 20661.0], [122.0, 21666.0], [121.0, 24608.0], [120.0, 22170.0], [127.0, 20656.0], [126.0, 21665.0], [125.0, 22174.0], [124.0, 20659.0], [135.0, 24620.0], [134.0, 20667.0], [133.0, 20615.0], [132.0, 24603.0], [131.0, 21737.0], [130.0, 22174.0], [129.0, 24603.0], [128.0, 20667.0], [143.0, 21682.0], [142.0, 20669.0], [141.0, 20685.0], [140.0, 22175.0], [139.0, 20661.0], [138.0, 21682.0], [137.0, 20686.0], [136.0, 22165.0], [151.0, 24630.0], [150.0, 22177.0], [149.0, 20681.0], [148.0, 20625.0], [147.0, 24629.0], [146.0, 21766.0], [145.0, 22157.0], [144.0, 24619.0], [159.0, 22149.0], [158.0, 24665.0], [157.0, 20697.0], [156.0, 20748.0], [155.0, 22163.0], [154.0, 21696.0], [153.0, 20693.0], [152.0, 20651.0], [167.0, 24671.0], [166.0, 20703.0], [165.0, 22188.0], [164.0, 20754.0], [163.0, 21733.0], [162.0, 24666.0], [161.0, 20727.0], [160.0, 21694.0], [175.0, 21653.0], [174.0, 20728.0], [173.0, 24670.0], [172.0, 22220.0], [171.0, 20816.0], [170.0, 21740.0], [169.0, 20730.0], [168.0, 22204.0], [183.0, 22281.0], [182.0, 24668.0], [181.0, 21710.0], [180.0, 20764.0], [179.0, 20752.0], [178.0, 22183.0], [177.0, 24673.0], [176.0, 20755.0], [191.0, 20831.0], [190.0, 22329.0], [189.0, 20773.0], [188.0, 21705.0], [187.0, 24733.0], [186.0, 22307.0], [185.0, 20830.0], [184.0, 20751.0], [199.0, 20798.0], [198.0, 24683.0], [197.0, 20784.0], [196.0, 22320.0], [195.0, 21755.0], [194.0, 20773.0], [193.0, 24666.0], [192.0, 21675.0], [207.0, 24705.0], [206.0, 20822.0], [205.0, 22365.0], [204.0, 20819.0], [203.0, 20821.0], [202.0, 21756.0], [201.0, 22338.0], [200.0, 24760.0], [215.0, 20816.0], [214.0, 22415.0], [213.0, 21763.0], [212.0, 20792.0], [211.0, 24718.0], [210.0, 22387.0], [209.0, 20762.0], [208.0, 21702.0], [223.0, 22432.0], [222.0, 24771.0], [221.0, 20880.0], [220.0, 20812.0], [219.0, 21752.0], [218.0, 22437.0], [217.0, 20873.0], [216.0, 24818.0], [231.0, 21703.0], [230.0, 22453.0], [229.0, 24805.0], [228.0, 20744.0], [227.0, 20856.0], [226.0, 22454.0], [225.0, 24805.0], [224.0, 21697.0], [239.0, 24844.0], [238.0, 22459.0], [237.0, 20788.0], [236.0, 24834.0], [235.0, 20928.0], [234.0, 21778.0], [233.0, 20795.0], [232.0, 20918.0], [247.0, 21716.0], [246.0, 24852.0], [245.0, 20978.0], [244.0, 22494.0], [243.0, 21719.0], [242.0, 20789.0], [241.0, 20897.0], [240.0, 22473.0], [255.0, 22493.0], [254.0, 20967.0], [253.0, 24864.0], [252.0, 20841.0], [251.0, 22498.0], [250.0, 21783.0], [249.0, 21007.0], [248.0, 20836.0], [270.0, 20988.0], [271.0, 24949.0], [269.0, 22523.0], [268.0, 20835.0], [267.0, 21728.0], [266.0, 24921.0], [265.0, 22508.0], [264.0, 20835.0], [263.0, 21691.0], [257.0, 20837.0], [256.0, 24863.0], [259.0, 21689.0], [258.0, 20977.0], [262.0, 21050.0], [261.0, 24896.0], [260.0, 22484.0], [286.0, 24966.0], [287.0, 22597.0], [285.0, 21736.0], [284.0, 22582.0], [283.0, 20864.0], [282.0, 21073.0], [281.0, 24966.0], [280.0, 21664.0], [279.0, 22491.0], [273.0, 21283.5], [275.0, 21008.0], [274.0, 22530.0], [278.0, 20864.0], [277.0, 21060.0], [276.0, 24949.0], [302.0, 22616.0], [303.0, 20865.0], [301.0, 24997.0], [300.0, 21762.0], [299.0, 20859.0], [298.0, 22592.0], [297.0, 21063.0], [296.0, 21691.0], [295.0, 25056.0], [289.0, 21023.0], [288.0, 20858.0], [291.0, 24979.0], [290.0, 21727.0], [294.0, 20863.0], [293.0, 21077.0], [292.0, 22597.0], [318.0, 20884.0], [319.0, 21004.0], [317.0, 25055.0], [316.0, 22597.0], [315.0, 21798.0], [314.0, 20884.0], [313.0, 21041.0], [312.0, 22596.0], [311.0, 21719.0], [305.0, 21006.0], [304.0, 21787.0], [307.0, 22618.0], [306.0, 25011.0], [310.0, 23000.0], [308.0, 21046.0], [334.0, 20860.0], [335.0, 21810.0], [333.0, 20980.0], [332.0, 25085.0], [331.0, 22621.0], [330.0, 21741.0], [329.0, 20882.0], [328.0, 21054.0], [327.0, 22620.0], [321.0, 22623.0], [320.0, 21794.0], [323.0, 21046.0], [322.0, 25062.0], [326.0, 21737.0], [325.0, 20820.0], [324.0, 25064.0], [350.0, 22612.0], [351.0, 21786.0], [349.0, 20873.0], [348.0, 21041.0], [347.0, 25089.0], [346.0, 21723.0], [345.0, 22615.0], [344.0, 20864.0], [343.0, 21744.0], [337.0, 25080.0], [336.0, 22613.0], [339.0, 20856.0], [338.0, 21094.0], [342.0, 21102.0], [341.0, 22616.0], [340.0, 25079.0], [366.0, 21780.0], [367.0, 25054.0], [365.0, 22609.0], [364.0, 20890.0], [363.0, 21038.0], [362.0, 25050.0], [361.0, 21716.0], [360.0, 22606.0], [359.0, 20885.0], [353.0, 21040.0], [352.0, 25086.0], [355.0, 22620.0], [354.0, 20871.0], [358.0, 21706.0], [357.0, 21099.0], [356.0, 25060.0], [382.0, 20943.0], [383.0, 22630.0], [381.0, 21792.0], [380.0, 25049.0], [379.0, 22603.0], [378.0, 21019.0], [377.0, 20918.0], [376.0, 21724.0], [375.0, 22607.0], [369.0, 20893.0], [368.0, 21033.0], [371.0, 21091.0], [370.0, 22550.0], [374.0, 20896.0], [373.0, 25054.0], [372.0, 21712.0], [398.0, 21809.0], [399.0, 22660.0], [397.0, 20938.0], [396.0, 22657.0], [395.0, 21814.0], [394.0, 25095.0], [393.0, 20935.0], [392.0, 21106.0], [391.0, 21749.0], [384.0, 21819.0], [386.0, 25025.0], [385.0, 21028.0], [390.0, 22648.0], [389.0, 25027.0], [388.0, 21017.0], [414.0, 21067.0], [415.0, 22639.0], [413.0, 21805.0], [412.0, 20946.0], [411.0, 22657.0], [410.0, 25109.0], [409.0, 21820.0], [408.0, 20942.0], [407.0, 21120.0], [401.0, 25014.0], [400.0, 21048.0], [403.0, 21118.0], [402.0, 20944.0], [406.0, 22653.0], [405.0, 25046.0], [404.0, 21767.0], [430.0, 22678.0], [431.0, 21815.0], [429.0, 21109.0], [428.0, 20960.0], [427.0, 22657.0], [426.0, 25118.0], [425.0, 21861.0], [424.0, 20983.0], [423.0, 22631.0], [417.0, 21149.0], [416.0, 25043.0], [419.0, 20896.0], [418.0, 21767.0], [422.0, 21841.0], [421.0, 21164.0], [420.0, 25037.0], [446.0, 21846.0], [447.0, 25099.0], [445.0, 22654.0], [444.0, 20914.0], [443.0, 21122.0], [442.0, 25087.0], [441.0, 22677.0], [440.0, 20915.0], [439.0, 21910.0], [433.0, 21165.0], [432.0, 25062.0], [435.0, 21831.0], [434.0, 20875.0], [438.0, 25061.0], [437.0, 21170.0], [436.0, 22699.0], [462.0, 21155.0], [463.0, 20849.0], [461.0, 21819.0], [460.0, 22681.0], [459.0, 20882.0], [458.0, 21159.0], [457.0, 25093.0], [456.0, 22694.0], [455.0, 20906.0], [449.0, 20909.0], [448.0, 21195.0], [451.0, 21204.0], [450.0, 21848.0], [454.0, 21893.0], [453.0, 25097.0], [452.0, 22668.0], [478.0, 20789.0], [479.0, 25086.0], [477.0, 21162.0], [476.0, 22700.0], [475.0, 20814.0], [474.0, 21163.0], [473.0, 21883.0], [472.0, 25105.0], [471.0, 22702.0], [465.0, 21844.0], [464.0, 25092.0], [467.0, 21219.0], [466.0, 22695.0], [470.0, 20839.0], [469.0, 21873.0], [468.0, 25096.0], [494.0, 22727.0], [495.0, 21791.0], [493.0, 21180.0], [492.0, 20790.0], [491.0, 22706.0], [490.0, 20789.0], [489.0, 21838.0], [488.0, 25113.0], [487.0, 22711.0], [481.0, 21234.0], [480.0, 21810.0], [483.0, 25110.0], [482.0, 22633.0], [486.0, 21235.0], [485.0, 20791.0], [484.0, 21858.0], [510.0, 22715.0], [511.0, 20859.0], [509.0, 21193.0], [508.0, 25199.0], [507.0, 22726.0], [506.0, 20822.0], [505.0, 25121.0], [504.0, 21837.0], [503.0, 21222.0], [497.0, 21225.0], [496.0, 25109.0], [499.0, 21837.0], [498.0, 20794.0], [502.0, 20797.0], [501.0, 22711.0], [500.0, 25112.0], [540.0, 21182.0], [543.0, 20874.0], [529.0, 21814.0], [528.0, 21249.0], [531.0, 25119.0], [530.0, 20878.0], [533.0, 20876.0], [532.0, 22708.0], [542.0, 22707.0], [541.0, 21812.0], [539.0, 25085.0], [538.0, 20881.0], [537.0, 22698.0], [536.0, 25094.0], [527.0, 20818.0], [513.0, 21248.0], [512.0, 21765.0], [515.0, 25121.0], [514.0, 21855.0], [517.0, 21254.0], [516.0, 20860.0], [519.0, 21871.0], [518.0, 22716.0], [526.0, 22711.0], [525.0, 21821.0], [524.0, 21200.0], [523.0, 25177.0], [522.0, 22721.0], [521.0, 20860.0], [520.0, 25098.0], [535.0, 21885.0], [534.0, 21238.0], [569.0, 21150.0], [574.0, 21127.0], [575.0, 20946.0], [561.0, 25101.0], [560.0, 21163.0], [563.0, 21896.0], [562.0, 20900.0], [565.0, 22683.0], [564.0, 21199.0], [573.0, 22649.0], [572.0, 20926.0], [571.0, 23458.5], [568.0, 22655.0], [551.0, 25088.0], [550.0, 21241.0], [549.0, 21857.0], [548.0, 20873.0], [547.0, 22707.0], [546.0, 25086.0], [545.0, 21245.0], [544.0, 21813.0], [559.0, 21821.0], [558.0, 20892.0], [557.0, 22668.0], [556.0, 21185.0], [555.0, 25086.0], [554.0, 21826.0], [553.0, 22677.0], [552.0, 20897.0], [567.0, 25102.0], [566.0, 20924.0], [604.0, 22570.0], [607.0, 25127.0], [593.0, 22589.0], [592.0, 20946.0], [595.0, 25073.0], [594.0, 21163.0], [597.0, 21151.0], [596.0, 21883.0], [606.0, 21832.0], [605.0, 21089.0], [603.0, 20950.0], [602.0, 25069.0], [601.0, 22581.0], [600.0, 20953.0], [591.0, 21816.0], [577.0, 25096.0], [576.0, 21825.0], [579.0, 21882.0], [578.0, 21201.0], [581.0, 22561.0], [580.0, 20920.0], [583.0, 21884.0], [582.0, 25091.0], [590.0, 21121.0], [589.0, 22595.0], [588.0, 20948.0], [587.0, 25090.0], [586.0, 21126.0], [585.0, 20920.0], [584.0, 22619.0], [599.0, 21888.0], [598.0, 25067.0], [636.0, 22525.0], [616.0, 7707.333333333333], [617.0, 25064.0], [619.0, 21103.0], [618.0, 20946.0], [621.0, 22523.0], [620.0, 21831.0], [623.0, 20950.0], [609.0, 21171.0], [608.0, 20952.0], [611.0, 21881.0], [610.0, 22545.0], [613.0, 25062.0], [612.0, 21169.0], [615.0, 20890.0], [614.0, 21886.0], [622.0, 25095.0], [639.0, 25082.0], [625.0, 21903.0], [624.0, 21152.0], [627.0, 21134.0], [626.0, 22519.0], [629.0, 20891.0], [628.0, 21876.0], [631.0, 22551.0], [630.0, 25004.0], [638.0, 20954.0], [637.0, 21132.0], [635.0, 21816.0], [634.0, 25001.0], [633.0, 20957.0], [632.0, 21090.0], [668.0, 20969.0], [646.0, 4020.0], [645.0, 25018.0], [644.0, 21904.0], [643.0, 20945.0], [642.0, 21146.0], [641.0, 22515.0], [640.0, 21841.0], [655.0, 21825.0], [654.0, 20962.0], [653.0, 25044.0], [652.0, 21154.0], [651.0, 22533.0], [650.0, 21846.0], [649.0, 25020.0], [648.0, 20942.0], [647.0, 5350.75], [669.0, 12617.5], [671.0, 22497.0], [657.0, 21158.0], [656.0, 22532.0], [659.0, 21887.0], [658.0, 20968.0], [661.0, 22537.0], [660.0, 25029.0], [663.0, 20967.0], [662.0, 21097.0], [670.0, 21792.0], [667.0, 21078.0], [666.0, 22508.0], [665.0, 21812.0], [664.0, 25022.0], [700.0, 22504.0], [703.0, 21697.0], [689.0, 25032.0], [688.0, 21141.0], [691.0, 21139.0], [690.0, 21781.0], [693.0, 20949.0], [692.0, 22400.0], [702.0, 20950.0], [701.0, 21133.0], [699.0, 25036.0], [698.0, 21069.0], [697.0, 20954.0], [696.0, 22485.0], [687.0, 20983.0], [673.0, 20978.0], [672.0, 21140.0], [675.0, 25027.0], [674.0, 21826.0], [677.0, 20980.0], [676.0, 22503.0], [679.0, 21793.0], [678.0, 21071.0], [686.0, 21724.0], [685.0, 22481.0], [684.0, 25033.0], [683.0, 20976.0], [682.0, 21084.0], [681.0, 22492.0], [680.0, 25027.0], [695.0, 21779.0], [694.0, 25030.0], [732.0, 7621.666666666667], [713.0, 10610.5], [712.0, 21070.0], [714.0, 22524.0], [716.0, 21119.0], [715.0, 25087.0], [718.0, 22517.0], [717.0, 21726.0], [735.0, 25179.0], [721.0, 21144.0], [720.0, 25141.0], [723.0, 21820.0], [722.0, 21821.0], [725.0, 25101.0], [724.0, 20900.0], [734.0, 21161.0], [733.0, 20965.0], [731.0, 22498.0], [730.0, 21153.0], [729.0, 23031.0], [711.0, 22502.0], [710.0, 21791.0], [709.0, 25087.0], [708.0, 20962.0], [707.0, 23417.0], [705.0, 21150.0], [704.0, 22498.0], [719.0, 20958.0], [727.0, 21088.0], [726.0, 22494.0], [764.0, 21739.0], [762.0, 11485.5], [767.0, 21741.0], [753.0, 20957.0], [752.0, 21734.0], [755.0, 22514.0], [754.0, 21132.0], [757.0, 21793.0], [756.0, 25123.0], [766.0, 20942.0], [765.0, 25096.0], [763.0, 21185.0], [761.0, 20944.0], [760.0, 25125.0], [751.0, 22503.0], [737.0, 21758.0], [736.0, 22504.0], [739.0, 21114.0], [738.0, 20959.0], [741.0, 22495.0], [740.0, 25113.0], [743.0, 21204.0], [742.0, 21818.0], [750.0, 20954.0], [749.0, 25136.0], [748.0, 21756.0], [747.0, 21203.0], [746.0, 22501.0], [745.0, 20958.0], [744.0, 25138.0], [759.0, 21129.0], [758.0, 22536.0], [796.0, 22602.0], [775.0, 12674.5], [774.0, 21134.0], [773.0, 22552.0], [772.0, 21798.0], [771.0, 25101.0], [770.0, 21136.0], [769.0, 20945.0], [768.0, 22556.0], [783.0, 22500.0], [782.0, 21750.0], [781.0, 25091.0], [780.0, 20939.0], [779.0, 21725.0], [778.0, 21179.0], [777.0, 22565.0], [776.0, 20940.0], [799.0, 20934.0], [785.0, 21107.0], [784.0, 20944.0], [787.0, 22576.0], [786.0, 21807.0], [789.0, 21094.0], [788.0, 25086.0], [791.0, 22598.0], [790.0, 20941.0], [798.0, 21156.0], [797.0, 25064.0], [795.0, 20941.0], [794.0, 21152.0], [793.0, 25064.0], [792.0, 21823.0], [828.0, 25097.0], [831.0, 20907.0], [817.0, 25153.0], [816.0, 22591.0], [819.0, 21109.0], [818.0, 21803.0], [821.0, 20854.0], [820.0, 22587.0], [830.0, 22600.0], [829.0, 21752.0], [827.0, 21188.0], [826.0, 20906.0], [825.0, 25092.0], [824.0, 22599.0], [815.0, 20911.0], [800.0, 21735.0], [802.0, 21798.0], [801.0, 22580.0], [804.0, 25050.0], [803.0, 21104.0], [807.0, 21794.0], [806.0, 21753.5], [814.0, 21740.0], [813.0, 25061.0], [812.0, 21150.0], [811.0, 20944.0], [810.0, 25054.0], [809.0, 21134.0], [808.0, 22590.0], [823.0, 21181.0], [822.0, 21810.0], [860.0, 20887.0], [846.0, 10574.0], [845.0, 21774.0], [844.0, 25093.0], [843.0, 22664.0], [842.0, 21142.0], [841.0, 20898.0], [840.0, 25089.0], [847.0, 25172.0], [833.0, 22632.0], [832.0, 25155.0], [835.0, 21819.0], [834.0, 21114.0], [837.0, 20839.0], [836.0, 22647.0], [839.0, 21166.0], [838.0, 21825.0], [863.0, 22662.0], [848.0, 22669.0], [851.0, 20874.0], [850.0, 21403.0], [853.0, 25130.0], [852.0, 22684.0], [855.0, 21788.0], [854.0, 21124.0], [862.0, 25134.0], [861.0, 21735.0], [859.0, 22661.0], [858.0, 21126.0], [857.0, 25141.0], [856.0, 20869.0], [892.0, 25063.0], [874.0, 11668.5], [873.0, 21115.0], [872.0, 25130.0], [875.0, 20801.0], [877.0, 25112.0], [876.0, 21743.0], [879.0, 21772.0], [865.0, 20966.5], [867.0, 22667.0], [866.0, 21736.0], [869.0, 21065.0], [868.0, 21821.0], [871.0, 20825.0], [870.0, 25132.0], [878.0, 22676.0], [895.0, 20758.0], [881.0, 21051.0], [880.0, 20799.0], [883.0, 21831.0], [882.0, 22691.0], [885.0, 21054.0], [884.0, 25115.0], [887.0, 21812.0], [886.0, 20774.0], [894.0, 22665.0], [893.0, 21104.0], [891.0, 20755.0], [890.0, 22615.0], [889.0, 21110.0], [888.0, 25090.0], [924.0, 20653.0], [926.0, 8814.666666666668], [927.0, 11233.0], [912.0, 22663.0], [915.0, 22209.0], [913.0, 21033.0], [917.0, 24961.0], [916.0, 20670.0], [925.0, 22691.0], [923.0, 21089.0], [922.0, 22663.0], [921.0, 24950.0], [920.0, 20681.0], [911.0, 21690.0], [897.0, 22638.0], [896.0, 21745.0], [899.0, 21773.0], [898.0, 25053.0], [901.0, 20732.0], [900.0, 21036.0], [903.0, 21759.0], [902.0, 22666.0], [910.0, 20690.0], [909.0, 25017.0], [908.0, 21087.0], [907.0, 22668.0], [906.0, 25021.0], [905.0, 20746.0], [904.0, 21085.0], [919.0, 21751.0], [918.0, 21093.0], [956.0, 10608.0], [959.0, 21056.0], [945.0, 20587.0], [944.0, 21052.0], [947.0, 22741.0], [946.0, 24953.0], [949.0, 21123.0], [948.0, 21655.0], [958.0, 21674.0], [957.0, 24884.0], [955.0, 22754.0], [954.0, 24884.0], [953.0, 21117.0], [952.0, 20589.0], [943.0, 21654.0], [929.0, 21054.0], [928.0, 22696.0], [931.0, 21744.0], [930.0, 24965.0], [933.0, 21115.0], [932.0, 20569.0], [935.0, 21713.0], [934.0, 22707.0], [942.0, 22708.0], [941.0, 24887.0], [940.0, 20592.0], [939.0, 22706.0], [938.0, 24892.0], [937.0, 21104.0], [936.0, 20601.0], [951.0, 21732.0], [950.0, 22733.0], [988.0, 22755.0], [991.0, 20568.0], [977.0, 20546.0], [976.0, 21077.0], [979.0, 24838.0], [978.0, 21707.0], [981.0, 22746.0], [980.0, 21149.0], [990.0, 21124.0], [989.0, 23265.0], [987.0, 20555.0], [986.0, 21091.0], [985.0, 22751.0], [984.0, 24823.0], [975.0, 22683.0], [961.0, 22756.0], [960.0, 20564.0], [963.0, 21073.0], [962.0, 24879.0], [965.0, 22743.0], [964.0, 21674.0], [967.0, 21123.0], [966.0, 21760.0], [974.0, 21701.0], [973.0, 24864.0], [972.0, 21087.0], [971.0, 20584.0], [970.0, 24881.0], [969.0, 22762.0], [968.0, 20554.0], [983.0, 20546.0], [982.0, 21772.0], [1000.0, 17972.81228924688], [999.0, 22941.0], [998.0, 22479.75], [997.0, 21173.0], [996.0, 21673.5], [995.0, 22293.0], [994.0, 21728.0], [993.0, 24804.0], [992.0, 21214.0], [1.0, 23936.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[863.32891533676, 19039.192047606222]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5243.7, "minX": 1.75239336E12, "maxY": 9590.166666666666, "series": [{"data": [[1.75239342E12, 5570.4], [1.75239336E12, 9590.166666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75239342E12, 5243.7], [1.75239336E12, 8989.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239342E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17184.97858672378, "minX": 1.75239336E12, "maxY": 22218.038179148323, "series": [{"data": [[1.75239342E12, 22218.038179148323], [1.75239336E12, 17184.97858672378]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239342E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17184.95074946466, "minX": 1.75239336E12, "maxY": 22218.01541850222, "series": [{"data": [[1.75239342E12, 22218.01541850222], [1.75239336E12, 17184.95074946466]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239342E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75239336E12, "maxY": 82.16830835117753, "series": [{"data": [[1.75239342E12, 0.0], [1.75239336E12, 82.16830835117753]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239342E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 105.0, "minX": 1.75239336E12, "maxY": 43673.0, "series": [{"data": [[1.75239342E12, 25199.0], [1.75239336E12, 43673.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75239342E12, 24883.1], [1.75239336E12, 26657.40000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75239342E12, 25130.0], [1.75239336E12, 41263.51999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75239342E12, 25085.0], [1.75239336E12, 35063.999999999985]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75239342E12, 19690.0], [1.75239336E12, 105.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75239342E12, 21764.5], [1.75239336E12, 19623.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239342E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 294.0, "minX": 6.0, "maxY": 24051.0, "series": [{"data": [[9.0, 23979.0], [41.0, 21677.5], [43.0, 21718.0], [42.0, 21653.0], [45.0, 21674.0], [44.0, 20891.5], [46.0, 19670.5], [47.0, 20977.0], [48.0, 21699.5], [50.0, 22153.0], [13.0, 24051.0], [6.0, 294.0], [31.0, 22126.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 50.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 289.0, "minX": 6.0, "maxY": 24051.0, "series": [{"data": [[9.0, 23979.0], [41.0, 21677.5], [43.0, 21718.0], [42.0, 21653.0], [45.0, 21674.0], [44.0, 20891.5], [46.0, 19670.5], [47.0, 20977.0], [48.0, 21699.5], [50.0, 22152.5], [13.0, 24051.0], [6.0, 289.0], [31.0, 22126.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 50.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.033333333333333, "minX": 1.75239336E12, "maxY": 55.583333333333336, "series": [{"data": [[1.75239342E12, 6.033333333333333], [1.75239336E12, 55.583333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239342E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 22.7, "minX": 1.75239336E12, "maxY": 38.916666666666664, "series": [{"data": [[1.75239342E12, 22.7], [1.75239336E12, 38.916666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239342E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 22.7, "minX": 1.75239336E12, "maxY": 38.916666666666664, "series": [{"data": [[1.75239342E12, 22.7], [1.75239336E12, 38.916666666666664]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239342E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 22.7, "minX": 1.75239336E12, "maxY": 38.916666666666664, "series": [{"data": [[1.75239342E12, 22.7], [1.75239336E12, 38.916666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239342E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

