/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 165.0, "minX": 0.0, "maxY": 53595.0, "series": [{"data": [[0.0, 165.0], [0.1, 204.0], [0.2, 245.0], [0.3, 440.0], [0.4, 583.0], [0.5, 606.0], [0.6, 706.0], [0.7, 726.0], [0.8, 837.0], [0.9, 1026.0], [1.0, 1069.0], [1.1, 1164.0], [1.2, 1196.0], [1.3, 1299.0], [1.4, 1419.0], [1.5, 1562.0], [1.6, 1574.0], [1.7, 1698.0], [1.8, 1751.0], [1.9, 1802.0], [2.0, 1856.0], [2.1, 2074.0], [2.2, 2116.0], [2.3, 2211.0], [2.4, 2277.0], [2.5, 2337.0], [2.6, 2477.0], [2.7, 2593.0], [2.8, 2676.0], [2.9, 2755.0], [3.0, 2827.0], [3.1, 2892.0], [3.2, 3036.0], [3.3, 3168.0], [3.4, 3254.0], [3.5, 3283.0], [3.6, 3395.0], [3.7, 3462.0], [3.8, 3606.0], [3.9, 3733.0], [4.0, 3782.0], [4.1, 3871.0], [4.2, 3931.0], [4.3, 4000.0], [4.4, 4153.0], [4.5, 4264.0], [4.6, 4306.0], [4.7, 4401.0], [4.8, 4500.0], [4.9, 4557.0], [5.0, 4656.0], [5.1, 4784.0], [5.2, 4870.0], [5.3, 4927.0], [5.4, 5064.0], [5.5, 5104.0], [5.6, 5227.0], [5.7, 5308.0], [5.8, 5390.0], [5.9, 5466.0], [6.0, 5573.0], [6.1, 5658.0], [6.2, 5891.0], [6.3, 6004.0], [6.4, 6045.0], [6.5, 6119.0], [6.6, 6145.0], [6.7, 6148.0], [6.8, 6153.0], [6.9, 6171.0], [7.0, 6177.0], [7.1, 6218.0], [7.2, 6265.0], [7.3, 6278.0], [7.4, 6281.0], [7.5, 6300.0], [7.6, 6313.0], [7.7, 6336.0], [7.8, 6352.0], [7.9, 6417.0], [8.0, 6449.0], [8.1, 6503.0], [8.2, 6519.0], [8.3, 6536.0], [8.4, 6573.0], [8.5, 6578.0], [8.6, 6596.0], [8.7, 6614.0], [8.8, 6635.0], [8.9, 6649.0], [9.0, 6656.0], [9.1, 6670.0], [9.2, 6721.0], [9.3, 6739.0], [9.4, 6755.0], [9.5, 6769.0], [9.6, 6780.0], [9.7, 6827.0], [9.8, 7014.0], [9.9, 7180.0], [10.0, 7376.0], [10.1, 7453.0], [10.2, 7725.0], [10.3, 7988.0], [10.4, 8099.0], [10.5, 8147.0], [10.6, 8148.0], [10.7, 8163.0], [10.8, 8178.0], [10.9, 8181.0], [11.0, 8192.0], [11.1, 8194.0], [11.2, 8206.0], [11.3, 8219.0], [11.4, 8232.0], [11.5, 8236.0], [11.6, 8236.0], [11.7, 8242.0], [11.8, 8256.0], [11.9, 8260.0], [12.0, 8269.0], [12.1, 8282.0], [12.2, 8282.0], [12.3, 8291.0], [12.4, 8302.0], [12.5, 8309.0], [12.6, 8314.0], [12.7, 8328.0], [12.8, 8336.0], [12.9, 8344.0], [13.0, 8347.0], [13.1, 8356.0], [13.2, 8368.0], [13.3, 8379.0], [13.4, 8382.0], [13.5, 8388.0], [13.6, 8393.0], [13.7, 8400.0], [13.8, 8410.0], [13.9, 8425.0], [14.0, 8432.0], [14.1, 8441.0], [14.2, 8446.0], [14.3, 8448.0], [14.4, 8454.0], [14.5, 8464.0], [14.6, 8468.0], [14.7, 8472.0], [14.8, 8481.0], [14.9, 8486.0], [15.0, 8493.0], [15.1, 8507.0], [15.2, 8517.0], [15.3, 8531.0], [15.4, 8534.0], [15.5, 8542.0], [15.6, 8564.0], [15.7, 8580.0], [15.8, 8581.0], [15.9, 8588.0], [16.0, 8590.0], [16.1, 8601.0], [16.2, 8605.0], [16.3, 8638.0], [16.4, 8646.0], [16.5, 8679.0], [16.6, 8724.0], [16.7, 8759.0], [16.8, 8787.0], [16.9, 8804.0], [17.0, 8834.0], [17.1, 8870.0], [17.2, 8879.0], [17.3, 8889.0], [17.4, 8897.0], [17.5, 8910.0], [17.6, 8915.0], [17.7, 8942.0], [17.8, 8993.0], [17.9, 9011.0], [18.0, 9034.0], [18.1, 9170.0], [18.2, 9244.0], [18.3, 9365.0], [18.4, 9422.0], [18.5, 9459.0], [18.6, 9498.0], [18.7, 9520.0], [18.8, 9530.0], [18.9, 9543.0], [19.0, 9576.0], [19.1, 9586.0], [19.2, 9600.0], [19.3, 9610.0], [19.4, 9611.0], [19.5, 9632.0], [19.6, 15990.0], [19.7, 16328.0], [19.8, 16709.0], [19.9, 16982.0], [20.0, 17127.0], [20.1, 17364.0], [20.2, 17599.0], [20.3, 17833.0], [20.4, 17968.0], [20.5, 18140.0], [20.6, 18307.0], [20.7, 18421.0], [20.8, 18594.0], [20.9, 18719.0], [21.0, 18771.0], [21.1, 18856.0], [21.2, 19072.0], [21.3, 19157.0], [21.4, 19204.0], [21.5, 19305.0], [21.6, 19467.0], [21.7, 19540.0], [21.8, 19616.0], [21.9, 19617.0], [22.0, 19638.0], [22.1, 19649.0], [22.2, 19678.0], [22.3, 19720.0], [22.4, 19734.0], [22.5, 19739.0], [22.6, 19751.0], [22.7, 19753.0], [22.8, 19756.0], [22.9, 19765.0], [23.0, 19771.0], [23.1, 19773.0], [23.2, 19781.0], [23.3, 19786.0], [23.4, 19792.0], [23.5, 19807.0], [23.6, 19826.0], [23.7, 19862.0], [23.8, 19899.0], [23.9, 20043.0], [24.0, 20145.0], [24.1, 20227.0], [24.2, 20337.0], [24.3, 20360.0], [24.4, 20615.0], [24.5, 20714.0], [24.6, 20768.0], [24.7, 20870.0], [24.8, 21090.0], [24.9, 21133.0], [25.0, 21261.0], [25.1, 21388.0], [25.2, 21418.0], [25.3, 21643.0], [25.4, 21782.0], [25.5, 21851.0], [25.6, 21924.0], [25.7, 22106.0], [25.8, 22201.0], [25.9, 22312.0], [26.0, 22436.0], [26.1, 22644.0], [26.2, 22775.0], [26.3, 22839.0], [26.4, 22943.0], [26.5, 23018.0], [26.6, 23150.0], [26.7, 23211.0], [26.8, 23347.0], [26.9, 23531.0], [27.0, 23621.0], [27.1, 23714.0], [27.2, 23929.0], [27.3, 23982.0], [27.4, 24103.0], [27.5, 24206.0], [27.6, 24374.0], [27.7, 24514.0], [27.8, 24595.0], [27.9, 24725.0], [28.0, 24760.0], [28.1, 24941.0], [28.2, 24983.0], [28.3, 25067.0], [28.4, 25191.0], [28.5, 25264.0], [28.6, 25286.0], [28.7, 25468.0], [28.8, 25523.0], [28.9, 25573.0], [29.0, 25737.0], [29.1, 25810.0], [29.2, 25903.0], [29.3, 25976.0], [29.4, 25995.0], [29.5, 26133.0], [29.6, 26218.0], [29.7, 26349.0], [29.8, 26544.0], [29.9, 26623.0], [30.0, 26686.0], [30.1, 26760.0], [30.2, 26930.0], [30.3, 27001.0], [30.4, 27135.0], [30.5, 27202.0], [30.6, 27269.0], [30.7, 27307.0], [30.8, 27519.0], [30.9, 27603.0], [31.0, 27671.0], [31.1, 27735.0], [31.2, 27846.0], [31.3, 27936.0], [31.4, 28046.0], [31.5, 28194.0], [31.6, 28206.0], [31.7, 28305.0], [31.8, 28384.0], [31.9, 28521.0], [32.0, 28789.0], [32.1, 28919.0], [32.2, 29033.0], [32.3, 29194.0], [32.4, 29360.0], [32.5, 29399.0], [32.6, 29508.0], [32.7, 29619.0], [32.8, 29679.0], [32.9, 29891.0], [33.0, 30006.0], [33.1, 30051.0], [33.2, 30263.0], [33.3, 30340.0], [33.4, 30368.0], [33.5, 30419.0], [33.6, 30508.0], [33.7, 30619.0], [33.8, 30894.0], [33.9, 30992.0], [34.0, 31097.0], [34.1, 31137.0], [34.2, 31387.0], [34.3, 31462.0], [34.4, 31690.0], [34.5, 31721.0], [34.6, 31816.0], [34.7, 31948.0], [34.8, 32192.0], [34.9, 32257.0], [35.0, 32371.0], [35.1, 32556.0], [35.2, 32614.0], [35.3, 32745.0], [35.4, 32811.0], [35.5, 32828.0], [35.6, 32842.0], [35.7, 32855.0], [35.8, 32876.0], [35.9, 32911.0], [36.0, 32932.0], [36.1, 32936.0], [36.2, 32947.0], [36.3, 32957.0], [36.4, 32964.0], [36.5, 32966.0], [36.6, 32969.0], [36.7, 32974.0], [36.8, 32979.0], [36.9, 32990.0], [37.0, 32992.0], [37.1, 33002.0], [37.2, 33011.0], [37.3, 33013.0], [37.4, 33017.0], [37.5, 33022.0], [37.6, 33026.0], [37.7, 33028.0], [37.8, 33037.0], [37.9, 33039.0], [38.0, 33053.0], [38.1, 33055.0], [38.2, 33056.0], [38.3, 33058.0], [38.4, 33059.0], [38.5, 33063.0], [38.6, 33067.0], [38.7, 33071.0], [38.8, 33078.0], [38.9, 33087.0], [39.0, 33095.0], [39.1, 33099.0], [39.2, 33102.0], [39.3, 33104.0], [39.4, 33105.0], [39.5, 33113.0], [39.6, 33115.0], [39.7, 33116.0], [39.8, 33119.0], [39.9, 33125.0], [40.0, 33126.0], [40.1, 33128.0], [40.2, 33139.0], [40.3, 33145.0], [40.4, 33146.0], [40.5, 33148.0], [40.6, 33149.0], [40.7, 33151.0], [40.8, 33152.0], [40.9, 33161.0], [41.0, 33165.0], [41.1, 33168.0], [41.2, 33173.0], [41.3, 33174.0], [41.4, 33181.0], [41.5, 33184.0], [41.6, 33185.0], [41.7, 33189.0], [41.8, 33193.0], [41.9, 33197.0], [42.0, 33203.0], [42.1, 33212.0], [42.2, 33213.0], [42.3, 33221.0], [42.4, 33224.0], [42.5, 33240.0], [42.6, 33244.0], [42.7, 33258.0], [42.8, 33265.0], [42.9, 33268.0], [43.0, 33279.0], [43.1, 33281.0], [43.2, 33293.0], [43.3, 33294.0], [43.4, 33297.0], [43.5, 33300.0], [43.6, 33304.0], [43.7, 33305.0], [43.8, 33313.0], [43.9, 33322.0], [44.0, 33327.0], [44.1, 33342.0], [44.2, 33397.0], [44.3, 33404.0], [44.4, 33425.0], [44.5, 33439.0], [44.6, 33444.0], [44.7, 33453.0], [44.8, 33456.0], [44.9, 33459.0], [45.0, 33465.0], [45.1, 33574.0], [45.2, 33666.0], [45.3, 33818.0], [45.4, 33901.0], [45.5, 34041.0], [45.6, 34185.0], [45.7, 34364.0], [45.8, 34385.0], [45.9, 34454.0], [46.0, 34494.0], [46.1, 34530.0], [46.2, 34535.0], [46.3, 34543.0], [46.4, 34559.0], [46.5, 34583.0], [46.6, 34610.0], [46.7, 34632.0], [46.8, 34670.0], [46.9, 34683.0], [47.0, 34691.0], [47.1, 34714.0], [47.2, 34725.0], [47.3, 34774.0], [47.4, 34809.0], [47.5, 34838.0], [47.6, 34863.0], [47.7, 34930.0], [47.8, 34980.0], [47.9, 35041.0], [48.0, 35068.0], [48.1, 35095.0], [48.2, 35101.0], [48.3, 35105.0], [48.4, 35107.0], [48.5, 35111.0], [48.6, 35115.0], [48.7, 35116.0], [48.8, 35119.0], [48.9, 35124.0], [49.0, 35127.0], [49.1, 35129.0], [49.2, 35136.0], [49.3, 35143.0], [49.4, 35144.0], [49.5, 35146.0], [49.6, 35151.0], [49.7, 35155.0], [49.8, 35159.0], [49.9, 35166.0], [50.0, 35172.0], [50.1, 35175.0], [50.2, 35177.0], [50.3, 35182.0], [50.4, 35186.0], [50.5, 35189.0], [50.6, 35190.0], [50.7, 35191.0], [50.8, 35193.0], [50.9, 35194.0], [51.0, 35197.0], [51.1, 35202.0], [51.2, 35210.0], [51.3, 35211.0], [51.4, 35217.0], [51.5, 35224.0], [51.6, 35236.0], [51.7, 35239.0], [51.8, 35241.0], [51.9, 35243.0], [52.0, 35246.0], [52.1, 35250.0], [52.2, 35253.0], [52.3, 35255.0], [52.4, 35259.0], [52.5, 35262.0], [52.6, 35265.0], [52.7, 35268.0], [52.8, 35271.0], [52.9, 35280.0], [53.0, 35282.0], [53.1, 35286.0], [53.2, 35292.0], [53.3, 35297.0], [53.4, 35298.0], [53.5, 35299.0], [53.6, 35303.0], [53.7, 35304.0], [53.8, 35307.0], [53.9, 35309.0], [54.0, 35310.0], [54.1, 35315.0], [54.2, 35318.0], [54.3, 35324.0], [54.4, 35330.0], [54.5, 35332.0], [54.6, 35342.0], [54.7, 35349.0], [54.8, 35352.0], [54.9, 35353.0], [55.0, 35360.0], [55.1, 35375.0], [55.2, 35379.0], [55.3, 35382.0], [55.4, 35384.0], [55.5, 35388.0], [55.6, 35398.0], [55.7, 35401.0], [55.8, 35403.0], [55.9, 35412.0], [56.0, 35415.0], [56.1, 35417.0], [56.2, 35419.0], [56.3, 35421.0], [56.4, 35425.0], [56.5, 35432.0], [56.6, 35434.0], [56.7, 35439.0], [56.8, 35439.0], [56.9, 35442.0], [57.0, 35443.0], [57.1, 35445.0], [57.2, 35450.0], [57.3, 35452.0], [57.4, 35455.0], [57.5, 35463.0], [57.6, 35467.0], [57.7, 35494.0], [57.8, 35499.0], [57.9, 35516.0], [58.0, 35524.0], [58.1, 35537.0], [58.2, 35557.0], [58.3, 35586.0], [58.4, 35599.0], [58.5, 35608.0], [58.6, 35622.0], [58.7, 35638.0], [58.8, 35639.0], [58.9, 35654.0], [59.0, 35661.0], [59.1, 35671.0], [59.2, 35681.0], [59.3, 35690.0], [59.4, 35691.0], [59.5, 35694.0], [59.6, 35705.0], [59.7, 35708.0], [59.8, 35711.0], [59.9, 35726.0], [60.0, 35738.0], [60.1, 35741.0], [60.2, 35744.0], [60.3, 35750.0], [60.4, 35751.0], [60.5, 35760.0], [60.6, 35768.0], [60.7, 35787.0], [60.8, 35792.0], [60.9, 35807.0], [61.0, 35821.0], [61.1, 35839.0], [61.2, 35845.0], [61.3, 35848.0], [61.4, 35853.0], [61.5, 35855.0], [61.6, 35859.0], [61.7, 35863.0], [61.8, 35867.0], [61.9, 35875.0], [62.0, 35877.0], [62.1, 35878.0], [62.2, 35878.0], [62.3, 35881.0], [62.4, 35885.0], [62.5, 35890.0], [62.6, 35898.0], [62.7, 35910.0], [62.8, 35913.0], [62.9, 35931.0], [63.0, 35968.0], [63.1, 35972.0], [63.2, 35988.0], [63.3, 35997.0], [63.4, 35998.0], [63.5, 36004.0], [63.6, 36008.0], [63.7, 36012.0], [63.8, 36019.0], [63.9, 36021.0], [64.0, 36026.0], [64.1, 36032.0], [64.2, 36038.0], [64.3, 36049.0], [64.4, 36057.0], [64.5, 36067.0], [64.6, 36078.0], [64.7, 36091.0], [64.8, 36101.0], [64.9, 36116.0], [65.0, 36119.0], [65.1, 36128.0], [65.2, 36133.0], [65.3, 36138.0], [65.4, 36142.0], [65.5, 36144.0], [65.6, 36150.0], [65.7, 36169.0], [65.8, 36170.0], [65.9, 36184.0], [66.0, 36214.0], [66.1, 36240.0], [66.2, 36289.0], [66.3, 36320.0], [66.4, 36440.0], [66.5, 36513.0], [66.6, 36576.0], [66.7, 36586.0], [66.8, 36661.0], [66.9, 36776.0], [67.0, 36836.0], [67.1, 36861.0], [67.2, 36884.0], [67.3, 36889.0], [67.4, 36903.0], [67.5, 36905.0], [67.6, 36915.0], [67.7, 36919.0], [67.8, 36920.0], [67.9, 36936.0], [68.0, 36939.0], [68.1, 36941.0], [68.2, 36944.0], [68.3, 36948.0], [68.4, 36952.0], [68.5, 36953.0], [68.6, 36957.0], [68.7, 36966.0], [68.8, 36968.0], [68.9, 36969.0], [69.0, 36972.0], [69.1, 36977.0], [69.2, 36985.0], [69.3, 36989.0], [69.4, 36993.0], [69.5, 36996.0], [69.6, 36998.0], [69.7, 36999.0], [69.8, 37001.0], [69.9, 37002.0], [70.0, 37005.0], [70.1, 37006.0], [70.2, 37008.0], [70.3, 37010.0], [70.4, 37011.0], [70.5, 37012.0], [70.6, 37015.0], [70.7, 37018.0], [70.8, 37020.0], [70.9, 37024.0], [71.0, 37026.0], [71.1, 37032.0], [71.2, 37039.0], [71.3, 37041.0], [71.4, 37043.0], [71.5, 37046.0], [71.6, 37048.0], [71.7, 37053.0], [71.8, 37054.0], [71.9, 37056.0], [72.0, 37062.0], [72.1, 37067.0], [72.2, 37069.0], [72.3, 37074.0], [72.4, 37075.0], [72.5, 37077.0], [72.6, 37079.0], [72.7, 37084.0], [72.8, 37085.0], [72.9, 37088.0], [73.0, 37094.0], [73.1, 37097.0], [73.2, 37102.0], [73.3, 37105.0], [73.4, 37106.0], [73.5, 37107.0], [73.6, 37112.0], [73.7, 37117.0], [73.8, 37123.0], [73.9, 37126.0], [74.0, 37128.0], [74.1, 37136.0], [74.2, 37138.0], [74.3, 37143.0], [74.4, 37151.0], [74.5, 37156.0], [74.6, 37161.0], [74.7, 37167.0], [74.8, 37168.0], [74.9, 37170.0], [75.0, 37175.0], [75.1, 37176.0], [75.2, 37179.0], [75.3, 37181.0], [75.4, 37182.0], [75.5, 37187.0], [75.6, 37195.0], [75.7, 37199.0], [75.8, 37204.0], [75.9, 37222.0], [76.0, 37224.0], [76.1, 37224.0], [76.2, 37234.0], [76.3, 37237.0], [76.4, 37238.0], [76.5, 37245.0], [76.6, 37252.0], [76.7, 37259.0], [76.8, 37277.0], [76.9, 37306.0], [77.0, 37307.0], [77.1, 37319.0], [77.2, 37333.0], [77.3, 37346.0], [77.4, 37356.0], [77.5, 37363.0], [77.6, 37369.0], [77.7, 37379.0], [77.8, 37395.0], [77.9, 37398.0], [78.0, 37402.0], [78.1, 37410.0], [78.2, 37414.0], [78.3, 37424.0], [78.4, 37430.0], [78.5, 37433.0], [78.6, 37439.0], [78.7, 37450.0], [78.8, 37459.0], [78.9, 37460.0], [79.0, 37466.0], [79.1, 37468.0], [79.2, 37475.0], [79.3, 37479.0], [79.4, 37495.0], [79.5, 37508.0], [79.6, 37518.0], [79.7, 37534.0], [79.8, 37550.0], [79.9, 37564.0], [80.0, 37573.0], [80.1, 37582.0], [80.2, 37598.0], [80.3, 37603.0], [80.4, 37615.0], [80.5, 37619.0], [80.6, 37636.0], [80.7, 37658.0], [80.8, 37685.0], [80.9, 37691.0], [81.0, 37702.0], [81.1, 37724.0], [81.2, 37770.0], [81.3, 37782.0], [81.4, 37793.0], [81.5, 37817.0], [81.6, 37823.0], [81.7, 37833.0], [81.8, 37836.0], [81.9, 37838.0], [82.0, 37857.0], [82.1, 37884.0], [82.2, 37888.0], [82.3, 37897.0], [82.4, 37907.0], [82.5, 37929.0], [82.6, 37942.0], [82.7, 37959.0], [82.8, 37975.0], [82.9, 37981.0], [83.0, 37989.0], [83.1, 37991.0], [83.2, 38010.0], [83.3, 38017.0], [83.4, 38018.0], [83.5, 38022.0], [83.6, 38029.0], [83.7, 38030.0], [83.8, 38034.0], [83.9, 38047.0], [84.0, 38048.0], [84.1, 38053.0], [84.2, 38064.0], [84.3, 38076.0], [84.4, 38091.0], [84.5, 38100.0], [84.6, 38103.0], [84.7, 38116.0], [84.8, 38140.0], [84.9, 38143.0], [85.0, 38147.0], [85.1, 38153.0], [85.2, 38155.0], [85.3, 38156.0], [85.4, 38159.0], [85.5, 38162.0], [85.6, 38164.0], [85.7, 38170.0], [85.8, 38172.0], [85.9, 38180.0], [86.0, 38188.0], [86.1, 38198.0], [86.2, 38210.0], [86.3, 38213.0], [86.4, 38219.0], [86.5, 38223.0], [86.6, 38229.0], [86.7, 38230.0], [86.8, 38237.0], [86.9, 38241.0], [87.0, 38241.0], [87.1, 38244.0], [87.2, 38250.0], [87.3, 38252.0], [87.4, 38255.0], [87.5, 38259.0], [87.6, 38263.0], [87.7, 38271.0], [87.8, 38275.0], [87.9, 38275.0], [88.0, 38280.0], [88.1, 38291.0], [88.2, 38296.0], [88.3, 38319.0], [88.4, 38325.0], [88.5, 38327.0], [88.6, 38333.0], [88.7, 38336.0], [88.8, 38348.0], [88.9, 38355.0], [89.0, 38358.0], [89.1, 38360.0], [89.2, 38366.0], [89.3, 38374.0], [89.4, 38377.0], [89.5, 38385.0], [89.6, 38437.0], [89.7, 38457.0], [89.8, 38496.0], [89.9, 38533.0], [90.0, 38563.0], [90.1, 38620.0], [90.2, 38714.0], [90.3, 38783.0], [90.4, 38817.0], [90.5, 38902.0], [90.6, 39048.0], [90.7, 39093.0], [90.8, 39221.0], [90.9, 39365.0], [91.0, 39580.0], [91.1, 39609.0], [91.2, 39715.0], [91.3, 39798.0], [91.4, 39878.0], [91.5, 40018.0], [91.6, 40075.0], [91.7, 40193.0], [91.8, 40321.0], [91.9, 40412.0], [92.0, 40464.0], [92.1, 40593.0], [92.2, 40718.0], [92.3, 40787.0], [92.4, 40925.0], [92.5, 40947.0], [92.6, 41057.0], [92.7, 41156.0], [92.8, 41260.0], [92.9, 41388.0], [93.0, 41493.0], [93.1, 41499.0], [93.2, 41635.0], [93.3, 41718.0], [93.4, 41817.0], [93.5, 41963.0], [93.6, 42043.0], [93.7, 42099.0], [93.8, 42181.0], [93.9, 42215.0], [94.0, 42310.0], [94.1, 42390.0], [94.2, 42454.0], [94.3, 42478.0], [94.4, 42640.0], [94.5, 42700.0], [94.6, 42738.0], [94.7, 42873.0], [94.8, 43009.0], [94.9, 43149.0], [95.0, 43284.0], [95.1, 43395.0], [95.2, 43432.0], [95.3, 43584.0], [95.4, 43696.0], [95.5, 43796.0], [95.6, 43809.0], [95.7, 43855.0], [95.8, 43938.0], [95.9, 44071.0], [96.0, 44239.0], [96.1, 44335.0], [96.2, 44486.0], [96.3, 44710.0], [96.4, 44773.0], [96.5, 44904.0], [96.6, 44947.0], [96.7, 45085.0], [96.8, 45296.0], [96.9, 45456.0], [97.0, 45566.0], [97.1, 45765.0], [97.2, 45979.0], [97.3, 46010.0], [97.4, 46214.0], [97.5, 46373.0], [97.6, 46572.0], [97.7, 46746.0], [97.8, 46870.0], [97.9, 47085.0], [98.0, 47237.0], [98.1, 47497.0], [98.2, 47770.0], [98.3, 47954.0], [98.4, 48138.0], [98.5, 48221.0], [98.6, 48359.0], [98.7, 48756.0], [98.8, 48872.0], [98.9, 49215.0], [99.0, 49425.0], [99.1, 49652.0], [99.2, 49806.0], [99.3, 50185.0], [99.4, 50342.0], [99.5, 50850.0], [99.6, 51348.0], [99.7, 51741.0], [99.8, 52265.0], [99.9, 52798.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 90.0, "series": [{"data": [[100.0, 2.0], [32900.0, 31.0], [33700.0, 2.0], [34500.0, 13.0], [35300.0, 56.0], [36100.0, 33.0], [36900.0, 63.0], [37700.0, 12.0], [38500.0, 7.0], [39300.0, 4.0], [40100.0, 3.0], [40900.0, 4.0], [41700.0, 2.0], [42500.0, 2.0], [43300.0, 2.0], [44100.0, 1.0], [44900.0, 4.0], [45700.0, 3.0], [46500.0, 1.0], [48100.0, 2.0], [49700.0, 2.0], [50500.0, 1.0], [200.0, 4.0], [51300.0, 1.0], [52900.0, 1.0], [300.0, 1.0], [400.0, 3.0], [500.0, 2.0], [600.0, 4.0], [700.0, 4.0], [800.0, 2.0], [900.0, 2.0], [1000.0, 5.0], [1100.0, 4.0], [1200.0, 2.0], [1300.0, 2.0], [1400.0, 2.0], [1500.0, 5.0], [1600.0, 2.0], [1700.0, 3.0], [1800.0, 5.0], [2000.0, 3.0], [2100.0, 4.0], [2200.0, 4.0], [2300.0, 4.0], [2400.0, 1.0], [2500.0, 3.0], [2600.0, 3.0], [2700.0, 3.0], [2800.0, 4.0], [2900.0, 1.0], [3000.0, 2.0], [3100.0, 4.0], [3200.0, 4.0], [3300.0, 3.0], [3400.0, 2.0], [3500.0, 2.0], [3600.0, 3.0], [3700.0, 4.0], [3800.0, 2.0], [3900.0, 4.0], [4000.0, 2.0], [4100.0, 2.0], [4200.0, 3.0], [4300.0, 4.0], [4400.0, 3.0], [4500.0, 3.0], [4600.0, 3.0], [4700.0, 3.0], [4800.0, 3.0], [4900.0, 3.0], [5000.0, 3.0], [5100.0, 2.0], [5200.0, 4.0], [5300.0, 3.0], [5400.0, 4.0], [5500.0, 3.0], [5600.0, 1.0], [5800.0, 3.0], [5900.0, 2.0], [6000.0, 3.0], [6100.0, 17.0], [6200.0, 12.0], [6300.0, 10.0], [6400.0, 6.0], [6500.0, 14.0], [6600.0, 15.0], [6700.0, 13.0], [6800.0, 2.0], [7000.0, 3.0], [7100.0, 2.0], [7200.0, 1.0], [7300.0, 2.0], [7400.0, 2.0], [7500.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [7800.0, 1.0], [7900.0, 2.0], [8000.0, 2.0], [8100.0, 20.0], [8200.0, 31.0], [8400.0, 37.0], [8600.0, 14.0], [9000.0, 7.0], [8800.0, 15.0], [9200.0, 2.0], [9400.0, 8.0], [9600.0, 10.0], [15800.0, 1.0], [16200.0, 1.0], [17200.0, 1.0], [16400.0, 1.0], [16800.0, 1.0], [18000.0, 2.0], [18400.0, 2.0], [19200.0, 3.0], [18800.0, 2.0], [19600.0, 12.0], [20000.0, 3.0], [20800.0, 5.0], [21200.0, 4.0], [21600.0, 2.0], [22000.0, 1.0], [22400.0, 2.0], [22800.0, 4.0], [23200.0, 3.0], [23600.0, 3.0], [24000.0, 1.0], [24400.0, 1.0], [24800.0, 1.0], [25200.0, 5.0], [25600.0, 1.0], [26000.0, 2.0], [26400.0, 2.0], [26800.0, 2.0], [27200.0, 5.0], [27600.0, 3.0], [28000.0, 2.0], [28400.0, 1.0], [28800.0, 2.0], [29600.0, 3.0], [30000.0, 4.0], [30400.0, 4.0], [31200.0, 1.0], [30800.0, 2.0], [31600.0, 1.0], [32400.0, 1.0], [32800.0, 13.0], [33600.0, 2.0], [34400.0, 6.0], [35200.0, 66.0], [36000.0, 36.0], [36800.0, 12.0], [37600.0, 19.0], [38400.0, 8.0], [39200.0, 1.0], [40000.0, 4.0], [40800.0, 2.0], [41600.0, 4.0], [42400.0, 5.0], [43200.0, 3.0], [44000.0, 1.0], [44800.0, 2.0], [46400.0, 1.0], [47200.0, 2.0], [48000.0, 1.0], [48800.0, 1.0], [49600.0, 1.0], [51200.0, 1.0], [33100.0, 76.0], [33900.0, 2.0], [34700.0, 9.0], [35500.0, 16.0], [36300.0, 2.0], [37100.0, 70.0], [37900.0, 21.0], [38700.0, 4.0], [39500.0, 2.0], [40300.0, 2.0], [41100.0, 2.0], [41900.0, 4.0], [42700.0, 4.0], [43500.0, 3.0], [44300.0, 3.0], [45100.0, 1.0], [45900.0, 2.0], [46700.0, 3.0], [48300.0, 1.0], [49100.0, 1.0], [50700.0, 1.0], [52300.0, 1.0], [16900.0, 2.0], [17300.0, 2.0], [17700.0, 2.0], [18100.0, 2.0], [18500.0, 2.0], [18900.0, 1.0], [19300.0, 2.0], [19700.0, 34.0], [20100.0, 2.0], [20500.0, 1.0], [21300.0, 2.0], [21700.0, 2.0], [22100.0, 2.0], [23300.0, 1.0], [22900.0, 3.0], [23700.0, 2.0], [24100.0, 3.0], [24500.0, 4.0], [24900.0, 6.0], [25700.0, 3.0], [26100.0, 1.0], [26500.0, 1.0], [26900.0, 3.0], [27300.0, 2.0], [27700.0, 5.0], [28100.0, 2.0], [28500.0, 1.0], [28900.0, 2.0], [29300.0, 4.0], [30500.0, 2.0], [30100.0, 1.0], [30900.0, 3.0], [31300.0, 1.0], [31700.0, 4.0], [32100.0, 3.0], [32500.0, 1.0], [33000.0, 55.0], [33800.0, 3.0], [34600.0, 13.0], [35400.0, 59.0], [36200.0, 7.0], [37000.0, 90.0], [37800.0, 24.0], [38600.0, 3.0], [40200.0, 1.0], [41000.0, 3.0], [41800.0, 2.0], [42600.0, 3.0], [43400.0, 2.0], [44200.0, 2.0], [45000.0, 2.0], [45800.0, 2.0], [46600.0, 1.0], [47400.0, 2.0], [48200.0, 3.0], [49000.0, 1.0], [49800.0, 1.0], [52200.0, 1.0], [33300.0, 20.0], [34100.0, 3.0], [34900.0, 5.0], [35700.0, 35.0], [36500.0, 6.0], [37300.0, 28.0], [38100.0, 43.0], [38900.0, 3.0], [39700.0, 3.0], [40500.0, 2.0], [41300.0, 2.0], [42100.0, 3.0], [42900.0, 1.0], [43700.0, 3.0], [44500.0, 2.0], [46100.0, 2.0], [45300.0, 1.0], [46900.0, 1.0], [47700.0, 2.0], [48500.0, 1.0], [49300.0, 1.0], [50100.0, 1.0], [51700.0, 1.0], [52500.0, 1.0], [8500.0, 27.0], [8700.0, 8.0], [8300.0, 36.0], [8900.0, 10.0], [9100.0, 1.0], [9300.0, 3.0], [9500.0, 15.0], [15900.0, 1.0], [16300.0, 1.0], [16600.0, 1.0], [17000.0, 1.0], [17400.0, 2.0], [17800.0, 1.0], [18200.0, 1.0], [18600.0, 2.0], [19000.0, 2.0], [19400.0, 1.0], [19800.0, 9.0], [20200.0, 3.0], [20600.0, 3.0], [21000.0, 1.0], [21400.0, 3.0], [21800.0, 2.0], [22200.0, 3.0], [23400.0, 1.0], [22600.0, 2.0], [23000.0, 1.0], [24200.0, 1.0], [25000.0, 2.0], [25400.0, 4.0], [25800.0, 3.0], [26200.0, 3.0], [26600.0, 5.0], [27000.0, 2.0], [27400.0, 1.0], [27800.0, 1.0], [28200.0, 4.0], [29000.0, 3.0], [29400.0, 2.0], [29800.0, 3.0], [30200.0, 2.0], [30600.0, 1.0], [31000.0, 2.0], [31400.0, 2.0], [31800.0, 2.0], [32200.0, 3.0], [32600.0, 4.0], [33200.0, 41.0], [34000.0, 1.0], [34800.0, 7.0], [35600.0, 30.0], [36400.0, 4.0], [37200.0, 30.0], [38000.0, 37.0], [38800.0, 4.0], [39600.0, 4.0], [40400.0, 6.0], [41200.0, 3.0], [42000.0, 3.0], [42800.0, 2.0], [43600.0, 3.0], [44400.0, 2.0], [45200.0, 2.0], [46000.0, 1.0], [46800.0, 2.0], [49200.0, 2.0], [50000.0, 2.0], [50800.0, 1.0], [51600.0, 1.0], [33500.0, 1.0], [34300.0, 4.0], [35100.0, 77.0], [35900.0, 21.0], [36700.0, 2.0], [37500.0, 23.0], [38300.0, 35.0], [39100.0, 1.0], [39900.0, 1.0], [40700.0, 4.0], [42300.0, 4.0], [41500.0, 1.0], [43100.0, 3.0], [43900.0, 4.0], [44700.0, 3.0], [45500.0, 1.0], [46300.0, 2.0], [47100.0, 2.0], [47900.0, 3.0], [48700.0, 2.0], [50300.0, 2.0], [51100.0, 1.0], [51900.0, 1.0], [52700.0, 1.0], [53500.0, 1.0], [16700.0, 1.0], [17100.0, 1.0], [17500.0, 1.0], [17900.0, 2.0], [18300.0, 2.0], [18700.0, 4.0], [19100.0, 4.0], [19500.0, 4.0], [20300.0, 5.0], [19900.0, 1.0], [20700.0, 3.0], [21500.0, 1.0], [21100.0, 2.0], [21900.0, 4.0], [22300.0, 3.0], [22700.0, 2.0], [23100.0, 4.0], [23500.0, 3.0], [23900.0, 5.0], [24300.0, 3.0], [24700.0, 5.0], [25100.0, 2.0], [25500.0, 4.0], [25900.0, 6.0], [26300.0, 2.0], [26700.0, 3.0], [27100.0, 3.0], [27500.0, 3.0], [27900.0, 4.0], [28300.0, 4.0], [28700.0, 3.0], [29100.0, 2.0], [29500.0, 3.0], [29900.0, 2.0], [30300.0, 5.0], [30700.0, 1.0], [31100.0, 4.0], [31500.0, 2.0], [31900.0, 2.0], [32300.0, 3.0], [32700.0, 3.0], [33400.0, 23.0], [34200.0, 2.0], [35000.0, 9.0], [35800.0, 47.0], [36600.0, 4.0], [37400.0, 40.0], [38200.0, 56.0], [39000.0, 4.0], [39800.0, 3.0], [40600.0, 1.0], [41400.0, 5.0], [42200.0, 4.0], [43000.0, 2.0], [43800.0, 5.0], [45400.0, 3.0], [46200.0, 2.0], [47000.0, 1.0], [47800.0, 1.0], [48600.0, 1.0], [49400.0, 2.0], [51800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 53500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2631.0, "series": [{"data": [[0.0, 10.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 29.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2631.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 412.0303766707173, "minX": 1.75235796E12, "maxY": 990.7626112759654, "series": [{"data": [[1.75235808E12, 412.0303766707173], [1.75235796E12, 989.6172839506171], [1.75235802E12, 990.7626112759654]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235808E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 10547.142857142857, "minX": 1.0, "maxY": 38534.0, "series": [{"data": [[2.0, 38440.0], [3.0, 38457.0], [4.0, 38495.0], [5.0, 38116.0], [6.0, 38523.0], [7.0, 38252.0], [8.0, 38533.0], [9.0, 38534.0], [10.0, 38147.0], [11.0, 38147.0], [12.0, 38255.0], [13.0, 38426.0], [14.0, 38103.0], [15.0, 38348.0], [16.0, 37015.0], [17.0, 38074.0], [18.0, 38355.0], [19.0, 37136.0], [20.0, 38170.0], [21.0, 38356.0], [22.0, 37009.0], [23.0, 38380.0], [24.0, 38049.0], [25.0, 37006.0], [26.0, 38385.0], [27.0, 38039.0], [28.0, 37137.0], [29.0, 38128.0], [30.0, 38369.0], [31.0, 36977.0], [33.0, 36997.0], [32.0, 38354.0], [35.0, 38327.0], [34.0, 37985.0], [37.0, 37976.0], [36.0, 36985.0], [39.0, 38322.0], [38.0, 38096.0], [41.0, 36936.0], [40.0, 38091.0], [43.0, 36916.0], [42.0, 38296.0], [45.0, 38244.0], [44.0, 37970.0], [47.0, 35151.0], [46.0, 36944.0], [49.0, 37100.0], [48.0, 38139.0], [51.0, 38164.0], [50.0, 35121.0], [53.0, 35126.0], [52.0, 38246.0], [55.0, 38243.0], [54.0, 36968.0], [57.0, 36939.0], [56.0, 38029.0], [59.0, 38056.0], [58.0, 38259.0], [61.0, 37054.0], [60.0, 35107.0], [63.0, 35106.0], [62.0, 38180.0], [67.0, 38258.0], [66.0, 36908.0], [65.0, 35095.0], [64.0, 38252.0], [71.0, 38010.0], [70.0, 38237.0], [69.0, 36905.0], [68.0, 38017.0], [75.0, 36675.5], [73.0, 37040.0], [72.0, 35098.0], [79.0, 36944.0], [78.0, 36919.0], [77.0, 35119.0], [76.0, 38107.0], [83.0, 35103.0], [82.0, 37085.0], [81.0, 38118.5], [87.0, 33313.0], [86.0, 35116.0], [85.0, 37944.0], [84.0, 38271.0], [91.0, 35116.0], [90.0, 36957.0], [89.0, 38053.0], [88.0, 38277.0], [95.0, 33432.0], [94.0, 38271.0], [93.0, 36952.0], [92.0, 33439.0], [99.0, 38290.0], [98.0, 35136.0], [97.0, 37053.0], [96.0, 37887.0], [103.0, 33300.0], [102.0, 38328.0], [101.0, 35133.0], [100.0, 37916.0], [107.0, 33425.0], [106.0, 35147.0], [105.0, 36944.0], [104.0, 38027.0], [111.0, 37513.0], [109.0, 38324.0], [108.0, 36949.0], [115.0, 38325.0], [114.0, 37929.0], [113.0, 35175.0], [112.0, 33419.0], [119.0, 38334.0], [118.0, 36966.0], [117.0, 38047.0], [116.0, 35193.0], [123.0, 33449.0], [122.0, 36998.0], [121.0, 33304.0], [120.0, 35202.0], [127.0, 37897.0], [126.0, 35221.0], [125.0, 38356.0], [124.0, 36989.0], [135.0, 33327.0], [134.0, 38319.0], [133.0, 36071.0], [131.0, 37902.0], [130.0, 38332.0], [129.0, 35211.0], [128.0, 33454.0], [143.0, 33453.0], [142.0, 38316.0], [141.0, 35176.0], [140.0, 36948.0], [139.0, 35752.5], [137.0, 36952.0], [136.0, 38017.0], [151.0, 38273.0], [150.0, 38029.0], [149.0, 34253.0], [147.0, 35167.0], [146.0, 37884.0], [145.0, 38289.0], [144.0, 37094.0], [159.0, 37044.0], [158.0, 38267.0], [157.0, 33401.0], [156.0, 36936.0], [155.0, 33298.0], [154.0, 38047.0], [153.0, 35193.0], [152.0, 36960.0], [167.0, 36922.0], [166.0, 38272.0], [165.0, 33244.0], [164.0, 36541.0], [162.0, 38280.0], [161.0, 35203.0], [160.0, 37894.0], [175.0, 37888.0], [174.0, 38206.0], [173.0, 35224.0], [172.0, 33318.0], [171.0, 36920.0], [170.0, 33222.0], [169.0, 35202.0], [168.0, 38030.0], [183.0, 38209.0], [182.0, 35238.0], [181.0, 36918.0], [180.0, 33190.0], [179.0, 37860.0], [178.0, 38192.0], [177.0, 35240.0], [176.0, 37029.0], [191.0, 37845.0], [190.0, 35239.0], [189.0, 37014.0], [188.0, 33305.0], [187.0, 38213.0], [186.0, 36889.0], [185.0, 33208.0], [184.0, 37983.0], [199.0, 37942.0], [198.0, 35268.0], [197.0, 38291.0], [196.0, 36889.0], [195.0, 33142.0], [194.0, 37836.0], [193.0, 35223.0], [192.0, 38275.0], [207.0, 33212.0], [206.0, 37833.0], [205.0, 35271.0], [204.0, 37001.0], [203.0, 33213.0], [202.0, 38303.0], [201.0, 36890.0], [200.0, 33115.0], [215.0, 33069.0], [214.0, 36620.5], [212.0, 38336.0], [211.0, 36903.0], [210.0, 36544.5], [208.0, 38327.0], [223.0, 38360.0], [222.0, 33148.0], [221.0, 37816.0], [220.0, 35268.0], [219.0, 37067.0], [218.0, 33179.0], [217.0, 38333.0], [216.0, 36919.0], [231.0, 37012.0], [230.0, 33022.0], [229.0, 37897.0], [228.0, 35279.0], [227.0, 38341.0], [226.0, 36953.0], [225.0, 37793.0], [224.0, 35281.0], [239.0, 35280.0], [238.0, 38374.0], [237.0, 33063.0], [236.0, 37718.0], [235.0, 35282.0], [234.0, 33102.0], [233.0, 37033.0], [232.0, 38336.0], [247.0, 38376.0], [246.0, 37835.0], [245.0, 32911.0], [244.0, 37002.0], [243.0, 35253.0], [242.0, 38377.0], [241.0, 37724.0], [240.0, 37012.0], [255.0, 35250.0], [254.0, 37107.0], [253.0, 38370.0], [252.0, 33065.0], [251.0, 35250.0], [250.0, 37823.0], [249.0, 37001.0], [248.0, 33065.0], [270.0, 35240.0], [271.0, 37690.0], [269.0, 37103.0], [268.0, 38383.0], [267.0, 33078.0], [266.0, 37814.0], [265.0, 36971.0], [264.0, 32932.0], [263.0, 35241.0], [257.0, 37685.0], [256.0, 38365.0], [259.0, 32938.0], [258.0, 35243.0], [262.0, 37817.0], [261.0, 36968.0], [260.0, 38366.0], [286.0, 37691.0], [287.0, 32978.0], [285.0, 38275.0], [284.0, 35245.0], [283.0, 37090.0], [282.0, 33081.0], [281.0, 36968.0], [280.0, 37817.0], [279.0, 35255.0], [272.0, 38350.0], [275.0, 38359.0], [274.0, 34108.0], [278.0, 32957.0], [277.0, 37688.0], [276.0, 36969.0], [302.0, 32979.0], [303.0, 35261.0], [301.0, 37699.0], [300.0, 35258.0], [299.0, 37071.0], [298.0, 38228.0], [297.0, 33128.0], [296.0, 37837.0], [295.0, 36951.0], [289.0, 38250.0], [288.0, 35262.0], [291.0, 37702.0], [290.0, 36972.0], [294.0, 38241.0], [293.0, 35264.0], [292.0, 33002.0], [318.0, 35259.0], [319.0, 38230.0], [317.0, 37615.0], [316.0, 35265.0], [315.0, 33125.0], [314.0, 37069.0], [313.0, 38229.0], [312.0, 33130.0], [311.0, 37774.0], [305.0, 38223.0], [304.0, 36939.0], [307.0, 32971.0], [306.0, 37668.0], [310.0, 38218.0], [309.0, 36941.0], [308.0, 35236.0], [334.0, 37012.0], [335.0, 37603.0], [333.0, 35295.0], [332.0, 37609.0], [331.0, 35309.0], [330.0, 33127.0], [329.0, 38239.0], [328.0, 37125.0], [327.0, 33113.0], [321.0, 37582.0], [320.0, 36915.0], [323.0, 35285.0], [322.0, 32992.0], [326.0, 37991.5], [324.0, 36971.0], [350.0, 35350.0], [351.0, 32978.0], [349.0, 36991.0], [348.0, 37553.0], [347.0, 35326.0], [346.0, 38229.0], [345.0, 33127.0], [344.0, 35344.0], [343.0, 36999.0], [337.0, 35318.0], [336.0, 38244.0], [339.0, 37003.0], [338.0, 32974.0], [342.0, 38234.0], [341.0, 33113.0], [340.0, 37736.0], [366.0, 33005.0], [367.0, 38258.0], [365.0, 35388.0], [364.0, 37105.0], [363.0, 35406.0], [362.0, 33114.0], [361.0, 38275.0], [360.0, 37634.0], [359.0, 36987.0], [353.0, 38275.0], [352.0, 37553.0], [355.0, 38292.0], [354.0, 36989.0], [358.0, 35382.0], [357.0, 37658.0], [356.0, 33120.0], [382.0, 37460.0], [383.0, 38241.0], [381.0, 33054.0], [380.0, 35332.0], [379.0, 37128.0], [378.0, 35359.0], [377.0, 37598.0], [376.0, 38250.0], [375.0, 36995.0], [369.0, 35360.0], [368.0, 37478.0], [371.0, 36994.0], [370.0, 33028.0], [374.0, 33165.0], [373.0, 37617.0], [372.0, 38263.0], [398.0, 35342.0], [399.0, 33081.0], [397.0, 37474.0], [396.0, 33057.0], [395.0, 35340.0], [394.0, 37173.0], [393.0, 35306.0], [392.0, 38255.0], [391.0, 37008.0], [385.0, 35302.0], [384.0, 33078.0], [387.0, 36996.0], [386.0, 37466.0], [390.0, 37619.0], [389.0, 33197.0], [388.0, 38226.0], [414.0, 35348.0], [415.0, 37483.0], [413.0, 38211.0], [412.0, 33039.0], [411.0, 37466.0], [410.0, 35353.0], [409.0, 37176.0], [408.0, 38219.0], [407.0, 35380.0], [401.0, 37449.0], [400.0, 38237.0], [403.0, 33203.0], [402.0, 37054.0], [406.0, 37056.0], [405.0, 38231.0], [404.0, 37584.0], [430.0, 37475.0], [431.0, 33034.0], [429.0, 38198.0], [428.0, 35310.0], [427.0, 35314.0], [426.0, 37495.0], [425.0, 38213.0], [424.0, 37187.0], [423.0, 33173.0], [417.0, 37062.0], [416.0, 33039.0], [419.0, 33174.0], [418.0, 37617.0], [422.0, 35353.0], [421.0, 38210.0], [420.0, 37054.0], [446.0, 33022.0], [447.0, 37020.0], [445.0, 38175.0], [444.0, 37460.0], [443.0, 35299.0], [442.0, 38172.0], [441.0, 37475.0], [440.0, 37142.0], [439.0, 33149.0], [433.0, 37571.0], [432.0, 37026.0], [435.0, 35310.0], [434.0, 33174.0], [438.0, 35303.0], [437.0, 38188.0], [436.0, 37018.0], [462.0, 35293.0], [463.0, 37024.0], [460.0, 38157.0], [451.0, 37010.0], [450.0, 33147.0], [449.0, 35299.0], [448.0, 37587.0], [459.0, 37460.0], [458.0, 38158.0], [457.0, 35308.0], [456.0, 37008.0], [455.0, 37432.0], [454.0, 33147.0], [453.0, 38155.0], [452.0, 35309.0], [478.0, 38159.0], [479.0, 35307.0], [477.0, 35336.5], [467.0, 36981.0], [466.0, 37573.0], [465.0, 35304.0], [464.0, 33194.0], [475.0, 37134.0], [474.0, 35298.0], [473.0, 38154.0], [472.0, 37459.0], [471.0, 37006.0], [470.0, 33189.0], [469.0, 35313.0], [468.0, 38164.0], [494.0, 35307.0], [495.0, 33091.0], [493.0, 37402.0], [492.0, 33045.0], [491.0, 38184.0], [490.0, 37156.0], [489.0, 35298.0], [488.0, 37809.0], [486.0, 37019.0], [481.0, 33063.0], [480.0, 37598.0], [483.0, 35329.0], [482.0, 37011.0], [485.0, 33168.0], [484.0, 38152.0], [510.0, 37522.0], [511.0, 33118.0], [509.0, 38143.0], [508.0, 35273.0], [507.0, 33116.0], [506.0, 37430.0], [505.0, 37197.0], [504.0, 35256.0], [503.0, 38149.0], [497.0, 37038.0], [496.0, 37534.0], [499.0, 38156.0], [498.0, 33235.0], [502.0, 37426.0], [501.0, 37043.0], [500.0, 35288.0], [540.0, 37516.0], [543.0, 35317.0], [528.0, 38162.0], [530.0, 33293.0], [529.0, 35286.0], [533.0, 36347.5], [531.0, 37075.0], [542.0, 37050.0], [541.0, 33146.0], [539.0, 38147.0], [538.0, 37404.0], [537.0, 35292.0], [536.0, 38165.0], [527.0, 37075.0], [513.0, 33240.0], [512.0, 37097.0], [515.0, 37102.0], [514.0, 35246.0], [517.0, 37395.0], [516.0, 38155.0], [519.0, 38172.0], [518.0, 35264.0], [526.0, 33125.0], [525.0, 37544.0], [524.0, 38185.0], [523.0, 33105.0], [522.0, 35247.0], [521.0, 37398.0], [520.0, 37177.0], [535.0, 37199.0], [534.0, 33277.0], [572.0, 35352.0], [575.0, 37179.0], [561.0, 38100.0], [560.0, 37166.0], [563.0, 33292.0], [562.0, 35324.0], [565.0, 37355.0], [564.0, 37182.0], [574.0, 33299.0], [573.0, 38048.0], [571.0, 37464.0], [570.0, 37176.0], [569.0, 33156.0], [568.0, 38064.0], [559.0, 33294.0], [545.0, 33281.0], [544.0, 38168.0], [547.0, 35298.0], [546.0, 37078.0], [549.0, 33301.0], [548.0, 37401.0], [551.0, 35304.0], [550.0, 37222.0], [558.0, 35297.0], [557.0, 38141.0], [556.0, 37126.0], [555.0, 35339.0], [553.0, 38153.0], [552.0, 37396.0], [567.0, 37348.0], [566.0, 35330.0], [600.0, 33146.0], [604.0, 38020.0], [607.0, 37474.0], [594.0, 35252.5], [592.0, 37435.0], [597.0, 37356.0], [596.0, 36698.0], [606.0, 35421.0], [605.0, 33139.0], [603.0, 37201.0], [602.0, 37333.0], [601.0, 37989.0], [591.0, 37204.0], [577.0, 37439.0], [576.0, 35378.0], [579.0, 33297.0], [578.0, 38043.0], [581.0, 37181.0], [580.0, 35390.0], [583.0, 37313.0], [582.0, 35416.0], [590.0, 35423.0], [589.0, 37991.0], [588.0, 33153.0], [587.0, 37468.0], [586.0, 33149.0], [585.0, 38011.0], [584.0, 37323.0], [599.0, 37306.0], [598.0, 35421.0], [636.0, 33151.0], [634.0, 18739.5], [639.0, 37224.0], [625.0, 33281.0], [624.0, 35417.0], [627.0, 37382.0], [626.0, 38033.0], [629.0, 35440.0], [628.0, 37366.0], [638.0, 35442.0], [637.0, 38018.0], [635.0, 35443.0], [633.0, 37580.0], [632.0, 38018.0], [623.0, 37237.0], [609.0, 35432.0], [608.0, 37223.0], [611.0, 33268.0], [610.0, 38005.0], [613.0, 35400.0], [612.0, 37356.0], [615.0, 38007.0], [614.0, 37356.0], [622.0, 38034.0], [621.0, 35345.0], [618.0, 37237.0], [617.0, 37363.0], [616.0, 33145.0], [631.0, 33150.0], [630.0, 37410.0], [668.0, 38163.0], [671.0, 35471.0], [657.0, 35463.0], [656.0, 37424.0], [659.0, 33222.0], [658.0, 38090.0], [661.0, 37021.0], [660.0, 37425.0], [670.0, 37345.0], [669.0, 33247.0], [667.0, 35464.0], [666.0, 33095.0], [665.0, 38140.0], [664.0, 37167.0], [655.0, 33221.0], [640.0, 33273.0], [642.0, 37450.0], [641.0, 38016.0], [645.0, 33265.0], [644.0, 36404.0], [647.0, 37452.0], [646.0, 38051.0], [654.0, 38081.0], [653.0, 35455.0], [652.0, 33099.0], [651.0, 38064.0], [650.0, 37248.0], [649.0, 35440.0], [648.0, 37549.0], [663.0, 35494.0], [662.0, 37513.0], [700.0, 33105.0], [685.0, 19160.0], [682.0, 17810.5], [681.0, 38098.0], [680.0, 33119.0], [683.0, 18809.0], [684.0, 16725.0], [703.0, 37975.0], [689.0, 38106.0], [688.0, 33224.0], [691.0, 35433.0], [690.0, 37319.0], [693.0, 37438.0], [692.0, 37002.0], [695.0, 33100.0], [694.0, 37020.0], [702.0, 33241.0], [701.0, 35444.0], [699.0, 38025.0], [698.0, 37168.0], [697.0, 37422.0], [696.0, 35442.0], [687.0, 37015.0], [679.0, 37422.0], [678.0, 37039.0], [677.0, 35467.0], [676.0, 37320.0], [675.0, 37051.0], [674.0, 38155.0], [673.0, 33265.0], [672.0, 37047.0], [686.0, 35445.0], [732.0, 33181.0], [735.0, 36938.0], [721.0, 35413.0], [720.0, 37045.0], [723.0, 37010.0], [722.0, 37252.0], [725.0, 33067.0], [724.0, 37844.0], [734.0, 35421.0], [733.0, 37258.0], [731.0, 35401.0], [730.0, 37838.0], [729.0, 33053.0], [728.0, 35412.0], [719.0, 37907.0], [705.0, 35452.0], [704.0, 37277.0], [707.0, 37989.0], [706.0, 37032.0], [709.0, 37041.0], [708.0, 37401.0], [711.0, 37413.0], [710.0, 33102.0], [718.0, 37276.0], [717.0, 33198.0], [716.0, 35414.0], [715.0, 37942.0], [714.0, 33104.0], [713.0, 37168.0], [712.0, 35455.0], [727.0, 37111.0], [726.0, 37385.0], [764.0, 33105.0], [767.0, 36652.0], [753.0, 37307.0], [752.0, 33103.0], [755.0, 37628.0], [754.0, 36811.0], [757.0, 32994.0], [756.0, 35429.0], [766.0, 37306.0], [765.0, 37175.0], [763.0, 35450.0], [762.0, 37550.0], [761.0, 37181.0], [760.0, 33117.0], [751.0, 37182.0], [737.0, 37238.0], [736.0, 37826.0], [739.0, 33013.0], [738.0, 36920.0], [741.0, 37346.0], [740.0, 37832.0], [743.0, 33019.0], [742.0, 35432.0], [750.0, 36846.0], [749.0, 35430.0], [748.0, 37770.0], [747.0, 37195.0], [746.0, 33132.0], [745.0, 35425.0], [744.0, 37008.0], [759.0, 36903.0], [758.0, 35454.0], [796.0, 36021.0], [799.0, 36012.0], [785.0, 35241.0], [784.0, 32982.0], [787.0, 37092.0], [786.0, 36884.0], [789.0, 35224.0], [788.0, 32964.0], [798.0, 37074.0], [797.0, 32855.0], [795.0, 32851.0], [794.0, 37179.0], [793.0, 35217.0], [792.0, 36776.0], [783.0, 35254.0], [769.0, 35439.0], [768.0, 37375.0], [771.0, 35439.0], [770.0, 32960.0], [773.0, 37136.0], [772.0, 33058.0], [775.0, 35400.0], [774.0, 36549.0], [782.0, 37224.0], [781.0, 32881.0], [780.0, 37063.0], [779.0, 36513.0], [778.0, 37242.0], [777.0, 37120.0], [776.0, 33055.0], [791.0, 37182.0], [790.0, 36121.0], [828.0, 36247.0], [831.0, 32966.0], [817.0, 33026.0], [816.0, 37068.0], [819.0, 37088.0], [818.0, 35269.0], [821.0, 37234.0], [820.0, 36117.0], [830.0, 37088.0], [829.0, 35883.0], [827.0, 35190.0], [826.0, 32811.0], [825.0, 37083.0], [824.0, 35890.0], [815.0, 36004.0], [801.0, 33026.0], [800.0, 35210.0], [803.0, 35210.0], [802.0, 36661.0], [805.0, 36623.0], [804.0, 37192.0], [814.0, 35245.0], [813.0, 33294.0], [812.0, 32928.0], [811.0, 35996.0], [810.0, 36575.0], [809.0, 32893.0], [808.0, 36133.333333333336], [823.0, 36289.0], [822.0, 35266.0], [860.0, 36170.0], [863.0, 35166.0], [848.0, 35190.0], [850.0, 36214.0], [849.0, 35998.0], [853.0, 37171.0], [852.0, 34073.5], [862.0, 37299.0], [861.0, 32968.0], [859.0, 35848.0], [858.0, 35189.0], [857.0, 32842.0], [856.0, 37188.0], [847.0, 32948.0], [832.0, 35191.0], [835.0, 36627.5], [833.0, 36247.0], [837.0, 32816.0], [836.0, 35189.0], [839.0, 37123.0], [838.0, 36240.0], [846.0, 37301.0], [845.0, 35879.0], [844.0, 36239.0], [843.0, 37154.0], [842.0, 35183.0], [841.0, 32828.0], [840.0, 35886.0], [855.0, 36184.0], [854.0, 35845.0], [889.0, 35876.0], [894.0, 36617.5], [895.0, 33030.0], [880.0, 36153.0], [882.0, 37252.0], [881.0, 35146.0], [884.0, 35878.0], [883.0, 32933.0], [892.0, 36150.0], [891.0, 35172.0], [890.0, 33011.0], [888.0, 36149.0], [870.0, 36142.0], [869.0, 35852.0], [868.0, 37157.0], [867.0, 35180.0], [866.0, 32969.0], [865.0, 36143.0], [864.0, 35970.0], [879.0, 35101.0], [877.0, 35997.0], [876.0, 35144.0], [875.0, 36169.0], [874.0, 37165.0], [873.0, 34624.0], [887.0, 34981.0], [885.0, 35172.0], [924.0, 35123.0], [927.0, 35154.0], [913.0, 36130.0], [912.0, 37222.0], [915.0, 32991.0], [914.0, 35877.0], [917.0, 36135.0], [916.0, 35141.0], [926.0, 37224.0], [925.0, 36133.0], [923.0, 37088.0], [922.0, 35877.0], [921.0, 33151.0], [920.0, 37105.0], [911.0, 35145.0], [897.0, 36138.0], [896.0, 35182.0], [899.0, 35913.0], [898.0, 37207.0], [901.0, 36115.0], [900.0, 35175.0], [903.0, 35910.0], [902.0, 32923.0], [910.0, 36116.0], [909.0, 33103.0], [908.0, 37237.0], [907.0, 35167.0], [906.0, 35881.0], [905.0, 32936.0], [904.0, 37096.0], [919.0, 33000.0], [918.0, 35876.0], [953.0, 36008.5], [958.0, 37148.0], [959.0, 35143.0], [945.0, 33037.0], [944.0, 35145.0], [947.0, 35143.0], [946.0, 36183.0], [957.0, 36196.0], [956.0, 33165.0], [955.0, 36097.0], [943.0, 36585.5], [929.0, 36119.0], [928.0, 36001.0], [931.0, 35155.0], [930.0, 33028.0], [933.0, 33019.0], [932.0, 36118.0], [935.0, 35859.0], [934.0, 37076.0], [941.0, 36142.0], [940.0, 35855.0], [939.0, 36144.0], [938.0, 35158.0], [937.0, 37079.0], [936.0, 33166.0], [951.0, 33164.0], [950.0, 37062.0], [949.0, 35859.0], [948.0, 33053.0], [985.0, 35693.0], [990.0, 10547.142857142857], [991.0, 37079.0], [977.0, 35108.0], [976.0, 36152.0], [979.0, 37005.0], [978.0, 33071.0], [988.0, 35111.0], [987.0, 37106.0], [986.0, 33182.0], [984.0, 36146.0], [967.0, 37077.0], [966.0, 33203.0], [965.0, 35790.0], [964.0, 37055.0], [963.0, 33054.0], [962.0, 35126.0], [961.0, 36189.0], [960.0, 35913.0], [975.0, 36128.0], [974.0, 35491.5], [972.0, 37161.0], [971.0, 33192.0], [970.0, 35136.0], [969.0, 36136.0], [968.0, 35760.0], [983.0, 35115.0], [982.0, 37012.0], [981.0, 33177.0], [980.0, 35726.0], [1000.0, 25033.492159227982], [999.0, 35047.4], [997.0, 36941.0], [996.0, 33193.0], [995.0, 35705.0], [994.0, 33058.0], [993.0, 36124.0], [992.0, 35114.0], [1.0, 38437.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[812.3048689138578, 29117.49438202252]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 621.0, "minX": 1.75235796E12, "maxY": 7680.716666666666, "series": [{"data": [[1.75235808E12, 3732.05], [1.75235796E12, 739.8], [1.75235802E12, 7680.716666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235808E12, 3154.8333333333335], [1.75235796E12, 621.0], [1.75235802E12, 6459.166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235808E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2886.339506172839, "minX": 1.75235796E12, "maxY": 36318.52612393685, "series": [{"data": [[1.75235808E12, 36318.52612393685], [1.75235796E12, 2886.339506172839], [1.75235802E12, 28122.24094955492]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235808E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2885.901234567901, "minX": 1.75235796E12, "maxY": 36318.49331713249, "series": [{"data": [[1.75235808E12, 36318.49331713249], [1.75235796E12, 2885.901234567901], [1.75235802E12, 28122.21424332342]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235808E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75235796E12, "maxY": 96.48724035608294, "series": [{"data": [[1.75235808E12, 0.0], [1.75235796E12, 7.444444444444439], [1.75235802E12, 96.48724035608294]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235808E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 165.0, "minX": 1.75235796E12, "maxY": 53595.0, "series": [{"data": [[1.75235808E12, 38534.0], [1.75235796E12, 5577.0], [1.75235802E12, 53595.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235808E12, 38229.6], [1.75235796E12, 5092.6], [1.75235802E12, 42116.600000000006]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235808E12, 38416.159999999996], [1.75235796E12, 5574.48], [1.75235802E12, 50375.31999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235808E12, 38301.6], [1.75235796E12, 5386.7], [1.75235802E12, 45419.39999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235808E12, 32851.0], [1.75235796E12, 165.0], [1.75235802E12, 5658.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235808E12, 37024.0], [1.75235796E12, 2845.0], [1.75235802E12, 33172.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235808E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6832.0, "minX": 2.0, "maxY": 38457.0, "series": [{"data": [[2.0, 38438.5], [9.0, 38457.0], [15.0, 18777.0], [16.0, 38136.5], [21.0, 6832.0], [22.0, 34163.5], [23.0, 35210.0], [24.0, 37019.0], [25.0, 36958.5], [26.0, 36124.5], [27.0, 35524.0], [28.0, 35077.0], [29.0, 33462.5], [30.0, 33060.0], [31.0, 21362.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 31.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 6832.0, "minX": 2.0, "maxY": 38457.0, "series": [{"data": [[2.0, 38438.5], [9.0, 38457.0], [15.0, 18777.0], [16.0, 38136.5], [21.0, 6832.0], [22.0, 34163.5], [23.0, 35210.0], [24.0, 37019.0], [25.0, 36958.5], [26.0, 36124.5], [27.0, 35524.0], [28.0, 35077.0], [29.0, 33462.5], [30.0, 33060.0], [31.0, 21362.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 31.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 19.366666666666667, "minX": 1.75235796E12, "maxY": 25.133333333333333, "series": [{"data": [[1.75235796E12, 19.366666666666667], [1.75235802E12, 25.133333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235802E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.7, "minX": 1.75235796E12, "maxY": 28.083333333333332, "series": [{"data": [[1.75235808E12, 13.716666666666667], [1.75235796E12, 2.7], [1.75235802E12, 28.083333333333332]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235808E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.7, "minX": 1.75235796E12, "maxY": 28.083333333333332, "series": [{"data": [[1.75235808E12, 13.716666666666667], [1.75235796E12, 2.7], [1.75235802E12, 28.083333333333332]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235808E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.7, "minX": 1.75235796E12, "maxY": 28.083333333333332, "series": [{"data": [[1.75235808E12, 13.716666666666667], [1.75235796E12, 2.7], [1.75235802E12, 28.083333333333332]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235808E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

