/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 2383.0, "series": [{"data": [[0.0, 0.0], [0.1, 15.0], [0.2, 21.0], [0.3, 37.0], [0.4, 52.0], [0.5, 61.0], [0.6, 77.0], [0.7, 86.0], [0.8, 97.0], [0.9, 107.0], [1.0, 110.0], [1.1, 111.0], [1.2, 112.0], [1.3, 114.0], [1.4, 117.0], [1.5, 125.0], [1.6, 132.0], [1.7, 143.0], [1.8, 150.0], [1.9, 168.0], [2.0, 182.0], [2.1, 197.0], [2.2, 218.0], [2.3, 230.0], [2.4, 241.0], [2.5, 254.0], [2.6, 281.0], [2.7, 299.0], [2.8, 319.0], [2.9, 335.0], [3.0, 357.0], [3.1, 374.0], [3.2, 380.0], [3.3, 389.0], [3.4, 393.0], [3.5, 404.0], [3.6, 441.0], [3.7, 473.0], [3.8, 481.0], [3.9, 492.0], [4.0, 500.0], [4.1, 504.0], [4.2, 517.0], [4.3, 523.0], [4.4, 528.0], [4.5, 532.0], [4.6, 534.0], [4.7, 535.0], [4.8, 538.0], [4.9, 540.0], [5.0, 541.0], [5.1, 548.0], [5.2, 554.0], [5.3, 555.0], [5.4, 556.0], [5.5, 557.0], [5.6, 557.0], [5.7, 557.0], [5.8, 557.0], [5.9, 558.0], [6.0, 558.0], [6.1, 558.0], [6.2, 559.0], [6.3, 559.0], [6.4, 559.0], [6.5, 559.0], [6.6, 560.0], [6.7, 560.0], [6.8, 560.0], [6.9, 560.0], [7.0, 561.0], [7.1, 561.0], [7.2, 561.0], [7.3, 561.0], [7.4, 561.0], [7.5, 562.0], [7.6, 562.0], [7.7, 562.0], [7.8, 562.0], [7.9, 562.0], [8.0, 562.0], [8.1, 563.0], [8.2, 563.0], [8.3, 563.0], [8.4, 563.0], [8.5, 563.0], [8.6, 563.0], [8.7, 563.0], [8.8, 563.0], [8.9, 563.0], [9.0, 564.0], [9.1, 564.0], [9.2, 564.0], [9.3, 564.0], [9.4, 564.0], [9.5, 564.0], [9.6, 564.0], [9.7, 564.0], [9.8, 564.0], [9.9, 565.0], [10.0, 565.0], [10.1, 565.0], [10.2, 565.0], [10.3, 565.0], [10.4, 565.0], [10.5, 565.0], [10.6, 565.0], [10.7, 565.0], [10.8, 565.0], [10.9, 565.0], [11.0, 566.0], [11.1, 566.0], [11.2, 566.0], [11.3, 566.0], [11.4, 566.0], [11.5, 566.0], [11.6, 566.0], [11.7, 566.0], [11.8, 566.0], [11.9, 567.0], [12.0, 567.0], [12.1, 567.0], [12.2, 567.0], [12.3, 567.0], [12.4, 567.0], [12.5, 567.0], [12.6, 567.0], [12.7, 568.0], [12.8, 568.0], [12.9, 568.0], [13.0, 568.0], [13.1, 568.0], [13.2, 568.0], [13.3, 568.0], [13.4, 568.0], [13.5, 569.0], [13.6, 569.0], [13.7, 569.0], [13.8, 569.0], [13.9, 569.0], [14.0, 569.0], [14.1, 569.0], [14.2, 569.0], [14.3, 570.0], [14.4, 570.0], [14.5, 570.0], [14.6, 570.0], [14.7, 570.0], [14.8, 570.0], [14.9, 570.0], [15.0, 571.0], [15.1, 571.0], [15.2, 571.0], [15.3, 571.0], [15.4, 571.0], [15.5, 571.0], [15.6, 571.0], [15.7, 572.0], [15.8, 572.0], [15.9, 572.0], [16.0, 572.0], [16.1, 572.0], [16.2, 572.0], [16.3, 573.0], [16.4, 573.0], [16.5, 573.0], [16.6, 573.0], [16.7, 573.0], [16.8, 573.0], [16.9, 574.0], [17.0, 574.0], [17.1, 574.0], [17.2, 574.0], [17.3, 574.0], [17.4, 574.0], [17.5, 575.0], [17.6, 575.0], [17.7, 575.0], [17.8, 575.0], [17.9, 575.0], [18.0, 575.0], [18.1, 576.0], [18.2, 576.0], [18.3, 576.0], [18.4, 576.0], [18.5, 577.0], [18.6, 577.0], [18.7, 577.0], [18.8, 577.0], [18.9, 578.0], [19.0, 578.0], [19.1, 579.0], [19.2, 579.0], [19.3, 579.0], [19.4, 580.0], [19.5, 580.0], [19.6, 581.0], [19.7, 581.0], [19.8, 581.0], [19.9, 582.0], [20.0, 582.0], [20.1, 582.0], [20.2, 583.0], [20.3, 583.0], [20.4, 584.0], [20.5, 584.0], [20.6, 584.0], [20.7, 585.0], [20.8, 585.0], [20.9, 586.0], [21.0, 587.0], [21.1, 587.0], [21.2, 588.0], [21.3, 589.0], [21.4, 590.0], [21.5, 591.0], [21.6, 592.0], [21.7, 593.0], [21.8, 594.0], [21.9, 594.0], [22.0, 595.0], [22.1, 595.0], [22.2, 596.0], [22.3, 598.0], [22.4, 600.0], [22.5, 602.0], [22.6, 604.0], [22.7, 613.0], [22.8, 616.0], [22.9, 634.0], [23.0, 639.0], [23.1, 677.0], [23.2, 708.0], [23.3, 754.0], [23.4, 757.0], [23.5, 758.0], [23.6, 758.0], [23.7, 759.0], [23.8, 759.0], [23.9, 760.0], [24.0, 761.0], [24.1, 761.0], [24.2, 761.0], [24.3, 762.0], [24.4, 762.0], [24.5, 762.0], [24.6, 762.0], [24.7, 762.0], [24.8, 763.0], [24.9, 763.0], [25.0, 763.0], [25.1, 763.0], [25.2, 763.0], [25.3, 764.0], [25.4, 764.0], [25.5, 764.0], [25.6, 764.0], [25.7, 764.0], [25.8, 764.0], [25.9, 765.0], [26.0, 765.0], [26.1, 765.0], [26.2, 765.0], [26.3, 765.0], [26.4, 765.0], [26.5, 766.0], [26.6, 766.0], [26.7, 766.0], [26.8, 766.0], [26.9, 766.0], [27.0, 766.0], [27.1, 767.0], [27.2, 767.0], [27.3, 767.0], [27.4, 767.0], [27.5, 767.0], [27.6, 768.0], [27.7, 768.0], [27.8, 768.0], [27.9, 768.0], [28.0, 768.0], [28.1, 768.0], [28.2, 768.0], [28.3, 769.0], [28.4, 769.0], [28.5, 769.0], [28.6, 769.0], [28.7, 769.0], [28.8, 769.0], [28.9, 769.0], [29.0, 770.0], [29.1, 770.0], [29.2, 770.0], [29.3, 770.0], [29.4, 770.0], [29.5, 770.0], [29.6, 771.0], [29.7, 771.0], [29.8, 771.0], [29.9, 771.0], [30.0, 771.0], [30.1, 771.0], [30.2, 772.0], [30.3, 772.0], [30.4, 772.0], [30.5, 772.0], [30.6, 772.0], [30.7, 772.0], [30.8, 772.0], [30.9, 773.0], [31.0, 773.0], [31.1, 773.0], [31.2, 773.0], [31.3, 773.0], [31.4, 773.0], [31.5, 773.0], [31.6, 773.0], [31.7, 773.0], [31.8, 774.0], [31.9, 774.0], [32.0, 774.0], [32.1, 774.0], [32.2, 774.0], [32.3, 774.0], [32.4, 774.0], [32.5, 774.0], [32.6, 775.0], [32.7, 775.0], [32.8, 775.0], [32.9, 775.0], [33.0, 775.0], [33.1, 775.0], [33.2, 775.0], [33.3, 775.0], [33.4, 775.0], [33.5, 776.0], [33.6, 776.0], [33.7, 776.0], [33.8, 776.0], [33.9, 776.0], [34.0, 776.0], [34.1, 776.0], [34.2, 776.0], [34.3, 776.0], [34.4, 777.0], [34.5, 777.0], [34.6, 777.0], [34.7, 777.0], [34.8, 777.0], [34.9, 777.0], [35.0, 777.0], [35.1, 777.0], [35.2, 778.0], [35.3, 778.0], [35.4, 778.0], [35.5, 778.0], [35.6, 778.0], [35.7, 778.0], [35.8, 779.0], [35.9, 779.0], [36.0, 779.0], [36.1, 779.0], [36.2, 779.0], [36.3, 779.0], [36.4, 780.0], [36.5, 780.0], [36.6, 780.0], [36.7, 780.0], [36.8, 780.0], [36.9, 780.0], [37.0, 781.0], [37.1, 781.0], [37.2, 781.0], [37.3, 781.0], [37.4, 781.0], [37.5, 781.0], [37.6, 782.0], [37.7, 782.0], [37.8, 782.0], [37.9, 782.0], [38.0, 782.0], [38.1, 782.0], [38.2, 783.0], [38.3, 783.0], [38.4, 783.0], [38.5, 783.0], [38.6, 783.0], [38.7, 783.0], [38.8, 783.0], [38.9, 784.0], [39.0, 784.0], [39.1, 784.0], [39.2, 784.0], [39.3, 784.0], [39.4, 785.0], [39.5, 785.0], [39.6, 785.0], [39.7, 785.0], [39.8, 785.0], [39.9, 785.0], [40.0, 786.0], [40.1, 786.0], [40.2, 786.0], [40.3, 786.0], [40.4, 786.0], [40.5, 786.0], [40.6, 786.0], [40.7, 786.0], [40.8, 787.0], [40.9, 787.0], [41.0, 787.0], [41.1, 787.0], [41.2, 787.0], [41.3, 787.0], [41.4, 787.0], [41.5, 788.0], [41.6, 788.0], [41.7, 788.0], [41.8, 788.0], [41.9, 788.0], [42.0, 788.0], [42.1, 789.0], [42.2, 789.0], [42.3, 789.0], [42.4, 789.0], [42.5, 789.0], [42.6, 789.0], [42.7, 789.0], [42.8, 789.0], [42.9, 790.0], [43.0, 790.0], [43.1, 790.0], [43.2, 790.0], [43.3, 790.0], [43.4, 790.0], [43.5, 790.0], [43.6, 790.0], [43.7, 791.0], [43.8, 791.0], [43.9, 791.0], [44.0, 791.0], [44.1, 791.0], [44.2, 791.0], [44.3, 791.0], [44.4, 791.0], [44.5, 791.0], [44.6, 792.0], [44.7, 792.0], [44.8, 792.0], [44.9, 792.0], [45.0, 792.0], [45.1, 792.0], [45.2, 792.0], [45.3, 792.0], [45.4, 793.0], [45.5, 793.0], [45.6, 793.0], [45.7, 793.0], [45.8, 793.0], [45.9, 793.0], [46.0, 793.0], [46.1, 793.0], [46.2, 793.0], [46.3, 793.0], [46.4, 794.0], [46.5, 794.0], [46.6, 794.0], [46.7, 794.0], [46.8, 794.0], [46.9, 794.0], [47.0, 794.0], [47.1, 794.0], [47.2, 794.0], [47.3, 795.0], [47.4, 795.0], [47.5, 795.0], [47.6, 795.0], [47.7, 795.0], [47.8, 795.0], [47.9, 795.0], [48.0, 795.0], [48.1, 795.0], [48.2, 796.0], [48.3, 796.0], [48.4, 796.0], [48.5, 796.0], [48.6, 796.0], [48.7, 796.0], [48.8, 796.0], [48.9, 796.0], [49.0, 796.0], [49.1, 796.0], [49.2, 796.0], [49.3, 796.0], [49.4, 797.0], [49.5, 797.0], [49.6, 797.0], [49.7, 797.0], [49.8, 797.0], [49.9, 797.0], [50.0, 797.0], [50.1, 797.0], [50.2, 797.0], [50.3, 797.0], [50.4, 797.0], [50.5, 797.0], [50.6, 797.0], [50.7, 798.0], [50.8, 798.0], [50.9, 798.0], [51.0, 798.0], [51.1, 798.0], [51.2, 798.0], [51.3, 798.0], [51.4, 798.0], [51.5, 798.0], [51.6, 798.0], [51.7, 798.0], [51.8, 798.0], [51.9, 798.0], [52.0, 799.0], [52.1, 799.0], [52.2, 799.0], [52.3, 799.0], [52.4, 799.0], [52.5, 799.0], [52.6, 799.0], [52.7, 799.0], [52.8, 799.0], [52.9, 799.0], [53.0, 799.0], [53.1, 799.0], [53.2, 799.0], [53.3, 799.0], [53.4, 800.0], [53.5, 800.0], [53.6, 800.0], [53.7, 800.0], [53.8, 800.0], [53.9, 800.0], [54.0, 800.0], [54.1, 800.0], [54.2, 800.0], [54.3, 800.0], [54.4, 800.0], [54.5, 800.0], [54.6, 800.0], [54.7, 801.0], [54.8, 801.0], [54.9, 801.0], [55.0, 801.0], [55.1, 801.0], [55.2, 801.0], [55.3, 801.0], [55.4, 801.0], [55.5, 801.0], [55.6, 801.0], [55.7, 801.0], [55.8, 801.0], [55.9, 802.0], [56.0, 802.0], [56.1, 802.0], [56.2, 802.0], [56.3, 802.0], [56.4, 802.0], [56.5, 802.0], [56.6, 802.0], [56.7, 802.0], [56.8, 802.0], [56.9, 802.0], [57.0, 802.0], [57.1, 803.0], [57.2, 803.0], [57.3, 803.0], [57.4, 803.0], [57.5, 803.0], [57.6, 803.0], [57.7, 803.0], [57.8, 803.0], [57.9, 803.0], [58.0, 803.0], [58.1, 803.0], [58.2, 804.0], [58.3, 804.0], [58.4, 804.0], [58.5, 804.0], [58.6, 804.0], [58.7, 804.0], [58.8, 804.0], [58.9, 804.0], [59.0, 804.0], [59.1, 804.0], [59.2, 804.0], [59.3, 805.0], [59.4, 805.0], [59.5, 805.0], [59.6, 805.0], [59.7, 805.0], [59.8, 805.0], [59.9, 805.0], [60.0, 805.0], [60.1, 805.0], [60.2, 805.0], [60.3, 806.0], [60.4, 806.0], [60.5, 806.0], [60.6, 806.0], [60.7, 806.0], [60.8, 806.0], [60.9, 806.0], [61.0, 806.0], [61.1, 807.0], [61.2, 807.0], [61.3, 807.0], [61.4, 807.0], [61.5, 807.0], [61.6, 807.0], [61.7, 807.0], [61.8, 807.0], [61.9, 807.0], [62.0, 807.0], [62.1, 808.0], [62.2, 808.0], [62.3, 808.0], [62.4, 808.0], [62.5, 808.0], [62.6, 808.0], [62.7, 808.0], [62.8, 808.0], [62.9, 808.0], [63.0, 808.0], [63.1, 809.0], [63.2, 809.0], [63.3, 809.0], [63.4, 809.0], [63.5, 809.0], [63.6, 809.0], [63.7, 809.0], [63.8, 809.0], [63.9, 809.0], [64.0, 810.0], [64.1, 810.0], [64.2, 810.0], [64.3, 810.0], [64.4, 810.0], [64.5, 810.0], [64.6, 810.0], [64.7, 810.0], [64.8, 810.0], [64.9, 810.0], [65.0, 811.0], [65.1, 811.0], [65.2, 811.0], [65.3, 811.0], [65.4, 811.0], [65.5, 811.0], [65.6, 811.0], [65.7, 811.0], [65.8, 811.0], [65.9, 811.0], [66.0, 811.0], [66.1, 811.0], [66.2, 812.0], [66.3, 812.0], [66.4, 812.0], [66.5, 812.0], [66.6, 812.0], [66.7, 812.0], [66.8, 812.0], [66.9, 812.0], [67.0, 813.0], [67.1, 813.0], [67.2, 813.0], [67.3, 813.0], [67.4, 813.0], [67.5, 813.0], [67.6, 813.0], [67.7, 813.0], [67.8, 813.0], [67.9, 813.0], [68.0, 814.0], [68.1, 814.0], [68.2, 814.0], [68.3, 814.0], [68.4, 814.0], [68.5, 814.0], [68.6, 814.0], [68.7, 814.0], [68.8, 814.0], [68.9, 814.0], [69.0, 815.0], [69.1, 815.0], [69.2, 815.0], [69.3, 815.0], [69.4, 815.0], [69.5, 815.0], [69.6, 815.0], [69.7, 815.0], [69.8, 815.0], [69.9, 815.0], [70.0, 816.0], [70.1, 816.0], [70.2, 816.0], [70.3, 816.0], [70.4, 816.0], [70.5, 816.0], [70.6, 816.0], [70.7, 816.0], [70.8, 817.0], [70.9, 817.0], [71.0, 817.0], [71.1, 817.0], [71.2, 817.0], [71.3, 817.0], [71.4, 817.0], [71.5, 818.0], [71.6, 818.0], [71.7, 818.0], [71.8, 818.0], [71.9, 818.0], [72.0, 818.0], [72.1, 818.0], [72.2, 819.0], [72.3, 819.0], [72.4, 819.0], [72.5, 819.0], [72.6, 819.0], [72.7, 819.0], [72.8, 819.0], [72.9, 820.0], [73.0, 820.0], [73.1, 820.0], [73.2, 820.0], [73.3, 820.0], [73.4, 820.0], [73.5, 821.0], [73.6, 821.0], [73.7, 821.0], [73.8, 821.0], [73.9, 821.0], [74.0, 821.0], [74.1, 822.0], [74.2, 822.0], [74.3, 822.0], [74.4, 822.0], [74.5, 822.0], [74.6, 823.0], [74.7, 823.0], [74.8, 823.0], [74.9, 823.0], [75.0, 823.0], [75.1, 824.0], [75.2, 824.0], [75.3, 824.0], [75.4, 824.0], [75.5, 824.0], [75.6, 825.0], [75.7, 825.0], [75.8, 825.0], [75.9, 825.0], [76.0, 825.0], [76.1, 826.0], [76.2, 826.0], [76.3, 826.0], [76.4, 826.0], [76.5, 826.0], [76.6, 827.0], [76.7, 827.0], [76.8, 827.0], [76.9, 827.0], [77.0, 828.0], [77.1, 828.0], [77.2, 828.0], [77.3, 829.0], [77.4, 829.0], [77.5, 829.0], [77.6, 830.0], [77.7, 830.0], [77.8, 830.0], [77.9, 831.0], [78.0, 832.0], [78.1, 832.0], [78.2, 833.0], [78.3, 833.0], [78.4, 834.0], [78.5, 835.0], [78.6, 836.0], [78.7, 836.0], [78.8, 837.0], [78.9, 837.0], [79.0, 838.0], [79.1, 838.0], [79.2, 838.0], [79.3, 839.0], [79.4, 839.0], [79.5, 840.0], [79.6, 840.0], [79.7, 841.0], [79.8, 841.0], [79.9, 842.0], [80.0, 842.0], [80.1, 843.0], [80.2, 844.0], [80.3, 846.0], [80.4, 847.0], [80.5, 848.0], [80.6, 849.0], [80.7, 850.0], [80.8, 851.0], [80.9, 852.0], [81.0, 853.0], [81.1, 854.0], [81.2, 855.0], [81.3, 857.0], [81.4, 860.0], [81.5, 871.0], [81.6, 881.0], [81.7, 891.0], [81.8, 904.0], [81.9, 906.0], [82.0, 907.0], [82.1, 908.0], [82.2, 908.0], [82.3, 909.0], [82.4, 909.0], [82.5, 909.0], [82.6, 910.0], [82.7, 910.0], [82.8, 910.0], [82.9, 910.0], [83.0, 911.0], [83.1, 911.0], [83.2, 911.0], [83.3, 912.0], [83.4, 912.0], [83.5, 912.0], [83.6, 913.0], [83.7, 913.0], [83.8, 913.0], [83.9, 914.0], [84.0, 914.0], [84.1, 914.0], [84.2, 915.0], [84.3, 915.0], [84.4, 915.0], [84.5, 915.0], [84.6, 916.0], [84.7, 916.0], [84.8, 916.0], [84.9, 916.0], [85.0, 916.0], [85.1, 917.0], [85.2, 917.0], [85.3, 917.0], [85.4, 917.0], [85.5, 917.0], [85.6, 918.0], [85.7, 918.0], [85.8, 918.0], [85.9, 918.0], [86.0, 918.0], [86.1, 919.0], [86.2, 919.0], [86.3, 919.0], [86.4, 919.0], [86.5, 919.0], [86.6, 919.0], [86.7, 920.0], [86.8, 920.0], [86.9, 920.0], [87.0, 920.0], [87.1, 920.0], [87.2, 920.0], [87.3, 921.0], [87.4, 921.0], [87.5, 921.0], [87.6, 921.0], [87.7, 921.0], [87.8, 921.0], [87.9, 921.0], [88.0, 921.0], [88.1, 922.0], [88.2, 922.0], [88.3, 922.0], [88.4, 922.0], [88.5, 922.0], [88.6, 922.0], [88.7, 922.0], [88.8, 923.0], [88.9, 923.0], [89.0, 923.0], [89.1, 923.0], [89.2, 923.0], [89.3, 924.0], [89.4, 924.0], [89.5, 924.0], [89.6, 924.0], [89.7, 924.0], [89.8, 924.0], [89.9, 925.0], [90.0, 925.0], [90.1, 925.0], [90.2, 926.0], [90.3, 926.0], [90.4, 926.0], [90.5, 927.0], [90.6, 927.0], [90.7, 927.0], [90.8, 928.0], [90.9, 928.0], [91.0, 929.0], [91.1, 929.0], [91.2, 929.0], [91.3, 930.0], [91.4, 930.0], [91.5, 931.0], [91.6, 931.0], [91.7, 931.0], [91.8, 932.0], [91.9, 932.0], [92.0, 932.0], [92.1, 933.0], [92.2, 933.0], [92.3, 934.0], [92.4, 934.0], [92.5, 935.0], [92.6, 935.0], [92.7, 935.0], [92.8, 936.0], [92.9, 937.0], [93.0, 937.0], [93.1, 938.0], [93.2, 938.0], [93.3, 939.0], [93.4, 939.0], [93.5, 939.0], [93.6, 940.0], [93.7, 940.0], [93.8, 941.0], [93.9, 941.0], [94.0, 941.0], [94.1, 942.0], [94.2, 942.0], [94.3, 943.0], [94.4, 943.0], [94.5, 943.0], [94.6, 944.0], [94.7, 944.0], [94.8, 944.0], [94.9, 945.0], [95.0, 945.0], [95.1, 946.0], [95.2, 946.0], [95.3, 947.0], [95.4, 947.0], [95.5, 948.0], [95.6, 949.0], [95.7, 950.0], [95.8, 951.0], [95.9, 952.0], [96.0, 953.0], [96.1, 954.0], [96.2, 954.0], [96.3, 955.0], [96.4, 956.0], [96.5, 957.0], [96.6, 958.0], [96.7, 959.0], [96.8, 960.0], [96.9, 962.0], [97.0, 963.0], [97.1, 964.0], [97.2, 965.0], [97.3, 966.0], [97.4, 967.0], [97.5, 968.0], [97.6, 969.0], [97.7, 971.0], [97.8, 972.0], [97.9, 973.0], [98.0, 974.0], [98.1, 975.0], [98.2, 976.0], [98.3, 979.0], [98.4, 980.0], [98.5, 981.0], [98.6, 982.0], [98.7, 983.0], [98.8, 985.0], [98.9, 986.0], [99.0, 989.0], [99.1, 993.0], [99.2, 1000.0], [99.3, 1004.0], [99.4, 1013.0], [99.5, 1057.0], [99.6, 1088.0], [99.7, 1091.0], [99.8, 1359.0], [99.9, 1870.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 23584.0, "series": [{"data": [[0.0, 643.0], [2100.0, 15.0], [2300.0, 12.0], [2200.0, 8.0], [600.0, 628.0], [700.0, 23584.0], [200.0, 461.0], [800.0, 22158.0], [900.0, 13663.0], [1000.0, 435.0], [1100.0, 12.0], [300.0, 602.0], [1200.0, 1.0], [1300.0, 50.0], [1400.0, 7.0], [1500.0, 19.0], [100.0, 1009.0], [400.0, 404.0], [1600.0, 14.0], [1700.0, 10.0], [1800.0, 28.0], [1900.0, 13.0], [500.0, 14373.0], [2000.0, 12.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 51.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 74882.0, "series": [{"data": [[0.0, 3097.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 74882.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 131.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 51.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 979.0509569522402, "minX": 1.75239438E12, "maxY": 980.5236372576559, "series": [{"data": [[1.75239444E12, 980.5236372576559], [1.75239438E12, 979.0509569522402]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239444E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 66.59905660377356, "minX": 1.0, "maxY": 2357.0, "series": [{"data": [[2.0, 724.0], [3.0, 728.0], [4.0, 775.0], [5.0, 788.0], [6.0, 843.0], [7.0, 906.0], [8.0, 906.0], [9.0, 2315.0], [10.0, 960.0], [11.0, 961.0], [12.0, 973.0], [13.0, 978.0], [14.0, 983.0], [15.0, 985.0], [16.0, 988.0], [17.0, 1004.0], [18.0, 1003.0], [19.0, 1008.0], [20.0, 1018.0], [21.0, 1045.0], [22.0, 1046.0], [23.0, 1046.0], [24.0, 1059.0], [25.0, 1059.0], [26.0, 1059.0], [27.0, 1070.0], [28.0, 1076.0], [29.0, 1075.0], [30.0, 458.0], [31.0, 1076.0], [33.0, 1083.0], [32.0, 465.0], [35.0, 1084.0], [34.0, 537.0], [37.0, 1084.0], [36.0, 576.0], [39.0, 535.0], [38.0, 584.0], [41.0, 598.0], [40.0, 1084.0], [43.0, 1083.0], [42.0, 557.0], [45.0, 583.0], [44.0, 695.0], [47.0, 699.0], [46.0, 1084.0], [49.0, 1086.0], [48.0, 610.0], [51.0, 764.0], [50.0, 707.0], [52.0, 708.0], [55.0, 725.0], [54.0, 927.0], [57.0, 979.5], [59.0, 866.0], [58.0, 736.0], [61.0, 801.0], [60.0, 1092.0], [63.0, 1093.0], [62.0, 876.0], [67.0, 844.0], [66.0, 1093.0], [65.0, 901.0], [64.0, 802.0], [71.0, 916.0], [70.0, 844.0], [69.0, 1094.0], [68.0, 909.0], [75.0, 849.0], [74.0, 1004.0], [72.0, 845.0], [79.0, 917.0], [78.0, 893.0], [77.0, 1091.0], [76.0, 916.0], [83.0, 1091.0], [82.0, 917.0], [81.0, 897.0], [80.0, 1091.0], [87.0, 904.0], [86.0, 1090.0], [85.0, 919.0], [84.0, 905.0], [91.0, 919.0], [90.0, 904.0], [89.0, 1090.0], [88.0, 919.0], [95.0, 368.0], [94.0, 919.0], [93.0, 903.0], [92.0, 1090.0], [99.0, 367.0], [98.0, 918.0], [97.0, 915.0], [96.0, 1090.0], [103.0, 645.5], [101.0, 1002.5], [107.0, 374.0], [106.0, 921.0], [105.0, 1090.0], [104.0, 915.0], [111.0, 381.0], [110.0, 921.0], [109.0, 1090.0], [108.0, 918.0], [115.0, 391.0], [114.0, 1005.5], [112.0, 921.0], [119.0, 1089.0], [118.0, 523.0], [117.0, 925.0], [116.0, 922.0], [123.0, 1089.0], [122.0, 526.0], [121.0, 929.0], [120.0, 922.0], [127.0, 926.0], [126.0, 937.0], [125.0, 1089.0], [124.0, 563.0], [133.0, 66.59905660377356], [134.0, 193.83333333333331], [135.0, 933.0], [132.0, 586.0], [131.0, 926.0], [130.0, 935.0], [129.0, 1089.0], [128.0, 566.0], [137.0, 280.3333333333333], [139.0, 469.75], [141.0, 338.0], [142.0, 660.5], [143.0, 268.4], [140.0, 937.0], [136.0, 938.0], [144.0, 587.5], [145.0, 497.0], [146.0, 288.3333333333333], [147.0, 265.16666666666663], [149.0, 291.83333333333337], [150.0, 351.0], [151.0, 292.33333333333337], [148.0, 759.0], [152.0, 170.46153846153845], [154.0, 177.0], [155.0, 279.5], [157.0, 301.66666666666663], [158.0, 281.0], [159.0, 232.33333333333331], [156.0, 1090.0], [153.0, 1089.0], [161.0, 495.0], [162.0, 267.0], [163.0, 210.16666666666669], [164.0, 226.33333333333331], [167.0, 346.8333333333333], [166.0, 943.0], [165.0, 920.0], [160.0, 788.0], [168.0, 236.25], [170.0, 618.0], [171.0, 389.8333333333333], [172.0, 564.0], [173.0, 505.33333333333337], [174.0, 339.0], [175.0, 565.5], [169.0, 874.0], [176.0, 330.5], [177.0, 301.8333333333333], [179.0, 179.05882352941174], [180.0, 167.00497512437803], [181.0, 370.0], [182.0, 306.25], [183.0, 178.375], [178.0, 833.0], [184.0, 235.5], [185.0, 259.3333333333333], [186.0, 94.75], [187.0, 268.8888888888889], [188.0, 238.83333333333331], [189.0, 263.0], [190.0, 244.2], [191.0, 514.0], [192.0, 266.6], [193.0, 264.5], [194.0, 246.4], [195.0, 187.0], [196.0, 219.71428571428572], [197.0, 228.375], [198.0, 288.75], [199.0, 381.6666666666667], [201.0, 299.4], [203.0, 485.0], [205.0, 431.3333333333333], [206.0, 378.3333333333333], [207.0, 232.16666666666669], [204.0, 950.0], [202.0, 923.0], [200.0, 951.0], [208.0, 248.33333333333331], [210.0, 108.33333333333333], [211.0, 623.3333333333334], [212.0, 542.0], [215.0, 891.5], [213.0, 1092.0], [209.0, 1091.0], [223.0, 923.0], [222.0, 1092.0], [221.0, 866.0], [220.0, 2005.0], [219.0, 923.0], [218.0, 978.5], [216.0, 951.0], [231.0, 2091.0], [230.0, 923.0], [229.0, 866.0], [228.0, 2024.0], [227.0, 1092.0], [226.0, 922.0], [225.0, 867.0], [224.0, 2012.0], [239.0, 2106.0], [238.0, 923.0], [237.0, 874.0], [236.0, 1090.0], [235.0, 2096.0], [234.0, 922.0], [233.0, 871.0], [232.0, 1091.0], [247.0, 2125.0], [246.0, 922.0], [245.0, 981.5], [243.0, 2127.0], [242.0, 923.0], [241.0, 981.5], [255.0, 2169.0], [254.0, 922.0], [253.0, 1091.0], [252.0, 873.0], [251.0, 2158.0], [250.0, 922.0], [249.0, 982.0], [257.0, 311.0], [256.0, 507.0], [259.0, 1289.5], [258.0, 922.0], [260.0, 380.0], [261.0, 367.0], [262.0, 101.5], [263.0, 653.4285714285714], [267.0, 254.0], [266.0, 2242.0], [265.0, 1091.0], [264.0, 873.0], [269.0, 126.0], [270.0, 1668.0], [271.0, 873.0], [268.0, 145.35714285714283], [287.0, 872.0], [285.0, 1232.5], [284.0, 523.5], [279.0, 872.0], [272.0, 921.0], [274.0, 1668.0], [283.0, 282.2], [282.0, 1251.5], [280.0, 541.0], [281.0, 1090.0], [278.0, 1190.3333333333333], [277.0, 120.0], [276.0, 896.5], [286.0, 1091.0], [302.0, 522.5], [301.0, 587.2], [297.0, 1262.0], [303.0, 1088.0], [300.0, 921.0], [299.0, 1088.0], [298.0, 873.0], [296.0, 921.0], [295.0, 1090.0], [289.0, 2350.0], [288.0, 921.0], [291.0, 1090.0], [290.0, 873.0], [294.0, 874.0], [293.0, 2357.0], [292.0, 921.0], [317.0, 871.0], [318.0, 919.0], [316.0, 979.5], [307.0, 1088.0], [306.0, 920.0], [305.0, 873.0], [304.0, 920.0], [314.0, 871.0], [313.0, 919.0], [312.0, 871.0], [311.0, 1088.0], [310.0, 920.0], [309.0, 872.0], [334.0, 895.0], [332.0, 1088.0], [323.0, 871.0], [322.0, 919.0], [321.0, 872.0], [320.0, 979.5], [331.0, 870.0], [330.0, 919.0], [329.0, 871.0], [328.0, 1088.0], [327.0, 870.0], [326.0, 919.0], [325.0, 871.0], [324.0, 1087.0], [344.0, 180.3125], [348.0, 141.92000000000007], [347.0, 359.66666666666663], [346.0, 378.0], [345.0, 293.2], [351.0, 382.33333333333337], [350.0, 342.3333333333333], [349.0, 920.0], [343.0, 870.0], [338.0, 894.5], [336.0, 980.0], [342.0, 871.0], [341.0, 919.0], [340.0, 978.5], [365.0, 896.0], [367.0, 870.0], [364.0, 141.0], [355.0, 871.0], [354.0, 961.0], [363.0, 261.0], [366.0, 1087.0], [362.0, 978.5], [360.0, 921.0], [359.0, 871.0], [358.0, 1087.0], [357.0, 871.0], [356.0, 921.0], [383.0, 501.0], [381.0, 399.6666666666667], [379.0, 345.3333333333333], [371.0, 242.83333333333334], [375.0, 978.5], [368.0, 872.0], [370.0, 1087.0], [369.0, 920.0], [373.0, 921.0], [372.0, 872.0], [382.0, 1087.0], [380.0, 873.0], [378.0, 1087.0], [377.0, 921.0], [376.0, 873.0], [386.0, 1087.0], [399.0, 555.25], [392.0, 139.0], [391.0, 364.6666666666667], [397.0, 1004.5], [385.0, 921.0], [384.0, 869.0], [395.0, 873.0], [394.0, 961.0], [390.0, 872.0], [389.0, 1087.0], [388.0, 897.5], [412.0, 448.0], [415.0, 619.0], [414.0, 94.0], [413.0, 492.5], [408.0, 467.0], [411.0, 1087.0], [410.0, 922.0], [409.0, 873.0], [405.0, 497.5], [404.0, 849.0], [406.0, 922.0], [403.0, 602.5], [402.0, 649.3333333333334], [401.0, 90.0], [400.0, 1088.0], [407.0, 1087.0], [430.0, 849.0], [431.0, 402.0], [428.0, 587.0], [421.0, 354.5], [423.0, 850.0], [419.0, 886.5], [417.0, 875.0], [416.0, 1087.0], [422.0, 922.0], [420.0, 621.5], [429.0, 878.0], [427.0, 923.0], [426.0, 850.0], [425.0, 875.0], [424.0, 1088.0], [445.0, 308.2], [444.0, 677.6666666666666], [446.0, 260.4], [447.0, 262.33333333333337], [443.0, 302.0], [442.0, 640.0], [440.0, 429.3333333333333], [434.0, 509.5], [439.0, 847.0], [433.0, 878.0], [432.0, 1089.0], [438.0, 923.0], [437.0, 878.0], [436.0, 968.0], [449.0, 147.6], [448.0, 196.5], [451.0, 293.6], [450.0, 658.0], [460.0, 646.0], [461.0, 271.4], [462.0, 328.5], [463.0, 282.8], [452.0, 491.5], [453.0, 149.0], [454.0, 104.0], [455.0, 510.5], [456.0, 469.4], [457.0, 359.0], [459.0, 417.8], [465.0, 569.0], [464.0, 121.33333333333333], [466.0, 311.75], [467.0, 134.5], [468.0, 259.0], [469.0, 500.5], [470.0, 336.4], [471.0, 155.0], [472.0, 250.66666666666669], [473.0, 922.0], [478.0, 473.6666666666667], [479.0, 407.25], [476.0, 325.0], [477.0, 380.33333333333337], [474.0, 268.8333333333333], [475.0, 566.5], [481.0, 150.2], [480.0, 377.0], [482.0, 675.3333333333334], [483.0, 232.42857142857144], [484.0, 375.25], [485.0, 410.66666666666663], [486.0, 155.25], [487.0, 480.5], [488.0, 231.0], [489.0, 881.0], [491.0, 498.75], [490.0, 604.4], [495.0, 492.75], [494.0, 117.0], [493.0, 461.0], [492.0, 847.0], [510.0, 414.25], [506.0, 400.3333333333333], [502.0, 551.5], [501.0, 986.0], [500.0, 847.0], [503.0, 431.5], [499.0, 371.16666666666663], [497.0, 1090.0], [496.0, 513.0], [511.0, 594.0], [508.0, 883.0], [507.0, 431.0], [505.0, 1090.0], [504.0, 882.0], [540.0, 517.5], [542.0, 414.2], [543.0, 633.5], [541.0, 192.0], [537.0, 140.0], [539.0, 1087.0], [538.0, 864.5], [536.0, 298.0], [531.0, 694.0], [529.0, 430.5], [532.0, 469.0], [535.0, 1087.0], [534.0, 865.0], [528.0, 321.6], [524.0, 111.0], [523.0, 883.0], [525.0, 595.0], [527.0, 883.0], [526.0, 1089.0], [516.0, 171.0], [515.0, 751.2], [512.0, 497.5], [518.0, 348.6666666666667], [519.0, 884.0], [517.0, 494.8], [522.0, 325.4], [521.0, 645.6666666666666], [549.0, 364.3333333333333], [572.0, 611.4], [575.0, 620.5], [574.0, 468.5], [573.0, 885.0], [569.0, 525.25], [570.0, 885.0], [551.0, 475.3333333333333], [550.0, 479.5], [559.0, 884.0], [548.0, 922.0], [547.0, 1090.0], [546.0, 430.5], [545.0, 883.0], [544.0, 922.0], [558.0, 429.5], [565.0, 525.75], [567.0, 556.0], [566.0, 884.0], [564.0, 408.3333333333333], [562.0, 506.0], [561.0, 678.3333333333334], [563.0, 885.0], [560.0, 169.0], [557.0, 578.5], [555.0, 401.3333333333333], [554.0, 341.66666666666663], [553.0, 884.0], [552.0, 921.0], [600.0, 339.0], [594.0, 667.0], [604.0, 512.0], [606.0, 904.0], [603.0, 473.0], [602.0, 663.3333333333334], [601.0, 846.0], [591.0, 177.0], [577.0, 884.0], [576.0, 844.0], [579.0, 507.5], [578.0, 468.5], [583.0, 389.0], [582.0, 468.5], [581.0, 747.0], [590.0, 590.0], [589.0, 672.5], [588.0, 344.0], [587.0, 288.2], [586.0, 551.5], [585.0, 582.6666666666667], [584.0, 529.0], [599.0, 380.66666666666663], [598.0, 954.6666666666666], [597.0, 183.0], [595.0, 487.0], [596.0, 450.5], [593.0, 179.0], [592.0, 607.3333333333334], [607.0, 655.3333333333334], [637.0, 150.0], [638.0, 445.6666666666667], [633.0, 681.0], [634.0, 450.0], [636.0, 467.5], [635.0, 1102.0], [632.0, 503.85714285714283], [629.0, 601.0], [626.0, 885.0], [630.0, 920.0], [625.0, 177.0], [624.0, 432.75], [639.0, 1011.5], [622.0, 536.5], [623.0, 922.0], [609.0, 592.25], [608.0, 555.5], [614.0, 538.0], [613.0, 559.0], [612.0, 922.0], [611.0, 480.8], [621.0, 538.0], [619.0, 550.0], [620.0, 559.5], [617.0, 552.6], [616.0, 608.3333333333334], [618.0, 886.0], [646.0, 411.6666666666667], [652.0, 268.3333333333333], [649.0, 317.5], [648.0, 459.33333333333337], [650.0, 537.25], [651.0, 721.3333333333334], [654.0, 541.0], [653.0, 920.0], [640.0, 282.1428571428571], [641.0, 850.0], [655.0, 583.6666666666666], [643.0, 363.3333333333333], [642.0, 378.75], [645.0, 413.0], [644.0, 436.0], [647.0, 517.0], [664.0, 451.5], [657.0, 186.25], [662.0, 199.33333333333334], [661.0, 584.0], [659.0, 919.0], [658.0, 583.0], [663.0, 640.3333333333334], [665.0, 188.0], [667.0, 364.0], [666.0, 904.0], [668.0, 546.5], [669.0, 501.5], [670.0, 374.6666666666667], [671.0, 542.0], [656.0, 920.0], [679.0, 175.33333333333334], [674.0, 470.0], [672.0, 536.0], [673.0, 471.5], [686.0, 441.25], [687.0, 336.33333333333337], [676.0, 474.0], [677.0, 362.5], [678.0, 218.0], [689.0, 326.83333333333337], [690.0, 1071.0], [703.0, 460.0], [688.0, 889.0], [701.0, 428.0], [702.0, 463.66666666666663], [698.0, 375.2], [699.0, 852.0], [700.0, 342.8333333333333], [696.0, 476.75], [697.0, 528.5], [691.0, 462.83333333333337], [692.0, 496.0], [693.0, 363.16666666666663], [694.0, 379.4], [695.0, 138.0], [681.0, 571.0], [680.0, 572.8], [682.0, 552.0], [684.0, 327.75], [683.0, 961.0], [685.0, 544.75], [710.0, 597.5], [705.0, 532.0], [704.0, 373.0], [719.0, 268.3333333333333], [718.0, 851.0], [716.0, 555.75], [715.0, 850.0], [714.0, 918.0], [717.0, 579.5], [707.0, 406.25], [706.0, 889.0], [708.0, 390.4], [709.0, 484.33333333333337], [711.0, 546.0], [728.0, 745.3333333333334], [729.0, 549.0], [731.0, 467.0], [730.0, 1604.0], [733.0, 817.0], [732.0, 961.0], [734.0, 619.5], [735.0, 407.4], [720.0, 734.3333333333334], [721.0, 191.66666666666669], [724.0, 809.0], [722.0, 884.5], [725.0, 723.3333333333334], [726.0, 461.6], [712.0, 659.0], [713.0, 407.0], [743.0, 456.0], [737.0, 540.0], [736.0, 472.0], [751.0, 314.5], [738.0, 587.0], [739.0, 473.33333333333337], [742.0, 528.0], [741.0, 1689.0], [740.0, 1072.0], [752.0, 343.8666666666667], [766.0, 625.25], [763.0, 364.0], [764.0, 715.0], [761.0, 376.33333333333337], [760.0, 891.5], [762.0, 863.0], [753.0, 512.0], [754.0, 301.8181818181818], [755.0, 1074.0], [758.0, 1073.0], [757.0, 595.6666666666666], [747.0, 723.0], [745.0, 884.0], [744.0, 913.5], [748.0, 327.0], [749.0, 245.0], [750.0, 832.0], [794.0, 861.0], [799.0, 598.25], [798.0, 1095.3333333333333], [796.0, 828.0], [795.0, 1092.0], [793.0, 217.0], [775.0, 595.6666666666666], [773.0, 863.0], [772.0, 409.0], [770.0, 264.0], [769.0, 863.0], [771.0, 1238.5], [768.0, 500.5], [782.0, 813.5], [791.0, 326.0], [790.0, 816.0], [789.0, 863.0], [788.0, 850.0], [787.0, 1555.0], [786.0, 665.6666666666667], [784.0, 894.6666666666667], [785.0, 851.0], [781.0, 644.0], [779.0, 893.0], [778.0, 741.2], [776.0, 864.0], [806.0, 594.5], [828.0, 609.5], [830.0, 453.0], [831.0, 836.0], [817.0, 450.0], [816.0, 1616.0], [825.0, 384.66666666666663], [824.0, 837.0], [807.0, 1568.0], [827.0, 837.0], [826.0, 1718.0], [804.0, 626.0], [805.0, 1431.6666666666667], [803.0, 687.6666666666666], [802.0, 1580.0], [801.0, 857.0], [822.0, 469.0], [821.0, 75.0], [820.0, 837.0], [819.0, 1628.0], [823.0, 1678.0], [818.0, 554.5], [815.0, 609.0], [813.0, 899.6666666666666], [812.0, 443.33333333333337], [811.0, 215.5], [810.0, 1567.0], [809.0, 852.0], [808.0, 1008.0], [837.0, 397.8], [843.0, 553.0], [836.0, 549.5], [835.0, 539.0], [834.0, 459.0], [833.0, 1014.0], [832.0, 852.0], [846.0, 291.0], [847.0, 407.125], [838.0, 633.5], [839.0, 225.66666666666669], [848.0, 377.42857142857144], [849.0, 853.0], [863.0, 834.0], [861.0, 224.6], [862.0, 434.75], [859.0, 621.5], [860.0, 393.25], [856.0, 401.1666666666667], [857.0, 263.81818181818187], [858.0, 359.4], [850.0, 374.3333333333333], [851.0, 376.33333333333337], [853.0, 480.5], [852.0, 1014.0], [854.0, 371.33333333333337], [855.0, 322.14285714285717], [840.0, 350.8333333333333], [841.0, 546.5], [842.0, 359.18181818181813], [844.0, 273.5], [845.0, 409.0], [866.0, 402.0], [864.0, 376.1666666666667], [865.0, 854.0], [867.0, 280.0], [868.0, 471.5], [869.0, 378.1666666666667], [870.0, 377.5], [888.0, 933.5], [871.0, 1014.0], [890.0, 399.0], [891.0, 467.2857142857143], [892.0, 393.5], [893.0, 337.0], [894.0, 511.1666666666667], [895.0, 454.0], [872.0, 234.0], [873.0, 471.0], [875.0, 853.0], [874.0, 859.0], [876.0, 235.5], [877.0, 549.4], [878.0, 483.0], [879.0, 853.0], [880.0, 435.0], [882.0, 301.0], [881.0, 660.0], [883.0, 852.0], [884.0, 512.25], [886.0, 470.33333333333337], [885.0, 933.0], [887.0, 106.0], [902.0, 420.66666666666663], [908.0, 462.66666666666663], [899.0, 285.5], [897.0, 303.6666666666667], [898.0, 848.0], [911.0, 834.0], [896.0, 853.0], [909.0, 255.5], [910.0, 361.8571428571429], [900.0, 456.875], [901.0, 833.0], [903.0, 314.6666666666667], [920.0, 855.0], [921.0, 442.6666666666667], [922.0, 451.25], [924.0, 526.25], [926.0, 543.6], [927.0, 417.33333333333337], [912.0, 490.2857142857143], [913.0, 429.33333333333337], [914.0, 844.5], [915.0, 423.8], [917.0, 727.0], [916.0, 472.0], [919.0, 366.33333333333337], [918.0, 858.0], [904.0, 565.5], [905.0, 453.0], [907.0, 467.1428571428571], [906.0, 856.5], [935.0, 463.0], [930.0, 342.3333333333333], [928.0, 581.5], [929.0, 110.0], [941.0, 862.0], [942.0, 1053.0], [943.0, 855.0], [931.0, 702.0], [932.0, 570.0], [934.0, 653.0], [933.0, 485.0], [944.0, 319.4], [959.0, 532.8], [957.0, 595.0], [958.0, 900.6], [954.0, 565.5], [955.0, 1025.6], [956.0, 805.4], [952.0, 912.5], [953.0, 754.1666666666667], [945.0, 513.0], [946.0, 1167.5], [948.0, 427.85714285714283], [949.0, 243.0], [950.0, 612.2857142857142], [951.0, 443.5], [936.0, 459.66666666666663], [937.0, 933.5], [938.0, 571.0], [939.0, 276.0], [940.0, 344.25], [966.0, 342.3333333333333], [973.0, 376.0], [961.0, 555.8333333333334], [960.0, 835.0], [962.0, 590.0], [963.0, 725.6666666666666], [964.0, 471.8], [965.0, 682.3846153846155], [977.0, 763.5], [991.0, 631.0], [989.0, 636.75], [988.0, 723.8], [990.0, 655.5], [985.0, 546.6666666666666], [984.0, 913.5], [967.0, 599.6666666666666], [986.0, 845.5], [987.0, 555.8571428571429], [978.0, 388.0], [980.0, 633.125], [979.0, 672.2857142857143], [981.0, 665.3333333333334], [983.0, 542.75], [982.0, 836.0], [969.0, 602.6666666666667], [968.0, 909.5], [970.0, 543.4], [972.0, 470.9428571428571], [971.0, 468.0], [974.0, 535.875], [975.0, 590.0], [995.0, 674.65], [993.0, 690.4166666666666], [996.0, 648.5333333333333], [997.0, 664.5], [998.0, 545.8666666666667], [999.0, 433.9285714285714], [1000.0, 772.7285572964042], [994.0, 722.5], [992.0, 677.375], [1.0, 703.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[979.5874285129458, 759.0297079105919]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 68332.8, "minX": 1.75239438E12, "maxY": 380694.01666666666, "series": [{"data": [[1.75239444E12, 217224.6], [1.75239438E12, 380694.01666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75239444E12, 68332.8], [1.75239438E12, 119131.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239444E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 746.6839743202745, "minX": 1.75239438E12, "maxY": 780.575337173365, "series": [{"data": [[1.75239444E12, 780.575337173365], [1.75239438E12, 746.6839743202745]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239444E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 746.6605486123624, "minX": 1.75239438E12, "maxY": 780.5707712840683, "series": [{"data": [[1.75239444E12, 780.5707712840683], [1.75239438E12, 746.6605486123624]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239444E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.00937763416690083, "minX": 1.75239438E12, "maxY": 0.3383646279860729, "series": [{"data": [[1.75239444E12, 0.00937763416690083], [1.75239438E12, 0.3383646279860729]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239444E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.75239438E12, "maxY": 2383.0, "series": [{"data": [[1.75239444E12, 2383.0], [1.75239438E12, 1919.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75239444E12, 949.0], [1.75239438E12, 919.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75239444E12, 1089.9900000000016], [1.75239438E12, 944.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75239444E12, 978.0], [1.75239438E12, 924.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75239444E12, 7.0], [1.75239438E12, 6.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75239444E12, 807.0], [1.75239438E12, 796.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239444E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 332.0, "maxY": 922.0, "series": [{"data": [[585.0, 80.0], [1274.0, 808.0], [1273.0, 183.0], [1278.0, 796.0], [1277.0, 800.0], [1263.0, 801.0], [1279.0, 804.0], [1251.0, 817.0], [1264.0, 796.0], [1247.0, 853.0], [1276.0, 809.0], [1265.0, 810.0], [1284.0, 794.0], [1302.0, 773.0], [1282.0, 800.0], [1283.0, 791.0], [1300.0, 798.0], [1299.0, 796.0], [1288.0, 800.0], [1303.0, 795.0], [1304.0, 781.0], [1280.0, 800.0], [1307.0, 794.0], [1281.0, 795.0], [1289.0, 796.0], [1294.0, 796.0], [1293.0, 792.0], [1291.0, 804.0], [1312.0, 795.0], [1287.0, 802.0], [1285.0, 802.0], [1286.0, 803.0], [1298.0, 782.0], [1297.0, 805.0], [1345.0, 569.0], [332.0, 922.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1273.0, 0.0], [1345.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1345.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 332.0, "maxY": 922.0, "series": [{"data": [[585.0, 80.0], [1274.0, 808.0], [1273.0, 183.0], [1278.0, 796.0], [1277.0, 800.0], [1263.0, 801.0], [1279.0, 804.0], [1251.0, 817.0], [1264.0, 796.0], [1247.0, 853.0], [1276.0, 809.0], [1265.0, 810.0], [1284.0, 794.0], [1302.0, 773.0], [1282.0, 800.0], [1283.0, 791.0], [1300.0, 798.0], [1299.0, 796.0], [1288.0, 800.0], [1303.0, 795.0], [1304.0, 781.0], [1280.0, 800.0], [1307.0, 794.0], [1281.0, 795.0], [1289.0, 796.0], [1294.0, 796.0], [1293.0, 792.0], [1291.0, 804.0], [1312.0, 795.0], [1287.0, 802.0], [1285.0, 802.0], [1286.0, 803.0], [1298.0, 782.0], [1297.0, 805.0], [1345.0, 569.0], [332.0, 922.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1273.0, 0.0], [1345.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1345.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 457.8666666666667, "minX": 1.75239438E12, "maxY": 844.8166666666667, "series": [{"data": [[1.75239444E12, 457.8666666666667], [1.75239438E12, 844.8166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239444E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.85, "minX": 1.75239438E12, "maxY": 827.3, "series": [{"data": [[1.75239444E12, 474.53333333333336], [1.75239438E12, 827.3]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75239438E12, 0.85]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75239444E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.85, "minX": 1.75239438E12, "maxY": 827.3, "series": [{"data": [[1.75239444E12, 474.53333333333336], [1.75239438E12, 827.3]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75239438E12, 0.85]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239444E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.85, "minX": 1.75239438E12, "maxY": 827.3, "series": [{"data": [[1.75239444E12, 474.53333333333336], [1.75239438E12, 827.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75239438E12, 0.85]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75239444E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

