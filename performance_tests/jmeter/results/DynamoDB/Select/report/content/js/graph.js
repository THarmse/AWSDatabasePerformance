/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 277.0, "minX": 0.0, "maxY": 55651.0, "series": [{"data": [[0.0, 277.0], [0.1, 282.0], [0.2, 367.0], [0.3, 386.0], [0.4, 432.0], [0.5, 638.0], [0.6, 772.0], [0.7, 919.0], [0.8, 950.0], [0.9, 1073.0], [1.0, 1217.0], [1.1, 1365.0], [1.2, 1418.0], [1.3, 1504.0], [1.4, 1611.0], [1.5, 1657.0], [1.6, 1864.0], [1.7, 1920.0], [1.8, 2007.0], [1.9, 2059.0], [2.0, 2159.0], [2.1, 2292.0], [2.2, 2445.0], [2.3, 2526.0], [2.4, 2589.0], [2.5, 2700.0], [2.6, 2717.0], [2.7, 2842.0], [2.8, 3023.0], [2.9, 3084.0], [3.0, 3189.0], [3.1, 3291.0], [3.2, 3356.0], [3.3, 3539.0], [3.4, 3560.0], [3.5, 3676.0], [3.6, 3790.0], [3.7, 3807.0], [3.8, 3925.0], [3.9, 4059.0], [4.0, 4153.0], [4.1, 4201.0], [4.2, 4289.0], [4.3, 4330.0], [4.4, 4533.0], [4.5, 4557.0], [4.6, 4689.0], [4.7, 4793.0], [4.8, 4815.0], [4.9, 4945.0], [5.0, 5038.0], [5.1, 5171.0], [5.2, 5223.0], [5.3, 5351.0], [5.4, 5388.0], [5.5, 5551.0], [5.6, 5682.0], [5.7, 5751.0], [5.8, 5823.0], [5.9, 5884.0], [6.0, 6015.0], [6.1, 6082.0], [6.2, 6216.0], [6.3, 6294.0], [6.4, 6362.0], [6.5, 6495.0], [6.6, 6588.0], [6.7, 6629.0], [6.8, 6761.0], [6.9, 6843.0], [7.0, 6901.0], [7.1, 6977.0], [7.2, 7100.0], [7.3, 7216.0], [7.4, 7299.0], [7.5, 7378.0], [7.6, 7485.0], [7.7, 7559.0], [7.8, 7664.0], [7.9, 7801.0], [8.0, 7855.0], [8.1, 7867.0], [8.2, 7941.0], [8.3, 7988.0], [8.4, 8090.0], [8.5, 8165.0], [8.6, 8193.0], [8.7, 8249.0], [8.8, 8264.0], [8.9, 8267.0], [9.0, 8270.0], [9.1, 8296.0], [9.2, 8298.0], [9.3, 8314.0], [9.4, 8320.0], [9.5, 8346.0], [9.6, 8355.0], [9.7, 8360.0], [9.8, 8383.0], [9.9, 8388.0], [10.0, 8398.0], [10.1, 8418.0], [10.2, 8431.0], [10.3, 8432.0], [10.4, 8457.0], [10.5, 8486.0], [10.6, 8500.0], [10.7, 8517.0], [10.8, 8530.0], [10.9, 8544.0], [11.0, 8550.0], [11.1, 8554.0], [11.2, 8572.0], [11.3, 8576.0], [11.4, 8595.0], [11.5, 8609.0], [11.6, 8612.0], [11.7, 8618.0], [11.8, 8630.0], [11.9, 8641.0], [12.0, 8644.0], [12.1, 8653.0], [12.2, 8656.0], [12.3, 8681.0], [12.4, 8719.0], [12.5, 8734.0], [12.6, 8749.0], [12.7, 8865.0], [12.8, 8918.0], [12.9, 8988.0], [13.0, 9136.0], [13.1, 9278.0], [13.2, 9396.0], [13.3, 9499.0], [13.4, 9579.0], [13.5, 9648.0], [13.6, 9778.0], [13.7, 9888.0], [13.8, 9969.0], [13.9, 10037.0], [14.0, 10061.0], [14.1, 10062.0], [14.2, 10070.0], [14.3, 10075.0], [14.4, 10079.0], [14.5, 10080.0], [14.6, 10082.0], [14.7, 10090.0], [14.8, 10091.0], [14.9, 10094.0], [15.0, 10103.0], [15.1, 10106.0], [15.2, 10114.0], [15.3, 10117.0], [15.4, 10133.0], [15.5, 10135.0], [15.6, 10137.0], [15.7, 10144.0], [15.8, 10171.0], [15.9, 10172.0], [16.0, 10197.0], [16.1, 10220.0], [16.2, 10227.0], [16.3, 10256.0], [16.4, 10271.0], [16.5, 10288.0], [16.6, 10301.0], [16.7, 10312.0], [16.8, 10314.0], [16.9, 10347.0], [17.0, 10350.0], [17.1, 10377.0], [17.2, 10383.0], [17.3, 10392.0], [17.4, 10399.0], [17.5, 10404.0], [17.6, 10437.0], [17.7, 10456.0], [17.8, 10460.0], [17.9, 10470.0], [18.0, 10478.0], [18.1, 10478.0], [18.2, 10479.0], [18.3, 10488.0], [18.4, 10498.0], [18.5, 10529.0], [18.6, 10603.0], [18.7, 10708.0], [18.8, 10808.0], [18.9, 10829.0], [19.0, 10869.0], [19.1, 10892.0], [19.2, 10918.0], [19.3, 10928.0], [19.4, 10952.0], [19.5, 10955.0], [19.6, 10961.0], [19.7, 10962.0], [19.8, 10968.0], [19.9, 10978.0], [20.0, 10986.0], [20.1, 11004.0], [20.2, 11017.0], [20.3, 11027.0], [20.4, 11041.0], [20.5, 11046.0], [20.6, 11063.0], [20.7, 11069.0], [20.8, 11081.0], [20.9, 11126.0], [21.0, 11141.0], [21.1, 11153.0], [21.2, 11209.0], [21.3, 11471.0], [21.4, 11551.0], [21.5, 11720.0], [21.6, 11840.0], [21.7, 11941.0], [21.8, 12164.0], [21.9, 12467.0], [22.0, 12526.0], [22.1, 12750.0], [22.2, 12967.0], [22.3, 13142.0], [22.4, 13297.0], [22.5, 13538.0], [22.6, 13772.0], [22.7, 14027.0], [22.8, 14156.0], [22.9, 14382.0], [23.0, 14680.0], [23.1, 14889.0], [23.2, 15018.0], [23.3, 15290.0], [23.4, 15544.0], [23.5, 15747.0], [23.6, 15949.0], [23.7, 16228.0], [23.8, 16483.0], [23.9, 16618.0], [24.0, 16732.0], [24.1, 17106.0], [24.2, 17348.0], [24.3, 17599.0], [24.4, 17706.0], [24.5, 17983.0], [24.6, 18286.0], [24.7, 18499.0], [24.8, 18633.0], [24.9, 18783.0], [25.0, 19059.0], [25.1, 19288.0], [25.2, 19446.0], [25.3, 19868.0], [25.4, 20059.0], [25.5, 20396.0], [25.6, 20591.0], [25.7, 20946.0], [25.8, 21322.0], [25.9, 21714.0], [26.0, 22013.0], [26.1, 22341.0], [26.2, 22424.0], [26.3, 22652.0], [26.4, 22778.0], [26.5, 22987.0], [26.6, 23200.0], [26.7, 23332.0], [26.8, 23526.0], [26.9, 23659.0], [27.0, 23788.0], [27.1, 24015.0], [27.2, 24135.0], [27.3, 24250.0], [27.4, 24427.0], [27.5, 24561.0], [27.6, 24735.0], [27.7, 24959.0], [27.8, 25065.0], [27.9, 25144.0], [28.0, 25211.0], [28.1, 25426.0], [28.2, 25548.0], [28.3, 25677.0], [28.4, 25811.0], [28.5, 26059.0], [28.6, 26183.0], [28.7, 26201.0], [28.8, 26442.0], [28.9, 26555.0], [29.0, 26678.0], [29.1, 26700.0], [29.2, 26916.0], [29.3, 27054.0], [29.4, 27165.0], [29.5, 27180.0], [29.6, 27232.0], [29.7, 27250.0], [29.8, 27264.0], [29.9, 27284.0], [30.0, 27291.0], [30.1, 27300.0], [30.2, 27333.0], [30.3, 27348.0], [30.4, 27381.0], [30.5, 27395.0], [30.6, 27421.0], [30.7, 27430.0], [30.8, 27436.0], [30.9, 27439.0], [31.0, 27456.0], [31.1, 27465.0], [31.2, 27470.0], [31.3, 27479.0], [31.4, 27484.0], [31.5, 27495.0], [31.6, 27496.0], [31.7, 27498.0], [31.8, 27500.0], [31.9, 27506.0], [32.0, 27508.0], [32.1, 27508.0], [32.2, 27525.0], [32.3, 27535.0], [32.4, 27537.0], [32.5, 27542.0], [32.6, 27546.0], [32.7, 27548.0], [32.8, 27556.0], [32.9, 27562.0], [33.0, 27564.0], [33.1, 27570.0], [33.2, 27574.0], [33.3, 27577.0], [33.4, 27589.0], [33.5, 27593.0], [33.6, 27595.0], [33.7, 27599.0], [33.8, 27711.0], [33.9, 27864.0], [34.0, 28108.0], [34.1, 28209.0], [34.2, 28226.0], [34.3, 28474.0], [34.4, 28606.0], [34.5, 28734.0], [34.6, 28849.0], [34.7, 29110.0], [34.8, 29236.0], [34.9, 29363.0], [35.0, 29535.0], [35.1, 29739.0], [35.2, 29857.0], [35.3, 30005.0], [35.4, 30176.0], [35.5, 30275.0], [35.6, 30373.0], [35.7, 30472.0], [35.8, 30500.0], [35.9, 30512.0], [36.0, 30517.0], [36.1, 30519.0], [36.2, 30531.0], [36.3, 30535.0], [36.4, 30543.0], [36.5, 30544.0], [36.6, 30547.0], [36.7, 30553.0], [36.8, 30556.0], [36.9, 30560.0], [37.0, 30565.0], [37.1, 30566.0], [37.2, 30571.0], [37.3, 30576.0], [37.4, 30579.0], [37.5, 30583.0], [37.6, 30586.0], [37.7, 30588.0], [37.8, 30591.0], [37.9, 30593.0], [38.0, 30594.0], [38.1, 30601.0], [38.2, 30601.0], [38.3, 30603.0], [38.4, 30605.0], [38.5, 30607.0], [38.6, 30609.0], [38.7, 30610.0], [38.8, 30615.0], [38.9, 30619.0], [39.0, 30621.0], [39.1, 30624.0], [39.2, 30636.0], [39.3, 30639.0], [39.4, 30641.0], [39.5, 30643.0], [39.6, 30652.0], [39.7, 30664.0], [39.8, 30668.0], [39.9, 30670.0], [40.0, 30675.0], [40.1, 30676.0], [40.2, 30679.0], [40.3, 30682.0], [40.4, 30685.0], [40.5, 30689.0], [40.6, 30690.0], [40.7, 30697.0], [40.8, 30701.0], [40.9, 30711.0], [41.0, 30712.0], [41.1, 30717.0], [41.2, 30719.0], [41.3, 30724.0], [41.4, 30727.0], [41.5, 30731.0], [41.6, 30733.0], [41.7, 30733.0], [41.8, 30738.0], [41.9, 30741.0], [42.0, 30747.0], [42.1, 30749.0], [42.2, 30753.0], [42.3, 30762.0], [42.4, 30765.0], [42.5, 30774.0], [42.6, 30780.0], [42.7, 30785.0], [42.8, 30797.0], [42.9, 30800.0], [43.0, 30803.0], [43.1, 30809.0], [43.2, 30827.0], [43.3, 30830.0], [43.4, 30837.0], [43.5, 30850.0], [43.6, 30856.0], [43.7, 30859.0], [43.8, 30859.0], [43.9, 30862.0], [44.0, 30872.0], [44.1, 30884.0], [44.2, 30889.0], [44.3, 30902.0], [44.4, 30915.0], [44.5, 30918.0], [44.6, 30920.0], [44.7, 30929.0], [44.8, 30939.0], [44.9, 30947.0], [45.0, 30952.0], [45.1, 30956.0], [45.2, 30962.0], [45.3, 30977.0], [45.4, 30980.0], [45.5, 30988.0], [45.6, 30992.0], [45.7, 31001.0], [45.8, 31007.0], [45.9, 31011.0], [46.0, 31015.0], [46.1, 31022.0], [46.2, 31023.0], [46.3, 31026.0], [46.4, 31033.0], [46.5, 31040.0], [46.6, 31048.0], [46.7, 31062.0], [46.8, 31068.0], [46.9, 31075.0], [47.0, 31084.0], [47.1, 31091.0], [47.2, 31095.0], [47.3, 31108.0], [47.4, 31119.0], [47.5, 31121.0], [47.6, 31124.0], [47.7, 31146.0], [47.8, 31153.0], [47.9, 31169.0], [48.0, 31191.0], [48.1, 31202.0], [48.2, 31221.0], [48.3, 31241.0], [48.4, 31273.0], [48.5, 31287.0], [48.6, 31294.0], [48.7, 31306.0], [48.8, 31335.0], [48.9, 31340.0], [49.0, 31348.0], [49.1, 31357.0], [49.2, 31364.0], [49.3, 31373.0], [49.4, 31596.0], [49.5, 31752.0], [49.6, 31858.0], [49.7, 31985.0], [49.8, 32197.0], [49.9, 32328.0], [50.0, 32462.0], [50.1, 32646.0], [50.2, 32775.0], [50.3, 32947.0], [50.4, 33029.0], [50.5, 33108.0], [50.6, 33135.0], [50.7, 33152.0], [50.8, 33156.0], [50.9, 33168.0], [51.0, 33170.0], [51.1, 33185.0], [51.2, 33188.0], [51.3, 33194.0], [51.4, 33197.0], [51.5, 33203.0], [51.6, 33205.0], [51.7, 33207.0], [51.8, 33210.0], [51.9, 33215.0], [52.0, 33218.0], [52.1, 33223.0], [52.2, 33225.0], [52.3, 33228.0], [52.4, 33231.0], [52.5, 33231.0], [52.6, 33232.0], [52.7, 33232.0], [52.8, 33234.0], [52.9, 33235.0], [53.0, 33236.0], [53.1, 33238.0], [53.2, 33238.0], [53.3, 33239.0], [53.4, 33239.0], [53.5, 33243.0], [53.6, 33244.0], [53.7, 33244.0], [53.8, 33247.0], [53.9, 33248.0], [54.0, 33249.0], [54.1, 33250.0], [54.2, 33252.0], [54.3, 33255.0], [54.4, 33257.0], [54.5, 33257.0], [54.6, 33260.0], [54.7, 33264.0], [54.8, 33266.0], [54.9, 33268.0], [55.0, 33271.0], [55.1, 33272.0], [55.2, 33272.0], [55.3, 33273.0], [55.4, 33276.0], [55.5, 33281.0], [55.6, 33285.0], [55.7, 33290.0], [55.8, 33292.0], [55.9, 33294.0], [56.0, 33298.0], [56.1, 33300.0], [56.2, 33304.0], [56.3, 33306.0], [56.4, 33308.0], [56.5, 33310.0], [56.6, 33313.0], [56.7, 33315.0], [56.8, 33320.0], [56.9, 33321.0], [57.0, 33322.0], [57.1, 33324.0], [57.2, 33327.0], [57.3, 33330.0], [57.4, 33332.0], [57.5, 33333.0], [57.6, 33338.0], [57.7, 33339.0], [57.8, 33339.0], [57.9, 33342.0], [58.0, 33344.0], [58.1, 33345.0], [58.2, 33348.0], [58.3, 33349.0], [58.4, 33352.0], [58.5, 33356.0], [58.6, 33362.0], [58.7, 33366.0], [58.8, 33369.0], [58.9, 33370.0], [59.0, 33375.0], [59.1, 33379.0], [59.2, 33380.0], [59.3, 33382.0], [59.4, 33385.0], [59.5, 33391.0], [59.6, 33394.0], [59.7, 33397.0], [59.8, 33408.0], [59.9, 33413.0], [60.0, 33417.0], [60.1, 33422.0], [60.2, 33424.0], [60.3, 33426.0], [60.4, 33428.0], [60.5, 33434.0], [60.6, 33438.0], [60.7, 33446.0], [60.8, 33464.0], [60.9, 33471.0], [61.0, 33474.0], [61.1, 33479.0], [61.2, 33487.0], [61.3, 33496.0], [61.4, 33502.0], [61.5, 33520.0], [61.6, 33525.0], [61.7, 33546.0], [61.8, 33556.0], [61.9, 33559.0], [62.0, 33575.0], [62.1, 33590.0], [62.2, 33593.0], [62.3, 33601.0], [62.4, 33613.0], [62.5, 33624.0], [62.6, 33644.0], [62.7, 33662.0], [62.8, 33675.0], [62.9, 33696.0], [63.0, 33719.0], [63.1, 33765.0], [63.2, 33789.0], [63.3, 33805.0], [63.4, 33809.0], [63.5, 33841.0], [63.6, 33861.0], [63.7, 33869.0], [63.8, 33883.0], [63.9, 33886.0], [64.0, 33921.0], [64.1, 33975.0], [64.2, 34107.0], [64.3, 34215.0], [64.4, 34239.0], [64.5, 34283.0], [64.6, 34300.0], [64.7, 34317.0], [64.8, 34324.0], [64.9, 34342.0], [65.0, 34357.0], [65.1, 34367.0], [65.2, 34386.0], [65.3, 34393.0], [65.4, 34403.0], [65.5, 34410.0], [65.6, 34415.0], [65.7, 34419.0], [65.8, 34427.0], [65.9, 34428.0], [66.0, 34439.0], [66.1, 34448.0], [66.2, 34449.0], [66.3, 34469.0], [66.4, 34477.0], [66.5, 34492.0], [66.6, 34493.0], [66.7, 34499.0], [66.8, 34504.0], [66.9, 34507.0], [67.0, 34509.0], [67.1, 34511.0], [67.2, 34517.0], [67.3, 34519.0], [67.4, 34523.0], [67.5, 34525.0], [67.6, 34526.0], [67.7, 34526.0], [67.8, 34528.0], [67.9, 34530.0], [68.0, 34533.0], [68.1, 34534.0], [68.2, 34538.0], [68.3, 34542.0], [68.4, 34545.0], [68.5, 34554.0], [68.6, 34559.0], [68.7, 34564.0], [68.8, 34567.0], [68.9, 34570.0], [69.0, 34576.0], [69.1, 34579.0], [69.2, 34584.0], [69.3, 34587.0], [69.4, 34594.0], [69.5, 34596.0], [69.6, 34601.0], [69.7, 34608.0], [69.8, 34616.0], [69.9, 34616.0], [70.0, 34621.0], [70.1, 34625.0], [70.2, 34633.0], [70.3, 34639.0], [70.4, 34642.0], [70.5, 34649.0], [70.6, 34654.0], [70.7, 34663.0], [70.8, 34665.0], [70.9, 34672.0], [71.0, 34674.0], [71.1, 34676.0], [71.2, 34685.0], [71.3, 34686.0], [71.4, 34690.0], [71.5, 34696.0], [71.6, 34706.0], [71.7, 34717.0], [71.8, 34723.0], [71.9, 34729.0], [72.0, 34756.0], [72.1, 34780.0], [72.2, 34843.0], [72.3, 34884.0], [72.4, 34934.0], [72.5, 34982.0], [72.6, 35004.0], [72.7, 35039.0], [72.8, 35051.0], [72.9, 35089.0], [73.0, 35129.0], [73.1, 35141.0], [73.2, 35146.0], [73.3, 35151.0], [73.4, 35183.0], [73.5, 35192.0], [73.6, 35197.0], [73.7, 35205.0], [73.8, 35226.0], [73.9, 35229.0], [74.0, 35235.0], [74.1, 35240.0], [74.2, 35246.0], [74.3, 35250.0], [74.4, 35264.0], [74.5, 35268.0], [74.6, 35282.0], [74.7, 35287.0], [74.8, 35290.0], [74.9, 35296.0], [75.0, 35299.0], [75.1, 35304.0], [75.2, 35312.0], [75.3, 35327.0], [75.4, 35340.0], [75.5, 35401.0], [75.6, 35426.0], [75.7, 35534.0], [75.8, 35552.0], [75.9, 35567.0], [76.0, 35571.0], [76.1, 35582.0], [76.2, 35584.0], [76.3, 35586.0], [76.4, 35592.0], [76.5, 35597.0], [76.6, 35603.0], [76.7, 35620.0], [76.8, 35625.0], [76.9, 35633.0], [77.0, 35640.0], [77.1, 35647.0], [77.2, 35657.0], [77.3, 35670.0], [77.4, 35677.0], [77.5, 35685.0], [77.6, 35693.0], [77.7, 35701.0], [77.8, 35709.0], [77.9, 35715.0], [78.0, 35723.0], [78.1, 35734.0], [78.2, 35751.0], [78.3, 35766.0], [78.4, 35773.0], [78.5, 35787.0], [78.6, 35881.0], [78.7, 35923.0], [78.8, 36117.0], [78.9, 36155.0], [79.0, 36198.0], [79.1, 36294.0], [79.2, 36321.0], [79.3, 36354.0], [79.4, 36358.0], [79.5, 36361.0], [79.6, 36387.0], [79.7, 36418.0], [79.8, 36496.0], [79.9, 36675.0], [80.0, 36791.0], [80.1, 36913.0], [80.2, 37037.0], [80.3, 37164.0], [80.4, 37376.0], [80.5, 37399.0], [80.6, 37432.0], [80.7, 37442.0], [80.8, 37450.0], [80.9, 37462.0], [81.0, 37468.0], [81.1, 37502.0], [81.2, 37507.0], [81.3, 37510.0], [81.4, 37515.0], [81.5, 37519.0], [81.6, 37522.0], [81.7, 37524.0], [81.8, 37530.0], [81.9, 37537.0], [82.0, 37537.0], [82.1, 37546.0], [82.2, 37559.0], [82.3, 37564.0], [82.4, 37570.0], [82.5, 37577.0], [82.6, 37583.0], [82.7, 37586.0], [82.8, 37589.0], [82.9, 37592.0], [83.0, 37596.0], [83.1, 37599.0], [83.2, 37606.0], [83.3, 37608.0], [83.4, 37613.0], [83.5, 37622.0], [83.6, 37640.0], [83.7, 37651.0], [83.8, 37659.0], [83.9, 37675.0], [84.0, 37686.0], [84.1, 37704.0], [84.2, 37706.0], [84.3, 37717.0], [84.4, 37753.0], [84.5, 37762.0], [84.6, 37782.0], [84.7, 37794.0], [84.8, 37805.0], [84.9, 37812.0], [85.0, 37822.0], [85.1, 37822.0], [85.2, 37828.0], [85.3, 37835.0], [85.4, 37840.0], [85.5, 37854.0], [85.6, 37862.0], [85.7, 37866.0], [85.8, 37868.0], [85.9, 37872.0], [86.0, 37874.0], [86.1, 37876.0], [86.2, 37882.0], [86.3, 37885.0], [86.4, 37886.0], [86.5, 37891.0], [86.6, 37901.0], [86.7, 37904.0], [86.8, 37906.0], [86.9, 37912.0], [87.0, 37919.0], [87.1, 37938.0], [87.2, 37955.0], [87.3, 37974.0], [87.4, 37986.0], [87.5, 37994.0], [87.6, 37995.0], [87.7, 37999.0], [87.8, 38006.0], [87.9, 38007.0], [88.0, 38012.0], [88.1, 38021.0], [88.2, 38027.0], [88.3, 38035.0], [88.4, 38042.0], [88.5, 38060.0], [88.6, 38063.0], [88.7, 38073.0], [88.8, 38079.0], [88.9, 38095.0], [89.0, 38109.0], [89.1, 38116.0], [89.2, 38128.0], [89.3, 38142.0], [89.4, 38147.0], [89.5, 38151.0], [89.6, 38177.0], [89.7, 38188.0], [89.8, 38204.0], [89.9, 38385.0], [90.0, 38496.0], [90.1, 38560.0], [90.2, 38856.0], [90.3, 38963.0], [90.4, 39178.0], [90.5, 39241.0], [90.6, 39383.0], [90.7, 39502.0], [90.8, 39673.0], [90.9, 39793.0], [91.0, 39936.0], [91.1, 40155.0], [91.2, 40212.0], [91.3, 40324.0], [91.4, 40565.0], [91.5, 40703.0], [91.6, 40819.0], [91.7, 40985.0], [91.8, 41109.0], [91.9, 41317.0], [92.0, 41461.0], [92.1, 41574.0], [92.2, 41692.0], [92.3, 41846.0], [92.4, 41974.0], [92.5, 42185.0], [92.6, 42365.0], [92.7, 42454.0], [92.8, 42629.0], [92.9, 42802.0], [93.0, 42946.0], [93.1, 43075.0], [93.2, 43233.0], [93.3, 43382.0], [93.4, 43512.0], [93.5, 43659.0], [93.6, 43775.0], [93.7, 44045.0], [93.8, 44156.0], [93.9, 44277.0], [94.0, 44412.0], [94.1, 44628.0], [94.2, 44703.0], [94.3, 44833.0], [94.4, 45093.0], [94.5, 45225.0], [94.6, 45477.0], [94.7, 45600.0], [94.8, 45753.0], [94.9, 45900.0], [95.0, 46038.0], [95.1, 46166.0], [95.2, 46392.0], [95.3, 46445.0], [95.4, 46548.0], [95.5, 46755.0], [95.6, 46921.0], [95.7, 47182.0], [95.8, 47321.0], [95.9, 47695.0], [96.0, 47804.0], [96.1, 48073.0], [96.2, 48200.0], [96.3, 48366.0], [96.4, 48555.0], [96.5, 48680.0], [96.6, 48810.0], [96.7, 49023.0], [96.8, 49158.0], [96.9, 49297.0], [97.0, 49547.0], [97.1, 49576.0], [97.2, 49711.0], [97.3, 49850.0], [97.4, 50114.0], [97.5, 50203.0], [97.6, 50336.0], [97.7, 50494.0], [97.8, 50669.0], [97.9, 50798.0], [98.0, 50918.0], [98.1, 51169.0], [98.2, 51233.0], [98.3, 51367.0], [98.4, 51555.0], [98.5, 51741.0], [98.6, 51815.0], [98.7, 52004.0], [98.8, 52220.0], [98.9, 52281.0], [99.0, 52408.0], [99.1, 52672.0], [99.2, 52805.0], [99.3, 52910.0], [99.4, 53108.0], [99.5, 53573.0], [99.6, 54119.0], [99.7, 54464.0], [99.8, 54961.0], [99.9, 55416.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 125.0, "series": [{"data": [[32900.0, 1.0], [33700.0, 10.0], [34500.0, 78.0], [36100.0, 7.0], [35300.0, 12.0], [36900.0, 3.0], [37700.0, 18.0], [38500.0, 2.0], [39300.0, 3.0], [40100.0, 1.0], [40900.0, 2.0], [42500.0, 2.0], [43300.0, 3.0], [44100.0, 2.0], [44900.0, 2.0], [45700.0, 1.0], [46500.0, 3.0], [47300.0, 2.0], [48100.0, 2.0], [49700.0, 3.0], [200.0, 4.0], [51300.0, 3.0], [52100.0, 1.0], [52900.0, 2.0], [53700.0, 1.0], [300.0, 5.0], [400.0, 3.0], [500.0, 1.0], [600.0, 3.0], [700.0, 3.0], [900.0, 4.0], [1000.0, 2.0], [1100.0, 1.0], [1200.0, 3.0], [1300.0, 3.0], [1400.0, 3.0], [1500.0, 3.0], [1600.0, 4.0], [1700.0, 1.0], [1800.0, 2.0], [1900.0, 4.0], [2000.0, 3.0], [2100.0, 4.0], [2200.0, 2.0], [2300.0, 2.0], [2400.0, 1.0], [2500.0, 5.0], [2600.0, 2.0], [2700.0, 3.0], [2800.0, 4.0], [2900.0, 1.0], [3000.0, 4.0], [3100.0, 2.0], [3200.0, 3.0], [3300.0, 3.0], [3400.0, 1.0], [3500.0, 5.0], [3600.0, 4.0], [3700.0, 2.0], [3800.0, 3.0], [3900.0, 1.0], [4000.0, 5.0], [4100.0, 2.0], [4200.0, 5.0], [4300.0, 2.0], [4400.0, 2.0], [4500.0, 4.0], [4600.0, 3.0], [4700.0, 2.0], [4800.0, 4.0], [4900.0, 3.0], [5000.0, 3.0], [5100.0, 1.0], [5200.0, 3.0], [5300.0, 5.0], [5400.0, 1.0], [5500.0, 3.0], [5600.0, 1.0], [5700.0, 5.0], [5800.0, 3.0], [5900.0, 2.0], [6000.0, 5.0], [6100.0, 1.0], [6200.0, 3.0], [6300.0, 3.0], [6400.0, 3.0], [6500.0, 3.0], [6600.0, 3.0], [6700.0, 4.0], [6800.0, 2.0], [6900.0, 5.0], [7000.0, 1.0], [7100.0, 3.0], [7200.0, 3.0], [7300.0, 3.0], [7400.0, 5.0], [7500.0, 1.0], [7600.0, 2.0], [7700.0, 2.0], [7800.0, 7.0], [7900.0, 6.0], [8000.0, 2.0], [8100.0, 5.0], [8200.0, 16.0], [8400.0, 15.0], [8600.0, 26.0], [8800.0, 4.0], [9000.0, 1.0], [9200.0, 3.0], [9400.0, 2.0], [9600.0, 3.0], [9800.0, 2.0], [10000.0, 31.0], [10200.0, 15.0], [10400.0, 27.0], [10600.0, 3.0], [10800.0, 10.0], [11000.0, 21.0], [11200.0, 2.0], [11400.0, 3.0], [11600.0, 2.0], [11800.0, 2.0], [12000.0, 1.0], [12200.0, 1.0], [12400.0, 3.0], [12600.0, 1.0], [12800.0, 1.0], [13000.0, 2.0], [13200.0, 2.0], [13400.0, 1.0], [13600.0, 1.0], [14000.0, 2.0], [14200.0, 2.0], [14400.0, 1.0], [14600.0, 1.0], [14800.0, 1.0], [15000.0, 1.0], [15200.0, 2.0], [15400.0, 2.0], [15600.0, 2.0], [15800.0, 1.0], [16000.0, 1.0], [16200.0, 2.0], [16400.0, 1.0], [16800.0, 1.0], [17200.0, 1.0], [17600.0, 2.0], [18400.0, 2.0], [19200.0, 1.0], [20000.0, 2.0], [20400.0, 1.0], [22000.0, 1.0], [22400.0, 2.0], [23200.0, 3.0], [23600.0, 1.0], [24000.0, 2.0], [24400.0, 3.0], [24800.0, 2.0], [25200.0, 2.0], [25600.0, 2.0], [26000.0, 3.0], [26400.0, 3.0], [26800.0, 1.0], [27200.0, 13.0], [27600.0, 2.0], [28000.0, 2.0], [28400.0, 2.0], [28800.0, 2.0], [29200.0, 3.0], [29600.0, 2.0], [30000.0, 2.0], [30400.0, 4.0], [30800.0, 38.0], [31200.0, 14.0], [31600.0, 1.0], [32000.0, 1.0], [32400.0, 1.0], [32800.0, 2.0], [33600.0, 17.0], [34400.0, 37.0], [35200.0, 38.0], [36000.0, 1.0], [36800.0, 1.0], [37600.0, 26.0], [38400.0, 3.0], [39200.0, 3.0], [40000.0, 1.0], [40800.0, 2.0], [41600.0, 2.0], [42400.0, 2.0], [43200.0, 1.0], [44000.0, 2.0], [44800.0, 1.0], [45600.0, 3.0], [46400.0, 2.0], [48000.0, 2.0], [48800.0, 3.0], [49600.0, 1.0], [50400.0, 2.0], [51200.0, 1.0], [52000.0, 2.0], [52800.0, 2.0], [54400.0, 1.0], [33100.0, 28.0], [33900.0, 5.0], [34700.0, 16.0], [35500.0, 24.0], [36300.0, 15.0], [37100.0, 2.0], [37900.0, 31.0], [38700.0, 1.0], [39500.0, 2.0], [40300.0, 2.0], [41100.0, 2.0], [41900.0, 3.0], [42700.0, 1.0], [43500.0, 1.0], [44300.0, 1.0], [45100.0, 1.0], [45900.0, 2.0], [46700.0, 2.0], [47500.0, 2.0], [48300.0, 3.0], [49100.0, 3.0], [49900.0, 1.0], [50700.0, 3.0], [51500.0, 1.0], [52300.0, 2.0], [53100.0, 1.0], [53900.0, 1.0], [54700.0, 1.0], [55500.0, 1.0], [17300.0, 2.0], [17700.0, 3.0], [18100.0, 1.0], [18500.0, 1.0], [18900.0, 1.0], [19300.0, 1.0], [19700.0, 1.0], [20100.0, 1.0], [20500.0, 2.0], [20900.0, 1.0], [21300.0, 2.0], [21700.0, 2.0], [22100.0, 2.0], [22500.0, 1.0], [22900.0, 2.0], [23300.0, 2.0], [23700.0, 3.0], [24100.0, 2.0], [24500.0, 1.0], [24900.0, 3.0], [25700.0, 1.0], [26100.0, 2.0], [26500.0, 3.0], [26900.0, 2.0], [27300.0, 13.0], [27700.0, 2.0], [28100.0, 2.0], [28500.0, 2.0], [29300.0, 2.0], [28900.0, 1.0], [29700.0, 2.0], [30100.0, 2.0], [30500.0, 63.0], [31300.0, 19.0], [31700.0, 3.0], [30900.0, 37.0], [32100.0, 2.0], [32500.0, 2.0], [33000.0, 3.0], [33800.0, 18.0], [34600.0, 54.0], [35400.0, 4.0], [36200.0, 2.0], [37000.0, 2.0], [37800.0, 51.0], [39400.0, 1.0], [40200.0, 3.0], [41000.0, 2.0], [41800.0, 2.0], [42600.0, 2.0], [43400.0, 1.0], [44200.0, 3.0], [45000.0, 1.0], [45800.0, 1.0], [46600.0, 2.0], [48200.0, 1.0], [49000.0, 3.0], [49800.0, 2.0], [50600.0, 2.0], [51400.0, 2.0], [52200.0, 3.0], [53000.0, 1.0], [54600.0, 1.0], [55400.0, 1.0], [33300.0, 102.0], [34100.0, 3.0], [34900.0, 5.0], [35700.0, 23.0], [36500.0, 2.0], [37300.0, 5.0], [38100.0, 23.0], [38900.0, 3.0], [39700.0, 2.0], [40500.0, 3.0], [41300.0, 2.0], [42100.0, 2.0], [42900.0, 3.0], [43700.0, 3.0], [44500.0, 2.0], [45300.0, 1.0], [46100.0, 2.0], [46900.0, 1.0], [47700.0, 1.0], [48500.0, 3.0], [49300.0, 1.0], [50100.0, 2.0], [50900.0, 2.0], [51700.0, 2.0], [52500.0, 1.0], [53300.0, 1.0], [54100.0, 1.0], [54900.0, 1.0], [8300.0, 23.0], [8500.0, 23.0], [8700.0, 7.0], [8900.0, 4.0], [9100.0, 1.0], [9300.0, 3.0], [9500.0, 3.0], [9700.0, 3.0], [9900.0, 3.0], [10100.0, 29.0], [10500.0, 5.0], [10700.0, 2.0], [10300.0, 23.0], [10900.0, 26.0], [11100.0, 9.0], [11500.0, 1.0], [11700.0, 2.0], [11900.0, 2.0], [12100.0, 2.0], [12300.0, 1.0], [12500.0, 1.0], [12700.0, 1.0], [12900.0, 2.0], [13100.0, 2.0], [13500.0, 2.0], [13700.0, 2.0], [13900.0, 1.0], [14100.0, 1.0], [14300.0, 1.0], [14500.0, 1.0], [14700.0, 2.0], [14900.0, 1.0], [15100.0, 1.0], [15500.0, 1.0], [15700.0, 1.0], [15900.0, 1.0], [16100.0, 1.0], [16300.0, 1.0], [16600.0, 3.0], [18200.0, 2.0], [18600.0, 2.0], [19000.0, 2.0], [19400.0, 2.0], [19800.0, 1.0], [20200.0, 1.0], [20600.0, 1.0], [21800.0, 1.0], [22600.0, 3.0], [23000.0, 1.0], [23800.0, 2.0], [24200.0, 3.0], [24600.0, 1.0], [25000.0, 2.0], [25400.0, 3.0], [25800.0, 1.0], [26200.0, 2.0], [26600.0, 3.0], [27000.0, 4.0], [27400.0, 34.0], [27800.0, 1.0], [28200.0, 4.0], [28600.0, 1.0], [29400.0, 1.0], [29800.0, 3.0], [30200.0, 3.0], [30600.0, 72.0], [31000.0, 43.0], [31800.0, 2.0], [32200.0, 2.0], [32600.0, 2.0], [33200.0, 125.0], [34800.0, 5.0], [34000.0, 2.0], [35600.0, 32.0], [36400.0, 4.0], [37200.0, 1.0], [38000.0, 33.0], [38800.0, 3.0], [39600.0, 2.0], [40400.0, 2.0], [41200.0, 1.0], [42000.0, 1.0], [42800.0, 2.0], [43600.0, 3.0], [44400.0, 1.0], [45200.0, 2.0], [46000.0, 3.0], [47600.0, 1.0], [49200.0, 1.0], [50000.0, 1.0], [50800.0, 2.0], [51600.0, 2.0], [52400.0, 1.0], [55600.0, 1.0], [33500.0, 26.0], [34300.0, 21.0], [35100.0, 20.0], [35900.0, 2.0], [36700.0, 1.0], [37500.0, 55.0], [38300.0, 1.0], [39100.0, 1.0], [39900.0, 3.0], [40700.0, 2.0], [41500.0, 3.0], [42300.0, 2.0], [43100.0, 2.0], [43900.0, 1.0], [44700.0, 3.0], [46300.0, 1.0], [47100.0, 2.0], [49500.0, 3.0], [50300.0, 2.0], [51100.0, 2.0], [52700.0, 2.0], [53500.0, 1.0], [55100.0, 1.0], [16700.0, 3.0], [17100.0, 1.0], [17500.0, 2.0], [17900.0, 1.0], [18700.0, 3.0], [19100.0, 1.0], [19500.0, 1.0], [20300.0, 1.0], [20700.0, 1.0], [21100.0, 1.0], [21500.0, 1.0], [22300.0, 1.0], [22700.0, 2.0], [23100.0, 1.0], [23500.0, 3.0], [24300.0, 1.0], [24700.0, 1.0], [25100.0, 3.0], [25500.0, 3.0], [25900.0, 2.0], [26700.0, 2.0], [27100.0, 5.0], [27500.0, 53.0], [28300.0, 1.0], [28700.0, 3.0], [29100.0, 3.0], [29500.0, 1.0], [30300.0, 3.0], [30700.0, 59.0], [31100.0, 24.0], [31500.0, 3.0], [31900.0, 2.0], [32300.0, 2.0], [32700.0, 2.0], [33400.0, 42.0], [34200.0, 8.0], [35000.0, 11.0], [35800.0, 4.0], [36600.0, 3.0], [37400.0, 15.0], [38200.0, 3.0], [39000.0, 1.0], [39800.0, 1.0], [41400.0, 2.0], [42200.0, 1.0], [43000.0, 1.0], [43800.0, 1.0], [44600.0, 2.0], [45400.0, 3.0], [46200.0, 2.0], [47000.0, 2.0], [47800.0, 2.0], [48600.0, 3.0], [49400.0, 1.0], [50200.0, 3.0], [51000.0, 1.0], [51800.0, 3.0], [52600.0, 2.0], [53400.0, 1.0], [54200.0, 1.0], [55000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 55600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 12.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2693.0, "series": [{"data": [[0.0, 12.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 23.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2693.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 200.01002506265692, "minX": 1.75235772E12, "maxY": 989.3333333333328, "series": [{"data": [[1.75235778E12, 896.4261918437678], [1.75235784E12, 200.01002506265692], [1.75235772E12, 989.3333333333328]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235784E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7809.6, "minX": 1.0, "maxY": 38204.0, "series": [{"data": [[2.0, 37891.0], [3.0, 38027.0], [4.0, 38021.0], [5.0, 38002.0], [6.0, 37998.0], [7.0, 37986.0], [8.0, 37995.0], [9.0, 38010.0], [10.0, 38006.0], [11.0, 38035.0], [12.0, 37893.0], [13.0, 38006.0], [14.0, 35567.0], [15.0, 37974.0], [16.0, 35539.0], [17.0, 37822.0], [18.0, 35719.0], [19.0, 37912.0], [20.0, 37901.0], [21.0, 35582.0], [22.0, 35591.0], [23.0, 37780.0], [24.0, 35743.0], [25.0, 37905.0], [26.0, 37885.0], [27.0, 35586.0], [28.0, 34454.0], [29.0, 35583.0], [30.0, 34419.0], [31.0, 37762.0], [33.0, 37871.0], [32.0, 35751.0], [35.0, 37890.0], [34.0, 34506.0], [37.0, 34515.0], [36.0, 35597.0], [39.0, 35609.0], [38.0, 37868.0], [41.0, 35620.0], [40.0, 34504.0], [43.0, 34534.0], [42.0, 37866.0], [45.0, 35594.0], [44.0, 37840.0], [47.0, 37837.0], [46.0, 34526.0], [49.0, 34522.0], [48.0, 35587.0], [51.0, 33951.0], [50.0, 33807.0], [53.0, 37812.0], [52.0, 35584.0], [55.0, 37802.0], [54.0, 34393.0], [57.0, 33824.0], [56.0, 34526.0], [59.0, 37808.0], [58.0, 35585.0], [61.0, 35580.0], [60.0, 33851.0], [63.0, 34014.0], [62.0, 34529.0], [67.0, 37825.0], [66.0, 34403.0], [65.0, 37822.0], [64.0, 35582.0], [71.0, 37835.0], [70.0, 35567.0], [69.0, 33886.0], [68.0, 34532.0], [75.0, 34501.0], [74.0, 35566.0], [73.0, 33884.0], [72.0, 34529.0], [79.0, 35715.0], [78.0, 37715.0], [77.0, 35567.0], [76.0, 33885.0], [83.0, 37858.0], [82.0, 33883.0], [81.0, 34493.0], [80.0, 37854.0], [87.0, 34525.0], [86.0, 35600.0], [85.0, 33881.0], [84.0, 34492.0], [91.0, 35773.0], [90.0, 37724.0], [89.0, 35628.0], [88.0, 33870.0], [95.0, 34560.0], [94.0, 33861.0], [93.0, 34538.0], [92.0, 37877.0], [99.0, 34586.0], [98.0, 35657.0], [97.0, 33856.0], [96.0, 37874.0], [103.0, 34592.0], [102.0, 37752.0], [101.0, 35633.0], [100.0, 33841.0], [107.0, 33813.0], [106.0, 34596.0], [105.0, 37874.0], [104.0, 35753.0], [111.0, 34587.0], [110.0, 33808.0], [109.0, 31121.0], [108.0, 37903.0], [115.0, 37760.0], [114.0, 31015.0], [113.0, 33805.0], [112.0, 35571.0], [119.0, 31026.0], [118.0, 33921.0], [117.0, 34584.0], [116.0, 35568.0], [123.0, 31146.0], [122.0, 34576.0], [121.0, 35710.0], [120.0, 37882.0], [127.0, 37883.0], [126.0, 33772.0], [125.0, 34579.0], [124.0, 37876.0], [135.0, 37884.0], [134.0, 33864.0], [133.0, 31040.0], [132.0, 34616.0], [131.0, 35592.0], [130.0, 31023.0], [129.0, 33746.0], [128.0, 35603.0], [143.0, 37863.0], [142.0, 35640.0], [141.0, 33721.0], [140.0, 34596.0], [139.0, 37874.0], [138.0, 31197.0], [137.0, 34622.0], [136.0, 35618.0], [151.0, 33809.0], [150.0, 37904.0], [149.0, 35677.0], [148.0, 31075.0], [147.0, 34504.0], [146.0, 33710.0], [145.0, 35658.0], [144.0, 31083.0], [159.0, 35697.0], [158.0, 33665.0], [157.0, 37913.0], [156.0, 35678.0], [155.0, 34654.0], [154.0, 37906.0], [153.0, 31173.0], [152.0, 34625.0], [167.0, 34621.0], [166.0, 33765.0], [165.0, 30995.0], [164.0, 37794.0], [163.0, 35723.0], [162.0, 34496.0], [161.0, 33656.0], [160.0, 31022.0], [175.0, 34616.0], [174.0, 33644.0], [173.0, 31091.0], [172.0, 35675.0], [171.0, 37946.0], [170.0, 34617.0], [169.0, 31093.0], [168.0, 37938.0], [183.0, 34611.0], [182.0, 37995.0], [181.0, 33612.0], [180.0, 30979.0], [179.0, 35647.0], [178.0, 37841.0], [177.0, 33614.0], [176.0, 35679.0], [191.0, 35620.0], [190.0, 34640.0], [189.0, 33606.0], [188.0, 31117.0], [187.0, 34640.0], [186.0, 38009.0], [185.0, 31123.0], [184.0, 35776.0], [199.0, 35781.0], [198.0, 33590.0], [197.0, 37989.0], [196.0, 34654.0], [195.0, 30958.0], [194.0, 35633.0], [193.0, 33593.0], [192.0, 37879.0], [207.0, 37906.0], [206.0, 35647.0], [205.0, 33586.0], [204.0, 34666.0], [203.0, 31078.0], [202.0, 37997.0], [201.0, 34665.0], [200.0, 30956.0], [215.0, 38063.0], [214.0, 35809.0], [213.0, 33579.0], [212.0, 34682.0], [211.0, 30949.0], [210.0, 38054.0], [209.0, 33575.0], [208.0, 35672.0], [223.0, 35693.0], [222.0, 37912.0], [221.0, 33546.0], [220.0, 35670.0], [219.0, 34674.0], [218.0, 31084.0], [217.0, 34685.0], [216.0, 30949.0], [231.0, 34686.0], [230.0, 33556.0], [229.0, 38014.0], [228.0, 35836.0], [227.0, 34676.0], [226.0, 30943.0], [225.0, 38039.0], [224.0, 33559.0], [239.0, 38025.0], [238.0, 33592.0], [237.0, 35698.0], [236.0, 31068.0], [235.0, 34690.0], [234.0, 37999.0], [233.0, 33696.0], [232.0, 30939.0], [247.0, 30962.0], [246.0, 34717.0], [245.0, 35709.0], [244.0, 38025.0], [243.0, 33595.0], [242.0, 30939.0], [241.0, 34714.0], [240.0, 35701.0], [255.0, 35753.0], [254.0, 33601.0], [253.0, 38060.0], [252.0, 35727.0], [251.0, 31048.0], [250.0, 34686.0], [249.0, 33713.0], [248.0, 38033.0], [270.0, 30947.0], [271.0, 34596.0], [269.0, 33556.0], [268.0, 36845.5], [266.0, 31074.0], [265.0, 34744.0], [264.0, 33719.0], [263.0, 38081.0], [257.0, 30929.0], [256.0, 34594.0], [259.0, 33572.0], [258.0, 38085.0], [262.0, 35738.0], [261.0, 32838.5], [286.0, 35644.0], [287.0, 38107.0], [285.0, 33525.0], [284.0, 37955.0], [283.0, 34780.0], [282.0, 31110.0], [281.0, 34736.0], [280.0, 31108.0], [279.0, 33520.0], [273.0, 35685.0], [272.0, 38114.0], [275.0, 30955.0], [274.0, 33523.0], [278.0, 35690.0], [277.0, 38109.0], [276.0, 34726.0], [302.0, 38134.0], [303.0, 31014.0], [301.0, 33486.0], [300.0, 34696.0], [299.0, 35734.0], [298.0, 37979.0], [297.0, 31100.0], [296.0, 34706.0], [295.0, 35624.0], [289.0, 30980.0], [288.0, 33524.0], [291.0, 38095.0], [290.0, 35625.0], [294.0, 31123.0], [293.0, 33512.0], [292.0, 34723.0], [318.0, 31023.0], [319.0, 33428.0], [317.0, 38181.0], [316.0, 33414.0], [315.0, 34584.0], [314.0, 38155.0], [313.0, 35710.0], [312.0, 38006.0], [311.0, 31159.0], [305.0, 33474.0], [304.0, 38160.0], [307.0, 31023.0], [306.0, 35600.0], [310.0, 35584.0], [309.0, 34633.0], [308.0, 33458.0], [334.0, 31045.0], [335.0, 38184.0], [333.0, 33392.0], [332.0, 34345.0], [331.0, 38189.0], [330.0, 31048.0], [329.0, 35643.0], [328.0, 38188.0], [327.0, 33538.0], [321.0, 38177.0], [320.0, 34533.0], [323.0, 35534.0], [322.0, 31039.0], [326.0, 35552.0], [325.0, 31149.0], [324.0, 33413.0], [350.0, 33336.0], [351.0, 33480.0], [349.0, 31169.0], [348.0, 38151.0], [347.0, 35196.0], [346.0, 33699.5], [344.0, 31068.0], [343.0, 38128.0], [337.0, 31192.0], [336.0, 33385.0], [339.0, 34215.0], [338.0, 35419.0], [342.0, 31065.0], [341.0, 38204.0], [340.0, 33502.0], [366.0, 33472.0], [367.0, 33339.0], [365.0, 34676.0], [364.0, 31004.0], [363.0, 37984.0], [362.0, 33556.0], [361.0, 33495.0], [360.0, 31128.0], [359.0, 38114.0], [353.0, 31050.0], [352.0, 38143.0], [355.0, 33362.0], [354.0, 35117.0], [358.0, 33382.0], [357.0, 31026.0], [356.0, 38126.0], [383.0, 30992.0], [378.0, 7809.6], [382.0, 33394.0], [381.0, 33368.0], [380.0, 38073.0], [371.0, 34639.0], [370.0, 33365.0], [369.0, 30992.0], [368.0, 38075.0], [379.0, 33256.0], [377.0, 31124.0], [376.0, 34602.0], [375.0, 33369.0], [374.0, 31103.0], [373.0, 33366.0], [372.0, 38042.0], [398.0, 33338.0], [399.0, 30919.0], [397.0, 33320.0], [396.0, 30978.0], [395.0, 38012.0], [394.0, 33235.0], [393.0, 36201.5], [391.0, 31087.0], [385.0, 38069.0], [384.0, 34570.0], [387.0, 33398.0], [386.0, 33372.0], [390.0, 33379.0], [389.0, 34542.0], [388.0, 31119.0], [414.0, 30884.0], [415.0, 34439.0], [413.0, 33205.0], [412.0, 33294.0], [411.0, 37886.0], [410.0, 34301.0], [409.0, 30896.0], [408.0, 37753.0], [407.0, 34294.0], [401.0, 33204.0], [400.0, 37910.0], [403.0, 34297.0], [402.0, 33309.0], [406.0, 33232.0], [405.0, 33333.0], [404.0, 31001.0], [430.0, 37867.0], [431.0, 34439.0], [429.0, 33233.0], [428.0, 30918.0], [427.0, 37872.0], [426.0, 34300.0], [425.0, 33341.0], [424.0, 30915.0], [423.0, 34315.0], [417.0, 33287.0], [416.0, 37869.0], [419.0, 31011.0], [418.0, 33207.0], [422.0, 33239.0], [421.0, 33216.0], [420.0, 37862.0], [446.0, 37835.0], [447.0, 33185.0], [445.0, 34477.0], [444.0, 33208.0], [443.0, 30915.0], [442.0, 37867.0], [441.0, 34331.0], [440.0, 33313.0], [439.0, 30930.0], [433.0, 33185.0], [432.0, 31033.0], [435.0, 37856.0], [434.0, 33217.0], [438.0, 34331.0], [437.0, 33206.0], [436.0, 33184.0], [462.0, 31001.0], [463.0, 37828.0], [461.0, 33121.0], [460.0, 34480.0], [459.0, 30859.0], [458.0, 33229.0], [457.0, 37703.0], [456.0, 34324.0], [455.0, 30860.0], [449.0, 33233.0], [448.0, 31022.0], [451.0, 33154.0], [450.0, 37834.0], [454.0, 33272.0], [453.0, 34342.0], [452.0, 33235.0], [479.0, 30977.0], [473.0, 16806.0], [478.0, 37805.0], [477.0, 33260.0], [476.0, 34367.0], [467.0, 33231.0], [466.0, 37822.0], [465.0, 33150.0], [464.0, 33238.0], [475.0, 33164.0], [474.0, 30821.0], [472.0, 37704.0], [471.0, 34361.0], [470.0, 34342.0], [469.0, 33298.0], [468.0, 30981.0], [495.0, 30828.0], [484.0, 17378.5], [486.0, 34382.0], [485.0, 33170.0], [490.0, 16785.0], [494.0, 33210.0], [493.0, 37812.0], [492.0, 33290.0], [483.0, 30966.0], [482.0, 37805.0], [481.0, 33295.0], [480.0, 33168.0], [487.0, 33169.0], [491.0, 34386.0], [489.0, 30830.0], [488.0, 37679.0], [510.0, 33257.0], [497.0, 16839.0], [496.0, 37853.0], [499.0, 30952.0], [498.0, 33214.0], [503.0, 33134.0], [502.0, 37706.0], [501.0, 34415.0], [500.0, 34427.0], [511.0, 37783.0], [509.0, 33228.0], [508.0, 30872.0], [507.0, 37822.0], [506.0, 34427.0], [505.0, 33222.0], [504.0, 30859.0], [540.0, 37675.0], [538.0, 16801.0], [543.0, 33194.0], [529.0, 37716.0], [528.0, 33253.0], [531.0, 33380.0], [530.0, 30920.0], [533.0, 37717.0], [532.0, 33223.0], [542.0, 34555.0], [541.0, 33276.0], [539.0, 30750.0], [537.0, 33252.0], [536.0, 34423.0], [527.0, 33246.0], [513.0, 30982.0], [512.0, 33237.0], [515.0, 34416.0], [514.0, 33231.0], [517.0, 34410.0], [516.0, 33244.0], [519.0, 33231.0], [518.0, 37660.0], [526.0, 34565.0], [525.0, 30802.0], [524.0, 33249.0], [523.0, 33239.0], [522.0, 37757.0], [521.0, 34420.0], [520.0, 30803.0], [535.0, 30778.0], [534.0, 34431.0], [572.0, 33272.0], [575.0, 30803.0], [561.0, 33430.0], [560.0, 30856.0], [563.0, 37659.0], [562.0, 33244.0], [565.0, 33272.0], [564.0, 34448.0], [574.0, 34627.0], [573.0, 37596.0], [571.0, 33280.0], [570.0, 30675.0], [569.0, 34439.0], [568.0, 37502.0], [559.0, 36128.5], [545.0, 30862.0], [544.0, 37685.0], [547.0, 33190.0], [546.0, 33397.0], [549.0, 34408.0], [548.0, 37686.0], [551.0, 33273.0], [550.0, 30711.0], [557.0, 33215.0], [556.0, 33281.0], [555.0, 30713.0], [554.0, 37705.0], [553.0, 34415.0], [552.0, 33204.0], [567.0, 33289.0], [566.0, 30679.0], [601.0, 34508.0], [606.0, 34533.0], [607.0, 33234.0], [593.0, 30859.0], [592.0, 33241.0], [595.0, 33282.0], [594.0, 37604.0], [597.0, 33240.0], [596.0, 34492.0], [605.0, 32072.5], [603.0, 33238.0], [602.0, 37602.0], [600.0, 33424.0], [583.0, 37450.0], [582.0, 33271.0], [581.0, 33341.0], [580.0, 34507.0], [579.0, 30800.0], [578.0, 37610.0], [577.0, 33248.0], [576.0, 33313.0], [591.0, 34510.0], [590.0, 33375.0], [589.0, 30837.0], [588.0, 37586.0], [587.0, 33261.0], [586.0, 30668.0], [585.0, 34509.0], [584.0, 33356.0], [599.0, 37452.0], [598.0, 30740.0], [636.0, 34518.0], [639.0, 33408.0], [625.0, 37537.0], [624.0, 30856.0], [627.0, 37530.0], [626.0, 33320.0], [629.0, 33412.0], [628.0, 34525.0], [638.0, 37519.0], [637.0, 33197.0], [635.0, 30738.0], [634.0, 37538.0], [633.0, 33411.0], [632.0, 33192.0], [623.0, 33440.0], [609.0, 30814.0], [608.0, 37599.0], [611.0, 34542.0], [610.0, 33300.0], [613.0, 37462.0], [612.0, 33210.0], [615.0, 30712.0], [614.0, 33434.0], [622.0, 33196.0], [621.0, 34554.0], [620.0, 30711.0], [619.0, 33438.0], [618.0, 37588.0], [617.0, 33194.0], [616.0, 34553.0], [631.0, 34527.0], [630.0, 30741.0], [668.0, 30857.0], [652.0, 16868.5], [651.0, 34551.0], [650.0, 37493.0], [649.0, 33384.0], [648.0, 30739.0], [653.0, 30845.0], [655.0, 37537.0], [641.0, 34644.0], [640.0, 30855.0], [643.0, 37522.0], [642.0, 33345.0], [645.0, 30734.0], [644.0, 33394.0], [647.0, 33224.0], [646.0, 34545.0], [654.0, 33380.0], [671.0, 34672.0], [657.0, 33349.0], [656.0, 34686.0], [659.0, 30727.0], [658.0, 37529.0], [661.0, 34528.0], [660.0, 33239.0], [663.0, 30724.0], [662.0, 33264.0], [670.0, 33391.0], [669.0, 37584.0], [667.0, 33244.0], [666.0, 34538.0], [665.0, 37555.0], [664.0, 33250.0], [697.0, 34608.0], [701.0, 33244.0], [702.0, 34594.0], [689.0, 37592.0], [688.0, 30783.0], [691.0, 33108.0], [690.0, 33295.0], [693.0, 33293.0], [692.0, 34612.0], [700.0, 30749.0], [699.0, 37622.0], [698.0, 33302.0], [696.0, 33243.0], [679.0, 30679.0], [678.0, 37468.0], [677.0, 33249.0], [676.0, 34576.0], [675.0, 33268.0], [674.0, 30677.0], [673.0, 37582.0], [672.0, 33244.0], [687.0, 33231.0], [686.0, 34756.0], [685.0, 33256.0], [684.0, 37598.0], [683.0, 30809.0], [682.0, 33231.0], [681.0, 34577.0], [680.0, 33266.0], [695.0, 37465.0], [694.0, 30639.0], [732.0, 33232.0], [735.0, 37608.0], [721.0, 33321.0], [720.0, 33236.0], [723.0, 34556.0], [722.0, 30679.0], [725.0, 37504.0], [724.0, 33328.0], [734.0, 33447.0], [733.0, 34559.0], [731.0, 30828.0], [730.0, 37609.0], [729.0, 33324.0], [728.0, 34545.0], [719.0, 37657.0], [705.0, 33306.0], [704.0, 34176.0], [707.0, 34606.0], [706.0, 33103.0], [709.0, 37511.0], [708.0, 33310.0], [711.0, 33236.0], [710.0, 30611.0], [718.0, 30765.0], [717.0, 34574.0], [716.0, 33225.0], [715.0, 37625.0], [714.0, 30640.0], [713.0, 33342.0], [712.0, 34586.0], [727.0, 33225.0], [726.0, 30707.0], [762.0, 37589.0], [766.0, 37584.0], [756.0, 16940.5], [759.0, 16938.0], [758.0, 30846.0], [757.0, 33338.0], [763.0, 17005.5], [767.0, 30691.0], [753.0, 34647.0], [752.0, 30697.0], [755.0, 30724.0], [754.0, 37577.0], [765.0, 33327.0], [764.0, 34519.0], [761.0, 33343.0], [760.0, 34516.0], [751.0, 37583.0], [736.0, 33251.0], [738.0, 30701.0], [737.0, 34686.0], [740.0, 33292.0], [739.0, 37606.0], [742.0, 33300.0], [741.0, 30733.0], [750.0, 33337.0], [749.0, 33361.0], [748.0, 34526.0], [747.0, 37593.0], [746.0, 33330.0], [745.0, 30850.0], [744.0, 33898.0], [793.0, 33388.0], [797.0, 37564.0], [798.0, 34567.0], [785.0, 33369.0], [784.0, 37576.0], [787.0, 30613.0], [786.0, 33232.0], [789.0, 33247.0], [788.0, 33383.0], [796.0, 30731.0], [795.0, 34564.0], [794.0, 33257.0], [792.0, 37441.0], [775.0, 30774.0], [774.0, 33248.0], [773.0, 33339.0], [772.0, 30690.0], [771.0, 33322.0], [770.0, 33247.0], [769.0, 37591.0], [768.0, 34650.0], [783.0, 34662.0], [782.0, 37591.0], [781.0, 32633.0], [779.0, 33249.0], [778.0, 33350.0], [777.0, 37463.0], [776.0, 34511.0], [791.0, 30753.0], [790.0, 34559.0], [828.0, 33318.0], [831.0, 37519.0], [817.0, 30571.0], [816.0, 33248.0], [819.0, 33338.0], [818.0, 33319.0], [821.0, 34523.0], [820.0, 30565.0], [830.0, 34523.0], [829.0, 37519.0], [827.0, 33417.0], [826.0, 34527.0], [825.0, 30696.0], [824.0, 33342.0], [815.0, 33313.0], [801.0, 37567.0], [800.0, 33281.0], [803.0, 33382.0], [802.0, 30610.0], [805.0, 34537.0], [804.0, 33313.0], [807.0, 33344.0], [806.0, 30594.0], [814.0, 37583.0], [813.0, 34530.0], [812.0, 37560.0], [811.0, 34531.0], [810.0, 30717.0], [809.0, 37443.0], [808.0, 33399.0], [823.0, 33322.0], [822.0, 37431.0], [857.0, 37536.0], [862.0, 34499.0], [863.0, 33306.0], [849.0, 34619.0], [848.0, 37516.0], [851.0, 33276.0], [850.0, 33272.0], [853.0, 33264.0], [852.0, 30552.0], [861.0, 30517.0], [860.0, 37510.0], [859.0, 33885.0], [856.0, 33424.0], [839.0, 37376.0], [838.0, 34466.0], [837.0, 33283.5], [835.0, 30587.0], [834.0, 33269.0], [833.0, 33304.0], [832.0, 30593.0], [847.0, 30571.0], [846.0, 34483.0], [845.0, 37515.0], [844.0, 33285.0], [843.0, 37504.0], [842.0, 34469.0], [841.0, 33394.0], [840.0, 30688.0], [855.0, 30639.0], [854.0, 33271.0], [892.0, 34526.0], [895.0, 30476.0], [881.0, 30481.0], [880.0, 34665.0], [883.0, 33292.0], [882.0, 33232.0], [885.0, 33235.0], [884.0, 30601.0], [894.0, 33324.0], [893.0, 37596.0], [891.0, 37572.0], [890.0, 33225.0], [889.0, 30597.0], [888.0, 34526.0], [879.0, 33291.0], [865.0, 33267.0], [864.0, 37491.0], [867.0, 30504.0], [866.0, 34632.0], [869.0, 30603.0], [868.0, 33309.0], [871.0, 33422.0], [870.0, 33257.0], [878.0, 37538.0], [877.0, 30472.0], [876.0, 34535.0], [875.0, 37537.0], [874.0, 33254.0], [873.0, 34504.0], [872.0, 37507.0], [887.0, 33427.0], [886.0, 37442.0], [924.0, 37530.0], [927.0, 33327.0], [913.0, 33333.0], [912.0, 33135.0], [915.0, 33264.0], [914.0, 30543.0], [917.0, 37432.0], [916.0, 34642.0], [926.0, 30556.0], [925.0, 33239.0], [923.0, 34663.0], [922.0, 33232.0], [921.0, 37537.0], [920.0, 34649.0], [911.0, 30517.0], [897.0, 33252.0], [896.0, 34692.0], [899.0, 30627.0], [898.0, 33333.0], [901.0, 33239.0], [900.0, 37448.0], [903.0, 34587.0], [902.0, 33332.0], [910.0, 33332.0], [909.0, 34616.0], [908.0, 37546.0], [907.0, 34601.0], [906.0, 37559.0], [905.0, 33267.0], [904.0, 30623.0], [919.0, 30676.0], [918.0, 33339.0], [956.0, 37547.0], [935.0, 11843.666666666666], [934.0, 33188.0], [933.0, 33304.0], [932.0, 37378.0], [931.0, 30689.0], [930.0, 34679.0], [929.0, 33315.0], [928.0, 30550.0], [943.0, 30559.0], [942.0, 33166.0], [941.0, 37512.0], [940.0, 30569.0], [939.0, 34696.0], [938.0, 33184.0], [937.0, 33469.0], [936.0, 37509.0], [959.0, 37608.0], [945.0, 33324.0], [944.0, 37523.0], [947.0, 33345.0], [946.0, 34672.0], [949.0, 33152.0], [948.0, 30675.0], [951.0, 33471.0], [950.0, 34704.0], [958.0, 33156.0], [957.0, 34881.0], [955.0, 30553.0], [954.0, 34719.0], [953.0, 33152.0], [952.0, 37524.0], [988.0, 35051.0], [962.0, 17064.0], [972.0, 15645.0], [971.0, 33246.0], [970.0, 37613.0], [969.0, 34728.0], [968.0, 33218.0], [973.0, 34908.0], [975.0, 37622.0], [961.0, 30560.0], [960.0, 33321.0], [974.0, 33321.0], [991.0, 30527.0], [977.0, 33326.0], [976.0, 30519.0], [979.0, 30642.0], [978.0, 33257.0], [981.0, 33500.0], [980.0, 34822.0], [983.0, 33280.0], [982.0, 37640.0], [990.0, 37651.0], [989.0, 33375.0], [987.0, 33276.0], [986.0, 37647.0], [985.0, 34843.0], [984.0, 30643.0], [967.0, 37608.0], [966.0, 33446.0], [965.0, 34729.0], [964.0, 33207.0], [963.0, 30663.0], [1000.0, 24681.343695014682], [999.0, 33956.333333333336], [998.0, 36388.0], [997.0, 34317.0], [996.0, 30669.0], [995.0, 37570.0], [994.0, 34202.333333333336], [993.0, 33276.666666666664], [992.0, 33381.0], [1.0, 38041.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[814.5931085044014, 28073.486803519103]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 957.6, "minX": 1.75235772E12, "maxY": 13415.616666666667, "series": [{"data": [[1.75235778E12, 13415.616666666667], [1.75235784E12, 3063.3], [1.75235772E12, 4534.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235778E12, 4178.4], [1.75235784E12, 957.6], [1.75235772E12, 1411.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235784E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8568.886054421766, "minX": 1.75235772E12, "maxY": 34899.00250626566, "series": [{"data": [[1.75235778E12, 33096.648477886345], [1.75235784E12, 34899.00250626566], [1.75235772E12, 8568.886054421766]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235784E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8568.826530612245, "minX": 1.75235772E12, "maxY": 34898.97243107765, "series": [{"data": [[1.75235778E12, 33096.61918437679], [1.75235784E12, 34898.97243107765], [1.75235772E12, 8568.826530612245]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235784E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75235772E12, "maxY": 169.47959183673473, "series": [{"data": [[1.75235778E12, 1.253877082136706], [1.75235784E12, 0.0], [1.75235772E12, 169.47959183673473]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235784E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 277.0, "minX": 1.75235772E12, "maxY": 55651.0, "series": [{"data": [[1.75235778E12, 55651.0], [1.75235784E12, 38204.0], [1.75235772E12, 19561.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235778E12, 43838.2], [1.75235784E12, 38006.0], [1.75235772E12, 14757.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235778E12, 53078.59999999999], [1.75235784E12, 38184.0], [1.75235772E12, 19182.09]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235778E12, 49163.4], [1.75235784E12, 38081.0], [1.75235772E12, 17175.299999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235778E12, 8432.0], [1.75235784E12, 30919.0], [1.75235772E12, 277.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235778E12, 33293.0], [1.75235784E12, 34654.0], [1.75235772E12, 8531.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235784E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10680.0, "minX": 4.0, "maxY": 38024.0, "series": [{"data": [[32.0, 18306.5], [9.0, 37893.0], [14.0, 35747.0], [4.0, 38024.0], [18.0, 35595.5], [20.0, 10680.0], [5.0, 37998.0], [23.0, 33502.0], [24.0, 33882.0], [25.0, 23255.0], [26.0, 24975.5], [27.0, 35242.0], [28.0, 33188.5], [29.0, 31006.0], [30.0, 33257.0], [31.0, 30684.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 32.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10680.0, "minX": 4.0, "maxY": 38024.0, "series": [{"data": [[32.0, 18306.5], [9.0, 37893.0], [14.0, 35747.0], [4.0, 38024.0], [18.0, 35595.5], [20.0, 10680.0], [5.0, 37998.0], [23.0, 33502.0], [24.0, 33882.0], [25.0, 23255.0], [26.0, 24975.5], [27.0, 35242.0], [28.0, 33188.0], [29.0, 31006.0], [30.0, 33257.0], [31.0, 30684.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 32.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 19.0, "minX": 1.75235772E12, "maxY": 26.466666666666665, "series": [{"data": [[1.75235778E12, 19.0], [1.75235772E12, 26.466666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235778E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6.65, "minX": 1.75235772E12, "maxY": 29.016666666666666, "series": [{"data": [[1.75235778E12, 29.016666666666666], [1.75235784E12, 6.65], [1.75235772E12, 9.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235784E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6.65, "minX": 1.75235772E12, "maxY": 29.016666666666666, "series": [{"data": [[1.75235778E12, 29.016666666666666], [1.75235784E12, 6.65], [1.75235772E12, 9.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235784E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.65, "minX": 1.75235772E12, "maxY": 29.016666666666666, "series": [{"data": [[1.75235778E12, 29.016666666666666], [1.75235784E12, 6.65], [1.75235772E12, 9.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235784E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

