/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 2974.0, "series": [{"data": [[0.0, 0.0], [0.1, 24.0], [0.2, 43.0], [0.3, 51.0], [0.4, 72.0], [0.5, 91.0], [0.6, 107.0], [0.7, 122.0], [0.8, 129.0], [0.9, 132.0], [1.0, 134.0], [1.1, 137.0], [1.2, 138.0], [1.3, 142.0], [1.4, 145.0], [1.5, 153.0], [1.6, 181.0], [1.7, 204.0], [1.8, 247.0], [1.9, 274.0], [2.0, 285.0], [2.1, 303.0], [2.2, 321.0], [2.3, 333.0], [2.4, 352.0], [2.5, 362.0], [2.6, 372.0], [2.7, 380.0], [2.8, 385.0], [2.9, 393.0], [3.0, 404.0], [3.1, 409.0], [3.2, 412.0], [3.3, 414.0], [3.4, 416.0], [3.5, 417.0], [3.6, 418.0], [3.7, 420.0], [3.8, 421.0], [3.9, 423.0], [4.0, 425.0], [4.1, 434.0], [4.2, 443.0], [4.3, 451.0], [4.4, 457.0], [4.5, 460.0], [4.6, 463.0], [4.7, 466.0], [4.8, 468.0], [4.9, 471.0], [5.0, 474.0], [5.1, 476.0], [5.2, 477.0], [5.3, 479.0], [5.4, 481.0], [5.5, 482.0], [5.6, 483.0], [5.7, 484.0], [5.8, 485.0], [5.9, 486.0], [6.0, 487.0], [6.1, 489.0], [6.2, 490.0], [6.3, 491.0], [6.4, 492.0], [6.5, 493.0], [6.6, 493.0], [6.7, 494.0], [6.8, 495.0], [6.9, 495.0], [7.0, 496.0], [7.1, 497.0], [7.2, 497.0], [7.3, 498.0], [7.4, 498.0], [7.5, 499.0], [7.6, 499.0], [7.7, 500.0], [7.8, 500.0], [7.9, 501.0], [8.0, 501.0], [8.1, 502.0], [8.2, 502.0], [8.3, 503.0], [8.4, 503.0], [8.5, 504.0], [8.6, 504.0], [8.7, 505.0], [8.8, 505.0], [8.9, 505.0], [9.0, 506.0], [9.1, 506.0], [9.2, 506.0], [9.3, 507.0], [9.4, 507.0], [9.5, 507.0], [9.6, 508.0], [9.7, 508.0], [9.8, 508.0], [9.9, 509.0], [10.0, 509.0], [10.1, 510.0], [10.2, 510.0], [10.3, 510.0], [10.4, 511.0], [10.5, 511.0], [10.6, 511.0], [10.7, 512.0], [10.8, 512.0], [10.9, 513.0], [11.0, 513.0], [11.1, 513.0], [11.2, 514.0], [11.3, 514.0], [11.4, 514.0], [11.5, 515.0], [11.6, 515.0], [11.7, 515.0], [11.8, 516.0], [11.9, 516.0], [12.0, 516.0], [12.1, 517.0], [12.2, 517.0], [12.3, 518.0], [12.4, 518.0], [12.5, 518.0], [12.6, 519.0], [12.7, 519.0], [12.8, 519.0], [12.9, 520.0], [13.0, 520.0], [13.1, 521.0], [13.2, 521.0], [13.3, 521.0], [13.4, 522.0], [13.5, 522.0], [13.6, 523.0], [13.7, 523.0], [13.8, 523.0], [13.9, 524.0], [14.0, 524.0], [14.1, 525.0], [14.2, 525.0], [14.3, 525.0], [14.4, 526.0], [14.5, 526.0], [14.6, 527.0], [14.7, 527.0], [14.8, 527.0], [14.9, 528.0], [15.0, 528.0], [15.1, 529.0], [15.2, 529.0], [15.3, 530.0], [15.4, 530.0], [15.5, 530.0], [15.6, 531.0], [15.7, 531.0], [15.8, 532.0], [15.9, 532.0], [16.0, 533.0], [16.1, 533.0], [16.2, 533.0], [16.3, 534.0], [16.4, 534.0], [16.5, 534.0], [16.6, 535.0], [16.7, 535.0], [16.8, 536.0], [16.9, 536.0], [17.0, 536.0], [17.1, 537.0], [17.2, 537.0], [17.3, 538.0], [17.4, 538.0], [17.5, 538.0], [17.6, 539.0], [17.7, 539.0], [17.8, 540.0], [17.9, 540.0], [18.0, 541.0], [18.1, 541.0], [18.2, 542.0], [18.3, 542.0], [18.4, 543.0], [18.5, 543.0], [18.6, 543.0], [18.7, 544.0], [18.8, 544.0], [18.9, 545.0], [19.0, 545.0], [19.1, 545.0], [19.2, 546.0], [19.3, 546.0], [19.4, 546.0], [19.5, 547.0], [19.6, 547.0], [19.7, 547.0], [19.8, 548.0], [19.9, 548.0], [20.0, 548.0], [20.1, 549.0], [20.2, 549.0], [20.3, 549.0], [20.4, 550.0], [20.5, 550.0], [20.6, 550.0], [20.7, 551.0], [20.8, 551.0], [20.9, 551.0], [21.0, 552.0], [21.1, 552.0], [21.2, 552.0], [21.3, 553.0], [21.4, 553.0], [21.5, 553.0], [21.6, 554.0], [21.7, 554.0], [21.8, 554.0], [21.9, 555.0], [22.0, 555.0], [22.1, 556.0], [22.2, 556.0], [22.3, 556.0], [22.4, 557.0], [22.5, 557.0], [22.6, 558.0], [22.7, 558.0], [22.8, 558.0], [22.9, 559.0], [23.0, 559.0], [23.1, 560.0], [23.2, 560.0], [23.3, 560.0], [23.4, 561.0], [23.5, 561.0], [23.6, 561.0], [23.7, 562.0], [23.8, 562.0], [23.9, 562.0], [24.0, 562.0], [24.1, 563.0], [24.2, 563.0], [24.3, 563.0], [24.4, 563.0], [24.5, 564.0], [24.6, 564.0], [24.7, 564.0], [24.8, 565.0], [24.9, 565.0], [25.0, 565.0], [25.1, 565.0], [25.2, 566.0], [25.3, 566.0], [25.4, 566.0], [25.5, 567.0], [25.6, 567.0], [25.7, 567.0], [25.8, 567.0], [25.9, 567.0], [26.0, 568.0], [26.1, 568.0], [26.2, 568.0], [26.3, 568.0], [26.4, 569.0], [26.5, 569.0], [26.6, 569.0], [26.7, 569.0], [26.8, 570.0], [26.9, 570.0], [27.0, 570.0], [27.1, 570.0], [27.2, 570.0], [27.3, 571.0], [27.4, 571.0], [27.5, 571.0], [27.6, 571.0], [27.7, 572.0], [27.8, 572.0], [27.9, 572.0], [28.0, 572.0], [28.1, 573.0], [28.2, 573.0], [28.3, 573.0], [28.4, 574.0], [28.5, 574.0], [28.6, 574.0], [28.7, 574.0], [28.8, 575.0], [28.9, 575.0], [29.0, 575.0], [29.1, 576.0], [29.2, 576.0], [29.3, 576.0], [29.4, 576.0], [29.5, 577.0], [29.6, 577.0], [29.7, 577.0], [29.8, 577.0], [29.9, 578.0], [30.0, 578.0], [30.1, 578.0], [30.2, 578.0], [30.3, 578.0], [30.4, 579.0], [30.5, 579.0], [30.6, 579.0], [30.7, 579.0], [30.8, 579.0], [30.9, 580.0], [31.0, 580.0], [31.1, 580.0], [31.2, 580.0], [31.3, 580.0], [31.4, 581.0], [31.5, 581.0], [31.6, 581.0], [31.7, 581.0], [31.8, 581.0], [31.9, 582.0], [32.0, 582.0], [32.1, 582.0], [32.2, 582.0], [32.3, 582.0], [32.4, 583.0], [32.5, 583.0], [32.6, 583.0], [32.7, 583.0], [32.8, 583.0], [32.9, 584.0], [33.0, 584.0], [33.1, 584.0], [33.2, 584.0], [33.3, 584.0], [33.4, 584.0], [33.5, 585.0], [33.6, 585.0], [33.7, 585.0], [33.8, 585.0], [33.9, 585.0], [34.0, 585.0], [34.1, 586.0], [34.2, 586.0], [34.3, 586.0], [34.4, 586.0], [34.5, 586.0], [34.6, 586.0], [34.7, 587.0], [34.8, 587.0], [34.9, 587.0], [35.0, 587.0], [35.1, 587.0], [35.2, 587.0], [35.3, 588.0], [35.4, 588.0], [35.5, 588.0], [35.6, 588.0], [35.7, 588.0], [35.8, 588.0], [35.9, 589.0], [36.0, 589.0], [36.1, 589.0], [36.2, 589.0], [36.3, 589.0], [36.4, 590.0], [36.5, 590.0], [36.6, 590.0], [36.7, 590.0], [36.8, 590.0], [36.9, 590.0], [37.0, 590.0], [37.1, 591.0], [37.2, 591.0], [37.3, 591.0], [37.4, 591.0], [37.5, 591.0], [37.6, 592.0], [37.7, 592.0], [37.8, 592.0], [37.9, 592.0], [38.0, 592.0], [38.1, 593.0], [38.2, 593.0], [38.3, 593.0], [38.4, 593.0], [38.5, 593.0], [38.6, 593.0], [38.7, 594.0], [38.8, 594.0], [38.9, 594.0], [39.0, 594.0], [39.1, 594.0], [39.2, 594.0], [39.3, 595.0], [39.4, 595.0], [39.5, 595.0], [39.6, 595.0], [39.7, 595.0], [39.8, 596.0], [39.9, 596.0], [40.0, 596.0], [40.1, 596.0], [40.2, 596.0], [40.3, 596.0], [40.4, 597.0], [40.5, 597.0], [40.6, 597.0], [40.7, 597.0], [40.8, 597.0], [40.9, 597.0], [41.0, 598.0], [41.1, 598.0], [41.2, 598.0], [41.3, 598.0], [41.4, 598.0], [41.5, 599.0], [41.6, 599.0], [41.7, 599.0], [41.8, 599.0], [41.9, 599.0], [42.0, 599.0], [42.1, 600.0], [42.2, 600.0], [42.3, 600.0], [42.4, 600.0], [42.5, 600.0], [42.6, 601.0], [42.7, 601.0], [42.8, 601.0], [42.9, 601.0], [43.0, 601.0], [43.1, 602.0], [43.2, 602.0], [43.3, 602.0], [43.4, 602.0], [43.5, 602.0], [43.6, 603.0], [43.7, 603.0], [43.8, 603.0], [43.9, 603.0], [44.0, 603.0], [44.1, 604.0], [44.2, 604.0], [44.3, 604.0], [44.4, 604.0], [44.5, 604.0], [44.6, 605.0], [44.7, 605.0], [44.8, 605.0], [44.9, 605.0], [45.0, 605.0], [45.1, 606.0], [45.2, 606.0], [45.3, 606.0], [45.4, 606.0], [45.5, 606.0], [45.6, 607.0], [45.7, 607.0], [45.8, 607.0], [45.9, 607.0], [46.0, 608.0], [46.1, 608.0], [46.2, 608.0], [46.3, 608.0], [46.4, 609.0], [46.5, 609.0], [46.6, 609.0], [46.7, 609.0], [46.8, 610.0], [46.9, 610.0], [47.0, 610.0], [47.1, 611.0], [47.2, 611.0], [47.3, 611.0], [47.4, 611.0], [47.5, 612.0], [47.6, 612.0], [47.7, 612.0], [47.8, 612.0], [47.9, 613.0], [48.0, 613.0], [48.1, 613.0], [48.2, 613.0], [48.3, 614.0], [48.4, 614.0], [48.5, 614.0], [48.6, 615.0], [48.7, 615.0], [48.8, 615.0], [48.9, 616.0], [49.0, 616.0], [49.1, 616.0], [49.2, 616.0], [49.3, 617.0], [49.4, 617.0], [49.5, 617.0], [49.6, 617.0], [49.7, 618.0], [49.8, 618.0], [49.9, 618.0], [50.0, 618.0], [50.1, 619.0], [50.2, 619.0], [50.3, 619.0], [50.4, 619.0], [50.5, 620.0], [50.6, 620.0], [50.7, 620.0], [50.8, 620.0], [50.9, 620.0], [51.0, 621.0], [51.1, 621.0], [51.2, 621.0], [51.3, 621.0], [51.4, 622.0], [51.5, 622.0], [51.6, 622.0], [51.7, 622.0], [51.8, 623.0], [51.9, 623.0], [52.0, 623.0], [52.1, 623.0], [52.2, 624.0], [52.3, 624.0], [52.4, 624.0], [52.5, 625.0], [52.6, 625.0], [52.7, 625.0], [52.8, 625.0], [52.9, 626.0], [53.0, 626.0], [53.1, 626.0], [53.2, 626.0], [53.3, 627.0], [53.4, 627.0], [53.5, 627.0], [53.6, 627.0], [53.7, 628.0], [53.8, 628.0], [53.9, 628.0], [54.0, 628.0], [54.1, 629.0], [54.2, 629.0], [54.3, 629.0], [54.4, 629.0], [54.5, 630.0], [54.6, 630.0], [54.7, 630.0], [54.8, 631.0], [54.9, 631.0], [55.0, 631.0], [55.1, 631.0], [55.2, 632.0], [55.3, 632.0], [55.4, 632.0], [55.5, 633.0], [55.6, 633.0], [55.7, 633.0], [55.8, 634.0], [55.9, 634.0], [56.0, 634.0], [56.1, 634.0], [56.2, 635.0], [56.3, 635.0], [56.4, 635.0], [56.5, 636.0], [56.6, 636.0], [56.7, 636.0], [56.8, 637.0], [56.9, 637.0], [57.0, 637.0], [57.1, 637.0], [57.2, 638.0], [57.3, 638.0], [57.4, 639.0], [57.5, 639.0], [57.6, 639.0], [57.7, 640.0], [57.8, 640.0], [57.9, 640.0], [58.0, 641.0], [58.1, 641.0], [58.2, 642.0], [58.3, 642.0], [58.4, 642.0], [58.5, 643.0], [58.6, 643.0], [58.7, 644.0], [58.8, 644.0], [58.9, 644.0], [59.0, 644.0], [59.1, 645.0], [59.2, 645.0], [59.3, 646.0], [59.4, 646.0], [59.5, 646.0], [59.6, 647.0], [59.7, 647.0], [59.8, 647.0], [59.9, 648.0], [60.0, 648.0], [60.1, 648.0], [60.2, 649.0], [60.3, 649.0], [60.4, 650.0], [60.5, 650.0], [60.6, 650.0], [60.7, 651.0], [60.8, 651.0], [60.9, 651.0], [61.0, 652.0], [61.1, 652.0], [61.2, 653.0], [61.3, 653.0], [61.4, 653.0], [61.5, 654.0], [61.6, 654.0], [61.7, 655.0], [61.8, 655.0], [61.9, 655.0], [62.0, 656.0], [62.1, 656.0], [62.2, 656.0], [62.3, 657.0], [62.4, 657.0], [62.5, 657.0], [62.6, 658.0], [62.7, 658.0], [62.8, 658.0], [62.9, 659.0], [63.0, 659.0], [63.1, 660.0], [63.2, 660.0], [63.3, 660.0], [63.4, 661.0], [63.5, 661.0], [63.6, 661.0], [63.7, 662.0], [63.8, 662.0], [63.9, 662.0], [64.0, 663.0], [64.1, 663.0], [64.2, 664.0], [64.3, 664.0], [64.4, 664.0], [64.5, 665.0], [64.6, 665.0], [64.7, 666.0], [64.8, 666.0], [64.9, 667.0], [65.0, 667.0], [65.1, 668.0], [65.2, 668.0], [65.3, 668.0], [65.4, 669.0], [65.5, 669.0], [65.6, 669.0], [65.7, 670.0], [65.8, 670.0], [65.9, 671.0], [66.0, 671.0], [66.1, 671.0], [66.2, 671.0], [66.3, 672.0], [66.4, 672.0], [66.5, 672.0], [66.6, 672.0], [66.7, 673.0], [66.8, 673.0], [66.9, 673.0], [67.0, 674.0], [67.1, 674.0], [67.2, 674.0], [67.3, 675.0], [67.4, 675.0], [67.5, 675.0], [67.6, 676.0], [67.7, 676.0], [67.8, 676.0], [67.9, 676.0], [68.0, 677.0], [68.1, 677.0], [68.2, 677.0], [68.3, 677.0], [68.4, 678.0], [68.5, 678.0], [68.6, 678.0], [68.7, 679.0], [68.8, 679.0], [68.9, 679.0], [69.0, 679.0], [69.1, 680.0], [69.2, 680.0], [69.3, 680.0], [69.4, 681.0], [69.5, 681.0], [69.6, 681.0], [69.7, 682.0], [69.8, 682.0], [69.9, 682.0], [70.0, 683.0], [70.1, 683.0], [70.2, 683.0], [70.3, 683.0], [70.4, 684.0], [70.5, 684.0], [70.6, 684.0], [70.7, 685.0], [70.8, 685.0], [70.9, 685.0], [71.0, 686.0], [71.1, 686.0], [71.2, 686.0], [71.3, 687.0], [71.4, 687.0], [71.5, 687.0], [71.6, 687.0], [71.7, 688.0], [71.8, 688.0], [71.9, 689.0], [72.0, 689.0], [72.1, 689.0], [72.2, 690.0], [72.3, 690.0], [72.4, 690.0], [72.5, 691.0], [72.6, 691.0], [72.7, 691.0], [72.8, 692.0], [72.9, 692.0], [73.0, 692.0], [73.1, 693.0], [73.2, 693.0], [73.3, 693.0], [73.4, 694.0], [73.5, 694.0], [73.6, 694.0], [73.7, 695.0], [73.8, 695.0], [73.9, 695.0], [74.0, 696.0], [74.1, 696.0], [74.2, 696.0], [74.3, 697.0], [74.4, 697.0], [74.5, 697.0], [74.6, 697.0], [74.7, 698.0], [74.8, 698.0], [74.9, 699.0], [75.0, 699.0], [75.1, 699.0], [75.2, 700.0], [75.3, 700.0], [75.4, 700.0], [75.5, 701.0], [75.6, 701.0], [75.7, 702.0], [75.8, 702.0], [75.9, 703.0], [76.0, 703.0], [76.1, 703.0], [76.2, 704.0], [76.3, 704.0], [76.4, 704.0], [76.5, 705.0], [76.6, 705.0], [76.7, 705.0], [76.8, 706.0], [76.9, 706.0], [77.0, 706.0], [77.1, 707.0], [77.2, 707.0], [77.3, 707.0], [77.4, 708.0], [77.5, 708.0], [77.6, 709.0], [77.7, 709.0], [77.8, 709.0], [77.9, 710.0], [78.0, 710.0], [78.1, 711.0], [78.2, 711.0], [78.3, 712.0], [78.4, 712.0], [78.5, 713.0], [78.6, 713.0], [78.7, 713.0], [78.8, 714.0], [78.9, 714.0], [79.0, 715.0], [79.1, 715.0], [79.2, 715.0], [79.3, 716.0], [79.4, 716.0], [79.5, 717.0], [79.6, 717.0], [79.7, 718.0], [79.8, 718.0], [79.9, 718.0], [80.0, 719.0], [80.1, 719.0], [80.2, 720.0], [80.3, 720.0], [80.4, 720.0], [80.5, 721.0], [80.6, 721.0], [80.7, 722.0], [80.8, 722.0], [80.9, 722.0], [81.0, 723.0], [81.1, 723.0], [81.2, 724.0], [81.3, 724.0], [81.4, 725.0], [81.5, 726.0], [81.6, 726.0], [81.7, 726.0], [81.8, 727.0], [81.9, 728.0], [82.0, 728.0], [82.1, 729.0], [82.2, 729.0], [82.3, 730.0], [82.4, 730.0], [82.5, 731.0], [82.6, 731.0], [82.7, 732.0], [82.8, 732.0], [82.9, 733.0], [83.0, 734.0], [83.1, 734.0], [83.2, 735.0], [83.3, 736.0], [83.4, 737.0], [83.5, 738.0], [83.6, 739.0], [83.7, 739.0], [83.8, 740.0], [83.9, 741.0], [84.0, 742.0], [84.1, 742.0], [84.2, 743.0], [84.3, 743.0], [84.4, 744.0], [84.5, 745.0], [84.6, 746.0], [84.7, 746.0], [84.8, 747.0], [84.9, 747.0], [85.0, 748.0], [85.1, 749.0], [85.2, 749.0], [85.3, 750.0], [85.4, 751.0], [85.5, 751.0], [85.6, 752.0], [85.7, 753.0], [85.8, 754.0], [85.9, 755.0], [86.0, 756.0], [86.1, 757.0], [86.2, 758.0], [86.3, 759.0], [86.4, 760.0], [86.5, 761.0], [86.6, 762.0], [86.7, 763.0], [86.8, 764.0], [86.9, 766.0], [87.0, 767.0], [87.1, 768.0], [87.2, 769.0], [87.3, 770.0], [87.4, 771.0], [87.5, 772.0], [87.6, 773.0], [87.7, 774.0], [87.8, 775.0], [87.9, 776.0], [88.0, 777.0], [88.1, 778.0], [88.2, 779.0], [88.3, 780.0], [88.4, 781.0], [88.5, 782.0], [88.6, 784.0], [88.7, 785.0], [88.8, 787.0], [88.9, 789.0], [89.0, 791.0], [89.1, 793.0], [89.2, 795.0], [89.3, 798.0], [89.4, 802.0], [89.5, 805.0], [89.6, 807.0], [89.7, 809.0], [89.8, 811.0], [89.9, 813.0], [90.0, 815.0], [90.1, 817.0], [90.2, 819.0], [90.3, 822.0], [90.4, 824.0], [90.5, 825.0], [90.6, 827.0], [90.7, 828.0], [90.8, 830.0], [90.9, 832.0], [91.0, 835.0], [91.1, 837.0], [91.2, 840.0], [91.3, 843.0], [91.4, 847.0], [91.5, 849.0], [91.6, 852.0], [91.7, 854.0], [91.8, 857.0], [91.9, 859.0], [92.0, 861.0], [92.1, 862.0], [92.2, 864.0], [92.3, 866.0], [92.4, 867.0], [92.5, 868.0], [92.6, 870.0], [92.7, 872.0], [92.8, 875.0], [92.9, 878.0], [93.0, 880.0], [93.1, 884.0], [93.2, 888.0], [93.3, 891.0], [93.4, 894.0], [93.5, 898.0], [93.6, 901.0], [93.7, 905.0], [93.8, 908.0], [93.9, 912.0], [94.0, 916.0], [94.1, 920.0], [94.2, 925.0], [94.3, 930.0], [94.4, 934.0], [94.5, 939.0], [94.6, 943.0], [94.7, 947.0], [94.8, 954.0], [94.9, 959.0], [95.0, 966.0], [95.1, 980.0], [95.2, 991.0], [95.3, 1005.0], [95.4, 1027.0], [95.5, 1045.0], [95.6, 1074.0], [95.7, 1088.0], [95.8, 1110.0], [95.9, 1127.0], [96.0, 1140.0], [96.1, 1150.0], [96.2, 1161.0], [96.3, 1183.0], [96.4, 1205.0], [96.5, 1236.0], [96.6, 1283.0], [96.7, 1340.0], [96.8, 1376.0], [96.9, 1395.0], [97.0, 1410.0], [97.1, 1435.0], [97.2, 1445.0], [97.3, 1465.0], [97.4, 1479.0], [97.5, 1490.0], [97.6, 1510.0], [97.7, 1528.0], [97.8, 1543.0], [97.9, 1559.0], [98.0, 1578.0], [98.1, 1595.0], [98.2, 1616.0], [98.3, 1634.0], [98.4, 1652.0], [98.5, 1672.0], [98.6, 1693.0], [98.7, 1710.0], [98.8, 1728.0], [98.9, 1761.0], [99.0, 1793.0], [99.1, 1828.0], [99.2, 1861.0], [99.3, 1906.0], [99.4, 1977.0], [99.5, 2072.0], [99.6, 2162.0], [99.7, 2231.0], [99.8, 2377.0], [99.9, 2557.0], [100.0, 2974.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 30903.0, "series": [{"data": [[0.0, 492.0], [600.0, 29776.0], [700.0, 12783.0], [800.0, 3769.0], [900.0, 1552.0], [1000.0, 441.0], [1100.0, 559.0], [1200.0, 239.0], [1300.0, 256.0], [1400.0, 560.0], [1500.0, 517.0], [100.0, 1013.0], [1600.0, 466.0], [1700.0, 337.0], [1800.0, 240.0], [1900.0, 140.0], [2000.0, 74.0], [2100.0, 110.0], [2300.0, 47.0], [2200.0, 103.0], [2400.0, 57.0], [2500.0, 51.0], [2600.0, 22.0], [2700.0, 8.0], [2800.0, 11.0], [2900.0, 21.0], [200.0, 369.0], [300.0, 775.0], [400.0, 4233.0], [500.0, 30903.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 38.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 80676.0, "series": [{"data": [[0.0, 7008.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 80676.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2202.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 38.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 979.037547105173, "minX": 1.75235634E12, "maxY": 990.4663121151252, "series": [{"data": [[1.75235634E12, 979.037547105173], [1.7523564E12, 990.4663121151252]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523564E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 19.0, "minX": 1.0, "maxY": 1071.0, "series": [{"data": [[2.0, 657.0], [3.0, 681.0], [4.0, 689.0], [5.0, 720.0], [6.0, 721.0], [7.0, 724.0], [8.0, 721.0], [9.0, 718.0], [10.0, 724.0], [11.0, 723.0], [12.0, 730.0], [13.0, 730.0], [14.0, 748.0], [15.0, 756.0], [16.0, 767.0], [17.0, 775.0], [18.0, 781.0], [19.0, 781.0], [20.0, 793.0], [21.0, 802.0], [22.0, 800.0], [23.0, 799.0], [24.0, 797.0], [25.0, 798.0], [26.0, 798.0], [27.0, 798.0], [28.0, 799.0], [29.0, 797.0], [30.0, 805.0], [31.0, 805.0], [33.0, 811.0], [32.0, 808.0], [35.0, 814.0], [34.0, 814.0], [37.0, 820.0], [36.0, 820.0], [39.0, 817.0], [38.0, 816.0], [41.0, 817.0], [40.0, 816.0], [42.0, 816.0], [45.0, 419.0], [44.0, 617.5], [47.0, 419.0], [46.0, 816.0], [49.0, 418.0], [48.0, 813.0], [51.0, 418.0], [50.0, 814.0], [53.0, 473.0], [52.0, 813.0], [54.0, 427.0], [57.0, 550.0], [56.0, 670.5], [59.0, 638.5], [61.0, 456.0], [60.0, 819.0], [62.0, 548.0], [67.0, 613.0], [66.0, 826.0], [65.0, 595.0], [64.0, 705.0], [70.0, 458.0], [69.0, 458.0], [68.0, 830.0], [75.0, 563.0], [73.0, 833.0], [72.0, 723.0], [79.0, 510.0], [78.0, 836.0], [77.0, 566.0], [83.0, 510.0], [82.0, 647.0], [81.0, 842.0], [80.0, 629.0], [87.0, 509.0], [86.0, 655.0], [85.0, 850.0], [84.0, 654.0], [91.0, 671.0], [90.0, 509.0], [89.0, 658.0], [88.0, 857.0], [95.0, 855.0], [94.0, 541.0], [93.0, 676.0], [92.0, 856.0], [99.0, 856.0], [98.0, 676.0], [97.0, 674.0], [96.0, 541.0], [103.0, 676.0], [102.0, 860.0], [101.0, 542.0], [100.0, 540.0], [107.0, 610.5], [105.0, 637.5], [111.0, 545.0], [110.0, 867.0], [109.0, 415.0], [108.0, 680.0], [115.0, 567.0], [114.0, 420.0], [113.0, 549.0], [112.0, 694.0], [119.0, 699.0], [118.0, 429.0], [117.0, 696.0], [116.0, 421.0], [122.0, 702.0], [121.0, 430.0], [120.0, 586.0], [127.0, 705.0], [126.0, 438.0], [125.0, 704.0], [124.0, 735.5], [135.0, 709.0], [134.0, 447.0], [133.0, 591.0], [132.0, 885.0], [131.0, 438.0], [130.0, 706.0], [129.0, 884.0], [128.0, 590.0], [143.0, 594.0], [142.0, 711.0], [141.0, 888.0], [140.0, 661.5], [139.0, 592.0], [151.0, 601.0], [150.0, 714.0], [149.0, 596.0], [148.0, 890.0], [147.0, 463.0], [146.0, 711.0], [145.0, 675.0], [159.0, 831.0], [157.0, 462.0], [156.0, 610.0], [155.0, 462.0], [154.0, 891.0], [153.0, 461.0], [152.0, 890.0], [167.0, 802.0], [166.0, 761.0], [163.0, 540.5], [161.0, 771.0], [160.0, 891.0], [175.0, 806.0], [174.0, 894.0], [173.0, 652.5], [171.0, 622.0], [170.0, 621.0], [169.0, 687.0], [183.0, 890.0], [182.0, 503.0], [181.0, 808.0], [180.0, 806.0], [179.0, 502.0], [178.0, 893.0], [177.0, 622.0], [176.0, 501.0], [190.0, 749.0], [188.0, 703.5], [186.0, 686.0], [185.0, 658.5], [199.0, 813.0], [198.0, 889.0], [197.0, 670.5], [195.0, 698.0], [194.0, 705.5], [192.0, 749.0], [207.0, 814.0], [206.0, 891.0], [205.0, 528.0], [204.0, 739.0], [203.0, 889.0], [202.0, 815.0], [201.0, 720.0], [200.0, 528.0], [215.0, 890.0], [214.0, 815.0], [213.0, 569.0], [212.0, 820.0], [210.0, 815.0], [209.0, 747.0], [208.0, 561.0], [223.0, 691.0], [221.0, 890.0], [220.0, 815.0], [219.0, 890.0], [218.0, 750.0], [217.0, 568.0], [216.0, 749.0], [231.0, 816.0], [230.0, 815.0], [229.0, 586.0], [228.0, 891.0], [227.0, 890.0], [226.0, 577.0], [225.0, 816.0], [224.0, 751.0], [239.0, 587.0], [238.0, 853.5], [237.0, 586.0], [235.0, 748.0], [234.0, 742.0], [247.0, 892.0], [246.0, 668.0], [244.0, 891.0], [243.0, 818.0], [242.0, 748.0], [241.0, 853.5], [255.0, 750.0], [254.0, 823.0], [253.0, 671.0], [251.0, 891.0], [250.0, 706.0], [248.0, 748.0], [270.0, 748.0], [271.0, 591.0], [269.0, 891.0], [268.0, 747.0], [267.0, 592.0], [266.0, 824.0], [265.0, 746.0], [264.0, 892.0], [263.0, 823.0], [259.0, 823.0], [258.0, 768.3333333333334], [262.0, 592.0], [261.0, 748.0], [260.0, 892.0], [286.0, 841.0], [287.0, 898.0], [285.0, 896.0], [284.0, 768.0], [283.0, 896.0], [282.0, 717.5], [280.0, 765.0], [279.0, 824.0], [273.0, 596.0], [272.0, 823.0], [275.0, 747.0], [274.0, 894.0], [278.0, 745.0], [276.0, 822.0], [302.0, 842.0], [303.0, 781.0], [301.0, 648.0], [300.0, 778.0], [299.0, 898.0], [298.0, 841.0], [297.0, 636.0], [296.0, 837.0], [294.0, 842.0], [288.0, 770.0], [291.0, 688.0], [289.0, 841.0], [293.0, 777.0], [292.0, 898.0], [316.0, 732.0], [318.0, 678.0], [319.0, 793.0], [317.0, 902.0], [314.0, 902.0], [313.0, 730.5], [311.0, 785.0], [305.0, 842.0], [304.0, 900.0], [307.0, 784.0], [306.0, 782.0], [309.0, 792.0], [308.0, 902.0], [333.0, 702.0], [335.0, 811.5], [332.0, 903.0], [323.0, 825.0], [322.0, 793.0], [321.0, 793.0], [331.0, 795.0], [330.0, 826.0], [329.0, 901.0], [328.0, 695.0], [327.0, 824.0], [326.0, 792.0], [325.0, 688.0], [324.0, 902.0], [350.0, 705.0], [351.0, 826.0], [349.0, 904.0], [348.0, 826.0], [347.0, 704.0], [346.0, 903.0], [345.0, 704.0], [344.0, 826.0], [343.0, 796.0], [337.0, 904.0], [336.0, 706.0], [339.0, 825.0], [338.0, 797.0], [342.0, 864.5], [340.0, 705.0], [366.0, 234.5], [367.0, 162.4], [365.0, 812.0], [364.0, 826.0], [363.0, 810.0], [362.0, 805.0], [360.0, 794.0], [359.0, 907.0], [355.0, 904.0], [352.0, 802.0], [356.0, 756.0], [369.0, 219.2045454545454], [368.0, 19.0], [370.0, 286.5], [371.0, 200.7037037037037], [372.0, 323.77777777777777], [373.0, 228.16666666666666], [375.0, 297.75], [374.0, 908.0], [376.0, 214.0], [382.0, 560.5], [383.0, 712.0], [380.0, 594.8333333333334], [381.0, 456.0], [377.0, 191.4], [378.0, 431.5], [379.0, 179.3116438356164], [385.0, 503.5], [387.0, 338.0], [386.0, 713.0], [396.0, 712.0], [388.0, 596.6666666666666], [389.0, 504.0], [390.0, 557.0], [391.0, 696.0], [384.0, 816.0], [394.0, 473.28571428571433], [393.0, 825.0], [392.0, 712.0], [395.0, 908.0], [397.0, 494.5], [399.0, 716.0], [398.0, 826.0], [412.0, 526.0], [402.0, 371.5], [400.0, 404.6], [401.0, 908.0], [403.0, 456.5], [406.0, 464.3333333333333], [405.0, 835.0], [404.0, 826.0], [407.0, 531.0], [408.0, 480.75], [409.0, 701.5], [410.0, 415.0], [411.0, 838.0], [413.0, 414.0], [415.0, 721.0], [414.0, 839.0], [429.0, 517.6666666666666], [416.0, 700.0], [417.0, 393.33333333333337], [418.0, 722.0], [428.0, 909.0], [419.0, 839.0], [420.0, 357.75], [421.0, 867.5], [422.0, 593.3333333333334], [423.0, 439.5], [424.0, 508.5], [425.0, 874.0], [427.0, 720.0], [426.0, 827.0], [431.0, 585.0], [430.0, 828.0], [444.0, 563.0], [432.0, 618.0], [435.0, 654.3333333333334], [434.0, 844.0], [433.0, 718.0], [436.0, 617.3333333333334], [437.0, 497.75], [439.0, 878.0], [440.0, 500.5], [442.0, 432.66666666666663], [441.0, 827.0], [443.0, 814.0], [445.0, 822.6666666666666], [446.0, 370.0], [447.0, 808.0], [460.0, 520.3333333333334], [449.0, 468.5], [448.0, 829.0], [450.0, 635.0], [451.0, 505.5], [454.0, 534.0], [453.0, 832.0], [452.0, 850.0], [455.0, 717.0], [456.0, 694.0], [459.0, 336.5], [458.0, 718.0], [457.0, 850.0], [463.0, 514.3333333333334], [462.0, 913.0], [461.0, 835.0], [476.0, 430.25], [467.0, 396.5], [466.0, 874.0], [464.0, 718.0], [471.0, 852.0], [470.0, 915.0], [468.0, 515.0], [469.0, 475.25], [472.0, 472.0], [475.0, 539.6666666666666], [474.0, 875.5], [479.0, 254.0], [478.0, 717.0], [477.0, 840.0], [492.0, 472.2], [481.0, 770.3333333333334], [480.0, 547.0], [487.0, 858.0], [486.0, 921.0], [485.0, 841.0], [484.0, 858.0], [483.0, 444.75], [482.0, 717.0], [488.0, 442.8], [489.0, 425.5], [490.0, 103.0], [491.0, 614.6666666666666], [494.0, 479.0], [493.0, 31.0], [508.0, 85.0], [497.0, 90.5], [496.0, 520.6], [503.0, 39.0], [498.0, 480.5], [499.0, 842.0], [501.0, 588.75], [502.0, 494.0], [504.0, 413.5], [505.0, 465.5], [506.0, 395.3333333333333], [507.0, 860.0], [509.0, 517.6666666666666], [510.0, 431.5], [511.0, 85.5], [526.0, 501.8], [513.0, 488.5], [514.0, 41.0], [515.0, 274.25], [518.0, 350.4], [517.0, 851.5], [519.0, 76.5], [529.0, 429.3333333333333], [530.0, 861.0], [543.0, 729.0], [539.0, 635.6666666666666], [538.0, 636.5], [541.0, 373.2857142857143], [536.0, 127.0], [537.0, 377.0], [532.0, 606.0], [535.0, 534.6666666666666], [534.0, 788.5], [521.0, 495.8], [522.0, 845.0], [523.0, 344.0], [524.0, 373.5], [527.0, 485.0], [512.0, 859.0], [549.0, 768.5], [557.0, 491.0], [544.0, 590.0], [546.0, 570.3333333333334], [547.0, 136.0], [548.0, 604.0], [563.0, 640.6666666666666], [561.0, 726.0], [560.0, 893.0], [574.0, 760.0], [573.0, 725.0], [570.0, 698.5], [571.0, 919.0], [572.0, 422.0], [568.0, 692.25], [569.0, 137.0], [564.0, 382.0], [565.0, 680.3333333333334], [566.0, 339.0], [567.0, 400.0], [552.0, 486.55555555555554], [554.0, 128.0], [555.0, 551.8], [556.0, 728.0], [559.0, 260.75], [558.0, 333.33333333333337], [582.0, 127.0], [588.0, 363.0], [577.0, 425.0], [576.0, 526.6], [589.0, 428.0], [590.0, 863.0], [578.0, 398.0], [580.0, 917.0], [579.0, 794.5], [583.0, 399.77777777777777], [600.0, 868.0], [601.0, 126.66666666666667], [602.0, 134.0], [603.0, 636.0], [604.0, 358.8], [607.0, 589.6666666666666], [605.0, 923.0], [592.0, 550.6666666666667], [593.0, 498.5], [594.0, 409.5], [597.0, 122.0], [596.0, 722.0], [595.0, 561.3333333333334], [598.0, 446.75], [599.0, 629.75], [585.0, 308.66666666666663], [586.0, 661.25], [587.0, 370.0], [615.0, 131.33333333333334], [621.0, 358.0], [610.0, 587.75], [608.0, 483.5], [612.0, 639.3333333333334], [613.0, 317.3333333333333], [614.0, 588.25], [624.0, 424.5], [639.0, 343.3333333333333], [635.0, 765.5], [637.0, 794.5], [638.0, 393.3333333333333], [633.0, 292.0], [632.0, 794.0], [634.0, 520.5], [625.0, 136.0], [627.0, 398.3333333333333], [626.0, 863.0], [629.0, 610.4285714285714], [631.0, 562.0], [630.0, 866.0], [616.0, 563.6], [618.0, 554.3333333333334], [620.0, 500.0], [622.0, 480.16666666666663], [623.0, 483.0], [647.0, 552.0], [642.0, 129.0], [641.0, 582.75], [654.0, 587.3333333333334], [655.0, 382.5], [643.0, 655.25], [644.0, 466.25], [645.0, 712.0], [646.0, 643.25], [656.0, 450.25], [658.0, 856.0], [657.0, 560.0], [671.0, 307.5], [670.0, 913.0], [667.0, 145.66666666666666], [668.0, 789.5], [669.0, 509.0], [665.0, 343.3333333333333], [664.0, 725.0], [666.0, 403.0], [659.0, 458.66666666666663], [660.0, 519.5], [661.0, 544.0], [663.0, 401.8], [662.0, 855.0], [648.0, 518.3333333333334], [649.0, 539.6666666666666], [650.0, 297.6666666666667], [652.0, 917.0], [651.0, 855.0], [653.0, 566.3333333333334], [675.0, 379.33333333333337], [673.0, 404.55555555555554], [672.0, 820.0], [674.0, 913.0], [677.0, 371.16666666666663], [676.0, 46.0], [679.0, 826.0], [696.0, 507.5], [697.0, 557.1666666666667], [698.0, 453.5], [699.0, 540.5], [700.0, 443.33333333333337], [701.0, 407.8], [702.0, 720.0], [680.0, 333.25], [683.0, 521.2], [685.0, 153.33333333333334], [684.0, 859.0], [686.0, 542.6666666666666], [687.0, 327.5], [688.0, 488.25], [690.0, 492.0], [689.0, 792.5], [691.0, 308.25], [695.0, 523.0], [694.0, 633.75], [693.0, 542.0], [692.0, 827.75], [708.0, 445.5], [707.0, 447.16666666666663], [706.0, 869.0], [705.0, 542.3333333333334], [704.0, 868.0], [710.0, 807.75], [709.0, 868.0], [711.0, 347.3333333333333], [712.0, 295.56490384615404], [713.0, 204.0], [718.0, 610.0], [717.0, 613.0], [716.0, 865.0], [715.0, 872.0], [714.0, 867.0], [719.0, 545.4285714285714], [720.0, 534.8181818181818], [721.0, 727.0], [733.0, 350.25], [734.0, 457.0], [729.0, 577.2], [728.0, 871.0], [731.0, 731.0], [730.0, 456.0], [732.0, 606.0], [722.0, 611.5], [723.0, 406.33333333333337], [724.0, 796.5], [725.0, 536.5], [727.0, 546.3333333333334], [726.0, 897.0], [741.0, 499.33333333333337], [749.0, 579.5], [736.0, 273.5], [737.0, 667.25], [739.0, 406.0], [738.0, 681.4], [740.0, 634.75], [754.0, 524.3333333333334], [755.0, 549.0], [767.0, 320.0], [753.0, 874.0], [752.0, 800.5], [763.0, 510.7142857142857], [762.0, 878.0], [764.0, 460.5], [765.0, 351.0], [760.0, 612.0], [743.0, 555.0], [742.0, 874.0], [761.0, 459.0], [756.0, 543.5], [757.0, 528.0], [759.0, 522.0], [758.0, 599.6666666666666], [744.0, 530.0], [745.0, 732.0], [746.0, 400.75], [748.0, 706.5], [751.0, 483.83333333333337], [774.0, 503.0], [772.0, 527.0], [770.0, 647.0], [769.0, 870.0], [768.0, 683.0], [771.0, 426.5], [783.0, 869.5], [782.0, 474.5], [781.0, 555.3333333333334], [773.0, 522.5], [778.0, 575.5], [777.0, 653.8], [776.0, 869.0], [779.0, 578.0], [784.0, 502.66666666666663], [785.0, 795.0], [787.0, 398.5], [786.0, 604.3333333333333], [792.0, 457.23999999999995], [775.0, 875.5], [795.0, 875.5], [793.0, 721.0], [798.0, 871.0], [797.0, 470.0], [799.0, 396.0], [788.0, 550.0], [791.0, 658.8333333333334], [790.0, 470.0], [826.0, 497.5], [803.0, 391.875], [807.0, 612.0], [806.0, 880.0], [804.0, 682.6], [825.0, 678.1111111111111], [824.0, 799.0], [811.0, 293.75], [810.0, 720.0], [809.0, 634.0], [808.0, 554.0], [812.0, 408.18181818181824], [813.0, 449.125], [815.0, 475.0], [802.0, 873.0], [800.0, 720.0], [814.0, 471.5], [817.0, 412.66666666666663], [820.0, 316.25], [819.0, 710.8333333333333], [818.0, 822.0], [821.0, 680.2], [822.0, 698.0], [823.0, 630.25], [827.0, 346.5], [828.0, 665.8571428571429], [830.0, 875.5], [816.0, 820.6666666666666], [829.0, 885.0], [834.0, 410.5], [833.0, 239.0], [832.0, 789.5], [839.0, 386.5], [837.0, 652.8], [836.0, 862.0], [835.0, 820.6666666666666], [856.0, 861.5], [857.0, 414.0], [858.0, 732.8], [859.0, 681.8], [861.0, 637.4999999999999], [860.0, 557.4], [862.0, 615.0833333333335], [863.0, 721.0], [840.0, 497.5], [841.0, 629.5], [845.0, 671.4285714285714], [844.0, 474.5], [843.0, 715.0], [842.0, 860.0], [846.0, 875.5], [847.0, 713.0], [848.0, 584.4285714285714], [849.0, 216.5], [850.0, 785.5], [852.0, 680.2], [851.0, 864.0], [853.0, 619.0], [854.0, 454.5], [855.0, 633.75], [867.0, 593.1666666666666], [870.0, 617.6666666666666], [869.0, 407.5], [868.0, 870.3333333333334], [888.0, 639.0], [891.0, 606.0], [890.0, 564.3333333333334], [892.0, 580.25], [893.0, 682.5], [895.0, 865.0], [882.0, 610.3333333333334], [880.0, 889.0], [894.0, 570.3333333333334], [872.0, 397.6666666666667], [874.0, 876.5], [873.0, 618.0], [875.0, 222.0], [877.0, 190.5], [876.0, 789.0], [878.0, 743.3333333333334], [879.0, 563.5], [864.0, 406.5], [866.0, 715.0], [865.0, 820.6666666666666], [883.0, 445.66666666666663], [886.0, 499.0], [885.0, 487.0], [884.0, 681.5], [887.0, 592.75], [900.0, 463.33333333333337], [896.0, 532.0], [899.0, 802.5], [898.0, 485.5], [897.0, 887.0], [911.0, 720.0], [901.0, 277.0], [903.0, 500.0], [902.0, 822.0], [920.0, 531.8], [926.0, 639.0], [925.0, 505.5], [924.0, 791.5], [923.0, 110.0], [922.0, 870.0], [921.0, 414.5], [927.0, 693.2], [905.0, 572.0], [904.0, 718.0], [906.0, 616.2857142857142], [908.0, 193.5], [907.0, 720.0], [909.0, 892.0], [910.0, 602.0], [912.0, 570.0], [914.0, 695.3333333333334], [913.0, 860.0], [919.0, 816.6666666666666], [916.0, 501.0], [952.0, 633.25], [930.0, 1071.0], [929.0, 720.0], [928.0, 861.0], [931.0, 300.6666666666667], [933.0, 549.6666666666666], [932.0, 617.6666666666666], [934.0, 567.0], [942.0, 625.4], [941.0, 566.0], [938.0, 837.75], [936.0, 629.3333333333334], [943.0, 861.0], [948.0, 472.33333333333337], [946.0, 694.5], [944.0, 901.0], [951.0, 123.0], [950.0, 876.0], [959.0, 675.1111111111111], [958.0, 893.5], [957.0, 840.75], [955.0, 602.5], [954.0, 878.0], [953.0, 722.0], [985.0, 795.2380952380952], [961.0, 652.4], [967.0, 572.2], [966.0, 502.0], [965.0, 788.0], [964.0, 895.5], [963.0, 125.0], [962.0, 800.0], [984.0, 1031.6], [972.0, 751.0], [970.0, 330.0], [969.0, 883.0], [968.0, 646.75], [973.0, 443.8], [975.0, 826.0], [991.0, 882.1666666666667], [977.0, 508.5], [976.0, 662.0], [979.0, 654.75], [978.0, 833.75], [981.0, 765.75], [980.0, 706.4761904761906], [983.0, 771.2], [982.0, 427.0], [990.0, 931.375], [989.0, 134.0], [988.0, 898.4], [987.0, 804.5], [986.0, 652.0], [994.0, 406.66666666666663], [992.0, 695.6666666666666], [997.0, 417.0], [1000.0, 669.055875178351], [999.0, 677.6999999999999], [998.0, 666.9473684210526], [996.0, 655.0833333333333], [995.0, 671.5], [993.0, 780.1025641025642], [1.0, 557.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[986.7564498910067, 663.3364174191523]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 110777.6, "minX": 1.75235634E12, "maxY": 274171.3, "series": [{"data": [[1.75235634E12, 133008.3], [1.7523564E12, 274171.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235634E12, 110777.6], [1.7523564E12, 230789.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523564E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 565.0205207262787, "minX": 1.75235634E12, "maxY": 710.5890440280474, "series": [{"data": [[1.75235634E12, 565.0205207262787], [1.7523564E12, 710.5890440280474]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523564E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 564.9346351490256, "minX": 1.75235634E12, "maxY": 710.5843514341275, "series": [{"data": [[1.75235634E12, 564.9346351490256], [1.7523564E12, 710.5843514341275]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523564E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.003507096519247874, "minX": 1.75235634E12, "maxY": 5.460842754367887, "series": [{"data": [[1.75235634E12, 5.460842754367887], [1.7523564E12, 0.003507096519247874]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523564E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.75235634E12, "maxY": 2974.0, "series": [{"data": [[1.75235634E12, 2408.0], [1.7523564E12, 2974.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235634E12, 699.0], [1.7523564E12, 794.9000000000015]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235634E12, 950.0], [1.7523564E12, 915.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235634E12, 786.0], [1.7523564E12, 853.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235634E12, 4.0], [1.7523564E12, 31.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235634E12, 583.0], [1.7523564E12, 674.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523564E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 102.0, "maxY": 1693.0, "series": [{"data": [[579.0, 1491.0], [741.0, 1614.0], [749.0, 1693.0], [847.0, 1588.0], [1030.0, 1363.0], [1194.0, 883.0], [1199.0, 843.0], [1264.0, 850.5], [1385.0, 704.0], [1456.0, 610.0], [1454.0, 700.0], [1448.0, 835.0], [1529.0, 637.0], [1487.0, 608.0], [1503.0, 659.0], [1476.0, 689.0], [1486.0, 712.0], [1485.0, 733.0], [1520.0, 627.0], [1528.0, 647.0], [1509.0, 618.0], [1499.0, 674.0], [1508.0, 636.5], [1532.0, 671.0], [1505.0, 674.0], [1510.0, 636.5], [1496.0, 671.0], [1570.0, 643.0], [1556.0, 648.0], [1548.0, 589.0], [1544.0, 660.0], [1571.0, 606.0], [1555.0, 621.0], [1586.0, 625.0], [1567.0, 619.0], [1603.0, 636.0], [1611.0, 629.0], [1618.0, 617.0], [1643.0, 606.0], [1656.0, 621.5], [1621.0, 615.0], [1612.0, 620.0], [1627.0, 590.0], [1600.0, 609.0], [1604.0, 619.5], [1683.0, 562.0], [1695.0, 579.0], [1694.0, 570.0], [1702.0, 575.0], [1689.0, 601.0], [1726.0, 599.0], [1769.0, 280.0], [1751.0, 532.0], [1737.0, 570.0], [1734.0, 573.0], [1823.0, 568.0], [1857.0, 552.0], [2070.0, 474.0], [102.0, 23.5], [161.0, 1381.0], [369.0, 775.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1769.0, 2.0], [1751.0, 98.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2070.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 102.0, "maxY": 1693.0, "series": [{"data": [[579.0, 1491.0], [741.0, 1614.0], [749.0, 1693.0], [847.0, 1588.0], [1030.0, 1363.0], [1194.0, 883.0], [1199.0, 843.0], [1264.0, 850.5], [1385.0, 704.0], [1456.0, 610.0], [1454.0, 700.0], [1448.0, 835.0], [1529.0, 637.0], [1487.0, 608.0], [1503.0, 659.0], [1476.0, 689.0], [1486.0, 712.0], [1485.0, 733.0], [1520.0, 627.0], [1528.0, 647.0], [1509.0, 618.0], [1499.0, 674.0], [1508.0, 636.5], [1532.0, 671.0], [1505.0, 674.0], [1510.0, 636.5], [1496.0, 671.0], [1570.0, 643.0], [1556.0, 648.0], [1548.0, 589.0], [1544.0, 660.0], [1571.0, 606.0], [1555.0, 621.0], [1586.0, 625.0], [1567.0, 619.0], [1603.0, 636.0], [1611.0, 629.0], [1618.0, 617.0], [1643.0, 606.0], [1656.0, 621.5], [1621.0, 615.0], [1612.0, 620.0], [1627.0, 590.0], [1600.0, 609.0], [1604.0, 619.5], [1683.0, 562.0], [1695.0, 579.0], [1694.0, 570.0], [1702.0, 575.0], [1689.0, 601.0], [1726.0, 599.0], [1769.0, 279.5], [1751.0, 532.0], [1737.0, 570.0], [1734.0, 573.0], [1823.0, 568.0], [1857.0, 552.0], [2070.0, 474.0], [102.0, 23.5], [161.0, 1381.0], [369.0, 775.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1769.0, 0.0], [1751.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2070.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 503.1666666666667, "minX": 1.75235634E12, "maxY": 995.5666666666667, "series": [{"data": [[1.75235634E12, 503.1666666666667], [1.7523564E12, 995.5666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523564E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.75235634E12, "maxY": 1012.2333333333333, "series": [{"data": [[1.75235634E12, 485.8666666666667], [1.7523564E12, 1012.2333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75235634E12, 0.6333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523564E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.75235634E12, "maxY": 1012.2333333333333, "series": [{"data": [[1.75235634E12, 485.8666666666667], [1.7523564E12, 1012.2333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75235634E12, 0.6333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523564E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.75235634E12, "maxY": 1012.2333333333333, "series": [{"data": [[1.75235634E12, 485.8666666666667], [1.7523564E12, 1012.2333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75235634E12, 0.6333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523564E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

