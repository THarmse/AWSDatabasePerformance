/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 4785.0, "series": [{"data": [[0.0, 0.0], [0.1, 7.0], [0.2, 12.0], [0.3, 17.0], [0.4, 22.0], [0.5, 27.0], [0.6, 30.0], [0.7, 33.0], [0.8, 36.0], [0.9, 40.0], [1.0, 44.0], [1.1, 45.0], [1.2, 46.0], [1.3, 47.0], [1.4, 48.0], [1.5, 49.0], [1.6, 50.0], [1.7, 52.0], [1.8, 53.0], [1.9, 54.0], [2.0, 56.0], [2.1, 60.0], [2.2, 62.0], [2.3, 67.0], [2.4, 71.0], [2.5, 73.0], [2.6, 74.0], [2.7, 75.0], [2.8, 76.0], [2.9, 76.0], [3.0, 77.0], [3.1, 78.0], [3.2, 79.0], [3.3, 79.0], [3.4, 80.0], [3.5, 80.0], [3.6, 81.0], [3.7, 81.0], [3.8, 82.0], [3.9, 82.0], [4.0, 83.0], [4.1, 84.0], [4.2, 84.0], [4.3, 85.0], [4.4, 86.0], [4.5, 87.0], [4.6, 87.0], [4.7, 88.0], [4.8, 88.0], [4.9, 89.0], [5.0, 89.0], [5.1, 90.0], [5.2, 90.0], [5.3, 91.0], [5.4, 91.0], [5.5, 92.0], [5.6, 92.0], [5.7, 93.0], [5.8, 93.0], [5.9, 94.0], [6.0, 94.0], [6.1, 95.0], [6.2, 95.0], [6.3, 96.0], [6.4, 96.0], [6.5, 97.0], [6.6, 97.0], [6.7, 98.0], [6.8, 98.0], [6.9, 99.0], [7.0, 99.0], [7.1, 100.0], [7.2, 100.0], [7.3, 101.0], [7.4, 101.0], [7.5, 102.0], [7.6, 103.0], [7.7, 103.0], [7.8, 104.0], [7.9, 105.0], [8.0, 105.0], [8.1, 106.0], [8.2, 106.0], [8.3, 107.0], [8.4, 107.0], [8.5, 108.0], [8.6, 108.0], [8.7, 109.0], [8.8, 109.0], [8.9, 110.0], [9.0, 110.0], [9.1, 110.0], [9.2, 111.0], [9.3, 111.0], [9.4, 112.0], [9.5, 112.0], [9.6, 113.0], [9.7, 113.0], [9.8, 114.0], [9.9, 114.0], [10.0, 115.0], [10.1, 115.0], [10.2, 116.0], [10.3, 116.0], [10.4, 117.0], [10.5, 117.0], [10.6, 118.0], [10.7, 118.0], [10.8, 119.0], [10.9, 119.0], [11.0, 120.0], [11.1, 120.0], [11.2, 121.0], [11.3, 121.0], [11.4, 122.0], [11.5, 123.0], [11.6, 123.0], [11.7, 124.0], [11.8, 124.0], [11.9, 124.0], [12.0, 125.0], [12.1, 125.0], [12.2, 126.0], [12.3, 126.0], [12.4, 127.0], [12.5, 127.0], [12.6, 128.0], [12.7, 128.0], [12.8, 129.0], [12.9, 130.0], [13.0, 130.0], [13.1, 131.0], [13.2, 132.0], [13.3, 132.0], [13.4, 133.0], [13.5, 134.0], [13.6, 135.0], [13.7, 136.0], [13.8, 136.0], [13.9, 137.0], [14.0, 138.0], [14.1, 139.0], [14.2, 140.0], [14.3, 142.0], [14.4, 144.0], [14.5, 146.0], [14.6, 148.0], [14.7, 149.0], [14.8, 150.0], [14.9, 151.0], [15.0, 153.0], [15.1, 154.0], [15.2, 156.0], [15.3, 157.0], [15.4, 158.0], [15.5, 161.0], [15.6, 162.0], [15.7, 164.0], [15.8, 167.0], [15.9, 171.0], [16.0, 175.0], [16.1, 180.0], [16.2, 182.0], [16.3, 184.0], [16.4, 185.0], [16.5, 187.0], [16.6, 190.0], [16.7, 193.0], [16.8, 195.0], [16.9, 196.0], [17.0, 197.0], [17.1, 199.0], [17.2, 200.0], [17.3, 200.0], [17.4, 201.0], [17.5, 203.0], [17.6, 204.0], [17.7, 204.0], [17.8, 205.0], [17.9, 206.0], [18.0, 207.0], [18.1, 208.0], [18.2, 209.0], [18.3, 210.0], [18.4, 211.0], [18.5, 211.0], [18.6, 212.0], [18.7, 213.0], [18.8, 214.0], [18.9, 214.0], [19.0, 216.0], [19.1, 216.0], [19.2, 217.0], [19.3, 218.0], [19.4, 219.0], [19.5, 221.0], [19.6, 222.0], [19.7, 222.0], [19.8, 223.0], [19.9, 224.0], [20.0, 225.0], [20.1, 226.0], [20.2, 227.0], [20.3, 228.0], [20.4, 229.0], [20.5, 230.0], [20.6, 230.0], [20.7, 231.0], [20.8, 231.0], [20.9, 232.0], [21.0, 232.0], [21.1, 232.0], [21.2, 233.0], [21.3, 233.0], [21.4, 233.0], [21.5, 233.0], [21.6, 234.0], [21.7, 234.0], [21.8, 234.0], [21.9, 235.0], [22.0, 235.0], [22.1, 235.0], [22.2, 235.0], [22.3, 236.0], [22.4, 236.0], [22.5, 236.0], [22.6, 237.0], [22.7, 237.0], [22.8, 237.0], [22.9, 238.0], [23.0, 238.0], [23.1, 238.0], [23.2, 239.0], [23.3, 239.0], [23.4, 239.0], [23.5, 239.0], [23.6, 240.0], [23.7, 240.0], [23.8, 240.0], [23.9, 240.0], [24.0, 241.0], [24.1, 241.0], [24.2, 241.0], [24.3, 241.0], [24.4, 241.0], [24.5, 242.0], [24.6, 242.0], [24.7, 242.0], [24.8, 243.0], [24.9, 243.0], [25.0, 243.0], [25.1, 243.0], [25.2, 244.0], [25.3, 244.0], [25.4, 244.0], [25.5, 244.0], [25.6, 245.0], [25.7, 245.0], [25.8, 245.0], [25.9, 245.0], [26.0, 245.0], [26.1, 245.0], [26.2, 246.0], [26.3, 246.0], [26.4, 246.0], [26.5, 246.0], [26.6, 246.0], [26.7, 247.0], [26.8, 247.0], [26.9, 247.0], [27.0, 247.0], [27.1, 247.0], [27.2, 247.0], [27.3, 248.0], [27.4, 248.0], [27.5, 248.0], [27.6, 248.0], [27.7, 248.0], [27.8, 248.0], [27.9, 249.0], [28.0, 249.0], [28.1, 249.0], [28.2, 249.0], [28.3, 249.0], [28.4, 249.0], [28.5, 249.0], [28.6, 250.0], [28.7, 250.0], [28.8, 250.0], [28.9, 250.0], [29.0, 250.0], [29.1, 250.0], [29.2, 251.0], [29.3, 251.0], [29.4, 251.0], [29.5, 251.0], [29.6, 251.0], [29.7, 251.0], [29.8, 251.0], [29.9, 252.0], [30.0, 252.0], [30.1, 252.0], [30.2, 252.0], [30.3, 252.0], [30.4, 252.0], [30.5, 253.0], [30.6, 253.0], [30.7, 253.0], [30.8, 253.0], [30.9, 253.0], [31.0, 253.0], [31.1, 254.0], [31.2, 254.0], [31.3, 254.0], [31.4, 254.0], [31.5, 254.0], [31.6, 255.0], [31.7, 255.0], [31.8, 255.0], [31.9, 255.0], [32.0, 255.0], [32.1, 256.0], [32.2, 256.0], [32.3, 256.0], [32.4, 256.0], [32.5, 256.0], [32.6, 256.0], [32.7, 257.0], [32.8, 257.0], [32.9, 257.0], [33.0, 257.0], [33.1, 257.0], [33.2, 257.0], [33.3, 258.0], [33.4, 258.0], [33.5, 258.0], [33.6, 258.0], [33.7, 258.0], [33.8, 259.0], [33.9, 259.0], [34.0, 259.0], [34.1, 259.0], [34.2, 259.0], [34.3, 259.0], [34.4, 260.0], [34.5, 260.0], [34.6, 260.0], [34.7, 260.0], [34.8, 260.0], [34.9, 260.0], [35.0, 261.0], [35.1, 261.0], [35.2, 261.0], [35.3, 261.0], [35.4, 261.0], [35.5, 262.0], [35.6, 262.0], [35.7, 262.0], [35.8, 262.0], [35.9, 262.0], [36.0, 262.0], [36.1, 263.0], [36.2, 263.0], [36.3, 263.0], [36.4, 263.0], [36.5, 263.0], [36.6, 264.0], [36.7, 264.0], [36.8, 264.0], [36.9, 264.0], [37.0, 264.0], [37.1, 264.0], [37.2, 264.0], [37.3, 265.0], [37.4, 265.0], [37.5, 265.0], [37.6, 265.0], [37.7, 265.0], [37.8, 265.0], [37.9, 266.0], [38.0, 266.0], [38.1, 266.0], [38.2, 266.0], [38.3, 266.0], [38.4, 267.0], [38.5, 267.0], [38.6, 267.0], [38.7, 267.0], [38.8, 267.0], [38.9, 268.0], [39.0, 268.0], [39.1, 268.0], [39.2, 268.0], [39.3, 268.0], [39.4, 268.0], [39.5, 269.0], [39.6, 269.0], [39.7, 269.0], [39.8, 269.0], [39.9, 269.0], [40.0, 269.0], [40.1, 270.0], [40.2, 270.0], [40.3, 270.0], [40.4, 270.0], [40.5, 270.0], [40.6, 270.0], [40.7, 271.0], [40.8, 271.0], [40.9, 271.0], [41.0, 271.0], [41.1, 271.0], [41.2, 271.0], [41.3, 272.0], [41.4, 272.0], [41.5, 272.0], [41.6, 272.0], [41.7, 272.0], [41.8, 273.0], [41.9, 273.0], [42.0, 273.0], [42.1, 273.0], [42.2, 273.0], [42.3, 274.0], [42.4, 274.0], [42.5, 274.0], [42.6, 274.0], [42.7, 274.0], [42.8, 275.0], [42.9, 275.0], [43.0, 275.0], [43.1, 275.0], [43.2, 275.0], [43.3, 276.0], [43.4, 276.0], [43.5, 276.0], [43.6, 276.0], [43.7, 277.0], [43.8, 277.0], [43.9, 277.0], [44.0, 277.0], [44.1, 277.0], [44.2, 278.0], [44.3, 278.0], [44.4, 278.0], [44.5, 278.0], [44.6, 278.0], [44.7, 279.0], [44.8, 279.0], [44.9, 279.0], [45.0, 279.0], [45.1, 279.0], [45.2, 279.0], [45.3, 280.0], [45.4, 280.0], [45.5, 280.0], [45.6, 280.0], [45.7, 280.0], [45.8, 280.0], [45.9, 281.0], [46.0, 281.0], [46.1, 281.0], [46.2, 281.0], [46.3, 281.0], [46.4, 282.0], [46.5, 282.0], [46.6, 282.0], [46.7, 282.0], [46.8, 282.0], [46.9, 283.0], [47.0, 283.0], [47.1, 283.0], [47.2, 283.0], [47.3, 283.0], [47.4, 284.0], [47.5, 284.0], [47.6, 284.0], [47.7, 284.0], [47.8, 284.0], [47.9, 285.0], [48.0, 285.0], [48.1, 285.0], [48.2, 285.0], [48.3, 285.0], [48.4, 286.0], [48.5, 286.0], [48.6, 286.0], [48.7, 286.0], [48.8, 287.0], [48.9, 287.0], [49.0, 287.0], [49.1, 287.0], [49.2, 287.0], [49.3, 288.0], [49.4, 288.0], [49.5, 288.0], [49.6, 288.0], [49.7, 288.0], [49.8, 289.0], [49.9, 289.0], [50.0, 289.0], [50.1, 289.0], [50.2, 289.0], [50.3, 290.0], [50.4, 290.0], [50.5, 290.0], [50.6, 290.0], [50.7, 291.0], [50.8, 291.0], [50.9, 291.0], [51.0, 291.0], [51.1, 291.0], [51.2, 292.0], [51.3, 292.0], [51.4, 292.0], [51.5, 292.0], [51.6, 292.0], [51.7, 293.0], [51.8, 293.0], [51.9, 293.0], [52.0, 293.0], [52.1, 293.0], [52.2, 293.0], [52.3, 294.0], [52.4, 294.0], [52.5, 294.0], [52.6, 294.0], [52.7, 294.0], [52.8, 294.0], [52.9, 295.0], [53.0, 295.0], [53.1, 295.0], [53.2, 295.0], [53.3, 295.0], [53.4, 296.0], [53.5, 296.0], [53.6, 296.0], [53.7, 296.0], [53.8, 296.0], [53.9, 296.0], [54.0, 297.0], [54.1, 297.0], [54.2, 297.0], [54.3, 297.0], [54.4, 297.0], [54.5, 297.0], [54.6, 298.0], [54.7, 298.0], [54.8, 298.0], [54.9, 298.0], [55.0, 298.0], [55.1, 299.0], [55.2, 299.0], [55.3, 299.0], [55.4, 299.0], [55.5, 299.0], [55.6, 300.0], [55.7, 300.0], [55.8, 300.0], [55.9, 300.0], [56.0, 301.0], [56.1, 301.0], [56.2, 301.0], [56.3, 301.0], [56.4, 301.0], [56.5, 302.0], [56.6, 302.0], [56.7, 302.0], [56.8, 303.0], [56.9, 303.0], [57.0, 303.0], [57.1, 304.0], [57.2, 304.0], [57.3, 304.0], [57.4, 304.0], [57.5, 305.0], [57.6, 305.0], [57.7, 305.0], [57.8, 306.0], [57.9, 306.0], [58.0, 306.0], [58.1, 306.0], [58.2, 307.0], [58.3, 307.0], [58.4, 307.0], [58.5, 307.0], [58.6, 308.0], [58.7, 308.0], [58.8, 308.0], [58.9, 309.0], [59.0, 309.0], [59.1, 309.0], [59.2, 309.0], [59.3, 310.0], [59.4, 310.0], [59.5, 310.0], [59.6, 311.0], [59.7, 311.0], [59.8, 311.0], [59.9, 312.0], [60.0, 312.0], [60.1, 312.0], [60.2, 313.0], [60.3, 313.0], [60.4, 313.0], [60.5, 314.0], [60.6, 314.0], [60.7, 314.0], [60.8, 315.0], [60.9, 315.0], [61.0, 315.0], [61.1, 315.0], [61.2, 316.0], [61.3, 316.0], [61.4, 316.0], [61.5, 317.0], [61.6, 317.0], [61.7, 317.0], [61.8, 318.0], [61.9, 318.0], [62.0, 318.0], [62.1, 319.0], [62.2, 319.0], [62.3, 319.0], [62.4, 320.0], [62.5, 320.0], [62.6, 320.0], [62.7, 321.0], [62.8, 321.0], [62.9, 321.0], [63.0, 322.0], [63.1, 322.0], [63.2, 322.0], [63.3, 323.0], [63.4, 323.0], [63.5, 323.0], [63.6, 324.0], [63.7, 324.0], [63.8, 324.0], [63.9, 325.0], [64.0, 325.0], [64.1, 325.0], [64.2, 326.0], [64.3, 326.0], [64.4, 326.0], [64.5, 327.0], [64.6, 327.0], [64.7, 327.0], [64.8, 328.0], [64.9, 328.0], [65.0, 328.0], [65.1, 329.0], [65.2, 329.0], [65.3, 329.0], [65.4, 330.0], [65.5, 330.0], [65.6, 330.0], [65.7, 331.0], [65.8, 331.0], [65.9, 331.0], [66.0, 332.0], [66.1, 332.0], [66.2, 332.0], [66.3, 333.0], [66.4, 333.0], [66.5, 333.0], [66.6, 334.0], [66.7, 334.0], [66.8, 334.0], [66.9, 335.0], [67.0, 335.0], [67.1, 335.0], [67.2, 336.0], [67.3, 336.0], [67.4, 336.0], [67.5, 337.0], [67.6, 337.0], [67.7, 338.0], [67.8, 338.0], [67.9, 338.0], [68.0, 339.0], [68.1, 339.0], [68.2, 340.0], [68.3, 340.0], [68.4, 341.0], [68.5, 341.0], [68.6, 342.0], [68.7, 342.0], [68.8, 342.0], [68.9, 343.0], [69.0, 343.0], [69.1, 344.0], [69.2, 344.0], [69.3, 344.0], [69.4, 345.0], [69.5, 345.0], [69.6, 345.0], [69.7, 346.0], [69.8, 346.0], [69.9, 346.0], [70.0, 347.0], [70.1, 347.0], [70.2, 347.0], [70.3, 348.0], [70.4, 348.0], [70.5, 348.0], [70.6, 348.0], [70.7, 349.0], [70.8, 349.0], [70.9, 349.0], [71.0, 350.0], [71.1, 350.0], [71.2, 350.0], [71.3, 351.0], [71.4, 351.0], [71.5, 352.0], [71.6, 352.0], [71.7, 352.0], [71.8, 353.0], [71.9, 353.0], [72.0, 353.0], [72.1, 354.0], [72.2, 354.0], [72.3, 355.0], [72.4, 355.0], [72.5, 355.0], [72.6, 356.0], [72.7, 356.0], [72.8, 357.0], [72.9, 357.0], [73.0, 357.0], [73.1, 358.0], [73.2, 358.0], [73.3, 358.0], [73.4, 359.0], [73.5, 359.0], [73.6, 359.0], [73.7, 360.0], [73.8, 360.0], [73.9, 360.0], [74.0, 361.0], [74.1, 361.0], [74.2, 362.0], [74.3, 362.0], [74.4, 363.0], [74.5, 363.0], [74.6, 364.0], [74.7, 364.0], [74.8, 365.0], [74.9, 365.0], [75.0, 365.0], [75.1, 366.0], [75.2, 366.0], [75.3, 367.0], [75.4, 368.0], [75.5, 368.0], [75.6, 369.0], [75.7, 369.0], [75.8, 370.0], [75.9, 370.0], [76.0, 371.0], [76.1, 371.0], [76.2, 372.0], [76.3, 372.0], [76.4, 373.0], [76.5, 373.0], [76.6, 374.0], [76.7, 374.0], [76.8, 375.0], [76.9, 375.0], [77.0, 376.0], [77.1, 376.0], [77.2, 377.0], [77.3, 378.0], [77.4, 378.0], [77.5, 379.0], [77.6, 379.0], [77.7, 380.0], [77.8, 381.0], [77.9, 381.0], [78.0, 382.0], [78.1, 382.0], [78.2, 383.0], [78.3, 384.0], [78.4, 385.0], [78.5, 385.0], [78.6, 386.0], [78.7, 386.0], [78.8, 387.0], [78.9, 388.0], [79.0, 388.0], [79.1, 389.0], [79.2, 390.0], [79.3, 390.0], [79.4, 391.0], [79.5, 391.0], [79.6, 392.0], [79.7, 393.0], [79.8, 393.0], [79.9, 394.0], [80.0, 395.0], [80.1, 395.0], [80.2, 396.0], [80.3, 397.0], [80.4, 398.0], [80.5, 398.0], [80.6, 399.0], [80.7, 400.0], [80.8, 401.0], [80.9, 402.0], [81.0, 403.0], [81.1, 404.0], [81.2, 405.0], [81.3, 405.0], [81.4, 406.0], [81.5, 407.0], [81.6, 408.0], [81.7, 409.0], [81.8, 409.0], [81.9, 410.0], [82.0, 411.0], [82.1, 412.0], [82.2, 412.0], [82.3, 413.0], [82.4, 414.0], [82.5, 415.0], [82.6, 415.0], [82.7, 416.0], [82.8, 416.0], [82.9, 417.0], [83.0, 417.0], [83.1, 418.0], [83.2, 419.0], [83.3, 419.0], [83.4, 420.0], [83.5, 421.0], [83.6, 421.0], [83.7, 422.0], [83.8, 423.0], [83.9, 424.0], [84.0, 424.0], [84.1, 425.0], [84.2, 426.0], [84.3, 427.0], [84.4, 428.0], [84.5, 428.0], [84.6, 429.0], [84.7, 430.0], [84.8, 431.0], [84.9, 432.0], [85.0, 432.0], [85.1, 433.0], [85.2, 434.0], [85.3, 435.0], [85.4, 436.0], [85.5, 436.0], [85.6, 437.0], [85.7, 438.0], [85.8, 438.0], [85.9, 439.0], [86.0, 440.0], [86.1, 440.0], [86.2, 441.0], [86.3, 442.0], [86.4, 442.0], [86.5, 443.0], [86.6, 444.0], [86.7, 445.0], [86.8, 446.0], [86.9, 447.0], [87.0, 448.0], [87.1, 449.0], [87.2, 450.0], [87.3, 451.0], [87.4, 452.0], [87.5, 453.0], [87.6, 454.0], [87.7, 455.0], [87.8, 456.0], [87.9, 457.0], [88.0, 458.0], [88.1, 459.0], [88.2, 461.0], [88.3, 462.0], [88.4, 463.0], [88.5, 464.0], [88.6, 465.0], [88.7, 466.0], [88.8, 467.0], [88.9, 468.0], [89.0, 469.0], [89.1, 470.0], [89.2, 471.0], [89.3, 472.0], [89.4, 473.0], [89.5, 474.0], [89.6, 475.0], [89.7, 476.0], [89.8, 477.0], [89.9, 478.0], [90.0, 479.0], [90.1, 480.0], [90.2, 481.0], [90.3, 482.0], [90.4, 483.0], [90.5, 483.0], [90.6, 484.0], [90.7, 485.0], [90.8, 486.0], [90.9, 488.0], [91.0, 489.0], [91.1, 490.0], [91.2, 491.0], [91.3, 493.0], [91.4, 494.0], [91.5, 496.0], [91.6, 498.0], [91.7, 500.0], [91.8, 501.0], [91.9, 503.0], [92.0, 504.0], [92.1, 506.0], [92.2, 508.0], [92.3, 510.0], [92.4, 512.0], [92.5, 513.0], [92.6, 515.0], [92.7, 518.0], [92.8, 521.0], [92.9, 524.0], [93.0, 526.0], [93.1, 528.0], [93.2, 530.0], [93.3, 533.0], [93.4, 535.0], [93.5, 538.0], [93.6, 543.0], [93.7, 547.0], [93.8, 551.0], [93.9, 557.0], [94.0, 560.0], [94.1, 564.0], [94.2, 568.0], [94.3, 572.0], [94.4, 575.0], [94.5, 578.0], [94.6, 580.0], [94.7, 582.0], [94.8, 584.0], [94.9, 586.0], [95.0, 589.0], [95.1, 594.0], [95.2, 598.0], [95.3, 607.0], [95.4, 613.0], [95.5, 621.0], [95.6, 629.0], [95.7, 637.0], [95.8, 651.0], [95.9, 658.0], [96.0, 671.0], [96.1, 683.0], [96.2, 695.0], [96.3, 710.0], [96.4, 722.0], [96.5, 733.0], [96.6, 745.0], [96.7, 758.0], [96.8, 765.0], [96.9, 774.0], [97.0, 786.0], [97.1, 798.0], [97.2, 805.0], [97.3, 825.0], [97.4, 839.0], [97.5, 849.0], [97.6, 861.0], [97.7, 885.0], [97.8, 897.0], [97.9, 917.0], [98.0, 924.0], [98.1, 933.0], [98.2, 944.0], [98.3, 958.0], [98.4, 979.0], [98.5, 996.0], [98.6, 1034.0], [98.7, 1098.0], [98.8, 1198.0], [98.9, 1298.0], [99.0, 1364.0], [99.1, 1474.0], [99.2, 1540.0], [99.3, 1621.0], [99.4, 1748.0], [99.5, 1937.0], [99.6, 2084.0], [99.7, 2186.0], [99.8, 2397.0], [99.9, 2825.0], [100.0, 4785.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 69810.0, "series": [{"data": [[0.0, 12828.0], [600.0, 1851.0], [700.0, 1633.0], [800.0, 1260.0], [900.0, 1279.0], [1000.0, 334.0], [1100.0, 179.0], [1200.0, 190.0], [1300.0, 247.0], [1400.0, 163.0], [1500.0, 282.0], [100.0, 18479.0], [1600.0, 136.0], [1700.0, 141.0], [1800.0, 76.0], [1900.0, 116.0], [2000.0, 129.0], [2100.0, 209.0], [2200.0, 76.0], [2300.0, 57.0], [2400.0, 15.0], [2500.0, 60.0], [2600.0, 35.0], [2700.0, 36.0], [2800.0, 118.0], [2900.0, 28.0], [3000.0, 10.0], [3100.0, 1.0], [200.0, 69810.0], [3300.0, 5.0], [3200.0, 7.0], [3400.0, 4.0], [3500.0, 4.0], [3600.0, 8.0], [3700.0, 2.0], [3900.0, 1.0], [4200.0, 5.0], [4100.0, 6.0], [4300.0, 1.0], [4600.0, 4.0], [4500.0, 5.0], [4400.0, 7.0], [300.0, 45752.0], [4700.0, 1.0], [400.0, 20154.0], [500.0, 6424.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 30.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 167111.0, "series": [{"data": [[0.0, 167111.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 13449.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1578.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 30.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 992.0677013433963, "minX": 1.75235628E12, "maxY": 994.6692014853595, "series": [{"data": [[1.75235634E12, 992.0677013433963], [1.75235628E12, 994.6692014853595]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235634E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 884.0, "series": [{"data": [[2.0, 809.0], [3.0, 615.0], [4.0, 884.0], [5.0, 204.0], [6.0, 210.0], [7.0, 222.0], [8.0, 231.0], [9.0, 261.0], [10.0, 263.0], [11.0, 267.0], [12.0, 273.0], [13.0, 273.0], [14.0, 283.0], [15.0, 287.0], [16.0, 293.0], [17.0, 316.0], [18.0, 318.0], [19.0, 334.0], [20.0, 335.0], [21.0, 335.0], [22.0, 360.0], [23.0, 369.0], [24.0, 369.0], [25.0, 375.0], [26.0, 374.0], [27.0, 375.0], [28.0, 376.0], [29.0, 380.0], [30.0, 380.0], [31.0, 381.0], [33.0, 382.0], [32.0, 381.0], [35.0, 383.0], [34.0, 381.0], [37.0, 394.0], [36.0, 392.0], [39.0, 394.0], [38.0, 394.0], [43.0, 401.0], [42.0, 401.0], [45.0, 151.0], [44.0, 401.0], [47.0, 169.0], [46.0, 419.0], [51.0, 419.0], [50.0, 243.66666666666666], [53.0, 170.5], [54.0, 421.0], [57.0, 421.0], [56.0, 179.0], [59.0, 199.0], [58.0, 204.0], [61.0, 208.0], [60.0, 422.0], [63.0, 423.0], [62.0, 206.0], [67.0, 320.0], [65.0, 210.0], [68.0, 214.0], [75.0, 331.0], [73.0, 423.0], [72.0, 286.75], [77.0, 251.0], [82.0, 250.0], [80.0, 424.0], [87.0, 424.0], [86.0, 260.0], [85.0, 256.0], [84.0, 314.16666666666663], [90.0, 426.0], [89.0, 276.0], [88.0, 256.0], [95.0, 264.0], [93.0, 429.0], [92.0, 266.5], [99.0, 344.0], [97.0, 274.0], [96.0, 433.0], [103.0, 272.0], [102.0, 344.5], [100.0, 273.0], [107.0, 262.0], [105.0, 344.0], [111.0, 565.5], [110.0, 267.0], [108.0, 438.0], [115.0, 355.5], [113.0, 437.0], [112.0, 264.0], [119.0, 436.0], [118.0, 302.0], [117.0, 265.0], [116.0, 437.0], [123.0, 441.0], [122.0, 306.0], [121.0, 265.5], [127.0, 263.0], [126.0, 373.0], [124.0, 263.0], [135.0, 303.0], [134.0, 354.5], [132.0, 282.0], [130.0, 352.5], [128.0, 443.0], [143.0, 368.5], [141.0, 306.0], [140.0, 283.0], [139.0, 449.0], [138.0, 306.0], [137.0, 283.0], [136.0, 448.0], [151.0, 450.0], [150.0, 310.0], [149.0, 449.0], [148.0, 685.0], [147.0, 311.0], [146.0, 449.0], [145.0, 288.0], [144.0, 310.0], [158.0, 452.0], [157.0, 293.0], [156.0, 317.0], [155.0, 452.0], [154.0, 316.0], [153.0, 452.0], [152.0, 313.0], [167.0, 453.0], [166.0, 325.0], [165.0, 302.0], [164.0, 452.0], [163.0, 320.0], [162.0, 303.0], [161.0, 299.0], [160.0, 385.0], [175.0, 311.0], [174.0, 382.0], [173.0, 328.0], [171.0, 362.3333333333333], [170.0, 307.0], [183.0, 312.0], [181.0, 329.0], [180.0, 454.0], [178.0, 328.0], [177.0, 313.0], [176.0, 328.0], [191.0, 454.0], [190.0, 383.5], [189.0, 330.0], [188.0, 322.3333333333333], [187.0, 454.0], [186.0, 382.5], [199.0, 322.0], [198.0, 456.0], [196.0, 321.5], [194.0, 454.0], [193.0, 320.0], [207.0, 333.0], [206.0, 316.0], [205.0, 367.3333333333333], [202.0, 322.0], [200.0, 456.0], [215.0, 320.0], [214.0, 457.0], [213.0, 334.0], [212.0, 319.0], [211.0, 456.0], [210.0, 333.0], [209.0, 316.0], [208.0, 457.0], [222.0, 397.0], [220.0, 323.0], [219.0, 335.0], [218.0, 458.0], [217.0, 323.0], [216.0, 335.0], [230.0, 334.0], [228.0, 338.5], [226.0, 329.5], [239.0, 342.0], [238.0, 368.5], [235.0, 327.0], [234.0, 342.0], [232.0, 334.0], [247.0, 344.0], [244.0, 404.0], [243.0, 401.5], [240.0, 460.0], [253.0, 367.5], [250.0, 353.0], [249.0, 403.0], [248.0, 325.0], [271.0, 45.0], [270.0, 386.3333333333333], [267.0, 42.0], [266.0, 397.5], [264.0, 303.0], [260.0, 331.0], [259.0, 462.0], [258.0, 362.0], [257.0, 371.25], [275.0, 63.0], [286.0, 72.0], [287.0, 366.0], [285.0, 415.0], [283.0, 202.0], [281.0, 346.0], [279.0, 332.0], [277.0, 363.0], [274.0, 397.5], [272.0, 364.0], [302.0, 267.5], [303.0, 334.0], [300.0, 366.0], [291.0, 199.5], [289.0, 366.0], [288.0, 465.0], [299.0, 202.0], [297.0, 366.0], [296.0, 466.0], [295.0, 200.5], [293.0, 366.0], [292.0, 465.0], [319.0, 320.75], [315.0, 401.5], [313.0, 105.0], [312.0, 367.0], [311.0, 297.0], [308.0, 367.0], [307.0, 290.3333333333333], [304.0, 367.0], [335.0, 315.0], [333.0, 405.5], [323.0, 404.5], [320.0, 367.0], [331.0, 131.0], [330.0, 338.0], [329.0, 472.0], [328.0, 338.0], [327.0, 301.0], [325.0, 132.0], [324.0, 354.0], [348.0, 475.0], [347.0, 144.0], [346.0, 338.0], [345.0, 313.2], [342.0, 338.0], [339.0, 133.0], [338.0, 315.3333333333333], [365.0, 395.6666666666667], [362.0, 332.75], [360.0, 142.0], [357.0, 396.6666666666667], [356.0, 308.0], [354.0, 356.5], [352.0, 242.0], [382.0, 324.0], [379.0, 322.3636363636364], [374.0, 474.0], [373.0, 356.5], [369.0, 141.0], [397.0, 373.0], [396.0, 246.5], [387.0, 247.0], [385.0, 474.0], [384.0, 289.0], [395.0, 372.0], [394.0, 247.0], [393.0, 474.0], [392.0, 357.5], [390.0, 152.0], [389.0, 473.0], [388.0, 373.0], [414.0, 374.0], [413.0, 342.8], [409.0, 288.0], [406.0, 374.0], [405.0, 245.5], [403.0, 374.0], [402.0, 244.5], [401.0, 335.0], [418.0, 374.0], [429.0, 376.0], [430.0, 346.0], [428.0, 407.0], [426.0, 375.0], [425.0, 397.3333333333333], [422.0, 180.0], [421.0, 469.0], [420.0, 260.5], [417.0, 469.0], [416.0, 260.5], [445.0, 196.0], [446.0, 347.0], [444.0, 377.0], [443.0, 196.0], [442.0, 397.3333333333333], [441.0, 347.0], [439.0, 195.0], [437.0, 396.6666666666667], [434.0, 191.0], [433.0, 396.6666666666667], [461.0, 200.0], [463.0, 399.0], [460.0, 399.3333333333333], [458.0, 199.0], [457.0, 2.0], [456.0, 409.5], [454.0, 288.0], [452.0, 350.0], [451.0, 287.0], [449.0, 409.0], [448.0, 347.6666666666667], [478.0, 378.0], [479.0, 355.0], [477.0, 257.0], [476.0, 203.0], [475.0, 400.0], [473.0, 102.0], [472.0, 349.3333333333333], [470.0, 355.0], [467.0, 335.5], [466.0, 378.0], [465.0, 185.66666666666666], [468.0, 354.0], [494.0, 442.6666666666667], [491.0, 470.0], [489.0, 441.0], [488.0, 204.0], [487.0, 332.5], [483.0, 225.33333333333334], [482.0, 366.5], [480.0, 335.5], [509.0, 306.0], [511.0, 414.5], [508.0, 227.0], [499.0, 220.0], [496.0, 293.5], [507.0, 108.5], [506.0, 377.0], [505.0, 398.0], [504.0, 372.0], [503.0, 475.5], [502.0, 291.0], [501.0, 390.0], [532.0, 194.5], [542.0, 218.0], [541.0, 270.0], [538.0, 353.0], [537.0, 202.0], [527.0, 237.0], [514.0, 207.0], [513.0, 361.0], [516.0, 358.0], [515.0, 380.5], [519.0, 293.0], [517.0, 474.0], [526.0, 387.0], [525.0, 216.0], [524.0, 339.5], [535.0, 471.0], [534.0, 387.0], [533.0, 218.0], [531.0, 345.0], [529.0, 302.0], [570.0, 474.0], [574.0, 240.5], [575.0, 345.0], [560.0, 352.0], [562.0, 230.0], [561.0, 197.0], [564.0, 195.0], [563.0, 431.0], [573.0, 389.0], [572.0, 231.0], [571.0, 209.33333333333334], [569.0, 310.0], [551.0, 353.0], [550.0, 271.25], [547.0, 353.0], [546.0, 388.0], [545.0, 287.0], [558.0, 243.25], [556.0, 431.5], [555.0, 226.0], [554.0, 288.6666666666667], [552.0, 226.0], [567.0, 237.33333333333334], [565.0, 389.0], [601.0, 389.0], [606.0, 239.5], [607.0, 199.0], [593.0, 237.66666666666666], [592.0, 365.5], [596.0, 365.3333333333333], [595.0, 210.33333333333334], [605.0, 510.0], [604.0, 389.0], [603.0, 484.5], [600.0, 191.5], [582.0, 119.5], [581.0, 366.5], [579.0, 119.5], [578.0, 473.0], [577.0, 389.0], [576.0, 231.0], [590.0, 352.5], [589.0, 198.5], [588.0, 287.5], [587.0, 471.0], [586.0, 198.5], [585.0, 359.0], [599.0, 429.5], [597.0, 192.0], [633.0, 122.0], [619.0, 122.85714285714286], [612.0, 116.49999999999999], [611.0, 430.5], [610.0, 289.6666666666667], [608.0, 471.0], [613.0, 294.0], [615.0, 96.2], [614.0, 239.5], [632.0, 471.0], [635.0, 369.0], [637.0, 249.66666666666669], [636.0, 234.0], [616.0, 37.333333333333336], [617.0, 106.42857142857143], [618.0, 146.14285714285714], [620.0, 33.7190775681342], [622.0, 233.0], [621.0, 389.0], [623.0, 472.0], [625.0, 34.0], [626.0, 117.5], [628.0, 408.5], [627.0, 390.0], [631.0, 369.0], [630.0, 234.0], [639.0, 347.0], [624.0, 177.0], [638.0, 353.0], [668.0, 277.3333333333333], [650.0, 17.0], [649.0, 123.0], [651.0, 371.0], [653.0, 347.0], [652.0, 352.0], [670.0, 313.5], [656.0, 292.0], [658.0, 204.0], [657.0, 469.0], [666.0, 213.66666666666669], [665.0, 349.0], [664.0, 239.0], [647.0, 370.5], [645.0, 265.5], [643.0, 313.0], [642.0, 178.0], [641.0, 234.0], [640.0, 291.66666666666663], [655.0, 203.0], [662.0, 393.0], [661.0, 351.0], [660.0, 181.5], [659.0, 236.0], [689.0, 238.0], [686.0, 33.0], [672.0, 409.5], [675.0, 370.5], [673.0, 124.0], [677.0, 305.75], [676.0, 238.0], [679.0, 349.0], [678.0, 238.0], [703.0, 189.5], [698.0, 237.0], [694.0, 304.5], [691.0, 238.0], [690.0, 180.5], [688.0, 404.3333333333333], [685.0, 124.5], [684.0, 350.0], [683.0, 315.0], [682.0, 241.0], [733.0, 409.3333333333333], [726.0, 247.0], [724.0, 328.3333333333333], [723.0, 245.5], [722.0, 354.0], [721.0, 242.33333333333331], [720.0, 354.0], [706.0, 20.0], [719.0, 338.0], [705.0, 7.0], [718.0, 352.0], [717.0, 5.0], [716.0, 238.0], [714.0, 141.66666666666666], [735.0, 361.0], [734.0, 394.0], [732.0, 476.0], [731.0, 338.25], [730.0, 304.0], [711.0, 470.0], [710.0, 238.0], [727.0, 335.5], [762.0, 29.0], [752.0, 247.0], [745.0, 48.25], [763.0, 31.0], [757.0, 6.0], [753.0, 238.0], [751.0, 354.0], [737.0, 333.0], [736.0, 250.0], [740.0, 337.0], [739.0, 477.0], [743.0, 380.5], [742.0, 361.0], [748.0, 388.0], [747.0, 364.0], [795.0, 315.5], [792.0, 101.0], [783.0, 306.4285714285714], [782.0, 472.0], [781.0, 317.5], [780.0, 297.6666666666667], [779.0, 222.375], [778.0, 42.0], [776.0, 244.83333333333331], [777.0, 289.3157894736841], [799.0, 223.66666666666669], [785.0, 260.5], [788.0, 393.0], [786.0, 163.0], [798.0, 447.0], [797.0, 199.5], [794.0, 403.5], [791.0, 394.0], [790.0, 285.4444444444445], [824.0, 419.5], [828.0, 396.0], [804.0, 30.0], [803.0, 589.0], [802.0, 238.0], [801.0, 476.0], [807.0, 317.0], [805.0, 139.0], [815.0, 219.0], [814.0, 294.3333333333333], [813.0, 41.0], [812.0, 237.0], [811.0, 420.5], [810.0, 232.83333333333334], [808.0, 242.5], [830.0, 270.75], [816.0, 444.0], [818.0, 257.4], [817.0, 419.5], [821.0, 202.0], [819.0, 396.0], [827.0, 355.0], [826.0, 141.5], [825.0, 295.6666666666667], [823.0, 201.5], [822.0, 420.0], [857.0, 147.9736842105263], [850.0, 320.54545454545456], [846.0, 193.61458333333326], [845.0, 146.33333333333334], [844.0, 154.05172413793107], [843.0, 158.6842105263158], [842.0, 142.28000000000003], [841.0, 163.95833333333331], [840.0, 155.82222222222222], [847.0, 152.42857142857144], [848.0, 253.4], [849.0, 143.0], [860.0, 112.87589376915216], [861.0, 237.6], [862.0, 185.66666666666669], [858.0, 189.33333333333331], [859.0, 163.25], [851.0, 107.0], [852.0, 271.6666666666667], [854.0, 15.777777777777779], [853.0, 259.75], [855.0, 228.0], [856.0, 70.99999999999999], [839.0, 157.83333333333334], [838.0, 244.22727272727272], [837.0, 159.5], [836.0, 233.66666666666666], [835.0, 306.3333333333333], [834.0, 208.12903225806448], [833.0, 295.0], [832.0, 238.0], [893.0, 462.0], [883.0, 232.75], [894.0, 364.99999999999994], [889.0, 435.69047619047615], [888.0, 224.5], [871.0, 238.0], [890.0, 403.6666666666667], [892.0, 273.0], [891.0, 248.0], [870.0, 537.0], [869.0, 242.66666666666666], [868.0, 332.6666666666667], [867.0, 269.0], [864.0, 307.0], [865.0, 309.16666666666663], [886.0, 693.5], [887.0, 350.6666666666667], [885.0, 411.7142857142857], [884.0, 95.0], [881.0, 292.7857142857143], [880.0, 293.7272727272727], [882.0, 244.0], [895.0, 317.0], [879.0, 228.6], [878.0, 366.25], [877.0, 282.0], [875.0, 219.75], [874.0, 108.0], [873.0, 299.2], [872.0, 298.4], [920.0, 359.3333333333333], [925.0, 258.1], [924.0, 475.5384615384615], [926.0, 509.87499999999994], [927.0, 629.0], [923.0, 323.375], [921.0, 372.0], [911.0, 267.0], [897.0, 220.0], [896.0, 300.2], [899.0, 304.0], [898.0, 259.0], [901.0, 219.33333333333331], [900.0, 223.66666666666666], [903.0, 219.66666666666669], [902.0, 396.0], [910.0, 237.0], [909.0, 273.0], [908.0, 334.6666666666667], [906.0, 264.0], [905.0, 144.0], [904.0, 383.0], [919.0, 363.0], [917.0, 255.71428571428572], [916.0, 447.0], [915.0, 397.0], [914.0, 277.66666666666663], [913.0, 224.0], [912.0, 259.0], [934.0, 199.16666666666666], [930.0, 752.5], [928.0, 424.2857142857143], [929.0, 58.0], [942.0, 392.2857142857143], [941.0, 235.0], [943.0, 385.5], [939.0, 177.25], [940.0, 168.25], [931.0, 379.4166666666667], [932.0, 561.3333333333334], [933.0, 390.00000000000006], [935.0, 371.2222222222222], [952.0, 199.6], [953.0, 310.75], [955.0, 170.71428571428572], [956.0, 386.25], [957.0, 301.85714285714283], [959.0, 135.5], [958.0, 312.66666666666663], [944.0, 530.8], [945.0, 544.0], [946.0, 212.9230769230769], [947.0, 20.0], [948.0, 304.75], [949.0, 91.33333333333333], [950.0, 357.66666666666663], [951.0, 22.0], [936.0, 470.25], [937.0, 302.6], [938.0, 412.0], [967.0, 303.5], [962.0, 265.8], [961.0, 263.2307692307692], [974.0, 232.0], [975.0, 241.13333333333333], [972.0, 247.57142857142858], [973.0, 369.8], [963.0, 251.7142857142857], [964.0, 614.0], [966.0, 753.8], [965.0, 290.1666666666667], [976.0, 270.0], [991.0, 213.25], [989.0, 220.2], [990.0, 161.66666666666666], [987.0, 448.5], [986.0, 298.0487804878049], [988.0, 282.8148148148147], [984.0, 406.83333333333337], [985.0, 174.5], [977.0, 201.8], [979.0, 307.7692307692308], [978.0, 339.4], [980.0, 389.3333333333333], [981.0, 162.66666666666666], [982.0, 48.0], [983.0, 330.6923076923077], [968.0, 335.8235294117647], [969.0, 205.0], [970.0, 631.5], [971.0, 210.54545454545453], [995.0, 172.8], [992.0, 289.625], [993.0, 59.333333333333336], [994.0, 287.6875], [996.0, 312.04347826086956], [997.0, 271.50000000000006], [998.0, 113.0], [999.0, 357.55555555555554], [1000.0, 328.34210095281867], [1.0, 562.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[993.5944677440682, 324.70071582275654]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 178096.4, "minX": 1.75235628E12, "maxY": 805466.55, "series": [{"data": [[1.75235634E12, 566475.4666666667], [1.75235628E12, 805466.55]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235634E12, 178096.4], [1.75235628E12, 252987.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235634E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 302.63264771632095, "minX": 1.75235628E12, "maxY": 356.0508789880011, "series": [{"data": [[1.75235634E12, 356.0508789880011], [1.75235628E12, 302.63264771632095]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235634E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 302.3945244175083, "minX": 1.75235628E12, "maxY": 356.04475331198455, "series": [{"data": [[1.75235634E12, 356.04475331198455], [1.75235628E12, 302.3945244175083]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235634E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.017194413808682276, "minX": 1.75235628E12, "maxY": 4.872669790760485, "series": [{"data": [[1.75235634E12, 0.017194413808682276], [1.75235628E12, 4.872669790760485]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235634E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.75235628E12, "maxY": 4785.0, "series": [{"data": [[1.75235634E12, 4785.0], [1.75235628E12, 2169.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235634E12, 458.0], [1.75235628E12, 537.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235634E12, 493.0], [1.75235628E12, 734.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235634E12, 478.0], [1.75235628E12, 618.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235634E12, 1.0], [1.75235628E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235634E12, 341.0], [1.75235628E12, 394.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235634E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 828.0, "maxY": 881.5, "series": [{"data": [[828.0, 881.5], [1237.0, 374.0], [1373.0, 207.0], [2047.0, 210.0], [2279.0, 193.0], [2350.0, 358.0], [2519.0, 361.0], [2664.0, 200.0], [2794.0, 428.0], [2886.0, 39.0], [2890.0, 438.0], [2922.0, 359.0], [2880.0, 231.0], [2934.0, 234.0], [2833.0, 285.0], [2947.0, 308.0], [2989.0, 287.0], [3062.0, 291.0], [3169.0, 241.0], [3181.0, 313.0], [3123.0, 312.0], [3138.0, 339.5], [3152.0, 294.0], [3132.0, 384.0], [3198.0, 414.0], [3187.0, 414.0], [3183.0, 342.0], [3114.0, 214.0], [3092.0, 252.0], [3308.0, 302.0], [3295.0, 284.0], [3326.0, 294.0], [3322.0, 295.5], [3325.0, 349.0], [3310.0, 308.0], [3243.0, 320.0], [3263.0, 285.0], [3202.0, 346.0], [3253.0, 323.0], [3293.0, 298.0], [3264.0, 336.5], [3282.0, 343.0], [3250.0, 289.0], [3204.0, 284.0], [3306.0, 271.0], [3226.0, 330.0], [3209.0, 309.0], [3203.0, 375.0], [3245.0, 310.0], [3378.0, 280.0], [3404.0, 282.0], [3426.0, 289.0], [3429.0, 284.0], [3354.0, 294.0], [3359.0, 298.0], [3344.0, 257.0], [3531.0, 270.0], [3482.0, 283.0], [3501.0, 280.0], [3528.0, 284.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2350.0, 113.0], [1237.0, 135.0], [2880.0, 445.0], [2934.0, 139.0], [2833.0, 222.5], [3062.0, 59.0], [3169.0, 1.0], [3114.0, 260.0], [3092.0, 14.0], [3152.0, 4.0], [3209.0, 4.0], [3226.0, 61.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3531.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 828.0, "maxY": 881.5, "series": [{"data": [[828.0, 881.5], [1237.0, 374.0], [1373.0, 207.0], [2047.0, 210.0], [2279.0, 193.0], [2350.0, 358.0], [2519.0, 361.0], [2664.0, 200.0], [2794.0, 428.0], [2886.0, 39.0], [2890.0, 438.0], [2922.0, 359.0], [2880.0, 231.0], [2934.0, 234.0], [2833.0, 285.0], [2947.0, 308.0], [2989.0, 287.0], [3062.0, 291.0], [3169.0, 235.0], [3181.0, 313.0], [3123.0, 312.0], [3138.0, 339.5], [3152.0, 294.0], [3132.0, 384.0], [3198.0, 414.0], [3187.0, 414.0], [3183.0, 342.0], [3114.0, 214.0], [3092.0, 252.0], [3308.0, 302.0], [3295.0, 284.0], [3326.0, 294.0], [3322.0, 295.5], [3325.0, 349.0], [3310.0, 308.0], [3243.0, 320.0], [3263.0, 285.0], [3202.0, 346.0], [3253.0, 323.0], [3293.0, 298.0], [3264.0, 336.5], [3282.0, 343.0], [3250.0, 289.0], [3204.0, 284.0], [3306.0, 271.0], [3226.0, 330.0], [3209.0, 309.0], [3203.0, 375.0], [3245.0, 310.0], [3378.0, 280.0], [3404.0, 282.0], [3426.0, 289.0], [3429.0, 284.0], [3354.0, 294.0], [3359.0, 298.0], [3344.0, 257.0], [3531.0, 270.0], [3482.0, 283.0], [3501.0, 280.0], [3528.0, 284.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2350.0, 113.0], [1237.0, 135.0], [2880.0, 445.0], [2934.0, 139.0], [2833.0, 222.5], [3062.0, 59.0], [3169.0, 0.0], [3114.0, 260.0], [3092.0, 0.0], [3152.0, 0.0], [3209.0, 0.0], [3226.0, 61.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3531.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1237.6166666666666, "minX": 1.75235628E12, "maxY": 1798.5166666666667, "series": [{"data": [[1.75235634E12, 1237.6166666666666], [1.75235628E12, 1798.5166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235634E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.75235628E12, "maxY": 1781.6, "series": [{"data": [[1.75235634E12, 1254.0333333333333], [1.75235628E12, 1781.6]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75235634E12, 0.16666666666666666]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.75235634E12, 0.08333333333333333], [1.75235628E12, 0.25]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235634E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.75235628E12, "maxY": 1781.6, "series": [{"data": [[1.75235634E12, 1254.0333333333333], [1.75235628E12, 1781.6]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75235634E12, 0.25], [1.75235628E12, 0.25]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235634E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.75235628E12, "maxY": 1781.6, "series": [{"data": [[1.75235634E12, 1254.0333333333333], [1.75235628E12, 1781.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75235634E12, 0.25], [1.75235628E12, 0.25]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235634E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

