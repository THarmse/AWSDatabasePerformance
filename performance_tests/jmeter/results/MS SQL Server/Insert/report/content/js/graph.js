/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 3590.0, "series": [{"data": [[0.0, 6.0], [0.1, 90.0], [0.2, 94.0], [0.3, 95.0], [0.4, 97.0], [0.5, 99.0], [0.6, 101.0], [0.7, 103.0], [0.8, 108.0], [0.9, 115.0], [1.0, 131.0], [1.1, 155.0], [1.2, 170.0], [1.3, 199.0], [1.4, 229.0], [1.5, 274.0], [1.6, 294.0], [1.7, 313.0], [1.8, 369.0], [1.9, 382.0], [2.0, 433.0], [2.1, 444.0], [2.2, 450.0], [2.3, 467.0], [2.4, 473.0], [2.5, 481.0], [2.6, 487.0], [2.7, 491.0], [2.8, 495.0], [2.9, 498.0], [3.0, 501.0], [3.1, 503.0], [3.2, 506.0], [3.3, 507.0], [3.4, 508.0], [3.5, 509.0], [3.6, 510.0], [3.7, 512.0], [3.8, 513.0], [3.9, 514.0], [4.0, 515.0], [4.1, 516.0], [4.2, 517.0], [4.3, 518.0], [4.4, 518.0], [4.5, 519.0], [4.6, 519.0], [4.7, 520.0], [4.8, 520.0], [4.9, 521.0], [5.0, 521.0], [5.1, 522.0], [5.2, 523.0], [5.3, 523.0], [5.4, 524.0], [5.5, 525.0], [5.6, 525.0], [5.7, 525.0], [5.8, 526.0], [5.9, 526.0], [6.0, 527.0], [6.1, 527.0], [6.2, 527.0], [6.3, 528.0], [6.4, 528.0], [6.5, 528.0], [6.6, 529.0], [6.7, 529.0], [6.8, 529.0], [6.9, 530.0], [7.0, 530.0], [7.1, 530.0], [7.2, 531.0], [7.3, 531.0], [7.4, 531.0], [7.5, 531.0], [7.6, 531.0], [7.7, 532.0], [7.8, 532.0], [7.9, 532.0], [8.0, 532.0], [8.1, 532.0], [8.2, 532.0], [8.3, 533.0], [8.4, 533.0], [8.5, 533.0], [8.6, 533.0], [8.7, 533.0], [8.8, 533.0], [8.9, 533.0], [9.0, 534.0], [9.1, 534.0], [9.2, 534.0], [9.3, 534.0], [9.4, 534.0], [9.5, 534.0], [9.6, 534.0], [9.7, 535.0], [9.8, 535.0], [9.9, 535.0], [10.0, 535.0], [10.1, 535.0], [10.2, 536.0], [10.3, 536.0], [10.4, 536.0], [10.5, 536.0], [10.6, 536.0], [10.7, 536.0], [10.8, 537.0], [10.9, 537.0], [11.0, 537.0], [11.1, 537.0], [11.2, 538.0], [11.3, 538.0], [11.4, 538.0], [11.5, 538.0], [11.6, 538.0], [11.7, 539.0], [11.8, 539.0], [11.9, 539.0], [12.0, 539.0], [12.1, 539.0], [12.2, 540.0], [12.3, 540.0], [12.4, 540.0], [12.5, 540.0], [12.6, 540.0], [12.7, 540.0], [12.8, 541.0], [12.9, 541.0], [13.0, 541.0], [13.1, 541.0], [13.2, 541.0], [13.3, 541.0], [13.4, 542.0], [13.5, 542.0], [13.6, 542.0], [13.7, 542.0], [13.8, 542.0], [13.9, 542.0], [14.0, 542.0], [14.1, 543.0], [14.2, 543.0], [14.3, 543.0], [14.4, 543.0], [14.5, 543.0], [14.6, 543.0], [14.7, 543.0], [14.8, 543.0], [14.9, 544.0], [15.0, 544.0], [15.1, 544.0], [15.2, 544.0], [15.3, 544.0], [15.4, 544.0], [15.5, 544.0], [15.6, 544.0], [15.7, 545.0], [15.8, 545.0], [15.9, 545.0], [16.0, 545.0], [16.1, 545.0], [16.2, 545.0], [16.3, 545.0], [16.4, 546.0], [16.5, 546.0], [16.6, 546.0], [16.7, 546.0], [16.8, 546.0], [16.9, 546.0], [17.0, 546.0], [17.1, 546.0], [17.2, 546.0], [17.3, 547.0], [17.4, 547.0], [17.5, 547.0], [17.6, 547.0], [17.7, 547.0], [17.8, 547.0], [17.9, 547.0], [18.0, 547.0], [18.1, 547.0], [18.2, 548.0], [18.3, 548.0], [18.4, 548.0], [18.5, 548.0], [18.6, 548.0], [18.7, 548.0], [18.8, 548.0], [18.9, 548.0], [19.0, 548.0], [19.1, 549.0], [19.2, 549.0], [19.3, 549.0], [19.4, 549.0], [19.5, 549.0], [19.6, 549.0], [19.7, 549.0], [19.8, 549.0], [19.9, 550.0], [20.0, 550.0], [20.1, 550.0], [20.2, 550.0], [20.3, 550.0], [20.4, 550.0], [20.5, 550.0], [20.6, 550.0], [20.7, 551.0], [20.8, 551.0], [20.9, 551.0], [21.0, 551.0], [21.1, 551.0], [21.2, 551.0], [21.3, 551.0], [21.4, 551.0], [21.5, 551.0], [21.6, 552.0], [21.7, 552.0], [21.8, 552.0], [21.9, 552.0], [22.0, 552.0], [22.1, 552.0], [22.2, 552.0], [22.3, 552.0], [22.4, 552.0], [22.5, 553.0], [22.6, 553.0], [22.7, 553.0], [22.8, 553.0], [22.9, 553.0], [23.0, 553.0], [23.1, 553.0], [23.2, 554.0], [23.3, 554.0], [23.4, 554.0], [23.5, 554.0], [23.6, 554.0], [23.7, 554.0], [23.8, 554.0], [23.9, 554.0], [24.0, 555.0], [24.1, 555.0], [24.2, 555.0], [24.3, 555.0], [24.4, 555.0], [24.5, 555.0], [24.6, 555.0], [24.7, 556.0], [24.8, 556.0], [24.9, 556.0], [25.0, 556.0], [25.1, 556.0], [25.2, 556.0], [25.3, 556.0], [25.4, 556.0], [25.5, 557.0], [25.6, 557.0], [25.7, 557.0], [25.8, 557.0], [25.9, 557.0], [26.0, 557.0], [26.1, 557.0], [26.2, 557.0], [26.3, 557.0], [26.4, 557.0], [26.5, 558.0], [26.6, 558.0], [26.7, 558.0], [26.8, 558.0], [26.9, 558.0], [27.0, 558.0], [27.1, 558.0], [27.2, 559.0], [27.3, 559.0], [27.4, 559.0], [27.5, 559.0], [27.6, 559.0], [27.7, 559.0], [27.8, 559.0], [27.9, 560.0], [28.0, 560.0], [28.1, 560.0], [28.2, 560.0], [28.3, 560.0], [28.4, 560.0], [28.5, 561.0], [28.6, 561.0], [28.7, 561.0], [28.8, 561.0], [28.9, 561.0], [29.0, 561.0], [29.1, 561.0], [29.2, 562.0], [29.3, 562.0], [29.4, 562.0], [29.5, 562.0], [29.6, 562.0], [29.7, 562.0], [29.8, 562.0], [29.9, 562.0], [30.0, 563.0], [30.1, 563.0], [30.2, 563.0], [30.3, 563.0], [30.4, 563.0], [30.5, 563.0], [30.6, 563.0], [30.7, 563.0], [30.8, 564.0], [30.9, 564.0], [31.0, 564.0], [31.1, 564.0], [31.2, 564.0], [31.3, 564.0], [31.4, 564.0], [31.5, 565.0], [31.6, 565.0], [31.7, 565.0], [31.8, 565.0], [31.9, 565.0], [32.0, 565.0], [32.1, 565.0], [32.2, 565.0], [32.3, 566.0], [32.4, 566.0], [32.5, 566.0], [32.6, 566.0], [32.7, 566.0], [32.8, 566.0], [32.9, 566.0], [33.0, 566.0], [33.1, 567.0], [33.2, 567.0], [33.3, 567.0], [33.4, 567.0], [33.5, 567.0], [33.6, 567.0], [33.7, 567.0], [33.8, 568.0], [33.9, 568.0], [34.0, 568.0], [34.1, 568.0], [34.2, 568.0], [34.3, 568.0], [34.4, 568.0], [34.5, 569.0], [34.6, 569.0], [34.7, 569.0], [34.8, 569.0], [34.9, 569.0], [35.0, 569.0], [35.1, 569.0], [35.2, 569.0], [35.3, 570.0], [35.4, 570.0], [35.5, 570.0], [35.6, 570.0], [35.7, 570.0], [35.8, 570.0], [35.9, 570.0], [36.0, 570.0], [36.1, 571.0], [36.2, 571.0], [36.3, 571.0], [36.4, 571.0], [36.5, 571.0], [36.6, 571.0], [36.7, 571.0], [36.8, 571.0], [36.9, 572.0], [37.0, 572.0], [37.1, 572.0], [37.2, 572.0], [37.3, 572.0], [37.4, 572.0], [37.5, 572.0], [37.6, 573.0], [37.7, 573.0], [37.8, 573.0], [37.9, 573.0], [38.0, 573.0], [38.1, 573.0], [38.2, 574.0], [38.3, 574.0], [38.4, 574.0], [38.5, 574.0], [38.6, 574.0], [38.7, 574.0], [38.8, 574.0], [38.9, 575.0], [39.0, 575.0], [39.1, 575.0], [39.2, 575.0], [39.3, 575.0], [39.4, 575.0], [39.5, 575.0], [39.6, 575.0], [39.7, 575.0], [39.8, 576.0], [39.9, 576.0], [40.0, 576.0], [40.1, 576.0], [40.2, 576.0], [40.3, 576.0], [40.4, 576.0], [40.5, 576.0], [40.6, 576.0], [40.7, 577.0], [40.8, 577.0], [40.9, 577.0], [41.0, 577.0], [41.1, 577.0], [41.2, 577.0], [41.3, 577.0], [41.4, 578.0], [41.5, 578.0], [41.6, 578.0], [41.7, 578.0], [41.8, 578.0], [41.9, 578.0], [42.0, 578.0], [42.1, 579.0], [42.2, 579.0], [42.3, 579.0], [42.4, 579.0], [42.5, 579.0], [42.6, 579.0], [42.7, 579.0], [42.8, 580.0], [42.9, 580.0], [43.0, 580.0], [43.1, 580.0], [43.2, 580.0], [43.3, 580.0], [43.4, 580.0], [43.5, 581.0], [43.6, 581.0], [43.7, 581.0], [43.8, 581.0], [43.9, 581.0], [44.0, 581.0], [44.1, 581.0], [44.2, 581.0], [44.3, 582.0], [44.4, 582.0], [44.5, 582.0], [44.6, 582.0], [44.7, 582.0], [44.8, 582.0], [44.9, 582.0], [45.0, 582.0], [45.1, 582.0], [45.2, 583.0], [45.3, 583.0], [45.4, 583.0], [45.5, 583.0], [45.6, 583.0], [45.7, 583.0], [45.8, 583.0], [45.9, 583.0], [46.0, 584.0], [46.1, 584.0], [46.2, 584.0], [46.3, 584.0], [46.4, 584.0], [46.5, 584.0], [46.6, 584.0], [46.7, 585.0], [46.8, 585.0], [46.9, 585.0], [47.0, 585.0], [47.1, 585.0], [47.2, 585.0], [47.3, 585.0], [47.4, 585.0], [47.5, 586.0], [47.6, 586.0], [47.7, 586.0], [47.8, 586.0], [47.9, 586.0], [48.0, 586.0], [48.1, 587.0], [48.2, 587.0], [48.3, 587.0], [48.4, 587.0], [48.5, 587.0], [48.6, 588.0], [48.7, 588.0], [48.8, 588.0], [48.9, 588.0], [49.0, 588.0], [49.1, 588.0], [49.2, 588.0], [49.3, 589.0], [49.4, 589.0], [49.5, 589.0], [49.6, 589.0], [49.7, 589.0], [49.8, 589.0], [49.9, 590.0], [50.0, 590.0], [50.1, 590.0], [50.2, 590.0], [50.3, 590.0], [50.4, 590.0], [50.5, 590.0], [50.6, 591.0], [50.7, 591.0], [50.8, 591.0], [50.9, 591.0], [51.0, 591.0], [51.1, 591.0], [51.2, 591.0], [51.3, 592.0], [51.4, 592.0], [51.5, 592.0], [51.6, 592.0], [51.7, 592.0], [51.8, 592.0], [51.9, 592.0], [52.0, 593.0], [52.1, 593.0], [52.2, 593.0], [52.3, 593.0], [52.4, 593.0], [52.5, 593.0], [52.6, 594.0], [52.7, 594.0], [52.8, 594.0], [52.9, 594.0], [53.0, 594.0], [53.1, 594.0], [53.2, 595.0], [53.3, 595.0], [53.4, 595.0], [53.5, 595.0], [53.6, 595.0], [53.7, 596.0], [53.8, 596.0], [53.9, 596.0], [54.0, 596.0], [54.1, 596.0], [54.2, 596.0], [54.3, 597.0], [54.4, 597.0], [54.5, 597.0], [54.6, 597.0], [54.7, 597.0], [54.8, 598.0], [54.9, 598.0], [55.0, 598.0], [55.1, 598.0], [55.2, 598.0], [55.3, 599.0], [55.4, 599.0], [55.5, 599.0], [55.6, 599.0], [55.7, 599.0], [55.8, 599.0], [55.9, 600.0], [56.0, 600.0], [56.1, 600.0], [56.2, 600.0], [56.3, 600.0], [56.4, 600.0], [56.5, 601.0], [56.6, 601.0], [56.7, 601.0], [56.8, 601.0], [56.9, 601.0], [57.0, 602.0], [57.1, 602.0], [57.2, 602.0], [57.3, 602.0], [57.4, 602.0], [57.5, 602.0], [57.6, 603.0], [57.7, 603.0], [57.8, 603.0], [57.9, 603.0], [58.0, 603.0], [58.1, 604.0], [58.2, 604.0], [58.3, 604.0], [58.4, 604.0], [58.5, 604.0], [58.6, 604.0], [58.7, 605.0], [58.8, 605.0], [58.9, 605.0], [59.0, 605.0], [59.1, 605.0], [59.2, 605.0], [59.3, 606.0], [59.4, 606.0], [59.5, 606.0], [59.6, 606.0], [59.7, 606.0], [59.8, 606.0], [59.9, 606.0], [60.0, 606.0], [60.1, 607.0], [60.2, 607.0], [60.3, 607.0], [60.4, 607.0], [60.5, 607.0], [60.6, 607.0], [60.7, 607.0], [60.8, 608.0], [60.9, 608.0], [61.0, 608.0], [61.1, 608.0], [61.2, 608.0], [61.3, 608.0], [61.4, 609.0], [61.5, 609.0], [61.6, 609.0], [61.7, 609.0], [61.8, 609.0], [61.9, 609.0], [62.0, 610.0], [62.1, 610.0], [62.2, 610.0], [62.3, 610.0], [62.4, 610.0], [62.5, 610.0], [62.6, 611.0], [62.7, 611.0], [62.8, 611.0], [62.9, 611.0], [63.0, 611.0], [63.1, 611.0], [63.2, 611.0], [63.3, 612.0], [63.4, 612.0], [63.5, 612.0], [63.6, 612.0], [63.7, 612.0], [63.8, 612.0], [63.9, 612.0], [64.0, 613.0], [64.1, 613.0], [64.2, 613.0], [64.3, 613.0], [64.4, 613.0], [64.5, 613.0], [64.6, 613.0], [64.7, 614.0], [64.8, 614.0], [64.9, 614.0], [65.0, 614.0], [65.1, 614.0], [65.2, 614.0], [65.3, 614.0], [65.4, 614.0], [65.5, 615.0], [65.6, 615.0], [65.7, 615.0], [65.8, 615.0], [65.9, 615.0], [66.0, 615.0], [66.1, 615.0], [66.2, 616.0], [66.3, 616.0], [66.4, 616.0], [66.5, 616.0], [66.6, 616.0], [66.7, 617.0], [66.8, 617.0], [66.9, 617.0], [67.0, 617.0], [67.1, 617.0], [67.2, 618.0], [67.3, 618.0], [67.4, 618.0], [67.5, 618.0], [67.6, 618.0], [67.7, 618.0], [67.8, 619.0], [67.9, 619.0], [68.0, 619.0], [68.1, 619.0], [68.2, 619.0], [68.3, 620.0], [68.4, 620.0], [68.5, 620.0], [68.6, 620.0], [68.7, 620.0], [68.8, 621.0], [68.9, 621.0], [69.0, 621.0], [69.1, 621.0], [69.2, 621.0], [69.3, 622.0], [69.4, 622.0], [69.5, 622.0], [69.6, 622.0], [69.7, 622.0], [69.8, 622.0], [69.9, 623.0], [70.0, 623.0], [70.1, 623.0], [70.2, 623.0], [70.3, 623.0], [70.4, 624.0], [70.5, 624.0], [70.6, 624.0], [70.7, 624.0], [70.8, 624.0], [70.9, 624.0], [71.0, 625.0], [71.1, 625.0], [71.2, 625.0], [71.3, 625.0], [71.4, 626.0], [71.5, 626.0], [71.6, 626.0], [71.7, 626.0], [71.8, 626.0], [71.9, 627.0], [72.0, 627.0], [72.1, 627.0], [72.2, 627.0], [72.3, 627.0], [72.4, 628.0], [72.5, 628.0], [72.6, 628.0], [72.7, 628.0], [72.8, 629.0], [72.9, 629.0], [73.0, 629.0], [73.1, 629.0], [73.2, 630.0], [73.3, 630.0], [73.4, 630.0], [73.5, 630.0], [73.6, 631.0], [73.7, 631.0], [73.8, 631.0], [73.9, 631.0], [74.0, 631.0], [74.1, 632.0], [74.2, 632.0], [74.3, 632.0], [74.4, 632.0], [74.5, 632.0], [74.6, 633.0], [74.7, 633.0], [74.8, 633.0], [74.9, 633.0], [75.0, 633.0], [75.1, 634.0], [75.2, 634.0], [75.3, 634.0], [75.4, 634.0], [75.5, 634.0], [75.6, 635.0], [75.7, 635.0], [75.8, 635.0], [75.9, 635.0], [76.0, 635.0], [76.1, 635.0], [76.2, 636.0], [76.3, 636.0], [76.4, 636.0], [76.5, 636.0], [76.6, 637.0], [76.7, 637.0], [76.8, 637.0], [76.9, 637.0], [77.0, 638.0], [77.1, 638.0], [77.2, 638.0], [77.3, 638.0], [77.4, 638.0], [77.5, 639.0], [77.6, 639.0], [77.7, 639.0], [77.8, 639.0], [77.9, 640.0], [78.0, 640.0], [78.1, 640.0], [78.2, 640.0], [78.3, 641.0], [78.4, 641.0], [78.5, 641.0], [78.6, 641.0], [78.7, 642.0], [78.8, 642.0], [78.9, 642.0], [79.0, 642.0], [79.1, 643.0], [79.2, 643.0], [79.3, 643.0], [79.4, 643.0], [79.5, 644.0], [79.6, 644.0], [79.7, 644.0], [79.8, 644.0], [79.9, 645.0], [80.0, 645.0], [80.1, 645.0], [80.2, 646.0], [80.3, 646.0], [80.4, 646.0], [80.5, 646.0], [80.6, 647.0], [80.7, 647.0], [80.8, 647.0], [80.9, 648.0], [81.0, 648.0], [81.1, 648.0], [81.2, 649.0], [81.3, 649.0], [81.4, 649.0], [81.5, 650.0], [81.6, 650.0], [81.7, 650.0], [81.8, 651.0], [81.9, 651.0], [82.0, 651.0], [82.1, 652.0], [82.2, 652.0], [82.3, 652.0], [82.4, 653.0], [82.5, 653.0], [82.6, 653.0], [82.7, 654.0], [82.8, 654.0], [82.9, 654.0], [83.0, 655.0], [83.1, 655.0], [83.2, 655.0], [83.3, 656.0], [83.4, 656.0], [83.5, 657.0], [83.6, 657.0], [83.7, 657.0], [83.8, 658.0], [83.9, 658.0], [84.0, 658.0], [84.1, 659.0], [84.2, 659.0], [84.3, 660.0], [84.4, 660.0], [84.5, 660.0], [84.6, 661.0], [84.7, 661.0], [84.8, 662.0], [84.9, 662.0], [85.0, 663.0], [85.1, 663.0], [85.2, 664.0], [85.3, 664.0], [85.4, 664.0], [85.5, 665.0], [85.6, 665.0], [85.7, 666.0], [85.8, 666.0], [85.9, 667.0], [86.0, 667.0], [86.1, 668.0], [86.2, 668.0], [86.3, 669.0], [86.4, 669.0], [86.5, 670.0], [86.6, 670.0], [86.7, 671.0], [86.8, 671.0], [86.9, 672.0], [87.0, 672.0], [87.1, 673.0], [87.2, 674.0], [87.3, 674.0], [87.4, 675.0], [87.5, 675.0], [87.6, 676.0], [87.7, 676.0], [87.8, 677.0], [87.9, 677.0], [88.0, 678.0], [88.1, 679.0], [88.2, 679.0], [88.3, 680.0], [88.4, 680.0], [88.5, 681.0], [88.6, 682.0], [88.7, 682.0], [88.8, 683.0], [88.9, 684.0], [89.0, 685.0], [89.1, 686.0], [89.2, 687.0], [89.3, 688.0], [89.4, 689.0], [89.5, 690.0], [89.6, 690.0], [89.7, 691.0], [89.8, 692.0], [89.9, 693.0], [90.0, 694.0], [90.1, 695.0], [90.2, 696.0], [90.3, 697.0], [90.4, 698.0], [90.5, 699.0], [90.6, 701.0], [90.7, 702.0], [90.8, 703.0], [90.9, 704.0], [91.0, 705.0], [91.1, 707.0], [91.2, 708.0], [91.3, 709.0], [91.4, 710.0], [91.5, 710.0], [91.6, 711.0], [91.7, 712.0], [91.8, 713.0], [91.9, 715.0], [92.0, 716.0], [92.1, 717.0], [92.2, 719.0], [92.3, 720.0], [92.4, 722.0], [92.5, 724.0], [92.6, 726.0], [92.7, 727.0], [92.8, 729.0], [92.9, 731.0], [93.0, 734.0], [93.1, 737.0], [93.2, 740.0], [93.3, 743.0], [93.4, 747.0], [93.5, 751.0], [93.6, 754.0], [93.7, 756.0], [93.8, 758.0], [93.9, 760.0], [94.0, 763.0], [94.1, 765.0], [94.2, 767.0], [94.3, 769.0], [94.4, 771.0], [94.5, 774.0], [94.6, 777.0], [94.7, 782.0], [94.8, 785.0], [94.9, 789.0], [95.0, 792.0], [95.1, 796.0], [95.2, 799.0], [95.3, 802.0], [95.4, 805.0], [95.5, 811.0], [95.6, 819.0], [95.7, 822.0], [95.8, 825.0], [95.9, 829.0], [96.0, 833.0], [96.1, 838.0], [96.2, 844.0], [96.3, 856.0], [96.4, 864.0], [96.5, 870.0], [96.6, 880.0], [96.7, 888.0], [96.8, 893.0], [96.9, 900.0], [97.0, 916.0], [97.1, 931.0], [97.2, 944.0], [97.3, 959.0], [97.4, 978.0], [97.5, 988.0], [97.6, 1000.0], [97.7, 1014.0], [97.8, 1054.0], [97.9, 1090.0], [98.0, 1134.0], [98.1, 1167.0], [98.2, 1188.0], [98.3, 1214.0], [98.4, 1251.0], [98.5, 1285.0], [98.6, 1336.0], [98.7, 1372.0], [98.8, 1401.0], [98.9, 1441.0], [99.0, 1478.0], [99.1, 1506.0], [99.2, 1563.0], [99.3, 1620.0], [99.4, 1708.0], [99.5, 1803.0], [99.6, 1950.0], [99.7, 2026.0], [99.8, 2190.0], [99.9, 2321.0], [100.0, 3590.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 51758.0, "series": [{"data": [[0.0, 528.0], [600.0, 33932.0], [700.0, 4601.0], [800.0, 1635.0], [900.0, 680.0], [1000.0, 317.0], [1100.0, 335.0], [1200.0, 267.0], [1300.0, 251.0], [1400.0, 284.0], [1500.0, 189.0], [100.0, 745.0], [1600.0, 116.0], [1700.0, 105.0], [1800.0, 68.0], [1900.0, 89.0], [2000.0, 92.0], [2100.0, 55.0], [2200.0, 68.0], [2300.0, 54.0], [2400.0, 11.0], [2500.0, 43.0], [2600.0, 4.0], [2800.0, 2.0], [2900.0, 1.0], [200.0, 323.0], [3300.0, 1.0], [3200.0, 1.0], [3400.0, 1.0], [3500.0, 3.0], [300.0, 277.0], [400.0, 1002.0], [500.0, 51758.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 899.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 94037.0, "series": [{"data": [[0.0, 2902.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 94037.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 899.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 826.5410911602195, "minX": 1.75235532E12, "maxY": 996.2571464683764, "series": [{"data": [[1.75235538E12, 826.5410911602195], [1.75235532E12, 996.2571464683764]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235538E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 100.0, "minX": 1.0, "maxY": 3590.0, "series": [{"data": [[2.0, 2899.0], [3.0, 2904.0], [4.0, 3271.0], [5.0, 2526.0], [6.0, 2528.0], [7.0, 2532.0], [8.0, 2537.0], [9.0, 2533.0], [10.0, 2531.0], [11.0, 2537.0], [12.0, 2534.0], [13.0, 2531.0], [14.0, 2540.0], [15.0, 2552.0], [16.0, 2559.0], [17.0, 2551.0], [18.0, 2549.0], [19.0, 2548.0], [20.0, 2549.0], [21.0, 2540.0], [22.0, 2545.0], [23.0, 2543.0], [24.0, 2556.0], [25.0, 2534.0], [26.0, 2535.0], [27.0, 2524.0], [28.0, 2521.0], [29.0, 2518.0], [30.0, 2515.0], [31.0, 2514.0], [33.0, 2511.0], [32.0, 2513.0], [35.0, 2502.0], [34.0, 2502.0], [37.0, 2507.0], [36.0, 2505.0], [39.0, 2510.0], [38.0, 2502.0], [41.0, 2505.0], [40.0, 2510.0], [43.0, 2501.0], [42.0, 2492.0], [45.0, 2508.0], [44.0, 2502.0], [47.0, 2497.0], [46.0, 2506.0], [49.0, 2479.0], [48.0, 2481.0], [51.0, 2468.0], [50.0, 2473.0], [53.0, 2450.0], [52.0, 2453.0], [55.0, 2452.0], [54.0, 2450.0], [57.0, 3550.0], [56.0, 2452.0], [59.0, 2243.0], [58.0, 3590.0], [61.0, 2269.0], [60.0, 2243.0], [63.0, 2292.0], [62.0, 2286.0], [67.0, 3388.0], [66.0, 2314.0], [65.0, 2292.0], [64.0, 2316.0], [71.0, 1938.0], [70.0, 3534.0], [69.0, 2308.0], [68.0, 3400.0], [75.0, 2085.0], [74.0, 2084.0], [73.0, 1956.0], [72.0, 2303.0], [79.0, 2098.0], [78.0, 2099.0], [77.0, 2292.0], [76.0, 2090.0], [83.0, 2106.0], [82.0, 2100.0], [81.0, 2194.5], [87.0, 2116.0], [86.0, 2288.0], [85.0, 2114.0], [84.0, 2289.0], [91.0, 2187.0], [90.0, 2186.0], [89.0, 2285.0], [88.0, 2117.0], [95.0, 2213.0], [94.0, 2209.0], [93.0, 2191.0], [92.0, 2279.0], [99.0, 2232.0], [98.0, 2541.0], [97.0, 2221.0], [96.0, 2278.0], [103.0, 2268.0], [102.0, 2241.0], [101.0, 1743.0], [100.0, 2240.0], [107.0, 2270.0], [106.0, 1778.0], [105.0, 2261.0], [104.0, 2271.0], [110.0, 2031.0], [108.0, 2260.0], [115.0, 2300.0], [114.0, 2254.0], [113.0, 2282.0], [112.0, 2041.0], [119.0, 1870.0], [118.0, 2301.0], [117.0, 1843.0], [116.0, 1843.0], [123.0, 1905.0], [122.0, 2301.0], [121.0, 2245.0], [120.0, 1899.0], [127.0, 2310.0], [126.0, 1902.0], [125.0, 2242.0], [124.0, 2305.0], [135.0, 1897.0], [134.0, 2313.0], [133.0, 2235.0], [132.0, 2311.0], [131.0, 1900.0], [130.0, 2239.0], [129.0, 2311.0], [128.0, 1897.0], [143.0, 2055.5], [141.0, 2324.0], [140.0, 1893.0], [139.0, 2326.0], [138.0, 1895.0], [137.0, 2321.0], [136.0, 2320.0], [151.0, 2201.0], [150.0, 2330.0], [149.0, 2330.0], [148.0, 1898.0], [147.0, 2328.0], [146.0, 2208.0], [145.0, 1897.0], [144.0, 2325.0], [159.0, 2334.0], [158.0, 1921.0], [157.0, 2334.0], [156.0, 2333.0], [155.0, 1901.0], [154.0, 2332.0], [153.0, 2113.5], [167.0, 2152.0], [165.0, 2184.0], [164.0, 2340.0], [163.0, 1936.0], [162.0, 2338.0], [161.0, 2335.0], [160.0, 1926.0], [175.0, 2339.0], [174.0, 1981.0], [173.0, 1980.0], [172.0, 2174.0], [171.0, 2340.0], [170.0, 1972.0], [169.0, 2339.0], [168.0, 1971.0], [183.0, 2244.0], [181.0, 1973.0], [180.0, 2157.0], [179.0, 2338.0], [178.0, 2164.0], [177.0, 1978.0], [176.0, 2342.0], [190.0, 1985.0], [189.0, 2337.0], [188.0, 2154.0], [187.0, 1981.0], [186.0, 2331.0], [185.0, 2154.0], [184.0, 1976.0], [199.0, 2329.0], [198.0, 2332.0], [197.0, 2157.0], [196.0, 1992.0], [195.0, 2337.0], [194.0, 2247.0], [192.0, 2248.0], [207.0, 2314.0], [206.0, 1996.0], [205.0, 2132.0], [204.0, 2316.0], [203.0, 1989.0], [202.0, 2323.0], [201.0, 2147.0], [200.0, 1981.0], [211.0, 165.36879432624116], [212.0, 604.75], [214.0, 271.6], [215.0, 2150.0], [213.0, 2305.0], [210.0, 2312.0], [209.0, 2313.0], [208.0, 2002.0], [219.0, 1265.0], [221.0, 789.5], [222.0, 715.8], [223.0, 2304.0], [220.0, 2008.0], [218.0, 2304.0], [217.0, 2304.0], [216.0, 2000.0], [224.0, 590.4], [225.0, 881.0], [226.0, 1189.0], [227.0, 530.0], [231.0, 1186.5], [230.0, 2029.0], [229.0, 2093.0], [228.0, 2020.0], [235.0, 835.0], [238.0, 233.5], [239.0, 2285.0], [237.0, 2126.0], [236.0, 2026.0], [234.0, 1899.0], [233.0, 2027.0], [232.0, 1883.0], [241.0, 1086.5], [244.0, 796.0], [247.0, 2028.0], [246.0, 1518.0], [245.0, 2286.0], [243.0, 2030.0], [242.0, 2287.0], [240.0, 2029.0], [248.0, 822.0], [249.0, 818.0], [251.0, 797.5], [254.0, 566.3333333333333], [255.0, 1194.0], [253.0, 2059.0], [252.0, 2281.0], [250.0, 2027.0], [271.0, 1562.0], [257.0, 1295.0], [256.0, 1532.0], [259.0, 1556.0], [258.0, 2019.0], [263.0, 2272.0], [262.0, 2048.0], [261.0, 2021.0], [260.0, 1558.0], [264.0, 100.0], [268.0, 586.3333333333333], [270.0, 2028.0], [269.0, 2271.0], [267.0, 2028.0], [266.0, 2272.0], [265.0, 2033.5], [284.0, 696.3333333333333], [272.0, 1172.0], [275.0, 666.25], [274.0, 1565.0], [273.0, 2042.0], [278.0, 1487.75], [279.0, 1072.5], [280.0, 325.1], [281.0, 394.0], [283.0, 2110.0], [285.0, 702.75], [287.0, 1576.0], [286.0, 2025.0], [301.0, 1091.5], [288.0, 1383.0], [289.0, 467.0], [290.0, 1808.5], [300.0, 2018.0], [291.0, 1595.0], [292.0, 637.6], [293.0, 2025.0], [294.0, 1199.5], [295.0, 1591.0], [296.0, 1211.5], [297.0, 1058.5], [298.0, 849.0], [299.0, 963.6666666666666], [303.0, 1584.0], [302.0, 2028.0], [317.0, 1049.0], [306.0, 879.0], [311.0, 857.0], [305.0, 2249.0], [304.0, 2030.0], [310.0, 2244.0], [309.0, 1600.0], [308.0, 2028.0], [314.0, 582.0], [315.0, 889.3333333333334], [318.0, 1197.0], [316.0, 1602.0], [307.0, 2012.0], [313.0, 2019.0], [312.0, 2240.0], [332.0, 647.75], [320.0, 1453.3333333333333], [323.0, 874.3333333333334], [322.0, 2367.0], [321.0, 1990.0], [324.0, 495.0], [325.0, 1996.0], [326.0, 1063.3333333333335], [327.0, 1168.0], [328.0, 1249.0], [331.0, 507.72727272727275], [329.0, 2211.0], [333.0, 1072.5], [334.0, 1158.5], [335.0, 1661.0], [350.0, 557.5], [336.0, 1040.5], [338.0, 911.0], [337.0, 1997.0], [339.0, 2198.0], [343.0, 1036.0], [342.0, 1716.0], [341.0, 2190.0], [340.0, 1719.0], [351.0, 2190.0], [345.0, 2187.0], [344.0, 1990.0], [349.0, 2191.0], [348.0, 2192.0], [347.0, 1991.0], [346.0, 1712.0], [367.0, 1207.0], [354.0, 896.5], [357.0, 1210.5], [356.0, 2183.0], [359.0, 2187.0], [353.0, 2187.0], [352.0, 1941.0], [358.0, 2183.0], [361.0, 316.0], [360.0, 1964.0], [364.0, 1319.0], [355.0, 1975.0], [366.0, 1667.0], [365.0, 1958.0], [363.0, 1668.0], [362.0, 2072.0], [382.0, 1324.0], [370.0, 988.0], [373.0, 1250.0], [375.0, 2164.0], [369.0, 2174.0], [368.0, 1898.0], [374.0, 1649.0], [381.0, 1119.5], [383.0, 1647.0], [380.0, 1648.0], [371.0, 1655.0], [379.0, 1878.0], [378.0, 2162.0], [377.0, 1648.0], [376.0, 2216.0], [398.0, 2679.0], [384.0, 564.0], [385.0, 1206.0], [387.0, 1643.0], [386.0, 2157.0], [388.0, 830.4], [389.0, 1640.0], [391.0, 1853.0], [390.0, 2196.0], [392.0, 810.6666666666667], [394.0, 584.0], [393.0, 2150.0], [395.0, 1077.25], [399.0, 1375.0], [397.0, 1636.0], [396.0, 2185.0], [413.0, 974.5], [401.0, 1014.3333333333334], [403.0, 226.0], [412.0, 2127.0], [405.0, 1482.0], [404.0, 2151.3333333333335], [406.0, 816.3333333333333], [407.0, 1632.0], [400.0, 1635.0], [408.0, 1112.0], [411.0, 676.75], [410.0, 1632.0], [409.0, 2667.0], [415.0, 761.4], [414.0, 1629.0], [428.0, 845.0], [418.0, 600.5], [419.0, 1203.5], [421.0, 879.3333333333333], [420.0, 1622.0], [422.0, 746.6666666666667], [423.0, 1622.0], [417.0, 1622.0], [416.0, 1626.0], [425.0, 1214.6666666666667], [427.0, 748.0], [426.0, 2097.0], [431.0, 881.0], [430.0, 1778.0], [429.0, 1621.0], [447.0, 728.25], [439.0, 893.5], [437.0, 299.0], [436.0, 1765.0], [438.0, 1734.0], [442.0, 715.5], [446.0, 2067.0], [445.0, 1615.0], [444.0, 1843.0], [435.0, 1618.0], [434.0, 2084.0], [433.0, 1853.0], [432.0, 1619.0], [443.0, 1613.0], [441.0, 2072.0], [440.0, 1847.0], [460.0, 887.0], [448.0, 372.0], [451.0, 759.25], [450.0, 1749.0], [449.0, 1611.0], [454.0, 1353.0], [453.0, 1610.0], [452.0, 2063.0], [455.0, 1002.5], [456.0, 642.0], [457.0, 1314.6666666666667], [459.0, 2062.0], [458.0, 1836.0], [462.0, 1333.5], [461.0, 1734.0], [463.0, 660.25], [466.0, 1152.5], [465.0, 793.6666666666667], [464.0, 2055.0], [467.0, 1112.0], [468.0, 1240.0], [469.0, 671.4], [471.0, 983.0], [470.0, 1591.0], [477.0, 1157.6666666666667], [478.0, 1183.5], [479.0, 1574.0], [475.0, 1707.0], [474.0, 1584.0], [473.0, 1811.0], [472.0, 2048.0], [493.0, 852.0], [480.0, 138.0], [481.0, 1452.0], [482.0, 1700.0], [492.0, 2022.0], [483.0, 2026.0], [485.0, 964.0], [484.0, 1568.0], [486.0, 1008.0], [487.0, 2022.0], [488.0, 1109.0], [489.0, 1151.0], [491.0, 1784.0], [490.0, 1690.0], [495.0, 1777.0], [494.0, 2020.0], [509.0, 1992.0], [496.0, 1325.5], [497.0, 338.6666666666667], [498.0, 1615.5], [501.0, 716.25], [500.0, 1550.0], [503.0, 1669.0], [502.0, 1765.0], [506.0, 656.0], [505.0, 1759.0], [504.0, 2010.0], [511.0, 1645.0], [510.0, 1750.0], [508.0, 1750.0], [499.0, 2014.0], [507.0, 1655.0], [537.0, 1008.0], [516.0, 782.6666666666667], [527.0, 1620.5], [513.0, 1746.0], [512.0, 1520.0], [515.0, 1642.0], [514.0, 1521.0], [536.0, 1961.0], [519.0, 1861.0], [517.0, 1746.0], [523.0, 696.3333333333333], [522.0, 1630.0], [521.0, 1510.0], [520.0, 1744.0], [525.0, 1967.0], [524.0, 1739.0], [526.0, 297.0], [530.0, 630.25], [533.0, 1127.0], [532.0, 1616.0], [531.0, 1963.0], [534.0, 633.0], [535.0, 1612.0], [539.0, 971.5], [538.0, 1492.0], [540.0, 1726.0], [543.0, 1385.3333333333333], [529.0, 1503.0], [528.0, 1965.0], [541.0, 1606.0], [570.0, 1069.5], [546.0, 887.3333333333334], [544.0, 779.3333333333333], [545.0, 1728.0], [548.0, 709.6666666666667], [547.0, 1728.0], [549.0, 741.75], [553.0, 1304.0], [554.0, 952.5], [555.0, 767.6666666666667], [556.0, 1468.0], [558.0, 1938.0], [557.0, 1580.0], [559.0, 1717.0], [560.0, 1092.0], [561.0, 1714.0], [575.0, 1705.0], [574.0, 1706.0], [571.0, 1049.5], [572.0, 1706.0], [573.0, 1051.0], [569.0, 950.5], [568.0, 1561.0], [551.0, 1478.0], [550.0, 1950.0], [562.0, 643.0], [564.0, 976.5], [563.0, 1586.0], [565.0, 1927.0], [567.0, 1711.0], [566.0, 1713.0], [601.0, 1042.5], [580.0, 639.3333333333333], [577.0, 949.5], [576.0, 1907.0], [579.0, 1901.0], [578.0, 1427.0], [591.0, 1688.0], [590.0, 1416.0], [583.0, 763.3333333333333], [582.0, 1901.0], [581.0, 1697.0], [600.0, 1452.0], [587.0, 907.5], [586.0, 1421.0], [585.0, 1796.5], [588.0, 1691.0], [589.0, 1047.5], [592.0, 581.5], [596.0, 792.6666666666667], [595.0, 1407.0], [594.0, 1893.0], [593.0, 1686.0], [598.0, 1887.0], [597.0, 1502.0], [602.0, 1162.0], [604.0, 1884.0], [603.0, 1397.0], [605.0, 850.0], [607.0, 1883.0], [606.0, 1395.0], [634.0, 915.0], [612.0, 701.6666666666667], [608.0, 651.3333333333333], [611.0, 1496.0], [610.0, 1689.0], [615.0, 1034.0], [614.0, 1652.0], [613.0, 1495.0], [633.0, 1481.0], [632.0, 1856.0], [621.0, 871.3333333333333], [620.0, 1871.0], [619.0, 1494.0], [618.0, 1574.0], [616.0, 1380.0], [623.0, 820.4], [626.0, 781.5], [630.0, 780.0], [629.0, 1482.0], [628.0, 1646.0], [627.0, 1488.0], [631.0, 1481.0], [635.0, 1125.0], [637.0, 1472.0], [636.0, 1347.0], [638.0, 838.3333333333333], [639.0, 1345.0], [625.0, 1758.5], [643.0, 1127.5], [642.0, 910.0], [641.0, 1343.0], [640.0, 1471.0], [646.0, 819.3333333333334], [645.0, 1617.0], [644.0, 1341.0], [647.0, 1340.0], [666.0, 192.0], [670.0, 334.3333333333333], [668.0, 1456.0], [667.0, 1710.0], [671.0, 1315.0], [658.0, 1325.0], [657.0, 1524.5], [649.0, 828.5], [648.0, 1462.0], [650.0, 1333.0], [651.0, 1124.5], [653.0, 734.0], [652.0, 1460.0], [654.0, 1329.0], [655.0, 790.5], [659.0, 826.0], [662.0, 861.0], [661.0, 1459.0], [660.0, 1591.0], [663.0, 300.5], [697.0, 192.0], [672.0, 756.5], [677.0, 441.66666666666663], [673.0, 1475.0], [679.0, 1821.0], [678.0, 1591.0], [681.0, 293.5], [680.0, 1470.0], [683.0, 1457.25], [682.0, 1318.0], [684.0, 644.0], [685.0, 1590.75], [688.0, 893.0], [692.0, 397.0], [691.0, 1583.0], [693.0, 301.5], [694.0, 741.0], [703.0, 191.0], [701.0, 1546.2666666666667], [698.0, 1399.5], [728.0, 973.5], [706.0, 798.5], [708.0, 1195.0], [710.0, 1238.0], [709.0, 1519.0], [712.0, 1158.0], [714.0, 1769.0], [713.0, 1403.0], [716.0, 1516.0], [715.0, 1233.0], [719.0, 851.0], [705.0, 1769.0], [704.0, 1538.0], [718.0, 1497.5], [725.0, 190.0], [726.0, 1133.0], [727.0, 1495.0], [734.0, 711.0], [733.0, 1208.0], [732.0, 1374.0], [731.0, 1353.0], [729.0, 1212.0], [735.0, 1372.0], [720.0, 1396.0], [722.0, 1224.0], [721.0, 1762.0], [724.0, 1387.0], [723.0, 1505.0], [763.0, 940.5], [740.0, 1039.0], [745.0, 779.0], [744.0, 1196.0], [747.0, 1191.0], [746.0, 1733.0], [749.0, 1475.0], [748.0, 1359.0], [751.0, 1354.0], [736.0, 1749.0], [739.0, 1367.0], [737.0, 1206.0], [750.0, 1189.0], [752.0, 808.5], [753.0, 960.5], [754.0, 1470.0], [757.0, 1594.0], [755.0, 1183.0], [759.0, 1175.0], [758.0, 1344.0], [761.0, 684.0], [760.0, 1454.0], [743.0, 1484.0], [742.0, 1365.0], [741.0, 1484.0], [762.0, 1332.0], [764.0, 938.0], [765.0, 1328.0], [767.0, 595.0], [766.0, 1327.0], [792.0, 317.0], [772.0, 870.5], [768.0, 541.0], [769.0, 1691.0], [770.0, 494.6842105263158], [771.0, 592.0], [773.0, 825.0], [774.0, 457.20512820512806], [775.0, 1117.3333333333333], [780.0, 731.5], [779.0, 1425.0], [778.0, 1286.0], [776.0, 1146.0], [781.0, 1423.0], [783.0, 1220.5], [796.0, 580.5], [795.0, 1416.0], [794.0, 1130.0], [793.0, 1535.0], [797.0, 1271.0], [799.0, 1126.0], [786.0, 1279.5], [784.0, 1422.0], [788.0, 1420.0], [787.0, 1658.0], [791.0, 1131.0], [790.0, 1276.5], [798.0, 1416.0], [825.0, 858.5], [830.0, 869.6666666666667], [827.0, 977.5], [818.0, 776.3333333333333], [823.0, 1619.0], [822.0, 1089.0], [821.0, 1398.0], [820.0, 1244.0], [829.0, 728.0], [831.0, 726.25], [817.0, 1094.0], [816.0, 1400.0], [828.0, 1080.0], [826.0, 1622.0], [824.0, 1396.0], [807.0, 1523.5], [805.0, 1117.0], [804.0, 1410.0], [803.0, 1642.0], [802.0, 1122.0], [801.0, 1413.0], [800.0, 1644.0], [815.0, 1401.0], [814.0, 1402.0], [813.0, 1102.0], [812.0, 1637.0], [811.0, 1404.0], [810.0, 1520.5], [808.0, 1407.0], [839.0, 644.0], [834.0, 761.25], [833.0, 569.5], [832.0, 1075.0], [846.0, 876.25], [847.0, 563.5], [835.0, 674.5], [836.0, 603.4], [837.0, 630.75], [838.0, 1389.0], [848.0, 778.3333333333333], [862.0, 495.3333333333333], [863.0, 1270.3333333333333], [860.0, 831.0], [861.0, 493.5], [858.0, 631.25], [859.0, 581.25], [856.0, 846.0], [857.0, 617.2], [849.0, 752.0], [850.0, 344.3333333333333], [851.0, 771.0], [852.0, 835.5], [853.0, 593.6666666666666], [854.0, 783.0], [855.0, 293.0], [842.0, 652.6666666666667], [841.0, 1388.0], [840.0, 1064.0], [843.0, 485.5], [844.0, 1058.6666666666667], [845.0, 425.75], [866.0, 787.0], [875.0, 496.5], [864.0, 659.5], [865.0, 1024.0], [878.0, 831.0], [879.0, 643.5], [869.0, 733.0], [868.0, 1570.0], [867.0, 1022.0], [870.0, 517.4545454545455], [881.0, 641.5], [880.0, 993.0], [883.0, 1306.0], [882.0, 1143.0], [895.0, 576.3333333333334], [893.0, 977.0], [892.0, 636.5], [890.0, 976.0], [888.0, 325.0], [871.0, 1566.0], [889.0, 634.5], [884.0, 824.5], [885.0, 222.5], [887.0, 985.0], [886.0, 1301.0], [872.0, 939.5], [873.0, 722.75], [874.0, 533.5333333333333], [876.0, 1012.0], [877.0, 672.6666666666666], [900.0, 486.66666666666663], [896.0, 858.0], [899.0, 1196.5], [897.0, 158.0], [903.0, 314.6666666666667], [902.0, 1101.0], [901.0, 167.0], [921.0, 901.0], [920.0, 237.0], [922.0, 384.0], [926.0, 593.1666666666666], [925.0, 1039.5], [924.0, 241.0], [923.0, 899.0], [927.0, 674.5], [912.0, 903.0], [906.0, 573.0833333333333], [904.0, 1252.0], [907.0, 582.5], [908.0, 472.5], [910.0, 224.0], [909.0, 211.0], [911.0, 394.0], [913.0, 444.6666666666667], [916.0, 355.5], [915.0, 972.5], [917.0, 235.0], [919.0, 646.0], [918.0, 1033.0], [931.0, 702.0], [929.0, 705.0], [928.0, 242.0], [930.0, 242.0], [932.0, 345.5], [934.0, 263.0], [933.0, 1015.0], [935.0, 896.6666666666666], [937.0, 592.0], [936.0, 1016.0], [938.0, 738.5], [943.0, 820.5714285714286], [942.0, 644.5], [941.0, 967.0], [940.0, 584.0], [939.0, 583.5], [949.0, 826.8], [954.0, 773.6249999999999], [953.0, 1501.0], [952.0, 768.0], [955.0, 895.5], [957.0, 290.0], [956.0, 913.0], [958.0, 943.0], [959.0, 287.0], [946.0, 638.0], [944.0, 908.5], [948.0, 905.75], [947.0, 1114.3333333333333], [951.0, 400.0], [950.0, 1496.0], [987.0, 880.0], [972.0, 629.6], [963.0, 862.75], [975.0, 1134.0], [961.0, 697.6666666666666], [960.0, 1496.0], [962.0, 291.0], [964.0, 390.0], [967.0, 836.5], [966.0, 1181.0], [965.0, 1503.0], [984.0, 1182.5], [986.0, 879.25], [985.0, 695.0], [991.0, 700.0], [976.0, 603.0], [990.0, 902.3076923076923], [989.0, 854.3913043478261], [988.0, 903.0], [977.0, 940.0], [981.0, 822.1111111111111], [980.0, 797.0], [979.0, 798.0], [978.0, 658.5], [983.0, 945.4], [982.0, 658.3333333333334], [968.0, 728.6666666666666], [969.0, 602.0], [970.0, 807.0], [971.0, 1519.0], [973.0, 902.2], [974.0, 528.75], [996.0, 737.2], [998.0, 703.3000000000001], [1000.0, 607.0409037827922], [999.0, 541.0], [995.0, 839.7272727272727], [994.0, 1038.0], [992.0, 733.0], [1.0, 2891.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[991.2335595576415, 616.4769210327345]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11004.8, "minX": 1.75235532E12, "maxY": 392253.68333333335, "series": [{"data": [[1.75235538E12, 11906.383333333333], [1.75235532E12, 392253.68333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235538E12, 11004.8], [1.75235532E12, 360779.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235538E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 602.7595690000273, "minX": 1.75235532E12, "maxY": 1066.1843922651942, "series": [{"data": [[1.75235538E12, 1066.1843922651942], [1.75235532E12, 602.7595690000273]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235538E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 602.7535337363886, "minX": 1.75235532E12, "maxY": 1066.1533149171285, "series": [{"data": [[1.75235538E12, 1066.1533149171285], [1.75235532E12, 602.7535337363886]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235538E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.030732044198895032, "minX": 1.75235532E12, "maxY": 0.3975690421520385, "series": [{"data": [[1.75235538E12, 0.030732044198895032], [1.75235532E12, 0.3975690421520385]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235538E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.75235532E12, "maxY": 3590.0, "series": [{"data": [[1.75235538E12, 3590.0], [1.75235532E12, 2039.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235538E12, 2026.0], [1.75235532E12, 692.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235538E12, 2535.0600000000004], [1.75235532E12, 841.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235538E12, 2273.6000000000004], [1.75235532E12, 734.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235538E12, 97.0], [1.75235532E12, 6.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235538E12, 911.5], [1.75235532E12, 602.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235538E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 49.0, "minX": 27.0, "maxY": 2534.0, "series": [{"data": [[752.0, 295.0], [746.0, 771.0], [938.0, 784.0], [1270.0, 798.5], [1308.0, 782.0], [1388.0, 636.0], [1546.0, 631.0], [1583.0, 614.0], [1655.0, 567.0], [1612.0, 612.0], [1606.0, 610.5], [1622.0, 614.0], [1603.0, 658.0], [1643.0, 609.0], [1645.0, 636.0], [1619.0, 619.0], [1659.0, 591.0], [1662.0, 580.0], [1634.0, 596.0], [1638.0, 579.0], [1640.0, 628.0], [1672.0, 578.5], [1721.0, 565.0], [1679.0, 598.0], [1675.0, 595.0], [1717.0, 592.0], [1705.0, 568.0], [1706.0, 581.0], [1684.0, 592.0], [1683.0, 589.0], [1700.0, 562.0], [1685.0, 584.0], [1688.0, 586.0], [1686.0, 581.0], [1687.0, 595.0], [1694.0, 583.0], [1671.0, 577.0], [1665.0, 591.0], [1693.0, 586.0], [1697.0, 573.0], [1698.0, 587.0], [1723.0, 580.0], [1722.0, 580.0], [1773.0, 588.0], [1748.0, 582.0], [1736.0, 565.0], [1732.0, 578.0], [1740.0, 572.0], [1798.0, 583.0], [27.0, 49.0], [37.0, 2534.0], [330.0, 2169.0], [475.0, 1616.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1798.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 44.0, "minX": 27.0, "maxY": 2534.0, "series": [{"data": [[752.0, 295.0], [746.0, 771.0], [938.0, 784.0], [1270.0, 798.5], [1308.0, 782.0], [1388.0, 636.0], [1546.0, 631.0], [1583.0, 614.0], [1655.0, 567.0], [1612.0, 612.0], [1606.0, 610.5], [1622.0, 614.0], [1603.0, 658.0], [1643.0, 609.0], [1645.0, 636.0], [1619.0, 619.0], [1659.0, 591.0], [1662.0, 580.0], [1634.0, 596.0], [1638.0, 579.0], [1640.0, 628.0], [1672.0, 578.5], [1721.0, 565.0], [1679.0, 598.0], [1675.0, 595.0], [1717.0, 592.0], [1705.0, 568.0], [1706.0, 581.0], [1684.0, 592.0], [1683.0, 589.0], [1700.0, 562.0], [1685.0, 584.0], [1688.0, 586.0], [1686.0, 581.0], [1687.0, 595.0], [1694.0, 583.0], [1671.0, 577.0], [1665.0, 591.0], [1693.0, 586.0], [1697.0, 573.0], [1698.0, 587.0], [1723.0, 580.0], [1722.0, 580.0], [1773.0, 588.0], [1748.0, 582.0], [1736.0, 565.0], [1732.0, 578.0], [1740.0, 572.0], [1798.0, 583.0], [27.0, 44.0], [37.0, 2534.0], [330.0, 2169.0], [475.0, 1616.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1798.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 31.6, "minX": 1.75235532E12, "maxY": 1599.0333333333333, "series": [{"data": [[1.75235538E12, 31.6], [1.75235532E12, 1599.0333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235538E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 48.266666666666666, "minX": 1.75235532E12, "maxY": 1582.3666666666666, "series": [{"data": [[1.75235538E12, 48.266666666666666], [1.75235532E12, 1582.3666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235538E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 48.266666666666666, "minX": 1.75235532E12, "maxY": 1582.3666666666666, "series": [{"data": [[1.75235538E12, 48.266666666666666], [1.75235532E12, 1582.3666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235538E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 48.266666666666666, "minX": 1.75235532E12, "maxY": 1582.3666666666666, "series": [{"data": [[1.75235538E12, 48.266666666666666], [1.75235532E12, 1582.3666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235538E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

