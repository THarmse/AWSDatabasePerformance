/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 2190.0, "series": [{"data": [[0.0, 0.0], [0.1, 4.0], [0.2, 5.0], [0.3, 5.0], [0.4, 6.0], [0.5, 6.0], [0.6, 7.0], [0.7, 8.0], [0.8, 9.0], [0.9, 10.0], [1.0, 12.0], [1.1, 14.0], [1.2, 17.0], [1.3, 18.0], [1.4, 18.0], [1.5, 20.0], [1.6, 22.0], [1.7, 23.0], [1.8, 26.0], [1.9, 29.0], [2.0, 31.0], [2.1, 33.0], [2.2, 37.0], [2.3, 41.0], [2.4, 44.0], [2.5, 46.0], [2.6, 49.0], [2.7, 54.0], [2.8, 58.0], [2.9, 61.0], [3.0, 67.0], [3.1, 74.0], [3.2, 78.0], [3.3, 85.0], [3.4, 91.0], [3.5, 93.0], [3.6, 97.0], [3.7, 101.0], [3.8, 103.0], [3.9, 106.0], [4.0, 111.0], [4.1, 120.0], [4.2, 126.0], [4.3, 132.0], [4.4, 135.0], [4.5, 138.0], [4.6, 144.0], [4.7, 149.0], [4.8, 157.0], [4.9, 163.0], [5.0, 171.0], [5.1, 181.0], [5.2, 188.0], [5.3, 192.0], [5.4, 198.0], [5.5, 203.0], [5.6, 208.0], [5.7, 218.0], [5.8, 227.0], [5.9, 231.0], [6.0, 237.0], [6.1, 240.0], [6.2, 241.0], [6.3, 242.0], [6.4, 243.0], [6.5, 245.0], [6.6, 246.0], [6.7, 248.0], [6.8, 250.0], [6.9, 251.0], [7.0, 253.0], [7.1, 255.0], [7.2, 256.0], [7.3, 258.0], [7.4, 259.0], [7.5, 260.0], [7.6, 261.0], [7.7, 261.0], [7.8, 262.0], [7.9, 263.0], [8.0, 264.0], [8.1, 265.0], [8.2, 266.0], [8.3, 267.0], [8.4, 268.0], [8.5, 268.0], [8.6, 269.0], [8.7, 270.0], [8.8, 271.0], [8.9, 271.0], [9.0, 272.0], [9.1, 273.0], [9.2, 273.0], [9.3, 273.0], [9.4, 274.0], [9.5, 274.0], [9.6, 275.0], [9.7, 275.0], [9.8, 275.0], [9.9, 276.0], [10.0, 276.0], [10.1, 277.0], [10.2, 277.0], [10.3, 277.0], [10.4, 277.0], [10.5, 278.0], [10.6, 278.0], [10.7, 278.0], [10.8, 278.0], [10.9, 279.0], [11.0, 279.0], [11.1, 279.0], [11.2, 280.0], [11.3, 280.0], [11.4, 280.0], [11.5, 280.0], [11.6, 281.0], [11.7, 281.0], [11.8, 281.0], [11.9, 281.0], [12.0, 282.0], [12.1, 282.0], [12.2, 282.0], [12.3, 283.0], [12.4, 283.0], [12.5, 283.0], [12.6, 284.0], [12.7, 284.0], [12.8, 284.0], [12.9, 285.0], [13.0, 285.0], [13.1, 285.0], [13.2, 285.0], [13.3, 286.0], [13.4, 286.0], [13.5, 286.0], [13.6, 286.0], [13.7, 287.0], [13.8, 287.0], [13.9, 287.0], [14.0, 288.0], [14.1, 288.0], [14.2, 288.0], [14.3, 289.0], [14.4, 289.0], [14.5, 289.0], [14.6, 290.0], [14.7, 290.0], [14.8, 290.0], [14.9, 291.0], [15.0, 291.0], [15.1, 292.0], [15.2, 292.0], [15.3, 292.0], [15.4, 292.0], [15.5, 293.0], [15.6, 293.0], [15.7, 293.0], [15.8, 294.0], [15.9, 294.0], [16.0, 294.0], [16.1, 294.0], [16.2, 295.0], [16.3, 295.0], [16.4, 295.0], [16.5, 296.0], [16.6, 296.0], [16.7, 296.0], [16.8, 297.0], [16.9, 297.0], [17.0, 297.0], [17.1, 297.0], [17.2, 298.0], [17.3, 298.0], [17.4, 298.0], [17.5, 298.0], [17.6, 299.0], [17.7, 299.0], [17.8, 299.0], [17.9, 300.0], [18.0, 300.0], [18.1, 300.0], [18.2, 301.0], [18.3, 301.0], [18.4, 301.0], [18.5, 301.0], [18.6, 302.0], [18.7, 302.0], [18.8, 302.0], [18.9, 302.0], [19.0, 303.0], [19.1, 303.0], [19.2, 303.0], [19.3, 303.0], [19.4, 303.0], [19.5, 304.0], [19.6, 304.0], [19.7, 304.0], [19.8, 304.0], [19.9, 304.0], [20.0, 305.0], [20.1, 305.0], [20.2, 305.0], [20.3, 305.0], [20.4, 305.0], [20.5, 306.0], [20.6, 306.0], [20.7, 306.0], [20.8, 306.0], [20.9, 307.0], [21.0, 307.0], [21.1, 307.0], [21.2, 307.0], [21.3, 308.0], [21.4, 308.0], [21.5, 308.0], [21.6, 308.0], [21.7, 308.0], [21.8, 308.0], [21.9, 308.0], [22.0, 309.0], [22.1, 309.0], [22.2, 309.0], [22.3, 309.0], [22.4, 309.0], [22.5, 309.0], [22.6, 309.0], [22.7, 310.0], [22.8, 310.0], [22.9, 310.0], [23.0, 310.0], [23.1, 310.0], [23.2, 310.0], [23.3, 310.0], [23.4, 311.0], [23.5, 311.0], [23.6, 311.0], [23.7, 311.0], [23.8, 311.0], [23.9, 311.0], [24.0, 311.0], [24.1, 311.0], [24.2, 311.0], [24.3, 311.0], [24.4, 312.0], [24.5, 312.0], [24.6, 312.0], [24.7, 312.0], [24.8, 312.0], [24.9, 312.0], [25.0, 312.0], [25.1, 312.0], [25.2, 312.0], [25.3, 313.0], [25.4, 313.0], [25.5, 313.0], [25.6, 313.0], [25.7, 313.0], [25.8, 313.0], [25.9, 313.0], [26.0, 313.0], [26.1, 313.0], [26.2, 314.0], [26.3, 314.0], [26.4, 314.0], [26.5, 314.0], [26.6, 314.0], [26.7, 314.0], [26.8, 314.0], [26.9, 314.0], [27.0, 314.0], [27.1, 314.0], [27.2, 314.0], [27.3, 315.0], [27.4, 315.0], [27.5, 315.0], [27.6, 315.0], [27.7, 315.0], [27.8, 315.0], [27.9, 315.0], [28.0, 315.0], [28.1, 315.0], [28.2, 315.0], [28.3, 315.0], [28.4, 316.0], [28.5, 316.0], [28.6, 316.0], [28.7, 316.0], [28.8, 316.0], [28.9, 316.0], [29.0, 316.0], [29.1, 316.0], [29.2, 316.0], [29.3, 316.0], [29.4, 316.0], [29.5, 316.0], [29.6, 316.0], [29.7, 317.0], [29.8, 317.0], [29.9, 317.0], [30.0, 317.0], [30.1, 317.0], [30.2, 317.0], [30.3, 317.0], [30.4, 317.0], [30.5, 317.0], [30.6, 317.0], [30.7, 317.0], [30.8, 317.0], [30.9, 317.0], [31.0, 318.0], [31.1, 318.0], [31.2, 318.0], [31.3, 318.0], [31.4, 318.0], [31.5, 318.0], [31.6, 318.0], [31.7, 318.0], [31.8, 318.0], [31.9, 318.0], [32.0, 318.0], [32.1, 319.0], [32.2, 319.0], [32.3, 319.0], [32.4, 319.0], [32.5, 319.0], [32.6, 319.0], [32.7, 319.0], [32.8, 319.0], [32.9, 319.0], [33.0, 319.0], [33.1, 319.0], [33.2, 320.0], [33.3, 320.0], [33.4, 320.0], [33.5, 320.0], [33.6, 320.0], [33.7, 320.0], [33.8, 320.0], [33.9, 320.0], [34.0, 320.0], [34.1, 320.0], [34.2, 321.0], [34.3, 321.0], [34.4, 321.0], [34.5, 321.0], [34.6, 321.0], [34.7, 321.0], [34.8, 321.0], [34.9, 321.0], [35.0, 321.0], [35.1, 321.0], [35.2, 322.0], [35.3, 322.0], [35.4, 322.0], [35.5, 322.0], [35.6, 322.0], [35.7, 322.0], [35.8, 322.0], [35.9, 322.0], [36.0, 322.0], [36.1, 323.0], [36.2, 323.0], [36.3, 323.0], [36.4, 323.0], [36.5, 323.0], [36.6, 323.0], [36.7, 323.0], [36.8, 323.0], [36.9, 323.0], [37.0, 323.0], [37.1, 324.0], [37.2, 324.0], [37.3, 324.0], [37.4, 324.0], [37.5, 324.0], [37.6, 324.0], [37.7, 324.0], [37.8, 324.0], [37.9, 324.0], [38.0, 324.0], [38.1, 324.0], [38.2, 325.0], [38.3, 325.0], [38.4, 325.0], [38.5, 325.0], [38.6, 325.0], [38.7, 325.0], [38.8, 325.0], [38.9, 325.0], [39.0, 325.0], [39.1, 325.0], [39.2, 325.0], [39.3, 326.0], [39.4, 326.0], [39.5, 326.0], [39.6, 326.0], [39.7, 326.0], [39.8, 326.0], [39.9, 326.0], [40.0, 326.0], [40.1, 326.0], [40.2, 326.0], [40.3, 326.0], [40.4, 326.0], [40.5, 327.0], [40.6, 327.0], [40.7, 327.0], [40.8, 327.0], [40.9, 327.0], [41.0, 327.0], [41.1, 327.0], [41.2, 327.0], [41.3, 327.0], [41.4, 327.0], [41.5, 327.0], [41.6, 327.0], [41.7, 328.0], [41.8, 328.0], [41.9, 328.0], [42.0, 328.0], [42.1, 328.0], [42.2, 328.0], [42.3, 328.0], [42.4, 328.0], [42.5, 328.0], [42.6, 328.0], [42.7, 328.0], [42.8, 328.0], [42.9, 329.0], [43.0, 329.0], [43.1, 329.0], [43.2, 329.0], [43.3, 329.0], [43.4, 329.0], [43.5, 329.0], [43.6, 329.0], [43.7, 329.0], [43.8, 329.0], [43.9, 329.0], [44.0, 330.0], [44.1, 330.0], [44.2, 330.0], [44.3, 330.0], [44.4, 330.0], [44.5, 330.0], [44.6, 330.0], [44.7, 330.0], [44.8, 330.0], [44.9, 330.0], [45.0, 330.0], [45.1, 330.0], [45.2, 331.0], [45.3, 331.0], [45.4, 331.0], [45.5, 331.0], [45.6, 331.0], [45.7, 331.0], [45.8, 331.0], [45.9, 331.0], [46.0, 331.0], [46.1, 331.0], [46.2, 331.0], [46.3, 332.0], [46.4, 332.0], [46.5, 332.0], [46.6, 332.0], [46.7, 332.0], [46.8, 332.0], [46.9, 332.0], [47.0, 332.0], [47.1, 332.0], [47.2, 332.0], [47.3, 332.0], [47.4, 333.0], [47.5, 333.0], [47.6, 333.0], [47.7, 333.0], [47.8, 333.0], [47.9, 333.0], [48.0, 333.0], [48.1, 333.0], [48.2, 333.0], [48.3, 333.0], [48.4, 333.0], [48.5, 333.0], [48.6, 333.0], [48.7, 334.0], [48.8, 334.0], [48.9, 334.0], [49.0, 334.0], [49.1, 334.0], [49.2, 334.0], [49.3, 334.0], [49.4, 334.0], [49.5, 334.0], [49.6, 334.0], [49.7, 334.0], [49.8, 334.0], [49.9, 335.0], [50.0, 335.0], [50.1, 335.0], [50.2, 335.0], [50.3, 335.0], [50.4, 335.0], [50.5, 335.0], [50.6, 335.0], [50.7, 335.0], [50.8, 335.0], [50.9, 336.0], [51.0, 336.0], [51.1, 336.0], [51.2, 336.0], [51.3, 336.0], [51.4, 336.0], [51.5, 336.0], [51.6, 336.0], [51.7, 336.0], [51.8, 337.0], [51.9, 337.0], [52.0, 337.0], [52.1, 337.0], [52.2, 337.0], [52.3, 337.0], [52.4, 337.0], [52.5, 337.0], [52.6, 337.0], [52.7, 338.0], [52.8, 338.0], [52.9, 338.0], [53.0, 338.0], [53.1, 338.0], [53.2, 338.0], [53.3, 338.0], [53.4, 338.0], [53.5, 338.0], [53.6, 339.0], [53.7, 339.0], [53.8, 339.0], [53.9, 339.0], [54.0, 339.0], [54.1, 339.0], [54.2, 339.0], [54.3, 340.0], [54.4, 340.0], [54.5, 340.0], [54.6, 340.0], [54.7, 340.0], [54.8, 340.0], [54.9, 340.0], [55.0, 340.0], [55.1, 340.0], [55.2, 341.0], [55.3, 341.0], [55.4, 341.0], [55.5, 341.0], [55.6, 341.0], [55.7, 341.0], [55.8, 341.0], [55.9, 341.0], [56.0, 342.0], [56.1, 342.0], [56.2, 342.0], [56.3, 342.0], [56.4, 342.0], [56.5, 342.0], [56.6, 342.0], [56.7, 342.0], [56.8, 343.0], [56.9, 343.0], [57.0, 343.0], [57.1, 343.0], [57.2, 343.0], [57.3, 343.0], [57.4, 343.0], [57.5, 343.0], [57.6, 344.0], [57.7, 344.0], [57.8, 344.0], [57.9, 344.0], [58.0, 344.0], [58.1, 344.0], [58.2, 344.0], [58.3, 344.0], [58.4, 344.0], [58.5, 345.0], [58.6, 345.0], [58.7, 345.0], [58.8, 345.0], [58.9, 345.0], [59.0, 345.0], [59.1, 345.0], [59.2, 345.0], [59.3, 346.0], [59.4, 346.0], [59.5, 346.0], [59.6, 346.0], [59.7, 346.0], [59.8, 346.0], [59.9, 346.0], [60.0, 347.0], [60.1, 347.0], [60.2, 347.0], [60.3, 347.0], [60.4, 347.0], [60.5, 347.0], [60.6, 347.0], [60.7, 347.0], [60.8, 348.0], [60.9, 348.0], [61.0, 348.0], [61.1, 348.0], [61.2, 348.0], [61.3, 348.0], [61.4, 348.0], [61.5, 348.0], [61.6, 349.0], [61.7, 349.0], [61.8, 349.0], [61.9, 349.0], [62.0, 349.0], [62.1, 349.0], [62.2, 349.0], [62.3, 350.0], [62.4, 350.0], [62.5, 350.0], [62.6, 350.0], [62.7, 350.0], [62.8, 350.0], [62.9, 350.0], [63.0, 350.0], [63.1, 351.0], [63.2, 351.0], [63.3, 351.0], [63.4, 351.0], [63.5, 351.0], [63.6, 351.0], [63.7, 351.0], [63.8, 352.0], [63.9, 352.0], [64.0, 352.0], [64.1, 352.0], [64.2, 352.0], [64.3, 352.0], [64.4, 352.0], [64.5, 353.0], [64.6, 353.0], [64.7, 353.0], [64.8, 353.0], [64.9, 353.0], [65.0, 353.0], [65.1, 353.0], [65.2, 353.0], [65.3, 354.0], [65.4, 354.0], [65.5, 354.0], [65.6, 354.0], [65.7, 354.0], [65.8, 354.0], [65.9, 355.0], [66.0, 355.0], [66.1, 355.0], [66.2, 355.0], [66.3, 355.0], [66.4, 355.0], [66.5, 355.0], [66.6, 356.0], [66.7, 356.0], [66.8, 356.0], [66.9, 356.0], [67.0, 356.0], [67.1, 356.0], [67.2, 357.0], [67.3, 357.0], [67.4, 357.0], [67.5, 357.0], [67.6, 357.0], [67.7, 357.0], [67.8, 358.0], [67.9, 358.0], [68.0, 358.0], [68.1, 358.0], [68.2, 358.0], [68.3, 358.0], [68.4, 359.0], [68.5, 359.0], [68.6, 359.0], [68.7, 359.0], [68.8, 359.0], [68.9, 359.0], [69.0, 360.0], [69.1, 360.0], [69.2, 360.0], [69.3, 360.0], [69.4, 360.0], [69.5, 361.0], [69.6, 361.0], [69.7, 361.0], [69.8, 361.0], [69.9, 361.0], [70.0, 362.0], [70.1, 362.0], [70.2, 362.0], [70.3, 362.0], [70.4, 362.0], [70.5, 362.0], [70.6, 363.0], [70.7, 363.0], [70.8, 363.0], [70.9, 363.0], [71.0, 363.0], [71.1, 364.0], [71.2, 364.0], [71.3, 364.0], [71.4, 364.0], [71.5, 364.0], [71.6, 364.0], [71.7, 365.0], [71.8, 365.0], [71.9, 365.0], [72.0, 365.0], [72.1, 365.0], [72.2, 366.0], [72.3, 366.0], [72.4, 366.0], [72.5, 366.0], [72.6, 366.0], [72.7, 366.0], [72.8, 367.0], [72.9, 367.0], [73.0, 367.0], [73.1, 367.0], [73.2, 367.0], [73.3, 368.0], [73.4, 368.0], [73.5, 368.0], [73.6, 368.0], [73.7, 368.0], [73.8, 369.0], [73.9, 369.0], [74.0, 369.0], [74.1, 369.0], [74.2, 369.0], [74.3, 369.0], [74.4, 370.0], [74.5, 370.0], [74.6, 370.0], [74.7, 370.0], [74.8, 370.0], [74.9, 371.0], [75.0, 371.0], [75.1, 371.0], [75.2, 371.0], [75.3, 372.0], [75.4, 372.0], [75.5, 372.0], [75.6, 372.0], [75.7, 373.0], [75.8, 373.0], [75.9, 373.0], [76.0, 373.0], [76.1, 373.0], [76.2, 374.0], [76.3, 374.0], [76.4, 374.0], [76.5, 374.0], [76.6, 375.0], [76.7, 375.0], [76.8, 375.0], [76.9, 375.0], [77.0, 375.0], [77.1, 376.0], [77.2, 376.0], [77.3, 376.0], [77.4, 376.0], [77.5, 377.0], [77.6, 377.0], [77.7, 377.0], [77.8, 377.0], [77.9, 377.0], [78.0, 378.0], [78.1, 378.0], [78.2, 378.0], [78.3, 378.0], [78.4, 379.0], [78.5, 379.0], [78.6, 379.0], [78.7, 379.0], [78.8, 380.0], [78.9, 380.0], [79.0, 380.0], [79.1, 380.0], [79.2, 381.0], [79.3, 381.0], [79.4, 381.0], [79.5, 382.0], [79.6, 382.0], [79.7, 382.0], [79.8, 382.0], [79.9, 382.0], [80.0, 383.0], [80.1, 383.0], [80.2, 383.0], [80.3, 383.0], [80.4, 383.0], [80.5, 384.0], [80.6, 384.0], [80.7, 384.0], [80.8, 384.0], [80.9, 385.0], [81.0, 385.0], [81.1, 385.0], [81.2, 385.0], [81.3, 386.0], [81.4, 386.0], [81.5, 386.0], [81.6, 386.0], [81.7, 387.0], [81.8, 387.0], [81.9, 387.0], [82.0, 387.0], [82.1, 388.0], [82.2, 388.0], [82.3, 388.0], [82.4, 388.0], [82.5, 389.0], [82.6, 389.0], [82.7, 389.0], [82.8, 390.0], [82.9, 390.0], [83.0, 390.0], [83.1, 390.0], [83.2, 391.0], [83.3, 391.0], [83.4, 391.0], [83.5, 392.0], [83.6, 392.0], [83.7, 392.0], [83.8, 393.0], [83.9, 393.0], [84.0, 393.0], [84.1, 394.0], [84.2, 394.0], [84.3, 394.0], [84.4, 395.0], [84.5, 395.0], [84.6, 395.0], [84.7, 396.0], [84.8, 396.0], [84.9, 396.0], [85.0, 397.0], [85.1, 397.0], [85.2, 398.0], [85.3, 398.0], [85.4, 398.0], [85.5, 398.0], [85.6, 399.0], [85.7, 399.0], [85.8, 400.0], [85.9, 400.0], [86.0, 400.0], [86.1, 401.0], [86.2, 401.0], [86.3, 402.0], [86.4, 402.0], [86.5, 403.0], [86.6, 403.0], [86.7, 404.0], [86.8, 404.0], [86.9, 405.0], [87.0, 405.0], [87.1, 406.0], [87.2, 406.0], [87.3, 407.0], [87.4, 407.0], [87.5, 408.0], [87.6, 408.0], [87.7, 409.0], [87.8, 410.0], [87.9, 410.0], [88.0, 411.0], [88.1, 411.0], [88.2, 411.0], [88.3, 412.0], [88.4, 412.0], [88.5, 413.0], [88.6, 413.0], [88.7, 414.0], [88.8, 414.0], [88.9, 415.0], [89.0, 415.0], [89.1, 416.0], [89.2, 416.0], [89.3, 417.0], [89.4, 418.0], [89.5, 418.0], [89.6, 419.0], [89.7, 420.0], [89.8, 420.0], [89.9, 421.0], [90.0, 422.0], [90.1, 422.0], [90.2, 423.0], [90.3, 424.0], [90.4, 425.0], [90.5, 425.0], [90.6, 426.0], [90.7, 427.0], [90.8, 428.0], [90.9, 429.0], [91.0, 430.0], [91.1, 431.0], [91.2, 432.0], [91.3, 433.0], [91.4, 434.0], [91.5, 435.0], [91.6, 436.0], [91.7, 438.0], [91.8, 439.0], [91.9, 440.0], [92.0, 442.0], [92.1, 443.0], [92.2, 445.0], [92.3, 447.0], [92.4, 449.0], [92.5, 451.0], [92.6, 453.0], [92.7, 455.0], [92.8, 457.0], [92.9, 460.0], [93.0, 463.0], [93.1, 466.0], [93.2, 470.0], [93.3, 473.0], [93.4, 475.0], [93.5, 478.0], [93.6, 480.0], [93.7, 483.0], [93.8, 485.0], [93.9, 489.0], [94.0, 494.0], [94.1, 498.0], [94.2, 501.0], [94.3, 505.0], [94.4, 509.0], [94.5, 511.0], [94.6, 514.0], [94.7, 517.0], [94.8, 519.0], [94.9, 523.0], [95.0, 526.0], [95.1, 529.0], [95.2, 533.0], [95.3, 536.0], [95.4, 539.0], [95.5, 543.0], [95.6, 548.0], [95.7, 555.0], [95.8, 564.0], [95.9, 569.0], [96.0, 575.0], [96.1, 584.0], [96.2, 593.0], [96.3, 602.0], [96.4, 615.0], [96.5, 621.0], [96.6, 629.0], [96.7, 636.0], [96.8, 640.0], [96.9, 648.0], [97.0, 660.0], [97.1, 674.0], [97.2, 684.0], [97.3, 694.0], [97.4, 703.0], [97.5, 711.0], [97.6, 724.0], [97.7, 745.0], [97.8, 765.0], [97.9, 779.0], [98.0, 788.0], [98.1, 806.0], [98.2, 820.0], [98.3, 830.0], [98.4, 848.0], [98.5, 867.0], [98.6, 887.0], [98.7, 905.0], [98.8, 921.0], [98.9, 930.0], [99.0, 966.0], [99.1, 1005.0], [99.2, 1055.0], [99.3, 1099.0], [99.4, 1167.0], [99.5, 1214.0], [99.6, 1250.0], [99.7, 1317.0], [99.8, 1423.0], [99.9, 1470.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 114602.0, "series": [{"data": [[0.0, 6176.0], [2100.0, 1.0], [600.0, 1824.0], [700.0, 1205.0], [200.0, 20978.0], [800.0, 1007.0], [900.0, 683.0], [1000.0, 376.0], [1100.0, 285.0], [300.0, 114602.0], [1200.0, 347.0], [1300.0, 153.0], [1400.0, 278.0], [1500.0, 111.0], [100.0, 2974.0], [400.0, 14126.0], [1600.0, 1.0], [1700.0, 2.0], [500.0, 3592.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 158900.0, "series": [{"data": [[0.0, 158900.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 9684.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 111.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 26.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 701.2440510030026, "minX": 1.75235688E12, "maxY": 985.4555009973858, "series": [{"data": [[1.75235688E12, 985.4555009973858], [1.75235694E12, 701.2440510030026]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235694E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.25, "minX": 1.0, "maxY": 1535.0, "series": [{"data": [[3.0, 45.0], [5.0, 47.0], [6.0, 48.0], [7.0, 46.0], [8.0, 48.0], [9.0, 45.0], [10.0, 47.0], [12.0, 46.5], [13.0, 45.0], [14.0, 48.0], [15.0, 47.0], [16.0, 47.0], [17.0, 44.0], [18.0, 48.0], [19.0, 48.0], [20.0, 47.0], [21.0, 42.0], [22.0, 25.0], [23.0, 41.0], [24.0, 29.0], [25.0, 47.0], [26.0, 42.0], [27.0, 29.0], [29.0, 43.5], [30.0, 30.0], [31.0, 42.0], [32.0, 30.0], [35.0, 42.0], [34.0, 37.0], [37.0, 36.5], [39.0, 29.0], [38.0, 41.0], [41.0, 42.0], [43.0, 30.0], [42.0, 17.0], [45.0, 16.0], [44.0, 41.0], [46.0, 31.0], [49.0, 30.0], [48.0, 28.5], [51.0, 40.0], [50.0, 18.0], [53.0, 38.0], [52.0, 31.0], [54.0, 17.0], [56.0, 40.0], [59.0, 29.666666666666668], [61.0, 11.0], [60.0, 41.0], [63.0, 23.0], [66.0, 35.0], [71.0, 23.0], [70.0, 29.333333333333336], [68.0, 13.5], [74.0, 33.5], [73.0, 22.333333333333332], [77.0, 17.0], [76.0, 29.25], [83.0, 144.0], [82.0, 306.0], [81.0, 29.995843230403775], [80.0, 25.769230769230774], [87.0, 122.42857142857144], [86.0, 141.66666666666669], [85.0, 190.0], [84.0, 118.28571428571428], [91.0, 104.55555555555556], [90.0, 162.6], [89.0, 167.4], [88.0, 143.16666666666666], [95.0, 169.99999999999997], [94.0, 53.884615384615394], [93.0, 55.96153846153846], [92.0, 112.77777777777777], [99.0, 188.7142857142857], [98.0, 149.8235294117647], [97.0, 156.72727272727272], [96.0, 138.0], [103.0, 259.8], [102.0, 171.125], [101.0, 191.7142857142857], [100.0, 188.71428571428572], [107.0, 223.83333333333334], [106.0, 100.125], [105.0, 204.30769230769232], [104.0, 192.57142857142858], [111.0, 326.0], [110.0, 178.37500000000003], [109.0, 245.45454545454544], [108.0, 199.28571428571428], [115.0, 332.75], [114.0, 267.70000000000005], [113.0, 270.0], [112.0, 177.62499999999997], [119.0, 209.57142857142858], [118.0, 221.23076923076923], [117.0, 337.25], [116.0, 182.375], [123.0, 366.5], [122.0, 220.28571428571428], [121.0, 249.83333333333334], [120.0, 137.08333333333331], [127.0, 113.5625], [126.0, 168.9], [125.0, 195.5], [124.0, 224.42857142857142], [135.0, 1390.0], [134.0, 248.33333333333331], [133.0, 363.5], [132.0, 254.66666666666666], [131.0, 476.6666666666667], [130.0, 215.42857142857142], [129.0, 291.8], [128.0, 140.75], [143.0, 372.75], [142.0, 263.1666666666667], [141.0, 259.5], [140.0, 258.3333333333333], [139.0, 346.9230769230769], [138.0, 33.0], [136.0, 177.88888888888889], [151.0, 119.06666666666666], [150.0, 265.6666666666667], [149.0, 94.19047619047619], [148.0, 311.4], [147.0, 261.6666666666667], [146.0, 309.8], [145.0, 164.70000000000002], [144.0, 168.7], [159.0, 146.41666666666666], [158.0, 63.55263157894738], [157.0, 92.71428571428571], [156.0, 205.375], [155.0, 144.66666666666669], [154.0, 119.6], [153.0, 105.77777777777777], [152.0, 227.00000000000003], [167.0, 125.14285714285714], [166.0, 203.0], [165.0, 76.60714285714285], [164.0, 223.2857142857143], [163.0, 89.90476190476191], [162.0, 102.57894736842104], [161.0, 93.36363636363636], [160.0, 127.21428571428572], [175.0, 69.8125], [174.0, 97.8], [173.0, 202.125], [172.0, 167.2], [171.0, 214.46666666666667], [170.0, 225.42857142857142], [169.0, 200.0], [168.0, 301.8], [183.0, 183.0], [182.0, 128.21428571428572], [181.0, 77.44827586206897], [180.0, 164.9], [179.0, 168.6], [178.0, 103.83333333333333], [177.0, 152.72727272727272], [176.0, 143.91666666666666], [191.0, 255.16666666666669], [190.0, 163.99999999999997], [189.0, 206.875], [188.0, 175.4], [187.0, 123.4], [186.0, 112.6875], [185.0, 182.66666666666666], [184.0, 118.0625], [199.0, 159.16666666666669], [198.0, 238.42857142857144], [197.0, 36.07692307692308], [196.0, 146.83333333333334], [195.0, 121.0], [194.0, 137.84615384615384], [193.0, 188.33333333333334], [192.0, 207.75], [207.0, 738.5], [206.0, 58.75000000000001], [205.0, 45.85714285714286], [204.0, 1445.0], [203.0, 50.3], [202.0, 730.5], [201.0, 43.0], [200.0, 62.33333333333333], [215.0, 37.0], [214.0, 92.5], [213.0, 38.5], [212.0, 33.4], [211.0, 92.5], [210.0, 33.2], [209.0, 58.666666666666664], [208.0, 60.25], [223.0, 36.5], [222.0, 71.0], [220.0, 43.5], [219.0, 728.0], [218.0, 70.0], [217.0, 41.0], [216.0, 71.33333333333334], [231.0, 11.503267973856214], [230.0, 40.5], [229.0, 786.5], [227.0, 39.5], [226.0, 51.0], [225.0, 65.0], [224.0, 1430.0], [233.0, 15.0], [234.0, 31.415094339622645], [235.0, 14.318181818181817], [236.0, 11.028985507246372], [237.0, 48.05263157894736], [238.0, 67.99999999999999], [239.0, 13.8125], [232.0, 53.0], [240.0, 86.78048780487805], [241.0, 27.96688741721854], [242.0, 254.5], [243.0, 239.875], [244.0, 24.176470588235293], [246.0, 167.2], [247.0, 80.23809523809523], [245.0, 221.0], [248.0, 32.62162162162163], [249.0, 230.00000000000003], [250.0, 11.315068493150687], [251.0, 52.400000000000006], [252.0, 58.021276595744695], [253.0, 12.159999999999998], [254.0, 17.13793103448276], [255.0, 101.0], [258.0, 40.0], [257.0, 438.5], [256.0, 32.0], [259.0, 148.85714285714286], [268.0, 229.3], [269.0, 45.375], [270.0, 41.85714285714286], [271.0, 97.25], [260.0, 162.93333333333334], [261.0, 110.55555555555557], [262.0, 58.75], [263.0, 29.846153846153847], [265.0, 327.0], [266.0, 21.714285714285715], [267.0, 7.25], [273.0, 72.0], [272.0, 219.375], [274.0, 20.0], [275.0, 25.250000000000004], [276.0, 196.36363636363632], [277.0, 81.0], [278.0, 108.16666666666667], [279.0, 122.9], [280.0, 49.44444444444444], [287.0, 133.44444444444446], [285.0, 23.599999999999998], [284.0, 67.5], [286.0, 129.06666666666663], [281.0, 69.94736842105263], [282.0, 93.0], [283.0, 15.166666666666666], [289.0, 63.785714285714285], [288.0, 31.333333333333336], [290.0, 278.0], [291.0, 188.0], [292.0, 35.5], [293.0, 167.54545454545453], [294.0, 53.5], [295.0, 22.0], [296.0, 55.0], [302.0, 38.0], [303.0, 133.33333333333334], [300.0, 43.99999999999999], [301.0, 38.33333333333333], [297.0, 370.75], [299.0, 42.4], [305.0, 219.0], [304.0, 41.75], [306.0, 31.25], [307.0, 151.35714285714286], [308.0, 157.45454545454544], [309.0, 41.66666666666667], [310.0, 70.25], [311.0, 167.14285714285714], [312.0, 239.4], [318.0, 208.75], [319.0, 231.13333333333333], [316.0, 49.714285714285715], [317.0, 168.25000000000003], [313.0, 26.5], [314.0, 33.285714285714285], [315.0, 302.55555555555554], [321.0, 52.85714285714286], [320.0, 40.0], [322.0, 159.88888888888889], [323.0, 130.68000000000004], [324.0, 73.66666666666667], [325.0, 172.36842105263156], [326.0, 238.3], [327.0, 294.25], [328.0, 314.1111111111111], [329.0, 85.0], [335.0, 242.2], [333.0, 340.09090909090907], [334.0, 59.666666666666664], [330.0, 39.8], [331.0, 446.1111111111111], [337.0, 55.57142857142857], [336.0, 303.55555555555554], [338.0, 199.5], [339.0, 76.16666666666666], [340.0, 176.66666666666666], [341.0, 306.8571428571429], [342.0, 60.300000000000004], [343.0, 149.83333333333331], [344.0, 164.5], [351.0, 64.25], [348.0, 83.41666666666666], [349.0, 110.5], [350.0, 145.43478260869568], [345.0, 151.63636363636365], [346.0, 112.0], [347.0, 120.76470588235291], [354.0, 218.92000000000002], [352.0, 138.91666666666666], [353.0, 133.1475409836066], [355.0, 217.37500000000003], [364.0, 203.71428571428572], [365.0, 438.08333333333337], [366.0, 129.0], [367.0, 123.66666666666666], [356.0, 228.93478260869566], [357.0, 143.42857142857144], [358.0, 283.37500000000006], [359.0, 260.7407407407407], [360.0, 95.61904761904762], [361.0, 267.8965517241379], [362.0, 125.25], [363.0, 421.3333333333333], [369.0, 167.83333333333334], [368.0, 406.1666666666667], [370.0, 200.06666666666663], [371.0, 171.67857142857142], [372.0, 92.60000000000001], [373.0, 99.9090909090909], [374.0, 169.9], [375.0, 266.0], [376.0, 237.27272727272725], [382.0, 574.4], [383.0, 278.25], [380.0, 423.5], [381.0, 361.66666666666663], [377.0, 261.4166666666667], [378.0, 484.5], [379.0, 454.2857142857143], [385.0, 372.16666666666663], [384.0, 178.9], [386.0, 183.66666666666666], [387.0, 185.875], [388.0, 417.0], [389.0, 125.07692307692308], [390.0, 284.0769230769231], [391.0, 131.0909090909091], [392.0, 423.5], [398.0, 121.87499999999999], [399.0, 75.8], [396.0, 269.1], [397.0, 237.88888888888889], [393.0, 252.0909090909091], [394.0, 182.66666666666669], [395.0, 136.5], [401.0, 140.5], [400.0, 284.57142857142856], [402.0, 188.8], [403.0, 281.73809523809524], [404.0, 541.52], [405.0, 83.0], [406.0, 415.2857142857143], [407.0, 254.66666666666666], [409.0, 393.3333333333333], [412.0, 429.1111111111111], [413.0, 176.5], [414.0, 94.5], [415.0, 408.42857142857144], [408.0, 265.5], [410.0, 318.25000000000006], [411.0, 485.0], [419.0, 673.3333333333334], [417.0, 223.53846153846155], [416.0, 268.36363636363643], [418.0, 148.83333333333334], [420.0, 95.0], [423.0, 398.5333333333333], [424.0, 166.45000000000002], [430.0, 246.0], [431.0, 171.25], [428.0, 92.00000000000001], [429.0, 209.5], [425.0, 164.4], [426.0, 220.66666666666666], [427.0, 508.0], [433.0, 290.8888888888889], [432.0, 322.6], [434.0, 211.9375], [435.0, 281.9473684210526], [436.0, 162.87499999999997], [437.0, 259.50000000000006], [438.0, 194.5], [439.0, 232.28571428571428], [440.0, 247.66666666666666], [446.0, 175.5], [447.0, 234.0], [444.0, 480.8], [445.0, 545.25], [441.0, 240.5], [443.0, 426.3333333333333], [449.0, 149.375], [448.0, 171.0], [450.0, 94.33333333333333], [460.0, 640.0], [461.0, 210.0], [462.0, 95.5], [463.0, 385.1666666666667], [452.0, 387.375], [453.0, 175.8], [455.0, 282.0], [454.0, 372.6666666666667], [456.0, 383.5], [458.0, 174.4], [457.0, 640.0], [459.0, 544.0], [477.0, 350.14285714285717], [466.0, 231.28571428571428], [464.0, 174.8], [471.0, 370.0], [470.0, 397.77777777777777], [467.0, 352.1428571428571], [476.0, 333.0], [468.0, 196.5], [469.0, 111.83333333333333], [473.0, 185.66666666666669], [474.0, 229.33333333333331], [475.0, 232.8571428571429], [479.0, 375.5], [472.0, 237.66666666666666], [478.0, 561.0], [492.0, 501.16666666666663], [481.0, 467.14285714285717], [480.0, 342.0], [483.0, 425.85714285714283], [482.0, 201.75], [484.0, 295.73333333333335], [486.0, 1468.0], [485.0, 255.66666666666666], [487.0, 82.5], [488.0, 321.2380952380953], [489.0, 368.5], [491.0, 654.25], [490.0, 277.66666666666663], [493.0, 207.66666666666669], [495.0, 575.0], [494.0, 300.6666666666667], [509.0, 886.0], [496.0, 674.4], [497.0, 650.0], [498.0, 243.25], [499.0, 536.0], [508.0, 273.0], [501.0, 569.3333333333334], [500.0, 561.5], [502.0, 268.66666666666663], [503.0, 390.0], [504.0, 476.4444444444444], [507.0, 410.75], [506.0, 428.5], [511.0, 100.0], [510.0, 176.5], [537.0, 413.42857142857144], [514.0, 318.0], [513.0, 112.5], [527.0, 323.33333333333337], [512.0, 403.5], [516.0, 479.0], [515.0, 580.0], [517.0, 260.25], [519.0, 420.25], [518.0, 356.5], [536.0, 638.0], [538.0, 272.25], [539.0, 137.16666666666669], [541.0, 368.0], [540.0, 632.25], [542.0, 110.33333333333333], [543.0, 320.0], [529.0, 370.5], [528.0, 248.0], [530.0, 312.6666666666667], [531.0, 602.875], [533.0, 109.33333333333333], [534.0, 394.90000000000003], [535.0, 584.0], [521.0, 254.00000000000003], [520.0, 870.5], [522.0, 434.0], [523.0, 340.0], [524.0, 191.5], [525.0, 719.3333333333334], [550.0, 627.5], [546.0, 316.0], [544.0, 148.35714285714286], [545.0, 362.0], [559.0, 97.0], [558.0, 349.0], [556.0, 347.0], [557.0, 168.0], [554.0, 112.5], [555.0, 305.99999999999994], [547.0, 254.75], [548.0, 359.5], [549.0, 141.16666666666669], [551.0, 141.5], [568.0, 180.5], [569.0, 729.0], [570.0, 104.33333333333333], [572.0, 367.5], [571.0, 362.5], [573.0, 187.33333333333334], [574.0, 277.0], [575.0, 474.0], [560.0, 140.14285714285717], [562.0, 141.0], [561.0, 431.0], [563.0, 637.0], [564.0, 150.0], [567.0, 402.5], [565.0, 424.25], [552.0, 106.66666666666667], [553.0, 232.8], [582.0, 708.1428571428571], [578.0, 478.25], [576.0, 494.6666666666668], [577.0, 359.3333333333333], [591.0, 464.83333333333337], [589.0, 552.3749999999999], [590.0, 447.2], [579.0, 672.8], [580.0, 449.0], [581.0, 430.4], [592.0, 197.6], [606.0, 198.25], [605.0, 637.0], [607.0, 627.3333333333334], [603.0, 203.4], [604.0, 545.8571428571429], [601.0, 417.75], [600.0, 247.0], [602.0, 568.6666666666667], [593.0, 550.75], [594.0, 281.4], [595.0, 215.33333333333334], [596.0, 198.75], [597.0, 439.8], [598.0, 420.6], [599.0, 817.6666666666667], [584.0, 210.8], [585.0, 500.6666666666667], [586.0, 575.6666666666666], [587.0, 489.8571428571429], [588.0, 427.59999999999997], [615.0, 324.5], [610.0, 687.8], [608.0, 380.5], [609.0, 458.0], [623.0, 1535.0], [620.0, 270.2857142857143], [621.0, 625.0], [622.0, 277.66666666666663], [611.0, 385.0], [612.0, 738.7142857142858], [614.0, 654.3333333333334], [613.0, 274.0], [624.0, 193.25], [625.0, 456.0], [639.0, 669.0], [637.0, 890.0], [638.0, 206.875], [635.0, 292.5], [634.0, 228.0], [636.0, 319.25], [632.0, 507.62500000000006], [633.0, 214.25], [626.0, 173.7], [627.0, 159.85714285714286], [628.0, 410.72222222222223], [629.0, 298.77272727272725], [631.0, 590.3636363636364], [616.0, 523.4545454545454], [617.0, 203.0], [618.0, 192.0], [619.0, 304.6], [647.0, 418.0], [643.0, 285.2], [640.0, 213.83333333333331], [653.0, 206.66666666666666], [652.0, 242.0], [654.0, 162.33333333333334], [650.0, 304.75], [651.0, 790.6666666666666], [641.0, 212.6428571428571], [642.0, 181.09375000000003], [644.0, 249.0625], [645.0, 216.81250000000003], [646.0, 274.4], [657.0, 170.0], [671.0, 197.0], [656.0, 403.66666666666663], [669.0, 192.25], [670.0, 351.5], [667.0, 150.0], [668.0, 194.75], [664.0, 171.75], [665.0, 286.0], [666.0, 193.6], [658.0, 307.3333333333333], [660.0, 151.5], [659.0, 530.3333333333334], [661.0, 232.5], [662.0, 362.6], [663.0, 243.0], [648.0, 234.6], [649.0, 197.75], [675.0, 188.75], [673.0, 406.5], [672.0, 174.66666666666666], [674.0, 197.0], [677.0, 269.0], [676.0, 556.8571428571428], [678.0, 201.0], [681.0, 224.2], [680.0, 618.0], [683.0, 689.25], [687.0, 439.8], [689.0, 201.0], [696.0, 273.42857142857144], [698.0, 256.6], [699.0, 342.33333333333337], [700.0, 685.3333333333333], [701.0, 182.75], [702.0, 206.85714285714283], [703.0, 616.0], [688.0, 298.0], [693.0, 410.7142857142857], [692.0, 434.5], [691.0, 499.0], [690.0, 506.5], [694.0, 246.0], [734.0, 250.5], [735.0, 285.5], [720.0, 244.0], [731.0, 242.75], [733.0, 246.0], [732.0, 937.6], [729.0, 174.66666666666666], [728.0, 273.0], [711.0, 654.0], [710.0, 365.57142857142856], [708.0, 205.0], [707.0, 161.5], [706.0, 364.0], [705.0, 385.25], [727.0, 334.6666666666667], [726.0, 167.0], [721.0, 221.25], [722.0, 1514.0], [719.0, 316.8], [715.0, 321.8], [717.0, 725.0], [716.0, 269.0], [714.0, 275.4285714285714], [712.0, 178.0], [713.0, 386.57142857142856], [760.0, 238.4], [739.0, 401.0], [746.0, 201.92553191489358], [745.0, 912.0], [743.0, 359.0], [742.0, 285.0], [761.0, 253.4], [762.0, 574.0], [763.0, 205.0], [764.0, 278.75], [765.0, 196.0], [766.0, 256.27450980392155], [767.0, 315.58333333333326], [752.0, 187.5], [753.0, 302.4], [754.0, 237.63636363636365], [755.0, 235.0], [756.0, 261.3333333333333], [757.0, 309.8], [758.0, 250.33333333333334], [759.0, 390.5], [741.0, 351.33333333333337], [740.0, 225.0], [738.0, 228.5], [737.0, 512.0], [736.0, 461.25], [750.0, 192.04347826086953], [751.0, 205.35714285714286], [747.0, 292.5], [748.0, 299.14285714285717], [749.0, 299.5], [775.0, 260.8333333333333], [769.0, 333.0], [768.0, 275.1333333333333], [782.0, 180.0], [783.0, 354.5], [770.0, 341.6666666666667], [771.0, 376.3333333333333], [773.0, 338.5], [772.0, 290.5], [774.0, 292.5], [784.0, 304.6], [785.0, 299.0], [798.0, 256.3333333333333], [797.0, 620.0], [799.0, 252.80555555555551], [795.0, 320.0], [794.0, 276.0], [793.0, 447.5], [792.0, 731.0], [796.0, 404.0], [786.0, 340.22222222222223], [788.0, 240.0], [787.0, 731.0], [789.0, 447.0], [790.0, 853.5], [791.0, 300.28571428571433], [776.0, 265.4], [778.0, 426.2857142857143], [780.0, 215.0], [779.0, 403.6666666666667], [781.0, 293.625], [805.0, 246.5], [801.0, 961.0], [800.0, 222.5], [815.0, 619.0], [813.0, 339.0], [814.0, 390.25], [811.0, 297.0], [812.0, 312.8888888888889], [802.0, 235.0], [803.0, 291.6666666666667], [804.0, 350.0], [806.0, 303.771739130435], [807.0, 408.3333333333333], [824.0, 453.33333333333337], [825.0, 106.0], [826.0, 244.0], [827.0, 537.5], [828.0, 287.0], [829.0, 391.0], [831.0, 314.0], [830.0, 732.0], [816.0, 253.5], [818.0, 324.5], [817.0, 324.0], [819.0, 347.4], [820.0, 233.0], [821.0, 349.4], [822.0, 350.6666666666667], [823.0, 315.55555555555554], [809.0, 362.0], [808.0, 324.0], [810.0, 313.75], [837.0, 336.7009345794392], [833.0, 346.0], [832.0, 318.5], [847.0, 223.5], [845.0, 327.07692307692304], [846.0, 245.6842105263158], [843.0, 194.66666666666666], [844.0, 241.6363636363636], [834.0, 301.0], [835.0, 357.2], [836.0, 404.0], [838.0, 310.5642633228841], [839.0, 325.0], [856.0, 361.8181818181818], [857.0, 218.57142857142856], [859.0, 248.4], [860.0, 513.0], [861.0, 274.25], [862.0, 217.5], [863.0, 325.3333333333333], [848.0, 276.16666666666663], [849.0, 207.0], [850.0, 305.62500000000006], [852.0, 294.6666666666667], [851.0, 616.0], [853.0, 256.22222222222223], [854.0, 244.8], [855.0, 284.3333333333333], [840.0, 321.6666666666667], [841.0, 305.0], [842.0, 249.4], [888.0, 161.33333333333334], [867.0, 409.6666666666667], [866.0, 320.875], [879.0, 540.0], [864.0, 308.5], [865.0, 285.0], [868.0, 325.5], [869.0, 176.0], [870.0, 281.42857142857144], [871.0, 724.0], [890.0, 590.4], [889.0, 329.0], [891.0, 196.33333333333334], [893.0, 337.42857142857144], [892.0, 329.0], [894.0, 136.75], [895.0, 308.5], [880.0, 186.28571428571428], [882.0, 186.71428571428572], [881.0, 529.0], [883.0, 393.5], [884.0, 145.0], [885.0, 187.71428571428572], [887.0, 294.6], [872.0, 176.0], [873.0, 250.0], [875.0, 257.6], [874.0, 880.0], [877.0, 283.0], [876.0, 330.0], [878.0, 169.0], [903.0, 434.9], [898.0, 191.0], [896.0, 143.66666666666666], [897.0, 308.0], [911.0, 223.75], [910.0, 481.5], [899.0, 204.4], [900.0, 194.0], [901.0, 347.5], [902.0, 723.0], [912.0, 415.0769230769231], [926.0, 190.75], [925.0, 440.6666666666667], [927.0, 217.2], [921.0, 184.75], [920.0, 903.5], [923.0, 289.0], [922.0, 456.0], [924.0, 413.25000000000006], [913.0, 236.5], [914.0, 212.0], [915.0, 549.5714285714286], [916.0, 234.27272727272728], [917.0, 351.875], [918.0, 483.9230769230769], [919.0, 442.0], [905.0, 297.8], [904.0, 330.0], [906.0, 310.6], [907.0, 192.66666666666666], [908.0, 547.6666666666666], [909.0, 418.5], [935.0, 289.5], [942.0, 300.40000000000003], [929.0, 300.2], [930.0, 542.0], [931.0, 212.6], [932.0, 151.33333333333334], [934.0, 310.0], [933.0, 443.0], [945.0, 269.5], [944.0, 449.8333333333333], [947.0, 512.2727272727274], [946.0, 334.0], [958.0, 613.0], [957.0, 419.75], [959.0, 503.6666666666667], [955.0, 362.75], [954.0, 512.1999999999999], [956.0, 279.6], [952.0, 396.2380952380952], [953.0, 385.7], [948.0, 293.6666666666667], [949.0, 346.5], [950.0, 478.19148936170205], [951.0, 331.095238095238], [936.0, 274.25], [937.0, 606.8], [938.0, 243.875], [941.0, 249.4], [940.0, 598.4], [939.0, 440.6666666666667], [943.0, 410.6], [928.0, 363.6], [967.0, 231.5], [963.0, 437.125], [960.0, 337.25], [962.0, 447.0], [961.0, 606.1428571428571], [974.0, 312.75], [973.0, 561.2222222222222], [975.0, 350.55555555555554], [964.0, 594.3333333333333], [965.0, 440.0952380952381], [966.0, 353.59999999999997], [977.0, 234.125], [978.0, 542.5], [991.0, 759.0], [976.0, 447.2], [989.0, 273.57142857142856], [988.0, 311.0], [990.0, 453.64], [986.0, 293.0], [987.0, 355.00000000000006], [984.0, 587.6666666666666], [985.0, 183.0], [979.0, 231.4], [980.0, 503.22222222222223], [981.0, 314.3], [982.0, 314.4], [983.0, 392.38095238095235], [968.0, 407.3333333333333], [969.0, 204.52941176470588], [970.0, 665.0], [971.0, 399.3333333333333], [972.0, 338.6666666666667], [995.0, 207.0], [997.0, 506.42857142857133], [998.0, 513.952380952381], [999.0, 345.00000000000006], [1000.0, 360.2825286776768], [996.0, 432.0], [994.0, 332.0], [993.0, 460.90000000000003], [992.0, 331.0], [1.0, 43.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[964.7141612484504, 350.24326550934103]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 28935.55, "minX": 1.75235688E12, "maxY": 1175318.9666666666, "series": [{"data": [[1.75235688E12, 1175318.9666666666], [1.75235694E12, 92513.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235688E12, 367525.9], [1.75235694E12, 28935.55]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235694E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 343.9459298757176, "minX": 1.75235688E12, "maxY": 430.2362543653042, "series": [{"data": [[1.75235688E12, 343.9459298757176], [1.75235694E12, 430.2362543653042]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235694E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 343.9396578180132, "minX": 1.75235688E12, "maxY": 430.2074230488111, "series": [{"data": [[1.75235688E12, 343.9396578180132], [1.75235694E12, 430.2074230488111]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235694E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.004872898562494919, "minX": 1.75235688E12, "maxY": 1.3973198301876748, "series": [{"data": [[1.75235688E12, 1.3973198301876748], [1.75235694E12, 0.004872898562494919]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235694E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.75235688E12, "maxY": 2190.0, "series": [{"data": [[1.75235688E12, 1715.0], [1.75235694E12, 2190.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235688E12, 403.0], [1.75235694E12, 1009.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235688E12, 488.0], [1.75235694E12, 1470.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235688E12, 426.0], [1.75235694E12, 1232.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235688E12, 2.0], [1.75235694E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235688E12, 336.0], [1.75235694E12, 349.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235694E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 71.0, "maxY": 933.0, "series": [{"data": [[1118.0, 485.5], [1172.0, 933.0], [1489.0, 30.0], [1656.0, 383.0], [1941.0, 9.0], [2084.0, 339.0], [2251.0, 421.0], [2543.0, 41.0], [2678.0, 372.0], [2630.0, 350.0], [2580.0, 390.0], [2685.0, 295.0], [2560.0, 330.0], [2815.0, 333.0], [2747.0, 188.0], [2792.0, 355.0], [2776.0, 363.0], [2794.0, 351.0], [2800.0, 345.0], [2778.0, 349.0], [2808.0, 282.0], [2798.0, 278.0], [2743.0, 318.0], [2820.0, 337.0], [2931.0, 313.0], [2893.0, 345.0], [2834.0, 349.0], [2825.0, 346.0], [2841.0, 361.0], [2912.0, 331.0], [2910.0, 332.0], [2904.0, 332.5], [2864.0, 344.0], [2862.0, 345.0], [2868.0, 332.0], [2866.0, 351.0], [2871.0, 342.0], [2873.0, 355.0], [2875.0, 333.0], [2920.0, 340.0], [2927.0, 325.0], [2921.0, 287.0], [2923.0, 351.0], [2884.0, 335.0], [2892.0, 337.0], [2880.0, 344.0], [2959.0, 329.0], [2994.0, 330.0], [2973.0, 320.0], [3010.0, 328.0], [2974.0, 323.0], [2968.0, 338.0], [2976.0, 332.0], [2947.0, 334.0], [2965.0, 328.0], [71.0, 7.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2685.0, 1.0], [2560.0, 1.0], [2747.0, 22.5], [2931.0, 24.5], [2866.0, 149.0], [2873.0, 209.0], [2921.0, 1.0], [2959.0, 2.0], [2973.0, 171.0], [1941.0, 505.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3010.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 71.0, "maxY": 933.0, "series": [{"data": [[1118.0, 485.5], [1172.0, 933.0], [1489.0, 30.0], [1656.0, 383.0], [1941.0, 9.0], [2084.0, 339.0], [2251.0, 421.0], [2543.0, 41.0], [2678.0, 372.0], [2630.0, 350.0], [2580.0, 390.0], [2685.0, 295.0], [2560.0, 330.0], [2815.0, 333.0], [2747.0, 188.0], [2792.0, 355.0], [2776.0, 363.0], [2794.0, 351.0], [2800.0, 345.0], [2778.0, 349.0], [2808.0, 282.0], [2798.0, 278.0], [2743.0, 318.0], [2820.0, 337.0], [2931.0, 313.0], [2893.0, 345.0], [2834.0, 349.0], [2825.0, 346.0], [2841.0, 361.0], [2912.0, 331.0], [2910.0, 332.0], [2904.0, 332.5], [2864.0, 344.0], [2862.0, 345.0], [2868.0, 332.0], [2866.0, 351.0], [2871.0, 342.0], [2873.0, 355.0], [2875.0, 333.0], [2920.0, 340.0], [2927.0, 325.0], [2921.0, 287.0], [2923.0, 351.0], [2884.0, 335.0], [2892.0, 337.0], [2880.0, 344.0], [2959.0, 329.0], [2994.0, 330.0], [2973.0, 320.0], [3010.0, 328.0], [2974.0, 323.0], [2968.0, 338.0], [2976.0, 332.0], [2947.0, 334.0], [2965.0, 328.0], [71.0, 7.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2685.0, 0.0], [2560.0, 0.0], [2747.0, 0.0], [2931.0, 0.0], [2866.0, 149.0], [2873.0, 209.0], [2921.0, 0.0], [2959.0, 0.0], [2973.0, 171.0], [1941.0, 505.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3010.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 188.55, "minX": 1.75235688E12, "maxY": 2623.4666666666667, "series": [{"data": [[1.75235688E12, 2623.4666666666667], [1.75235694E12, 188.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235694E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.75235688E12, "maxY": 2606.366666666667, "series": [{"data": [[1.75235688E12, 2606.366666666667], [1.75235694E12, 205.21666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75235688E12, 0.08333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.75235688E12, 0.11666666666666667]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.75235688E12, 0.23333333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235694E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.75235688E12, "maxY": 2606.366666666667, "series": [{"data": [[1.75235688E12, 2606.366666666667], [1.75235694E12, 205.21666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75235688E12, 0.43333333333333335]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235694E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.75235688E12, "maxY": 2606.366666666667, "series": [{"data": [[1.75235688E12, 2606.366666666667], [1.75235694E12, 205.21666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75235688E12, 0.43333333333333335]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235694E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

