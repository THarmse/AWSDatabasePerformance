/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 638.0, "minX": 0.0, "maxY": 56297.0, "series": [{"data": [[0.0, 638.0], [0.1, 770.0], [0.2, 780.0], [0.3, 784.0], [0.4, 808.0], [0.5, 822.0], [0.6, 835.0], [0.7, 940.0], [0.8, 1025.0], [0.9, 1086.0], [1.0, 1180.0], [1.1, 1290.0], [1.2, 1507.0], [1.3, 1915.0], [1.4, 2147.0], [1.5, 2345.0], [1.6, 2491.0], [1.7, 2604.0], [1.8, 2878.0], [1.9, 2971.0], [2.0, 3227.0], [2.1, 3307.0], [2.2, 3477.0], [2.3, 3604.0], [2.4, 3706.0], [2.5, 3830.0], [2.6, 3888.0], [2.7, 3980.0], [2.8, 4061.0], [2.9, 4294.0], [3.0, 4392.0], [3.1, 4466.0], [3.2, 4539.0], [3.3, 4684.0], [3.4, 4838.0], [3.5, 4872.0], [3.6, 4942.0], [3.7, 5026.0], [3.8, 5174.0], [3.9, 5315.0], [4.0, 5354.0], [4.1, 5430.0], [4.2, 5511.0], [4.3, 5677.0], [4.4, 5756.0], [4.5, 5805.0], [4.6, 5883.0], [4.7, 6088.0], [4.8, 6172.0], [4.9, 6261.0], [5.0, 6323.0], [5.1, 6365.0], [5.2, 6480.0], [5.3, 6635.0], [5.4, 6672.0], [5.5, 6890.0], [5.6, 6930.0], [5.7, 7031.0], [5.8, 7111.0], [5.9, 7141.0], [6.0, 7147.0], [6.1, 7150.0], [6.2, 7163.0], [6.3, 7168.0], [6.4, 7175.0], [6.5, 7181.0], [6.6, 7186.0], [6.7, 7190.0], [6.8, 7196.0], [6.9, 7205.0], [7.0, 7210.0], [7.1, 7211.0], [7.2, 7213.0], [7.3, 7218.0], [7.4, 7224.0], [7.5, 7229.0], [7.6, 7233.0], [7.7, 7235.0], [7.8, 7238.0], [7.9, 7240.0], [8.0, 7242.0], [8.1, 7246.0], [8.2, 7250.0], [8.3, 7252.0], [8.4, 7257.0], [8.5, 7259.0], [8.6, 7265.0], [8.7, 7267.0], [8.8, 7274.0], [8.9, 7276.0], [9.0, 7284.0], [9.1, 7286.0], [9.2, 7287.0], [9.3, 7296.0], [9.4, 7299.0], [9.5, 7301.0], [9.6, 7310.0], [9.7, 7313.0], [9.8, 7315.0], [9.9, 7319.0], [10.0, 7325.0], [10.1, 7336.0], [10.2, 7339.0], [10.3, 7341.0], [10.4, 7352.0], [10.5, 7353.0], [10.6, 7357.0], [10.7, 7360.0], [10.8, 7370.0], [10.9, 7408.0], [11.0, 7453.0], [11.1, 7471.0], [11.2, 7528.0], [11.3, 7554.0], [11.4, 7623.0], [11.5, 7659.0], [11.6, 7704.0], [11.7, 7738.0], [11.8, 7803.0], [11.9, 7845.0], [12.0, 7882.0], [12.1, 7889.0], [12.2, 7908.0], [12.3, 7932.0], [12.4, 7940.0], [12.5, 7960.0], [12.6, 7965.0], [12.7, 7985.0], [12.8, 7997.0], [12.9, 8002.0], [13.0, 8006.0], [13.1, 8008.0], [13.2, 8012.0], [13.3, 8014.0], [13.4, 8030.0], [13.5, 8035.0], [13.6, 8042.0], [13.7, 8049.0], [13.8, 8060.0], [13.9, 8072.0], [14.0, 8079.0], [14.1, 8086.0], [14.2, 8093.0], [14.3, 8102.0], [14.4, 8109.0], [14.5, 8113.0], [14.6, 8124.0], [14.7, 8125.0], [14.8, 8151.0], [14.9, 8181.0], [15.0, 8204.0], [15.1, 8242.0], [15.2, 8284.0], [15.3, 8296.0], [15.4, 8336.0], [15.5, 8377.0], [15.6, 8423.0], [15.7, 8492.0], [15.8, 8554.0], [15.9, 8571.0], [16.0, 8615.0], [16.1, 8634.0], [16.2, 8660.0], [16.3, 8669.0], [16.4, 8673.0], [16.5, 8681.0], [16.6, 8703.0], [16.7, 8707.0], [16.8, 8735.0], [16.9, 8743.0], [17.0, 8752.0], [17.1, 8765.0], [17.2, 8783.0], [17.3, 8787.0], [17.4, 8818.0], [17.5, 8825.0], [17.6, 8831.0], [17.7, 8834.0], [17.8, 8852.0], [17.9, 8857.0], [18.0, 8864.0], [18.1, 8868.0], [18.2, 8869.0], [18.3, 8879.0], [18.4, 8881.0], [18.5, 8882.0], [18.6, 8884.0], [18.7, 8886.0], [18.8, 8892.0], [18.9, 8897.0], [19.0, 8898.0], [19.1, 8901.0], [19.2, 8905.0], [19.3, 8906.0], [19.4, 8909.0], [19.5, 8910.0], [19.6, 8912.0], [19.7, 8915.0], [19.8, 8919.0], [19.9, 8921.0], [20.0, 8932.0], [20.1, 8941.0], [20.2, 8956.0], [20.3, 8965.0], [20.4, 8969.0], [20.5, 8977.0], [20.6, 8980.0], [20.7, 8996.0], [20.8, 9006.0], [20.9, 9013.0], [21.0, 9052.0], [21.1, 9070.0], [21.2, 9097.0], [21.3, 9107.0], [21.4, 9110.0], [21.5, 9127.0], [21.6, 9137.0], [21.7, 9143.0], [21.8, 9151.0], [21.9, 9160.0], [22.0, 9170.0], [22.1, 9181.0], [22.2, 9208.0], [22.3, 9218.0], [22.4, 9228.0], [22.5, 9232.0], [22.6, 9237.0], [22.7, 9241.0], [22.8, 9271.0], [22.9, 9276.0], [23.0, 9282.0], [23.1, 9285.0], [23.2, 9295.0], [23.3, 9302.0], [23.4, 9344.0], [23.5, 9392.0], [23.6, 9412.0], [23.7, 9473.0], [23.8, 9565.0], [23.9, 9625.0], [24.0, 9631.0], [24.1, 9639.0], [24.2, 9654.0], [24.3, 9664.0], [24.4, 9702.0], [24.5, 9974.0], [24.6, 10090.0], [24.7, 10220.0], [24.8, 10560.0], [24.9, 10649.0], [25.0, 11011.0], [25.1, 11141.0], [25.2, 11299.0], [25.3, 11361.0], [25.4, 11699.0], [25.5, 22802.0], [25.6, 23061.0], [25.7, 23202.0], [25.8, 23472.0], [25.9, 23610.0], [26.0, 23884.0], [26.1, 24127.0], [26.2, 24370.0], [26.3, 24555.0], [26.4, 24852.0], [26.5, 24974.0], [26.6, 25124.0], [26.7, 25287.0], [26.8, 25438.0], [26.9, 25563.0], [27.0, 25670.0], [27.1, 25919.0], [27.2, 26057.0], [27.3, 26184.0], [27.4, 26375.0], [27.5, 26509.0], [27.6, 26630.0], [27.7, 26819.0], [27.8, 27036.0], [27.9, 27116.0], [28.0, 27233.0], [28.1, 27305.0], [28.2, 27387.0], [28.3, 27587.0], [28.4, 27726.0], [28.5, 27782.0], [28.6, 27872.0], [28.7, 28114.0], [28.8, 28244.0], [28.9, 28285.0], [29.0, 28395.0], [29.1, 28473.0], [29.2, 28627.0], [29.3, 28803.0], [29.4, 28876.0], [29.5, 28965.0], [29.6, 29059.0], [29.7, 29134.0], [29.8, 29269.0], [29.9, 29272.0], [30.0, 29390.0], [30.1, 29480.0], [30.2, 29513.0], [30.3, 29714.0], [30.4, 29777.0], [30.5, 29854.0], [30.6, 29910.0], [30.7, 29964.0], [30.8, 30104.0], [30.9, 30208.0], [31.0, 30294.0], [31.1, 30428.0], [31.2, 30506.0], [31.3, 30565.0], [31.4, 30696.0], [31.5, 30765.0], [31.6, 30819.0], [31.7, 30955.0], [31.8, 31051.0], [31.9, 31124.0], [32.0, 31177.0], [32.1, 31189.0], [32.2, 31200.0], [32.3, 31202.0], [32.4, 31204.0], [32.5, 31208.0], [32.6, 31210.0], [32.7, 31214.0], [32.8, 31224.0], [32.9, 31225.0], [33.0, 31227.0], [33.1, 31228.0], [33.2, 31231.0], [33.3, 31238.0], [33.4, 31244.0], [33.5, 31249.0], [33.6, 31264.0], [33.7, 31310.0], [33.8, 31320.0], [33.9, 31330.0], [34.0, 31341.0], [34.1, 31347.0], [34.2, 31349.0], [34.3, 31361.0], [34.4, 31386.0], [34.5, 31391.0], [34.6, 31481.0], [34.7, 31526.0], [34.8, 31534.0], [34.9, 31651.0], [35.0, 31744.0], [35.1, 31794.0], [35.2, 31925.0], [35.3, 32013.0], [35.4, 32061.0], [35.5, 32157.0], [35.6, 32276.0], [35.7, 32309.0], [35.8, 32359.0], [35.9, 32482.0], [36.0, 32521.0], [36.1, 32533.0], [36.2, 32537.0], [36.3, 32540.0], [36.4, 32542.0], [36.5, 32549.0], [36.6, 32552.0], [36.7, 32557.0], [36.8, 32561.0], [36.9, 32563.0], [37.0, 32566.0], [37.1, 32570.0], [37.2, 32575.0], [37.3, 32581.0], [37.4, 32581.0], [37.5, 32584.0], [37.6, 32589.0], [37.7, 32590.0], [37.8, 32596.0], [37.9, 32598.0], [38.0, 32605.0], [38.1, 32613.0], [38.2, 32615.0], [38.3, 32619.0], [38.4, 32624.0], [38.5, 32628.0], [38.6, 32632.0], [38.7, 32635.0], [38.8, 32639.0], [38.9, 32641.0], [39.0, 32642.0], [39.1, 32645.0], [39.2, 32649.0], [39.3, 32656.0], [39.4, 32657.0], [39.5, 32662.0], [39.6, 32664.0], [39.7, 32666.0], [39.8, 32667.0], [39.9, 32669.0], [40.0, 32672.0], [40.1, 32674.0], [40.2, 32683.0], [40.3, 32684.0], [40.4, 32689.0], [40.5, 32696.0], [40.6, 32699.0], [40.7, 32700.0], [40.8, 32703.0], [40.9, 32705.0], [41.0, 32716.0], [41.1, 32723.0], [41.2, 32725.0], [41.3, 32728.0], [41.4, 32731.0], [41.5, 32733.0], [41.6, 32748.0], [41.7, 32749.0], [41.8, 32753.0], [41.9, 32758.0], [42.0, 32762.0], [42.1, 32769.0], [42.2, 32773.0], [42.3, 32794.0], [42.4, 32824.0], [42.5, 32831.0], [42.6, 32855.0], [42.7, 32861.0], [42.8, 32896.0], [42.9, 32999.0], [43.0, 33078.0], [43.1, 33158.0], [43.2, 33251.0], [43.3, 33393.0], [43.4, 33411.0], [43.5, 33526.0], [43.6, 33660.0], [43.7, 33679.0], [43.8, 33820.0], [43.9, 33950.0], [44.0, 34057.0], [44.1, 34065.0], [44.2, 34098.0], [44.3, 34116.0], [44.4, 34171.0], [44.5, 34196.0], [44.6, 34205.0], [44.7, 34216.0], [44.8, 34225.0], [44.9, 34228.0], [45.0, 34235.0], [45.1, 34238.0], [45.2, 34250.0], [45.3, 34252.0], [45.4, 34284.0], [45.5, 34294.0], [45.6, 34310.0], [45.7, 34315.0], [45.8, 34338.0], [45.9, 34341.0], [46.0, 34374.0], [46.1, 34398.0], [46.2, 34440.0], [46.3, 34480.0], [46.4, 34541.0], [46.5, 34582.0], [46.6, 34612.0], [46.7, 34629.0], [46.8, 34827.0], [46.9, 34958.0], [47.0, 34996.0], [47.1, 35065.0], [47.2, 35117.0], [47.3, 35145.0], [47.4, 35274.0], [47.5, 35296.0], [47.6, 35408.0], [47.7, 35549.0], [47.8, 35622.0], [47.9, 35688.0], [48.0, 35802.0], [48.1, 35842.0], [48.2, 35912.0], [48.3, 35914.0], [48.4, 35925.0], [48.5, 35936.0], [48.6, 35937.0], [48.7, 35949.0], [48.8, 35952.0], [48.9, 35960.0], [49.0, 36010.0], [49.1, 36045.0], [49.2, 36059.0], [49.3, 36107.0], [49.4, 36113.0], [49.5, 36128.0], [49.6, 36146.0], [49.7, 36151.0], [49.8, 36160.0], [49.9, 36168.0], [50.0, 36177.0], [50.1, 36179.0], [50.2, 36190.0], [50.3, 36197.0], [50.4, 36200.0], [50.5, 36206.0], [50.6, 36210.0], [50.7, 36215.0], [50.8, 36220.0], [50.9, 36227.0], [51.0, 36233.0], [51.1, 36234.0], [51.2, 36239.0], [51.3, 36244.0], [51.4, 36252.0], [51.5, 36252.0], [51.6, 36255.0], [51.7, 36266.0], [51.8, 36268.0], [51.9, 36273.0], [52.0, 36275.0], [52.1, 36277.0], [52.2, 36278.0], [52.3, 36279.0], [52.4, 36280.0], [52.5, 36282.0], [52.6, 36283.0], [52.7, 36287.0], [52.8, 36290.0], [52.9, 36292.0], [53.0, 36297.0], [53.1, 36299.0], [53.2, 36309.0], [53.3, 36311.0], [53.4, 36320.0], [53.5, 36322.0], [53.6, 36326.0], [53.7, 36327.0], [53.8, 36330.0], [53.9, 36332.0], [54.0, 36338.0], [54.1, 36342.0], [54.2, 36343.0], [54.3, 36344.0], [54.4, 36352.0], [54.5, 36356.0], [54.6, 36366.0], [54.7, 36370.0], [54.8, 36372.0], [54.9, 36377.0], [55.0, 36377.0], [55.1, 36390.0], [55.2, 36396.0], [55.3, 36397.0], [55.4, 36399.0], [55.5, 36402.0], [55.6, 36405.0], [55.7, 36410.0], [55.8, 36419.0], [55.9, 36424.0], [56.0, 36428.0], [56.1, 36434.0], [56.2, 36443.0], [56.3, 36443.0], [56.4, 36446.0], [56.5, 36448.0], [56.6, 36449.0], [56.7, 36451.0], [56.8, 36457.0], [56.9, 36460.0], [57.0, 36464.0], [57.1, 36475.0], [57.2, 36488.0], [57.3, 36504.0], [57.4, 36511.0], [57.5, 36518.0], [57.6, 36544.0], [57.7, 36552.0], [57.8, 36620.0], [57.9, 36685.0], [58.0, 36742.0], [58.1, 36771.0], [58.2, 36828.0], [58.3, 36860.0], [58.4, 36894.0], [58.5, 36900.0], [58.6, 36907.0], [58.7, 36917.0], [58.8, 36950.0], [58.9, 36982.0], [59.0, 37002.0], [59.1, 37016.0], [59.2, 37158.0], [59.3, 37247.0], [59.4, 37279.0], [59.5, 37319.0], [59.6, 37370.0], [59.7, 37447.0], [59.8, 37506.0], [59.9, 37625.0], [60.0, 37703.0], [60.1, 37712.0], [60.2, 37761.0], [60.3, 37829.0], [60.4, 37865.0], [60.5, 37920.0], [60.6, 37956.0], [60.7, 37976.0], [60.8, 37983.0], [60.9, 37987.0], [61.0, 38007.0], [61.1, 38012.0], [61.2, 38048.0], [61.3, 38077.0], [61.4, 38086.0], [61.5, 38092.0], [61.6, 38101.0], [61.7, 38110.0], [61.8, 38125.0], [61.9, 38134.0], [62.0, 38166.0], [62.1, 38169.0], [62.2, 38184.0], [62.3, 38205.0], [62.4, 38213.0], [62.5, 38222.0], [62.6, 38237.0], [62.7, 38255.0], [62.8, 38259.0], [62.9, 38264.0], [63.0, 38264.0], [63.1, 38269.0], [63.2, 38270.0], [63.3, 38272.0], [63.4, 38274.0], [63.5, 38278.0], [63.6, 38289.0], [63.7, 38296.0], [63.8, 38298.0], [63.9, 38306.0], [64.0, 38307.0], [64.1, 38315.0], [64.2, 38319.0], [64.3, 38321.0], [64.4, 38328.0], [64.5, 38330.0], [64.6, 38333.0], [64.7, 38338.0], [64.8, 38343.0], [64.9, 38349.0], [65.0, 38352.0], [65.1, 38354.0], [65.2, 38359.0], [65.3, 38366.0], [65.4, 38368.0], [65.5, 38370.0], [65.6, 38372.0], [65.7, 38374.0], [65.8, 38378.0], [65.9, 38380.0], [66.0, 38381.0], [66.1, 38384.0], [66.2, 38387.0], [66.3, 38390.0], [66.4, 38393.0], [66.5, 38397.0], [66.6, 38400.0], [66.7, 38403.0], [66.8, 38405.0], [66.9, 38413.0], [67.0, 38415.0], [67.1, 38420.0], [67.2, 38423.0], [67.3, 38434.0], [67.4, 38443.0], [67.5, 38456.0], [67.6, 38473.0], [67.7, 38480.0], [67.8, 38484.0], [67.9, 38496.0], [68.0, 38507.0], [68.1, 38509.0], [68.2, 38519.0], [68.3, 38530.0], [68.4, 38563.0], [68.5, 38796.0], [68.6, 38810.0], [68.7, 38829.0], [68.8, 38929.0], [68.9, 38958.0], [69.0, 38997.0], [69.1, 39007.0], [69.2, 39128.0], [69.3, 39350.0], [69.4, 39366.0], [69.5, 39398.0], [69.6, 39405.0], [69.7, 39436.0], [69.8, 39465.0], [69.9, 39478.0], [70.0, 39496.0], [70.1, 39509.0], [70.2, 39517.0], [70.3, 39526.0], [70.4, 39530.0], [70.5, 39542.0], [70.6, 39575.0], [70.7, 39588.0], [70.8, 39617.0], [70.9, 39642.0], [71.0, 39646.0], [71.1, 39657.0], [71.2, 39725.0], [71.3, 39764.0], [71.4, 39820.0], [71.5, 39835.0], [71.6, 39840.0], [71.7, 39850.0], [71.8, 39866.0], [71.9, 39902.0], [72.0, 39984.0], [72.1, 39990.0], [72.2, 40047.0], [72.3, 40105.0], [72.4, 40133.0], [72.5, 40201.0], [72.6, 40209.0], [72.7, 40229.0], [72.8, 40266.0], [72.9, 40281.0], [73.0, 40313.0], [73.1, 40322.0], [73.2, 40339.0], [73.3, 40366.0], [73.4, 40376.0], [73.5, 40450.0], [73.6, 40515.0], [73.7, 40539.0], [73.8, 40574.0], [73.9, 40587.0], [74.0, 40609.0], [74.1, 40660.0], [74.2, 40666.0], [74.3, 40711.0], [74.4, 40741.0], [74.5, 40762.0], [74.6, 40780.0], [74.7, 40797.0], [74.8, 40803.0], [74.9, 40810.0], [75.0, 40820.0], [75.1, 40824.0], [75.2, 40846.0], [75.3, 40854.0], [75.4, 40857.0], [75.5, 40859.0], [75.6, 40868.0], [75.7, 40873.0], [75.8, 40877.0], [75.9, 40881.0], [76.0, 40882.0], [76.1, 40887.0], [76.2, 40891.0], [76.3, 40893.0], [76.4, 40897.0], [76.5, 40903.0], [76.6, 40906.0], [76.7, 40911.0], [76.8, 40912.0], [76.9, 40915.0], [77.0, 40921.0], [77.1, 40922.0], [77.2, 40929.0], [77.3, 40935.0], [77.4, 40940.0], [77.5, 40950.0], [77.6, 40959.0], [77.7, 40964.0], [77.8, 40969.0], [77.9, 40975.0], [78.0, 40989.0], [78.1, 41017.0], [78.2, 41028.0], [78.3, 41040.0], [78.4, 41044.0], [78.5, 41047.0], [78.6, 41049.0], [78.7, 41052.0], [78.8, 41057.0], [78.9, 41060.0], [79.0, 41065.0], [79.1, 41074.0], [79.2, 41077.0], [79.3, 41083.0], [79.4, 41091.0], [79.5, 41099.0], [79.6, 41122.0], [79.7, 41126.0], [79.8, 41131.0], [79.9, 41171.0], [80.0, 41216.0], [80.1, 41255.0], [80.2, 41366.0], [80.3, 41418.0], [80.4, 41469.0], [80.5, 41554.0], [80.6, 41606.0], [80.7, 41619.0], [80.8, 41633.0], [80.9, 41648.0], [81.0, 41653.0], [81.1, 41654.0], [81.2, 41667.0], [81.3, 41693.0], [81.4, 41734.0], [81.5, 41742.0], [81.6, 41744.0], [81.7, 41758.0], [81.8, 41765.0], [81.9, 41772.0], [82.0, 41780.0], [82.1, 41783.0], [82.2, 41801.0], [82.3, 41846.0], [82.4, 41865.0], [82.5, 41869.0], [82.6, 41883.0], [82.7, 41890.0], [82.8, 41904.0], [82.9, 41916.0], [83.0, 41934.0], [83.1, 41953.0], [83.2, 41962.0], [83.3, 41978.0], [83.4, 41986.0], [83.5, 41994.0], [83.6, 42009.0], [83.7, 42014.0], [83.8, 42017.0], [83.9, 42020.0], [84.0, 42025.0], [84.1, 42026.0], [84.2, 42048.0], [84.3, 42051.0], [84.4, 42068.0], [84.5, 42081.0], [84.6, 42093.0], [84.7, 42106.0], [84.8, 42121.0], [84.9, 42122.0], [85.0, 42129.0], [85.1, 42135.0], [85.2, 42144.0], [85.3, 42152.0], [85.4, 42156.0], [85.5, 42179.0], [85.6, 42189.0], [85.7, 42191.0], [85.8, 42209.0], [85.9, 42230.0], [86.0, 42248.0], [86.1, 42271.0], [86.2, 42275.0], [86.3, 42289.0], [86.4, 42293.0], [86.5, 42302.0], [86.6, 42316.0], [86.7, 42322.0], [86.8, 42346.0], [86.9, 42349.0], [87.0, 42362.0], [87.1, 42373.0], [87.2, 42387.0], [87.3, 42389.0], [87.4, 42400.0], [87.5, 42412.0], [87.6, 42420.0], [87.7, 42427.0], [87.8, 42429.0], [87.9, 42432.0], [88.0, 42441.0], [88.1, 42448.0], [88.2, 42460.0], [88.3, 42464.0], [88.4, 42477.0], [88.5, 42481.0], [88.6, 42494.0], [88.7, 42509.0], [88.8, 42528.0], [88.9, 42542.0], [89.0, 42570.0], [89.1, 42577.0], [89.2, 42589.0], [89.3, 42604.0], [89.4, 42625.0], [89.5, 42693.0], [89.6, 42757.0], [89.7, 42832.0], [89.8, 42926.0], [89.9, 42979.0], [90.0, 43156.0], [90.1, 43245.0], [90.2, 43310.0], [90.3, 43379.0], [90.4, 43493.0], [90.5, 43631.0], [90.6, 43735.0], [90.7, 43797.0], [90.8, 43900.0], [90.9, 43964.0], [91.0, 44049.0], [91.1, 44185.0], [91.2, 44314.0], [91.3, 44366.0], [91.4, 44472.0], [91.5, 44507.0], [91.6, 44642.0], [91.7, 44772.0], [91.8, 44837.0], [91.9, 44925.0], [92.0, 45044.0], [92.1, 45056.0], [92.2, 45241.0], [92.3, 45306.0], [92.4, 45439.0], [92.5, 45487.0], [92.6, 45562.0], [92.7, 45682.0], [92.8, 45829.0], [92.9, 45841.0], [93.0, 45965.0], [93.1, 45984.0], [93.2, 46099.0], [93.3, 46257.0], [93.4, 46266.0], [93.5, 46404.0], [93.6, 46514.0], [93.7, 46528.0], [93.8, 46650.0], [93.9, 46774.0], [94.0, 46793.0], [94.1, 46928.0], [94.2, 47019.0], [94.3, 47171.0], [94.4, 47215.0], [94.5, 47293.0], [94.6, 47411.0], [94.7, 47498.0], [94.8, 47549.0], [94.9, 47686.0], [95.0, 47752.0], [95.1, 47824.0], [95.2, 47945.0], [95.3, 48041.0], [95.4, 48086.0], [95.5, 48204.0], [95.6, 48341.0], [95.7, 48424.0], [95.8, 48466.0], [95.9, 48599.0], [96.0, 48686.0], [96.1, 48742.0], [96.2, 48853.0], [96.3, 48934.0], [96.4, 49077.0], [96.5, 49140.0], [96.6, 49286.0], [96.7, 49354.0], [96.8, 49499.0], [96.9, 49625.0], [97.0, 49738.0], [97.1, 49820.0], [97.2, 49957.0], [97.3, 50081.0], [97.4, 50141.0], [97.5, 50339.0], [97.6, 50488.0], [97.7, 50515.0], [97.8, 50652.0], [97.9, 50782.0], [98.0, 51033.0], [98.1, 51297.0], [98.2, 51434.0], [98.3, 51686.0], [98.4, 51930.0], [98.5, 52065.0], [98.6, 52390.0], [98.7, 52588.0], [98.8, 52858.0], [98.9, 53127.0], [99.0, 53337.0], [99.1, 53530.0], [99.2, 53899.0], [99.3, 54045.0], [99.4, 54222.0], [99.5, 54455.0], [99.6, 54732.0], [99.7, 55141.0], [99.8, 55489.0], [99.9, 56155.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 73.0, "series": [{"data": [[32900.0, 3.0], [33700.0, 1.0], [34500.0, 5.0], [35300.0, 2.0], [36100.0, 28.0], [36900.0, 13.0], [37700.0, 6.0], [38500.0, 14.0], [39300.0, 6.0], [40100.0, 6.0], [40900.0, 41.0], [41700.0, 22.0], [42500.0, 18.0], [43300.0, 4.0], [44100.0, 2.0], [44900.0, 4.0], [45700.0, 2.0], [46500.0, 4.0], [47300.0, 2.0], [48100.0, 1.0], [48900.0, 3.0], [49700.0, 2.0], [50500.0, 3.0], [51300.0, 1.0], [52900.0, 1.0], [54500.0, 1.0], [56100.0, 2.0], [600.0, 1.0], [700.0, 9.0], [800.0, 6.0], [900.0, 4.0], [1000.0, 4.0], [1100.0, 3.0], [1200.0, 2.0], [1400.0, 2.0], [1500.0, 1.0], [1700.0, 1.0], [1800.0, 1.0], [1900.0, 1.0], [2000.0, 1.0], [2100.0, 1.0], [2200.0, 1.0], [2300.0, 2.0], [2400.0, 3.0], [2500.0, 1.0], [2600.0, 2.0], [2800.0, 2.0], [2900.0, 2.0], [3000.0, 1.0], [3200.0, 4.0], [3300.0, 2.0], [3400.0, 1.0], [3500.0, 2.0], [3600.0, 2.0], [3700.0, 3.0], [3800.0, 4.0], [3900.0, 2.0], [4000.0, 3.0], [4200.0, 3.0], [4300.0, 2.0], [4500.0, 4.0], [4400.0, 3.0], [4600.0, 1.0], [4700.0, 1.0], [4800.0, 4.0], [4900.0, 3.0], [5000.0, 4.0], [5100.0, 2.0], [5200.0, 1.0], [5300.0, 4.0], [5400.0, 4.0], [5500.0, 2.0], [5600.0, 2.0], [5700.0, 3.0], [5800.0, 4.0], [6100.0, 3.0], [5900.0, 1.0], [6000.0, 2.0], [6200.0, 4.0], [6300.0, 3.0], [6400.0, 3.0], [6600.0, 5.0], [6500.0, 1.0], [6800.0, 3.0], [6900.0, 2.0], [7000.0, 4.0], [7100.0, 27.0], [7300.0, 38.0], [7200.0, 69.0], [7400.0, 6.0], [7500.0, 7.0], [7600.0, 4.0], [7800.0, 11.0], [7700.0, 6.0], [7900.0, 18.0], [8000.0, 37.0], [8100.0, 18.0], [8200.0, 11.0], [8400.0, 4.0], [8600.0, 16.0], [9000.0, 14.0], [8800.0, 45.0], [9200.0, 29.0], [9600.0, 12.0], [9400.0, 6.0], [10000.0, 2.0], [10200.0, 2.0], [10400.0, 1.0], [10600.0, 2.0], [11000.0, 1.0], [11200.0, 1.0], [11600.0, 1.0], [22800.0, 2.0], [23200.0, 1.0], [23600.0, 1.0], [24000.0, 2.0], [24400.0, 2.0], [24800.0, 2.0], [25200.0, 1.0], [25600.0, 2.0], [26000.0, 2.0], [26400.0, 1.0], [26800.0, 2.0], [27200.0, 3.0], [27600.0, 2.0], [28000.0, 1.0], [28400.0, 2.0], [28800.0, 4.0], [29200.0, 4.0], [29600.0, 1.0], [30000.0, 2.0], [30400.0, 3.0], [30800.0, 3.0], [31200.0, 39.0], [31600.0, 3.0], [32000.0, 5.0], [32400.0, 3.0], [32800.0, 13.0], [33600.0, 4.0], [34400.0, 6.0], [35200.0, 5.0], [36000.0, 8.0], [36800.0, 9.0], [37600.0, 3.0], [38400.0, 36.0], [39200.0, 1.0], [40000.0, 4.0], [40800.0, 45.0], [41600.0, 20.0], [42400.0, 32.0], [43200.0, 3.0], [44000.0, 3.0], [44800.0, 1.0], [45600.0, 1.0], [46400.0, 2.0], [47200.0, 3.0], [48000.0, 5.0], [48800.0, 4.0], [49600.0, 4.0], [50400.0, 2.0], [51200.0, 2.0], [52000.0, 2.0], [52800.0, 2.0], [53600.0, 2.0], [54400.0, 1.0], [55200.0, 1.0], [33100.0, 4.0], [33900.0, 5.0], [34700.0, 1.0], [35500.0, 3.0], [36300.0, 62.0], [37100.0, 3.0], [37900.0, 12.0], [38700.0, 1.0], [39500.0, 18.0], [40300.0, 12.0], [41100.0, 12.0], [41900.0, 21.0], [42700.0, 4.0], [43500.0, 1.0], [44300.0, 4.0], [45100.0, 2.0], [45900.0, 4.0], [46700.0, 5.0], [47500.0, 4.0], [48300.0, 3.0], [49100.0, 1.0], [49900.0, 2.0], [50700.0, 1.0], [51500.0, 2.0], [52300.0, 2.0], [53100.0, 1.0], [53900.0, 1.0], [54700.0, 1.0], [22900.0, 1.0], [23300.0, 1.0], [23700.0, 1.0], [24100.0, 1.0], [24500.0, 2.0], [24900.0, 2.0], [25300.0, 2.0], [25700.0, 1.0], [26100.0, 3.0], [26500.0, 2.0], [27300.0, 4.0], [27700.0, 4.0], [28100.0, 3.0], [28500.0, 1.0], [28900.0, 3.0], [29300.0, 4.0], [29700.0, 5.0], [30100.0, 3.0], [30500.0, 3.0], [30900.0, 3.0], [31300.0, 22.0], [31700.0, 5.0], [32100.0, 4.0], [32500.0, 52.0], [33000.0, 2.0], [33800.0, 1.0], [34600.0, 5.0], [35400.0, 2.0], [36200.0, 72.0], [37000.0, 4.0], [37800.0, 7.0], [38600.0, 1.0], [39400.0, 13.0], [40200.0, 12.0], [41000.0, 39.0], [41800.0, 16.0], [42600.0, 6.0], [43400.0, 3.0], [44200.0, 2.0], [45000.0, 4.0], [45800.0, 4.0], [46600.0, 3.0], [47400.0, 3.0], [48200.0, 3.0], [49000.0, 3.0], [49800.0, 3.0], [50600.0, 2.0], [51400.0, 1.0], [52200.0, 1.0], [53000.0, 1.0], [53800.0, 1.0], [54600.0, 1.0], [55400.0, 1.0], [56200.0, 1.0], [33300.0, 2.0], [34100.0, 8.0], [34900.0, 4.0], [35700.0, 1.0], [36500.0, 13.0], [37300.0, 4.0], [38100.0, 18.0], [38900.0, 6.0], [39700.0, 4.0], [40500.0, 9.0], [41300.0, 2.0], [42100.0, 29.0], [42900.0, 3.0], [43700.0, 3.0], [44500.0, 2.0], [45300.0, 3.0], [46100.0, 1.0], [46900.0, 2.0], [47700.0, 2.0], [48500.0, 3.0], [49300.0, 4.0], [50100.0, 2.0], [50900.0, 1.0], [52500.0, 1.0], [53300.0, 2.0], [54100.0, 1.0], [54900.0, 1.0], [8300.0, 5.0], [8500.0, 6.0], [8700.0, 21.0], [8900.0, 43.0], [9100.0, 24.0], [9300.0, 6.0], [9500.0, 4.0], [9700.0, 3.0], [9900.0, 2.0], [10100.0, 2.0], [10700.0, 2.0], [10500.0, 1.0], [11100.0, 4.0], [11300.0, 4.0], [12900.0, 1.0], [13900.0, 1.0], [23000.0, 1.0], [23400.0, 3.0], [23800.0, 2.0], [24200.0, 1.0], [25000.0, 2.0], [25400.0, 1.0], [25800.0, 1.0], [26600.0, 3.0], [27400.0, 1.0], [27000.0, 3.0], [27800.0, 3.0], [28200.0, 3.0], [28600.0, 3.0], [29000.0, 3.0], [29400.0, 2.0], [29800.0, 1.0], [30200.0, 3.0], [30600.0, 3.0], [31000.0, 3.0], [31400.0, 3.0], [31800.0, 2.0], [32200.0, 3.0], [32600.0, 73.0], [33200.0, 3.0], [34000.0, 7.0], [34800.0, 2.0], [35600.0, 5.0], [36400.0, 48.0], [37200.0, 6.0], [38000.0, 17.0], [38800.0, 7.0], [39600.0, 13.0], [40400.0, 5.0], [41200.0, 5.0], [42000.0, 29.0], [42800.0, 3.0], [43600.0, 3.0], [44400.0, 3.0], [45200.0, 2.0], [46000.0, 3.0], [46800.0, 1.0], [47600.0, 2.0], [48400.0, 3.0], [49200.0, 2.0], [50000.0, 3.0], [50800.0, 1.0], [51600.0, 1.0], [52400.0, 1.0], [53200.0, 1.0], [54000.0, 2.0], [54800.0, 1.0], [55600.0, 1.0], [33500.0, 3.0], [34300.0, 14.0], [35100.0, 4.0], [35900.0, 21.0], [36700.0, 6.0], [37500.0, 3.0], [38300.0, 72.0], [39100.0, 2.0], [39900.0, 6.0], [40700.0, 12.0], [41500.0, 3.0], [42300.0, 24.0], [43100.0, 3.0], [43900.0, 4.0], [44700.0, 4.0], [45500.0, 4.0], [46300.0, 2.0], [47100.0, 3.0], [47900.0, 2.0], [48700.0, 2.0], [50300.0, 3.0], [51900.0, 1.0], [53500.0, 1.0], [54300.0, 1.0], [55100.0, 1.0], [23100.0, 1.0], [24300.0, 1.0], [25100.0, 2.0], [25500.0, 3.0], [25900.0, 2.0], [26300.0, 2.0], [26700.0, 1.0], [27100.0, 2.0], [27500.0, 1.0], [28300.0, 3.0], [28700.0, 1.0], [29100.0, 2.0], [29500.0, 3.0], [29900.0, 5.0], [30300.0, 2.0], [30700.0, 3.0], [31500.0, 5.0], [31100.0, 8.0], [31900.0, 1.0], [32300.0, 3.0], [32700.0, 43.0], [33400.0, 3.0], [34200.0, 27.0], [35000.0, 4.0], [35800.0, 5.0], [36600.0, 3.0], [37400.0, 4.0], [38200.0, 40.0], [39000.0, 4.0], [39800.0, 14.0], [40600.0, 9.0], [41400.0, 6.0], [42200.0, 18.0], [43000.0, 1.0], [43800.0, 2.0], [44600.0, 2.0], [45400.0, 4.0], [46200.0, 4.0], [47000.0, 4.0], [47800.0, 4.0], [48600.0, 3.0], [49400.0, 2.0], [50200.0, 1.0], [51000.0, 2.0], [51800.0, 2.0], [52600.0, 1.0], [53400.0, 1.0], [54200.0, 1.0], [55800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 56200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 31.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2594.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 31.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2594.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 500.016016016016, "minX": 1.7523579E12, "maxY": 997.785362853629, "series": [{"data": [[1.75235796E12, 500.016016016016], [1.7523579E12, 997.785362853629]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235796E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3170.6, "minX": 1.0, "maxY": 42663.0, "series": [{"data": [[2.0, 42532.0], [3.0, 42528.0], [4.0, 42663.0], [5.0, 42477.0], [6.0, 42453.0], [7.0, 42455.0], [8.0, 42590.0], [9.0, 42446.0], [10.0, 42431.0], [11.0, 42542.0], [12.0, 40820.0], [13.0, 40824.0], [14.0, 42417.0], [15.0, 40809.0], [16.0, 42403.0], [17.0, 42519.0], [18.0, 40828.0], [19.0, 40820.0], [20.0, 42346.0], [21.0, 40825.0], [22.0, 42346.0], [23.0, 42462.0], [24.0, 40859.0], [25.0, 40858.0], [26.0, 42341.0], [27.0, 40885.0], [28.0, 42368.0], [29.0, 42480.0], [30.0, 40773.0], [31.0, 40942.0], [33.0, 40921.0], [32.0, 42347.0], [35.0, 42504.0], [34.0, 42362.0], [36.0, 40780.0], [39.0, 40941.0], [38.0, 41649.5], [41.0, 40915.0], [40.0, 42396.0], [43.0, 38048.0], [42.0, 42576.0], [45.0, 42431.0], [44.0, 40951.0], [47.0, 38065.0], [46.0, 40975.0], [49.0, 40953.0], [48.0, 42460.0], [51.0, 38078.0], [50.0, 42468.0], [53.0, 40922.0], [52.0, 42604.0], [55.0, 38106.0], [54.0, 38099.0], [57.0, 42477.0], [56.0, 40878.0], [59.0, 40882.0], [58.0, 42471.0], [61.0, 42593.0], [60.0, 37954.0], [63.0, 38093.0], [62.0, 40881.0], [67.0, 40876.0], [66.0, 42448.0], [65.0, 38092.0], [64.0, 40882.0], [71.0, 36390.0], [70.0, 42570.0], [69.0, 42427.0], [68.0, 38089.0], [75.0, 38113.0], [74.0, 36399.0], [73.0, 40866.0], [72.0, 38110.0], [79.0, 42464.0], [78.0, 36396.0], [77.0, 42424.0], [76.0, 40868.0], [83.0, 36268.0], [82.0, 42580.0], [81.0, 40877.0], [80.0, 38114.0], [87.0, 38144.0], [86.0, 36399.0], [85.0, 40893.0], [84.0, 38126.0], [91.0, 38166.0], [90.0, 36427.0], [89.0, 42429.0], [88.0, 40897.0], [95.0, 36338.0], [94.0, 42554.0], [93.0, 42412.0], [92.0, 40896.0], [99.0, 38174.0], [98.0, 36464.0], [97.0, 40767.0], [96.0, 38167.0], [102.0, 36461.0], [101.0, 40891.0], [100.0, 42420.0], [107.0, 36334.0], [106.0, 42584.0], [105.0, 40887.0], [104.0, 40336.0], [111.0, 38287.0], [110.0, 36460.0], [109.0, 40743.0], [108.0, 38255.0], [115.0, 38296.0], [114.0, 36428.0], [113.0, 40882.0], [112.0, 42426.0], [119.0, 40922.0], [118.0, 42555.0], [117.0, 40911.0], [116.0, 42428.0], [123.0, 38306.0], [122.0, 36402.0], [121.0, 38306.0], [120.0, 36282.0], [127.0, 38298.0], [126.0, 36405.0], [125.0, 40896.0], [124.0, 42393.0], [135.0, 36452.0], [134.0, 42509.0], [133.0, 38328.0], [132.0, 36273.0], [131.0, 40903.0], [130.0, 42373.0], [129.0, 40921.0], [128.0, 42375.0], [143.0, 42349.0], [142.0, 36443.0], [141.0, 40881.0], [140.0, 42372.0], [139.0, 38369.0], [138.0, 36442.0], [137.0, 40872.0], [136.0, 38354.0], [151.0, 38366.0], [150.0, 36419.0], [149.0, 40911.0], [148.0, 38365.0], [147.0, 36417.0], [146.0, 42506.0], [145.0, 38209.0], [144.0, 40873.0], [159.0, 32860.0], [158.0, 40893.0], [157.0, 42389.0], [156.0, 38383.0], [155.0, 36420.0], [154.0, 32705.0], [153.0, 40916.0], [152.0, 42400.0], [167.0, 32770.0], [166.0, 38385.0], [165.0, 36446.0], [164.0, 40900.0], [163.0, 32762.0], [162.0, 38393.0], [161.0, 36449.0], [160.0, 42494.0], [175.0, 42432.0], [174.0, 41615.5], [172.0, 32749.0], [171.0, 38377.0], [170.0, 36444.0], [169.0, 40904.0], [168.0, 42316.0], [183.0, 42306.0], [182.0, 32731.0], [181.0, 38368.0], [180.0, 36462.0], [179.0, 40929.0], [178.0, 32737.0], [177.0, 38374.0], [176.0, 36323.0], [191.0, 42441.0], [190.0, 32863.0], [189.0, 40935.0], [188.0, 42302.0], [187.0, 32729.0], [186.0, 38357.0], [185.0, 36460.0], [184.0, 40930.0], [199.0, 40910.0], [198.0, 32727.0], [197.0, 42292.0], [196.0, 38333.0], [195.0, 36448.0], [194.0, 40809.0], [193.0, 38323.0], [192.0, 36326.0], [207.0, 36325.0], [206.0, 32824.0], [205.0, 42418.0], [204.0, 40906.0], [203.0, 32725.0], [202.0, 42299.0], [201.0, 38330.0], [200.0, 36451.0], [215.0, 38653.0], [213.0, 32689.0], [212.0, 42289.0], [211.0, 38358.0], [210.0, 40741.0], [209.0, 36455.0], [208.0, 38359.0], [223.0, 38336.0], [222.0, 36342.0], [221.0, 42434.0], [220.0, 32825.0], [219.0, 40851.0], [218.0, 42283.0], [217.0, 32715.0], [216.0, 38352.0], [231.0, 40794.0], [230.0, 38349.0], [229.0, 36464.0], [228.0, 42275.0], [227.0, 32689.0], [226.0, 38343.0], [225.0, 36457.0], [224.0, 40803.0], [239.0, 36297.0], [238.0, 38370.0], [237.0, 42248.0], [236.0, 40857.0], [235.0, 32757.0], [234.0, 40823.0], [233.0, 42274.0], [232.0, 32668.0], [247.0, 32628.0], [246.0, 36430.0], [245.0, 38368.0], [244.0, 40859.0], [243.0, 32642.0], [242.0, 36426.0], [241.0, 38366.0], [240.0, 42387.0], [254.0, 42189.0], [253.0, 38219.0], [252.0, 40899.0], [251.0, 32758.0], [250.0, 42191.0], [249.0, 36405.0], [248.0, 40887.0], [270.0, 38372.0], [271.0, 40962.0], [269.0, 42198.0], [268.0, 32773.0], [267.0, 36371.0], [266.0, 40971.0], [265.0, 38353.0], [264.0, 42209.0], [263.0, 32628.0], [257.0, 38372.0], [256.0, 39364.5], [259.0, 40929.0], [258.0, 32632.0], [262.0, 36376.0], [261.0, 40959.0], [260.0, 38344.0], [286.0, 38379.0], [287.0, 32638.0], [285.0, 41028.0], [284.0, 42171.0], [283.0, 36402.0], [282.0, 42182.0], [281.0, 32680.0], [280.0, 38369.0], [279.0, 40989.0], [273.0, 36396.0], [272.0, 32662.0], [275.0, 40981.0], [274.0, 42322.0], [278.0, 36396.0], [277.0, 32663.0], [276.0, 38380.0], [302.0, 38378.0], [303.0, 42271.0], [301.0, 40950.0], [300.0, 42122.0], [299.0, 32750.0], [298.0, 36370.0], [297.0, 42152.0], [296.0, 32647.0], [295.0, 38382.0], [289.0, 36263.0], [288.0, 42293.0], [291.0, 38380.0], [290.0, 41037.0], [294.0, 41044.0], [293.0, 36397.0], [292.0, 32643.0], [318.0, 42253.0], [319.0, 36194.0], [317.0, 40923.0], [316.0, 38388.0], [315.0, 42124.0], [314.0, 32753.0], [313.0, 36327.0], [312.0, 42122.0], [311.0, 32624.0], [305.0, 41091.0], [304.0, 36240.0], [307.0, 32623.0], [306.0, 38381.0], [310.0, 38374.0], [309.0, 36352.0], [308.0, 41084.0], [334.0, 38400.0], [335.0, 42292.0], [333.0, 36199.0], [332.0, 38397.0], [331.0, 42138.0], [330.0, 41048.0], [329.0, 32777.0], [328.0, 36321.0], [327.0, 42142.0], [321.0, 41047.0], [320.0, 38390.0], [323.0, 36321.0], [322.0, 32640.0], [326.0, 41041.0], [325.0, 32654.0], [324.0, 38405.0], [350.0, 38392.0], [351.0, 36146.0], [349.0, 42144.0], [348.0, 32606.0], [347.0, 38389.0], [346.0, 42156.0], [345.0, 41060.0], [344.0, 42125.0], [343.0, 32739.0], [337.0, 41083.0], [336.0, 32640.0], [339.0, 32635.0], [338.0, 36299.0], [342.0, 36296.0], [341.0, 41052.0], [340.0, 38396.0], [366.0, 42115.0], [367.0, 41096.0], [365.0, 32581.0], [364.0, 38434.0], [363.0, 36252.0], [362.0, 42121.0], [361.0, 38272.0], [360.0, 41073.0], [359.0, 36254.0], [353.0, 32597.0], [352.0, 41058.0], [355.0, 42268.0], [354.0, 38404.0], [358.0, 32700.0], [357.0, 41064.0], [356.0, 36255.0], [382.0, 32684.0], [383.0, 42068.0], [381.0, 41131.0], [380.0, 36233.0], [379.0, 38457.0], [378.0, 42068.0], [377.0, 32674.0], [376.0, 36234.0], [375.0, 41142.0], [369.0, 38415.0], [368.0, 32605.0], [371.0, 42241.0], [370.0, 41126.0], [374.0, 38435.0], [373.0, 32769.0], [372.0, 36233.0], [398.0, 42088.0], [399.0, 38473.0], [397.0, 41130.0], [396.0, 32697.0], [395.0, 36277.0], [394.0, 38476.0], [393.0, 42073.0], [392.0, 32668.0], [391.0, 36266.0], [385.0, 32656.0], [384.0, 38456.0], [387.0, 42190.0], [386.0, 41122.0], [390.0, 41117.0], [389.0, 38467.0], [388.0, 36264.0], [414.0, 32731.0], [415.0, 42016.0], [413.0, 38502.0], [412.0, 40969.0], [411.0, 32728.0], [410.0, 42017.0], [409.0, 36287.0], [408.0, 38486.0], [407.0, 36282.0], [400.0, 32706.0], [403.0, 40338.5], [401.0, 41126.0], [406.0, 41126.0], [405.0, 32831.0], [404.0, 36141.0], [429.0, 42017.0], [430.0, 40910.0], [428.0, 32724.0], [419.0, 32852.0], [418.0, 41099.0], [417.0, 37336.0], [427.0, 38508.0], [426.0, 42028.0], [425.0, 32725.0], [424.0, 38496.0], [423.0, 36297.0], [422.0, 41091.0], [421.0, 36292.0], [420.0, 42153.0], [446.0, 32861.0], [447.0, 38519.0], [445.0, 42012.0], [444.0, 38525.0], [443.0, 32749.0], [442.0, 41053.0], [441.0, 42010.0], [440.0, 36283.0], [439.0, 32723.0], [433.0, 32840.0], [432.0, 37337.0], [435.0, 42132.0], [434.0, 41049.0], [438.0, 38518.0], [437.0, 41065.0], [436.0, 36281.0], [462.0, 38507.0], [463.0, 42048.0], [461.0, 32816.0], [460.0, 42051.0], [459.0, 38494.0], [458.0, 32733.0], [457.0, 41057.0], [456.0, 39160.0], [454.0, 38509.0], [449.0, 42189.0], [448.0, 36151.0], [451.0, 36270.0], [450.0, 41060.0], [453.0, 32732.0], [452.0, 41055.0], [478.0, 38473.0], [479.0, 42025.0], [477.0, 32813.0], [476.0, 36275.0], [475.0, 42020.0], [474.0, 38484.0], [473.0, 32699.0], [472.0, 41075.0], [471.0, 36280.0], [465.0, 41046.0], [464.0, 36114.0], [467.0, 36278.0], [466.0, 42179.0], [470.0, 38351.0], [469.0, 41049.0], [468.0, 32701.0], [494.0, 42018.0], [495.0, 41040.0], [493.0, 38420.0], [492.0, 32683.0], [491.0, 36280.0], [490.0, 42025.0], [489.0, 38456.0], [488.0, 41066.0], [487.0, 32683.0], [481.0, 38483.0], [480.0, 41017.0], [483.0, 36268.0], [482.0, 42150.0], [486.0, 36283.0], [485.0, 41077.0], [484.0, 32685.0], [510.0, 32748.0], [511.0, 38423.0], [509.0, 41978.0], [508.0, 38421.0], [507.0, 32628.0], [506.0, 36279.0], [505.0, 42014.0], [504.0, 41033.0], [503.0, 38423.0], [497.0, 36294.0], [496.0, 38402.0], [499.0, 32666.0], [498.0, 42156.0], [502.0, 32632.0], [501.0, 36288.0], [500.0, 41042.0], [540.0, 36291.0], [543.0, 36449.0], [529.0, 42079.0], [528.0, 36404.0], [531.0, 32617.0], [530.0, 40854.0], [533.0, 40969.0], [532.0, 36407.0], [542.0, 38403.0], [541.0, 41904.0], [539.0, 32760.0], [538.0, 40964.0], [537.0, 38387.0], [536.0, 41907.0], [527.0, 38411.0], [513.0, 42093.0], [512.0, 36148.0], [515.0, 36314.0], [514.0, 41017.0], [517.0, 41012.0], [516.0, 32627.0], [519.0, 36330.0], [518.0, 38417.0], [526.0, 36253.0], [525.0, 41953.0], [524.0, 32765.0], [523.0, 38418.0], [522.0, 40983.0], [521.0, 41960.0], [520.0, 32636.0], [535.0, 32618.0], [534.0, 38413.0], [572.0, 40799.0], [575.0, 41904.0], [561.0, 40846.0], [560.0, 42026.0], [563.0, 32646.0], [562.0, 36441.0], [565.0, 32764.0], [564.0, 38397.0], [574.0, 32649.0], [573.0, 36382.0], [571.0, 38372.0], [570.0, 41883.0], [569.0, 36274.0], [568.0, 40810.0], [559.0, 32658.0], [545.0, 32639.0], [544.0, 41986.0], [547.0, 40802.0], [546.0, 36449.0], [549.0, 32615.0], [548.0, 38392.0], [551.0, 41869.0], [550.0, 40914.0], [558.0, 36443.0], [557.0, 38377.0], [556.0, 41361.0], [554.0, 36332.0], [553.0, 38380.0], [552.0, 32778.0], [567.0, 41874.0], [566.0, 38384.0], [604.0, 41979.0], [607.0, 36352.0], [593.0, 32667.0], [592.0, 36351.0], [595.0, 40721.0], [594.0, 42106.0], [597.0, 32673.0], [596.0, 36339.0], [606.0, 40654.0], [605.0, 38352.0], [603.0, 32645.0], [602.0, 36357.0], [601.0, 40660.0], [600.0, 38343.0], [591.0, 38338.0], [577.0, 36370.0], [576.0, 40797.0], [579.0, 42049.0], [578.0, 32641.0], [581.0, 36372.0], [580.0, 38205.0], [583.0, 38333.0], [582.0, 32794.0], [590.0, 41957.0], [589.0, 40727.0], [588.0, 32665.0], [587.0, 36363.0], [586.0, 38331.0], [585.0, 41919.0], [584.0, 40762.0], [599.0, 41982.0], [598.0, 38318.0], [636.0, 36328.0], [639.0, 42112.0], [624.0, 32563.0], [627.0, 32565.0], [626.0, 38463.5], [629.0, 32703.0], [628.0, 38321.0], [638.0, 32567.0], [637.0, 40574.0], [635.0, 38319.0], [634.0, 41994.0], [633.0, 40575.0], [632.0, 36200.0], [623.0, 42135.0], [609.0, 42129.0], [608.0, 32642.0], [611.0, 36353.0], [610.0, 40662.0], [613.0, 38315.0], [612.0, 32614.0], [615.0, 32716.0], [614.0, 41993.0], [622.0, 40609.0], [621.0, 36356.0], [620.0, 38328.0], [619.0, 42021.0], [618.0, 40590.0], [617.0, 36228.0], [616.0, 38338.0], [631.0, 38319.0], [630.0, 42009.0], [668.0, 32506.0], [664.0, 16585.5], [655.0, 36274.0], [641.0, 32553.0], [640.0, 36311.0], [643.0, 38313.0], [642.0, 40547.0], [645.0, 38306.0], [644.0, 32656.0], [647.0, 36177.0], [646.0, 41934.0], [654.0, 42020.0], [653.0, 40485.0], [652.0, 32537.0], [651.0, 36302.0], [650.0, 41935.0], [649.0, 40376.0], [648.0, 38306.0], [671.0, 41997.0], [657.0, 38307.0], [656.0, 32542.0], [659.0, 40443.0], [658.0, 32664.0], [661.0, 36161.0], [660.0, 38296.0], [670.0, 38329.0], [669.0, 36279.0], [667.0, 40201.0], [666.0, 41852.0], [665.0, 36278.0], [663.0, 38302.0], [662.0, 41865.0], [700.0, 36210.0], [703.0, 40327.0], [689.0, 38293.0], [688.0, 40346.0], [691.0, 41916.0], [690.0, 36220.0], [693.0, 38264.0], [692.0, 40358.0], [702.0, 41783.0], [701.0, 32557.0], [699.0, 32575.0], [698.0, 41783.0], [697.0, 36206.0], [696.0, 38237.0], [687.0, 32663.0], [673.0, 32622.0], [672.0, 40339.0], [675.0, 40322.0], [674.0, 38326.0], [677.0, 36117.0], [676.0, 38320.0], [679.0, 32505.0], [678.0, 41824.0], [686.0, 41801.0], [685.0, 36214.0], [684.0, 38168.0], [683.0, 32521.0], [682.0, 41807.0], [681.0, 36233.0], [680.0, 40313.0], [695.0, 40366.0], [694.0, 32566.0], [732.0, 38264.0], [735.0, 32683.0], [721.0, 32667.0], [720.0, 36252.0], [723.0, 41869.0], [722.0, 38270.0], [725.0, 38272.0], [724.0, 40281.0], [734.0, 36237.0], [733.0, 41744.0], [731.0, 32563.0], [730.0, 36251.0], [729.0, 41742.0], [728.0, 40266.0], [719.0, 40295.0], [705.0, 36205.0], [704.0, 38259.0], [708.0, 39290.0], [706.0, 41890.0], [711.0, 39283.0], [709.0, 32540.0], [718.0, 41742.0], [717.0, 38243.0], [716.0, 32532.0], [715.0, 36216.0], [714.0, 41748.0], [713.0, 32547.0], [712.0, 36236.0], [727.0, 32557.0], [726.0, 36112.0], [764.0, 41772.0], [767.0, 41886.0], [753.0, 41892.0], [752.0, 38264.0], [755.0, 38270.0], [754.0, 40229.0], [757.0, 32535.0], [756.0, 36159.0], [766.0, 38274.0], [765.0, 32669.0], [763.0, 36309.0], [762.0, 38264.0], [761.0, 32549.0], [760.0, 36288.0], [751.0, 40236.0], [737.0, 38269.0], [736.0, 40240.0], [739.0, 40209.0], [738.0, 41872.0], [741.0, 36132.0], [740.0, 38270.0], [743.0, 40219.0], [742.0, 32540.0], [750.0, 32657.0], [749.0, 36277.0], [748.0, 41783.0], [747.0, 38278.0], [746.0, 32537.0], [745.0, 36283.0], [744.0, 41780.0], [759.0, 40215.0], [758.0, 41771.0], [797.0, 39875.0], [791.0, 19428.0], [790.0, 36322.0], [789.0, 41652.0], [788.0, 32552.0], [787.0, 39764.0], [786.0, 36311.0], [785.0, 32549.0], [784.0, 38260.0], [799.0, 38213.0], [798.0, 41652.0], [796.0, 38222.0], [795.0, 36372.0], [794.0, 41672.0], [793.0, 32695.0], [792.0, 39890.0], [775.0, 32542.0], [774.0, 41736.0], [773.0, 36290.0], [772.0, 40105.0], [771.0, 32549.0], [770.0, 38257.0], [769.0, 36178.0], [768.0, 39989.0], [783.0, 36179.0], [782.0, 41846.0], [781.0, 38268.0], [780.0, 40012.0], [779.0, 32669.0], [778.0, 41693.0], [777.0, 38273.0], [776.0, 36326.0], [828.0, 41667.0], [806.0, 3170.6], [805.0, 32590.0], [804.0, 38212.0], [803.0, 39854.0], [802.0, 36397.0], [801.0, 41777.0], [800.0, 32573.0], [807.0, 32590.0], [815.0, 32577.0], [814.0, 38186.0], [813.0, 39840.0], [812.0, 41655.0], [811.0, 38196.0], [810.0, 39850.0], [809.0, 41648.0], [808.0, 36423.0], [831.0, 36320.0], [817.0, 41791.0], [816.0, 36443.0], [819.0, 38169.0], [818.0, 39835.0], [821.0, 36434.0], [820.0, 32584.0], [823.0, 36448.0], [822.0, 32589.0], [830.0, 39840.0], [829.0, 38134.0], [827.0, 32722.0], [826.0, 39843.0], [825.0, 38157.0], [824.0, 41658.0], [857.0, 38065.0], [861.0, 38018.0], [863.0, 37172.0], [849.0, 36483.0], [848.0, 32581.0], [851.0, 38077.0], [850.0, 39820.0], [853.0, 36485.0], [852.0, 32575.0], [860.0, 39770.0], [859.0, 36376.0], [858.0, 41629.0], [856.0, 39807.0], [839.0, 41624.0], [838.0, 36444.0], [837.0, 32582.0], [836.0, 36447.0], [835.0, 38125.0], [834.0, 32587.0], [833.0, 39866.0], [832.0, 41779.0], [847.0, 41734.0], [846.0, 36335.0], [845.0, 38088.0], [844.0, 39830.0], [843.0, 41619.0], [842.0, 38101.0], [841.0, 32699.0], [840.0, 39836.0], [855.0, 32696.0], [854.0, 41613.0], [892.0, 39518.0], [866.0, 19466.0], [865.0, 39736.0], [864.0, 36488.0], [867.0, 32581.0], [869.0, 41653.0], [868.0, 36512.0], [871.0, 37981.0], [870.0, 32694.0], [879.0, 39610.0], [878.0, 36530.0], [877.0, 41762.0], [876.0, 32570.0], [875.0, 37976.0], [874.0, 39648.0], [873.0, 36399.0], [872.0, 41654.0], [895.0, 38011.0], [881.0, 37958.0], [880.0, 32582.0], [883.0, 32665.0], [882.0, 36552.0], [885.0, 41633.0], [884.0, 39551.0], [887.0, 36410.0], [886.0, 38012.0], [894.0, 32561.0], [893.0, 41737.0], [891.0, 36550.0], [890.0, 38007.0], [889.0, 32562.0], [888.0, 41613.0], [924.0, 37815.0], [910.0, 18718.0], [909.0, 32602.0], [908.0, 37967.0], [907.0, 41439.0], [906.0, 36511.0], [905.0, 32601.0], [904.0, 37983.0], [911.0, 37956.0], [897.0, 32699.0], [896.0, 36559.0], [899.0, 36544.0], [898.0, 39435.0], [901.0, 41494.0], [900.0, 37865.0], [903.0, 39353.0], [902.0, 32588.0], [927.0, 19915.0], [913.0, 36517.0], [912.0, 41344.0], [915.0, 38979.0], [914.0, 32589.0], [917.0, 32656.0], [916.0, 41418.0], [919.0, 37852.0], [918.0, 36531.0], [926.0, 36496.0], [925.0, 41196.0], [923.0, 32753.0], [922.0, 36518.0], [921.0, 38997.0], [920.0, 32645.0], [956.0, 32309.0], [958.0, 19356.0], [959.0, 35296.0], [945.0, 40869.0], [944.0, 36156.0], [947.0, 32671.0], [946.0, 38443.0], [949.0, 40889.0], [948.0, 37447.0], [957.0, 40331.0], [955.0, 37104.0], [954.0, 35416.0], [953.0, 32276.0], [952.0, 37254.0], [943.0, 32598.0], [929.0, 32609.0], [928.0, 41166.0], [931.0, 38806.0], [930.0, 37703.0], [933.0, 41276.0], [932.0, 32596.0], [935.0, 32702.0], [934.0, 36278.0], [942.0, 37568.0], [941.0, 35565.5], [940.0, 41006.0], [938.0, 37625.0], [937.0, 36377.0], [936.0, 37652.0], [951.0, 32359.0], [950.0, 38293.0], [988.0, 36343.0], [991.0, 39509.0], [977.0, 31391.0], [976.0, 36343.0], [979.0, 34612.0], [978.0, 39465.0], [981.0, 39617.0], [980.0, 36982.0], [990.0, 34593.0], [989.0, 37008.0], [987.0, 39501.0], [986.0, 34480.0], [985.0, 31526.0], [984.0, 36981.0], [975.0, 36976.0], [961.0, 36685.0], [960.0, 39961.0], [963.0, 31728.0], [962.0, 35065.0], [965.0, 36475.0], [964.0, 37268.0], [967.0, 39664.0], [966.0, 31517.0], [974.0, 34628.0], [973.0, 39454.0], [972.0, 36332.0], [971.0, 34519.0], [970.0, 31529.0], [969.0, 37016.0], [968.0, 36366.0], [983.0, 31386.0], [982.0, 36342.0], [1000.0, 25734.38691588784], [999.0, 32822.5], [998.0, 31310.0], [997.0, 36944.0], [996.0, 36328.0], [995.0, 39627.0], [994.0, 36993.0], [993.0, 31390.0], [992.0, 36344.0], [1.0, 42655.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[808.348571428572, 30259.741714285734]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3912.75, "minX": 1.7523579E12, "maxY": 7916.75, "series": [{"data": [[1.75235796E12, 4841.533333333334], [1.7523579E12, 7916.75]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235796E12, 3912.75], [1.7523579E12, 6368.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235796E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 25431.29766297665, "minX": 1.7523579E12, "maxY": 38118.65065065064, "series": [{"data": [[1.75235796E12, 38118.65065065064], [1.7523579E12, 25431.29766297665]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235796E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 25431.25707257074, "minX": 1.7523579E12, "maxY": 38118.63463463456, "series": [{"data": [[1.75235796E12, 38118.63463463456], [1.7523579E12, 25431.25707257074]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235796E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7523579E12, "maxY": 10.203567035670368, "series": [{"data": [[1.75235796E12, 0.0], [1.7523579E12, 10.203567035670368]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235796E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 638.0, "minX": 1.7523579E12, "maxY": 56297.0, "series": [{"data": [[1.75235796E12, 42663.0], [1.7523579E12, 56297.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235796E12, 42138.0], [1.7523579E12, 46685.99999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235796E12, 42555.0], [1.7523579E12, 54212.82]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235796E12, 42393.0], [1.7523579E12, 49628.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235796E12, 31310.0], [1.7523579E12, 638.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235796E12, 38343.0], [1.7523579E12, 30269.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235796E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 784.5, "minX": 3.0, "maxY": 42532.0, "series": [{"data": [[10.0, 40570.0], [11.0, 42341.0], [12.0, 36420.5], [3.0, 42532.0], [13.0, 21790.5], [15.0, 40951.0], [16.0, 784.5], [18.0, 36394.5], [20.0, 3393.5], [5.0, 42477.0], [21.0, 37815.0], [22.0, 40817.5], [24.0, 20612.0], [25.0, 36280.0], [26.0, 36866.0], [27.0, 34252.0], [28.0, 33061.0], [29.0, 36868.0], [30.0, 32752.0], [31.0, 26698.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 31.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 784.5, "minX": 3.0, "maxY": 42532.0, "series": [{"data": [[10.0, 40570.0], [11.0, 42341.0], [12.0, 36420.5], [3.0, 42532.0], [13.0, 21790.5], [15.0, 40951.0], [16.0, 784.5], [18.0, 36394.5], [20.0, 3393.5], [5.0, 42477.0], [21.0, 37815.0], [22.0, 40817.5], [24.0, 20612.0], [25.0, 36280.0], [26.0, 36866.0], [27.0, 34252.0], [28.0, 33061.0], [29.0, 36868.0], [30.0, 32752.0], [31.0, 26698.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 31.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.75235784E12, "maxY": 43.68333333333333, "series": [{"data": [[1.75235784E12, 0.06666666666666667], [1.7523579E12, 43.68333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523579E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.65, "minX": 1.7523579E12, "maxY": 27.1, "series": [{"data": [[1.75235796E12, 16.65], [1.7523579E12, 27.1]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235796E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.65, "minX": 1.7523579E12, "maxY": 27.1, "series": [{"data": [[1.75235796E12, 16.65], [1.7523579E12, 27.1]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235796E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.65, "minX": 1.7523579E12, "maxY": 27.1, "series": [{"data": [[1.75235796E12, 16.65], [1.7523579E12, 27.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235796E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

