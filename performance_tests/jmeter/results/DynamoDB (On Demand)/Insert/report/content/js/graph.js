/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 196.0, "minX": 0.0, "maxY": 55169.0, "series": [{"data": [[0.0, 196.0], [0.1, 201.0], [0.2, 302.0], [0.3, 384.0], [0.4, 387.0], [0.5, 449.0], [0.6, 560.0], [0.7, 577.0], [0.8, 806.0], [0.9, 966.0], [1.0, 1093.0], [1.1, 1211.0], [1.2, 1268.0], [1.3, 1332.0], [1.4, 1584.0], [1.5, 1625.0], [1.6, 1720.0], [1.7, 1786.0], [1.8, 1914.0], [1.9, 1960.0], [2.0, 2104.0], [2.1, 2208.0], [2.2, 2301.0], [2.3, 2365.0], [2.4, 2437.0], [2.5, 2621.0], [2.6, 2625.0], [2.7, 2764.0], [2.8, 2819.0], [2.9, 2925.0], [3.0, 3036.0], [3.1, 3145.0], [3.2, 3182.0], [3.3, 3300.0], [3.4, 3413.0], [3.5, 3461.0], [3.6, 3577.0], [3.7, 3684.0], [3.8, 3802.0], [3.9, 3837.0], [4.0, 3959.0], [4.1, 4070.0], [4.2, 4089.0], [4.3, 4224.0], [4.4, 4347.0], [4.5, 4477.0], [4.6, 4488.0], [4.7, 4623.0], [4.8, 4745.0], [4.9, 4838.0], [5.0, 4878.0], [5.1, 5016.0], [5.2, 5031.0], [5.3, 5150.0], [5.4, 5249.0], [5.5, 5374.0], [5.6, 5442.0], [5.7, 5577.0], [5.8, 5645.0], [5.9, 5734.0], [6.0, 5879.0], [6.1, 5952.0], [6.2, 6064.0], [6.3, 6132.0], [6.4, 6299.0], [6.5, 6346.0], [6.6, 6512.0], [6.7, 6614.0], [6.8, 6630.0], [6.9, 6767.0], [7.0, 6861.0], [7.1, 6942.0], [7.2, 7061.0], [7.3, 7132.0], [7.4, 7229.0], [7.5, 7324.0], [7.6, 7402.0], [7.7, 7515.0], [7.8, 7576.0], [7.9, 7650.0], [8.0, 7754.0], [8.1, 7783.0], [8.2, 7866.0], [8.3, 8004.0], [8.4, 8042.0], [8.5, 8149.0], [8.6, 8214.0], [8.7, 8336.0], [8.8, 8456.0], [8.9, 8520.0], [9.0, 8605.0], [9.1, 8652.0], [9.2, 8737.0], [9.3, 8830.0], [9.4, 8916.0], [9.5, 8924.0], [9.6, 8933.0], [9.7, 8957.0], [9.8, 8970.0], [9.9, 9008.0], [10.0, 9027.0], [10.1, 9044.0], [10.2, 9064.0], [10.3, 9071.0], [10.4, 9083.0], [10.5, 9087.0], [10.6, 9095.0], [10.7, 9103.0], [10.8, 9109.0], [10.9, 9127.0], [11.0, 9131.0], [11.1, 9150.0], [11.2, 9154.0], [11.3, 9157.0], [11.4, 9163.0], [11.5, 9175.0], [11.6, 9179.0], [11.7, 9181.0], [11.8, 9191.0], [11.9, 9198.0], [12.0, 9200.0], [12.1, 9208.0], [12.2, 9214.0], [12.3, 9220.0], [12.4, 9223.0], [12.5, 9230.0], [12.6, 9244.0], [12.7, 9254.0], [12.8, 9270.0], [12.9, 9288.0], [13.0, 9290.0], [13.1, 9304.0], [13.2, 9314.0], [13.3, 9336.0], [13.4, 9346.0], [13.5, 9362.0], [13.6, 9404.0], [13.7, 9513.0], [13.8, 9592.0], [13.9, 9651.0], [14.0, 9781.0], [14.1, 9790.0], [14.2, 9807.0], [14.3, 9818.0], [14.4, 9871.0], [14.5, 9892.0], [14.6, 9894.0], [14.7, 9912.0], [14.8, 9918.0], [14.9, 9922.0], [15.0, 9930.0], [15.1, 9935.0], [15.2, 9939.0], [15.3, 9952.0], [15.4, 9969.0], [15.5, 9974.0], [15.6, 9979.0], [15.7, 9986.0], [15.8, 9990.0], [15.9, 10019.0], [16.0, 10039.0], [16.1, 10148.0], [16.2, 10168.0], [16.3, 10184.0], [16.4, 10232.0], [16.5, 10306.0], [16.6, 10565.0], [16.7, 10697.0], [16.8, 10708.0], [16.9, 10955.0], [17.0, 11090.0], [17.1, 11225.0], [17.2, 11368.0], [17.3, 11611.0], [17.4, 11749.0], [17.5, 11892.0], [17.6, 12011.0], [17.7, 12276.0], [17.8, 12292.0], [17.9, 12490.0], [18.0, 12625.0], [18.1, 12753.0], [18.2, 12884.0], [18.3, 13019.0], [18.4, 13265.0], [18.5, 13406.0], [18.6, 13544.0], [18.7, 13794.0], [18.8, 13802.0], [18.9, 13936.0], [19.0, 14185.0], [19.1, 14333.0], [19.2, 14456.0], [19.3, 14563.0], [19.4, 14713.0], [19.5, 14863.0], [19.6, 14999.0], [19.7, 15154.0], [19.8, 15313.0], [19.9, 15507.0], [20.0, 15635.0], [20.1, 15771.0], [20.2, 15872.0], [20.3, 16139.0], [20.4, 16238.0], [20.5, 16377.0], [20.6, 16639.0], [20.7, 16700.0], [20.8, 16831.0], [20.9, 17071.0], [21.0, 17157.0], [21.1, 17318.0], [21.2, 17425.0], [21.3, 17595.0], [21.4, 17770.0], [21.5, 17904.0], [21.6, 18086.0], [21.7, 18198.0], [21.8, 18333.0], [21.9, 18464.0], [22.0, 18550.0], [22.1, 18809.0], [22.2, 18940.0], [22.3, 19026.0], [22.4, 19286.0], [22.5, 19425.0], [22.6, 19479.0], [22.7, 19516.0], [22.8, 19570.0], [22.9, 19574.0], [23.0, 19577.0], [23.1, 19589.0], [23.2, 19601.0], [23.3, 19608.0], [23.4, 19613.0], [23.5, 19619.0], [23.6, 19645.0], [23.7, 19647.0], [23.8, 19656.0], [23.9, 19659.0], [24.0, 19671.0], [24.1, 19677.0], [24.2, 19681.0], [24.3, 19696.0], [24.4, 19706.0], [24.5, 19716.0], [24.6, 19730.0], [24.7, 19868.0], [24.8, 19971.0], [24.9, 20124.0], [25.0, 20378.0], [25.1, 20512.0], [25.2, 20585.0], [25.3, 20823.0], [25.4, 20949.0], [25.5, 21064.0], [25.6, 21139.0], [25.7, 21165.0], [25.8, 21176.0], [25.9, 21182.0], [26.0, 21184.0], [26.1, 21216.0], [26.2, 21234.0], [26.3, 21263.0], [26.4, 21264.0], [26.5, 21267.0], [26.6, 21283.0], [26.7, 21287.0], [26.8, 21291.0], [26.9, 21295.0], [27.0, 21299.0], [27.1, 21301.0], [27.2, 21303.0], [27.3, 21307.0], [27.4, 21322.0], [27.5, 21327.0], [27.6, 21333.0], [27.7, 21354.0], [27.8, 21460.0], [27.9, 21681.0], [28.0, 21941.0], [28.1, 22072.0], [28.2, 22291.0], [28.3, 22426.0], [28.4, 22573.0], [28.5, 23023.0], [28.6, 23255.0], [28.7, 23520.0], [28.8, 23668.0], [28.9, 23928.0], [29.0, 24180.0], [29.1, 24333.0], [29.2, 24706.0], [29.3, 24957.0], [29.4, 25212.0], [29.5, 25444.0], [29.6, 25755.0], [29.7, 25887.0], [29.8, 25932.0], [29.9, 25940.0], [30.0, 25943.0], [30.1, 25950.0], [30.2, 25956.0], [30.3, 25961.0], [30.4, 25987.0], [30.5, 25996.0], [30.6, 26004.0], [30.7, 26041.0], [30.8, 26056.0], [30.9, 26057.0], [31.0, 26061.0], [31.1, 26078.0], [31.2, 26084.0], [31.3, 26085.0], [31.4, 26096.0], [31.5, 26110.0], [31.6, 26115.0], [31.7, 26172.0], [31.8, 26199.0], [31.9, 26351.0], [32.0, 26472.0], [32.1, 26706.0], [32.2, 27011.0], [32.3, 27084.0], [32.4, 27285.0], [32.5, 27436.0], [32.6, 27562.0], [32.7, 27674.0], [32.8, 27922.0], [32.9, 28055.0], [33.0, 28183.0], [33.1, 28316.0], [33.2, 28538.0], [33.3, 28611.0], [33.4, 28789.0], [33.5, 28982.0], [33.6, 29058.0], [33.7, 29218.0], [33.8, 29322.0], [33.9, 29385.0], [34.0, 29519.0], [34.1, 29628.0], [34.2, 29713.0], [34.3, 29834.0], [34.4, 29981.0], [34.5, 30114.0], [34.6, 30186.0], [34.7, 30303.0], [34.8, 30432.0], [34.9, 30520.0], [35.0, 30664.0], [35.1, 30780.0], [35.2, 30811.0], [35.3, 30992.0], [35.4, 31123.0], [35.5, 31189.0], [35.6, 31310.0], [35.7, 31425.0], [35.8, 31536.0], [35.9, 31565.0], [36.0, 31671.0], [36.1, 31747.0], [36.2, 31837.0], [36.3, 31939.0], [36.4, 32016.0], [36.5, 32043.0], [36.6, 32162.0], [36.7, 32172.0], [36.8, 32176.0], [36.9, 32184.0], [37.0, 32209.0], [37.1, 32214.0], [37.2, 32230.0], [37.3, 32256.0], [37.4, 32287.0], [37.5, 32292.0], [37.6, 32301.0], [37.7, 32322.0], [37.8, 32327.0], [37.9, 32341.0], [38.0, 32349.0], [38.1, 32351.0], [38.2, 32367.0], [38.3, 32385.0], [38.4, 32395.0], [38.5, 32404.0], [38.6, 32419.0], [38.7, 32433.0], [38.8, 32446.0], [38.9, 32454.0], [39.0, 32455.0], [39.1, 32456.0], [39.2, 32463.0], [39.3, 32482.0], [39.4, 32485.0], [39.5, 32491.0], [39.6, 32510.0], [39.7, 32521.0], [39.8, 32527.0], [39.9, 32552.0], [40.0, 32576.0], [40.1, 32590.0], [40.2, 32596.0], [40.3, 32605.0], [40.4, 32608.0], [40.5, 32635.0], [40.6, 32699.0], [40.7, 32733.0], [40.8, 32746.0], [40.9, 32806.0], [41.0, 32813.0], [41.1, 32830.0], [41.2, 32854.0], [41.3, 32880.0], [41.4, 32886.0], [41.5, 32898.0], [41.6, 32912.0], [41.7, 32919.0], [41.8, 32929.0], [41.9, 32933.0], [42.0, 32939.0], [42.1, 32949.0], [42.2, 32952.0], [42.3, 32958.0], [42.4, 32975.0], [42.5, 32976.0], [42.6, 32978.0], [42.7, 32981.0], [42.8, 32987.0], [42.9, 32990.0], [43.0, 32991.0], [43.1, 32995.0], [43.2, 33000.0], [43.3, 33001.0], [43.4, 33009.0], [43.5, 33013.0], [43.6, 33015.0], [43.7, 33016.0], [43.8, 33017.0], [43.9, 33022.0], [44.0, 33025.0], [44.1, 33029.0], [44.2, 33030.0], [44.3, 33033.0], [44.4, 33043.0], [44.5, 33046.0], [44.6, 33046.0], [44.7, 33050.0], [44.8, 33054.0], [44.9, 33060.0], [45.0, 33063.0], [45.1, 33068.0], [45.2, 33071.0], [45.3, 33077.0], [45.4, 33081.0], [45.5, 33083.0], [45.6, 33084.0], [45.7, 33088.0], [45.8, 33098.0], [45.9, 33100.0], [46.0, 33101.0], [46.1, 33114.0], [46.2, 33122.0], [46.3, 33124.0], [46.4, 33128.0], [46.5, 33128.0], [46.6, 33137.0], [46.7, 33147.0], [46.8, 33147.0], [46.9, 33149.0], [47.0, 33155.0], [47.1, 33155.0], [47.2, 33159.0], [47.3, 33162.0], [47.4, 33169.0], [47.5, 33169.0], [47.6, 33183.0], [47.7, 33190.0], [47.8, 33200.0], [47.9, 33215.0], [48.0, 33235.0], [48.1, 33258.0], [48.2, 33269.0], [48.3, 33288.0], [48.4, 33320.0], [48.5, 33416.0], [48.6, 33534.0], [48.7, 33584.0], [48.8, 33658.0], [48.9, 33769.0], [49.0, 33909.0], [49.1, 33928.0], [49.2, 34039.0], [49.3, 34133.0], [49.4, 34168.0], [49.5, 34297.0], [49.6, 34324.0], [49.7, 34373.0], [49.8, 34450.0], [49.9, 34456.0], [50.0, 34463.0], [50.1, 34490.0], [50.2, 34493.0], [50.3, 34508.0], [50.4, 34513.0], [50.5, 34522.0], [50.6, 34527.0], [50.7, 34535.0], [50.8, 34544.0], [50.9, 34547.0], [51.0, 34550.0], [51.1, 34557.0], [51.2, 34574.0], [51.3, 34575.0], [51.4, 34580.0], [51.5, 34583.0], [51.6, 34584.0], [51.7, 34585.0], [51.8, 34606.0], [51.9, 34608.0], [52.0, 34610.0], [52.1, 34615.0], [52.2, 34620.0], [52.3, 34625.0], [52.4, 34631.0], [52.5, 34634.0], [52.6, 34634.0], [52.7, 34637.0], [52.8, 34640.0], [52.9, 34644.0], [53.0, 34645.0], [53.1, 34646.0], [53.2, 34647.0], [53.3, 34648.0], [53.4, 34649.0], [53.5, 34650.0], [53.6, 34651.0], [53.7, 34654.0], [53.8, 34655.0], [53.9, 34657.0], [54.0, 34660.0], [54.1, 34664.0], [54.2, 34668.0], [54.3, 34673.0], [54.4, 34675.0], [54.5, 34676.0], [54.6, 34678.0], [54.7, 34680.0], [54.8, 34684.0], [54.9, 34686.0], [55.0, 34689.0], [55.1, 34691.0], [55.2, 34692.0], [55.3, 34699.0], [55.4, 34699.0], [55.5, 34700.0], [55.6, 34703.0], [55.7, 34707.0], [55.8, 34709.0], [55.9, 34710.0], [56.0, 34714.0], [56.1, 34715.0], [56.2, 34715.0], [56.3, 34718.0], [56.4, 34720.0], [56.5, 34721.0], [56.6, 34722.0], [56.7, 34723.0], [56.8, 34726.0], [56.9, 34729.0], [57.0, 34731.0], [57.1, 34732.0], [57.2, 34735.0], [57.3, 34736.0], [57.4, 34739.0], [57.5, 34740.0], [57.6, 34741.0], [57.7, 34745.0], [57.8, 34748.0], [57.9, 34749.0], [58.0, 34751.0], [58.1, 34752.0], [58.2, 34754.0], [58.3, 34755.0], [58.4, 34755.0], [58.5, 34758.0], [58.6, 34761.0], [58.7, 34762.0], [58.8, 34765.0], [58.9, 34766.0], [59.0, 34766.0], [59.1, 34767.0], [59.2, 34768.0], [59.3, 34769.0], [59.4, 34769.0], [59.5, 34769.0], [59.6, 34772.0], [59.7, 34772.0], [59.8, 34773.0], [59.9, 34774.0], [60.0, 34774.0], [60.1, 34776.0], [60.2, 34777.0], [60.3, 34779.0], [60.4, 34780.0], [60.5, 34781.0], [60.6, 34782.0], [60.7, 34783.0], [60.8, 34784.0], [60.9, 34784.0], [61.0, 34785.0], [61.1, 34787.0], [61.2, 34788.0], [61.3, 34789.0], [61.4, 34791.0], [61.5, 34793.0], [61.6, 34793.0], [61.7, 34795.0], [61.8, 34797.0], [61.9, 34799.0], [62.0, 34799.0], [62.1, 34801.0], [62.2, 34801.0], [62.3, 34801.0], [62.4, 34803.0], [62.5, 34804.0], [62.6, 34804.0], [62.7, 34806.0], [62.8, 34807.0], [62.9, 34810.0], [63.0, 34812.0], [63.1, 34812.0], [63.2, 34814.0], [63.3, 34814.0], [63.4, 34815.0], [63.5, 34815.0], [63.6, 34816.0], [63.7, 34816.0], [63.8, 34818.0], [63.9, 34820.0], [64.0, 34820.0], [64.1, 34821.0], [64.2, 34821.0], [64.3, 34822.0], [64.4, 34823.0], [64.5, 34825.0], [64.6, 34827.0], [64.7, 34829.0], [64.8, 34830.0], [64.9, 34831.0], [65.0, 34832.0], [65.1, 34834.0], [65.2, 34834.0], [65.3, 34835.0], [65.4, 34836.0], [65.5, 34838.0], [65.6, 34839.0], [65.7, 34840.0], [65.8, 34842.0], [65.9, 34843.0], [66.0, 34844.0], [66.1, 34845.0], [66.2, 34846.0], [66.3, 34847.0], [66.4, 34850.0], [66.5, 34851.0], [66.6, 34853.0], [66.7, 34856.0], [66.8, 34857.0], [66.9, 34857.0], [67.0, 34859.0], [67.1, 34861.0], [67.2, 34863.0], [67.3, 34868.0], [67.4, 34870.0], [67.5, 34871.0], [67.6, 34873.0], [67.7, 34876.0], [67.8, 34877.0], [67.9, 34880.0], [68.0, 34882.0], [68.1, 34882.0], [68.2, 34884.0], [68.3, 34885.0], [68.4, 34885.0], [68.5, 34887.0], [68.6, 34887.0], [68.7, 34889.0], [68.8, 34890.0], [68.9, 34892.0], [69.0, 34893.0], [69.1, 34895.0], [69.2, 34896.0], [69.3, 34898.0], [69.4, 34899.0], [69.5, 34905.0], [69.6, 34907.0], [69.7, 34909.0], [69.8, 34910.0], [69.9, 34916.0], [70.0, 34918.0], [70.1, 34919.0], [70.2, 34919.0], [70.3, 34920.0], [70.4, 34923.0], [70.5, 34928.0], [70.6, 34931.0], [70.7, 34932.0], [70.8, 34933.0], [70.9, 34936.0], [71.0, 34937.0], [71.1, 34939.0], [71.2, 34946.0], [71.3, 34952.0], [71.4, 34957.0], [71.5, 34957.0], [71.6, 34959.0], [71.7, 34963.0], [71.8, 34969.0], [71.9, 34972.0], [72.0, 34974.0], [72.1, 34979.0], [72.2, 34987.0], [72.3, 34991.0], [72.4, 34997.0], [72.5, 35001.0], [72.6, 35001.0], [72.7, 35004.0], [72.8, 35011.0], [72.9, 35014.0], [73.0, 35018.0], [73.1, 35023.0], [73.2, 35029.0], [73.3, 35037.0], [73.4, 35047.0], [73.5, 35074.0], [73.6, 35157.0], [73.7, 35264.0], [73.8, 35395.0], [73.9, 35435.0], [74.0, 35548.0], [74.1, 35564.0], [74.2, 35566.0], [74.3, 35583.0], [74.4, 35643.0], [74.5, 35674.0], [74.6, 35678.0], [74.7, 35694.0], [74.8, 35707.0], [74.9, 35731.0], [75.0, 35795.0], [75.1, 35804.0], [75.2, 35809.0], [75.3, 35839.0], [75.4, 35909.0], [75.5, 35929.0], [75.6, 36091.0], [75.7, 36206.0], [75.8, 36327.0], [75.9, 36379.0], [76.0, 36460.0], [76.1, 36547.0], [76.2, 36600.0], [76.3, 36654.0], [76.4, 36722.0], [76.5, 36781.0], [76.6, 36823.0], [76.7, 36885.0], [76.8, 36913.0], [76.9, 36970.0], [77.0, 37047.0], [77.1, 37073.0], [77.2, 37085.0], [77.3, 37096.0], [77.4, 37104.0], [77.5, 37105.0], [77.6, 37109.0], [77.7, 37111.0], [77.8, 37114.0], [77.9, 37117.0], [78.0, 37122.0], [78.1, 37124.0], [78.2, 37144.0], [78.3, 37154.0], [78.4, 37157.0], [78.5, 37162.0], [78.6, 37172.0], [78.7, 37176.0], [78.8, 37186.0], [78.9, 37188.0], [79.0, 37190.0], [79.1, 37193.0], [79.2, 37199.0], [79.3, 37204.0], [79.4, 37210.0], [79.5, 37222.0], [79.6, 37241.0], [79.7, 37244.0], [79.8, 37254.0], [79.9, 37262.0], [80.0, 37264.0], [80.1, 37268.0], [80.2, 37272.0], [80.3, 37285.0], [80.4, 37291.0], [80.5, 37298.0], [80.6, 37302.0], [80.7, 37306.0], [80.8, 37314.0], [80.9, 37327.0], [81.0, 37331.0], [81.1, 37336.0], [81.2, 37338.0], [81.3, 37340.0], [81.4, 37344.0], [81.5, 37348.0], [81.6, 37350.0], [81.7, 37352.0], [81.8, 37355.0], [81.9, 37355.0], [82.0, 37361.0], [82.1, 37363.0], [82.2, 37364.0], [82.3, 37367.0], [82.4, 37368.0], [82.5, 37370.0], [82.6, 37371.0], [82.7, 37375.0], [82.8, 37378.0], [82.9, 37384.0], [83.0, 37384.0], [83.1, 37385.0], [83.2, 37391.0], [83.3, 37392.0], [83.4, 37395.0], [83.5, 37398.0], [83.6, 37399.0], [83.7, 37400.0], [83.8, 37403.0], [83.9, 37405.0], [84.0, 37408.0], [84.1, 37410.0], [84.2, 37411.0], [84.3, 37413.0], [84.4, 37415.0], [84.5, 37418.0], [84.6, 37418.0], [84.7, 37422.0], [84.8, 37425.0], [84.9, 37425.0], [85.0, 37428.0], [85.1, 37430.0], [85.2, 37431.0], [85.3, 37435.0], [85.4, 37442.0], [85.5, 37443.0], [85.6, 37446.0], [85.7, 37448.0], [85.8, 37452.0], [85.9, 37454.0], [86.0, 37458.0], [86.1, 37460.0], [86.2, 37462.0], [86.3, 37464.0], [86.4, 37469.0], [86.5, 37471.0], [86.6, 37473.0], [86.7, 37476.0], [86.8, 37478.0], [86.9, 37479.0], [87.0, 37480.0], [87.1, 37482.0], [87.2, 37482.0], [87.3, 37485.0], [87.4, 37490.0], [87.5, 37491.0], [87.6, 37494.0], [87.7, 37496.0], [87.8, 37498.0], [87.9, 37499.0], [88.0, 37503.0], [88.1, 37504.0], [88.2, 37507.0], [88.3, 37508.0], [88.4, 37510.0], [88.5, 37512.0], [88.6, 37513.0], [88.7, 37516.0], [88.8, 37517.0], [88.9, 37519.0], [89.0, 37523.0], [89.1, 37524.0], [89.2, 37529.0], [89.3, 37534.0], [89.4, 37534.0], [89.5, 37537.0], [89.6, 37543.0], [89.7, 37544.0], [89.8, 37548.0], [89.9, 37551.0], [90.0, 37560.0], [90.1, 37560.0], [90.2, 37562.0], [90.3, 37565.0], [90.4, 37572.0], [90.5, 37577.0], [90.6, 37582.0], [90.7, 37588.0], [90.8, 37593.0], [90.9, 37596.0], [91.0, 37600.0], [91.1, 37602.0], [91.2, 37605.0], [91.3, 37607.0], [91.4, 37611.0], [91.5, 37618.0], [91.6, 37621.0], [91.7, 37623.0], [91.8, 37650.0], [91.9, 37656.0], [92.0, 37688.0], [92.1, 37731.0], [92.2, 37789.0], [92.3, 37818.0], [92.4, 37980.0], [92.5, 38112.0], [92.6, 38274.0], [92.7, 38401.0], [92.8, 38566.0], [92.9, 38781.0], [93.0, 38886.0], [93.1, 39064.0], [93.2, 39204.0], [93.3, 39348.0], [93.4, 39539.0], [93.5, 39730.0], [93.6, 39788.0], [93.7, 39997.0], [93.8, 40142.0], [93.9, 40244.0], [94.0, 40500.0], [94.1, 40587.0], [94.2, 40721.0], [94.3, 41002.0], [94.4, 41139.0], [94.5, 41257.0], [94.6, 41374.0], [94.7, 41559.0], [94.8, 41826.0], [94.9, 42007.0], [95.0, 42221.0], [95.1, 42448.0], [95.2, 42621.0], [95.3, 42883.0], [95.4, 43178.0], [95.5, 43254.0], [95.6, 43604.0], [95.7, 43779.0], [95.8, 44049.0], [95.9, 44258.0], [96.0, 44534.0], [96.1, 45020.0], [96.2, 45420.0], [96.3, 45798.0], [96.4, 46056.0], [96.5, 46292.0], [96.6, 46535.0], [96.7, 46784.0], [96.8, 46983.0], [96.9, 47169.0], [97.0, 47479.0], [97.1, 47600.0], [97.2, 47830.0], [97.3, 48091.0], [97.4, 48355.0], [97.5, 48604.0], [97.6, 48735.0], [97.7, 49091.0], [97.8, 49195.0], [97.9, 49464.0], [98.0, 49675.0], [98.1, 49893.0], [98.2, 50047.0], [98.3, 50393.0], [98.4, 50495.0], [98.5, 50757.0], [98.6, 51020.0], [98.7, 51278.0], [98.8, 51425.0], [98.9, 51791.0], [99.0, 51963.0], [99.1, 52255.0], [99.2, 52440.0], [99.3, 52704.0], [99.4, 52839.0], [99.5, 53126.0], [99.6, 53508.0], [99.7, 53777.0], [99.8, 54305.0], [99.9, 54756.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 199.0, "series": [{"data": [[100.0, 2.0], [32900.0, 45.0], [33700.0, 3.0], [34500.0, 41.0], [35300.0, 3.0], [36100.0, 1.0], [36900.0, 5.0], [37700.0, 7.0], [38500.0, 3.0], [39300.0, 1.0], [40100.0, 2.0], [42500.0, 1.0], [43300.0, 1.0], [44100.0, 1.0], [45700.0, 2.0], [46500.0, 2.0], [47300.0, 1.0], [48900.0, 1.0], [49700.0, 1.0], [50500.0, 1.0], [200.0, 3.0], [52900.0, 2.0], [53700.0, 1.0], [300.0, 6.0], [400.0, 4.0], [500.0, 4.0], [600.0, 1.0], [700.0, 1.0], [800.0, 2.0], [900.0, 2.0], [1000.0, 2.0], [1100.0, 2.0], [1200.0, 5.0], [1300.0, 2.0], [1400.0, 1.0], [1500.0, 2.0], [1600.0, 4.0], [1700.0, 3.0], [1800.0, 2.0], [1900.0, 4.0], [2000.0, 1.0], [2100.0, 3.0], [2200.0, 3.0], [2300.0, 5.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 5.0], [2700.0, 3.0], [2800.0, 2.0], [2900.0, 3.0], [3000.0, 3.0], [3100.0, 4.0], [3200.0, 1.0], [3300.0, 3.0], [3400.0, 4.0], [3500.0, 3.0], [3600.0, 2.0], [3700.0, 2.0], [3800.0, 3.0], [3900.0, 5.0], [4000.0, 3.0], [4100.0, 1.0], [4200.0, 3.0], [4300.0, 4.0], [4400.0, 3.0], [4500.0, 1.0], [4600.0, 4.0], [4700.0, 2.0], [4800.0, 5.0], [5000.0, 4.0], [5100.0, 5.0], [5200.0, 2.0], [5300.0, 2.0], [5400.0, 2.0], [5500.0, 3.0], [5600.0, 4.0], [5700.0, 1.0], [5800.0, 3.0], [5900.0, 4.0], [6000.0, 3.0], [6100.0, 2.0], [6300.0, 2.0], [6200.0, 2.0], [6400.0, 2.0], [6500.0, 3.0], [6600.0, 5.0], [6700.0, 2.0], [6800.0, 2.0], [6900.0, 3.0], [7000.0, 4.0], [7100.0, 3.0], [7200.0, 2.0], [7300.0, 3.0], [7400.0, 1.0], [7500.0, 6.0], [7600.0, 3.0], [7700.0, 5.0], [7900.0, 2.0], [7800.0, 2.0], [8000.0, 4.0], [8100.0, 3.0], [8200.0, 3.0], [8400.0, 3.0], [8600.0, 3.0], [8800.0, 3.0], [9000.0, 21.0], [9200.0, 30.0], [9400.0, 3.0], [9600.0, 3.0], [9800.0, 14.0], [10000.0, 6.0], [10200.0, 4.0], [10400.0, 1.0], [10600.0, 2.0], [10800.0, 2.0], [11000.0, 3.0], [11200.0, 3.0], [11400.0, 1.0], [11600.0, 2.0], [11800.0, 1.0], [12000.0, 3.0], [12200.0, 3.0], [12400.0, 2.0], [12600.0, 1.0], [12800.0, 2.0], [13000.0, 3.0], [13200.0, 3.0], [13400.0, 3.0], [13600.0, 1.0], [13800.0, 1.0], [14000.0, 2.0], [14400.0, 3.0], [14800.0, 3.0], [15000.0, 1.0], [15200.0, 1.0], [15400.0, 2.0], [15600.0, 3.0], [15800.0, 2.0], [16000.0, 1.0], [16200.0, 2.0], [17200.0, 2.0], [16800.0, 1.0], [17600.0, 1.0], [18000.0, 2.0], [18400.0, 3.0], [18800.0, 3.0], [19200.0, 1.0], [19600.0, 30.0], [20000.0, 1.0], [20400.0, 2.0], [20800.0, 2.0], [21200.0, 26.0], [21600.0, 1.0], [22000.0, 2.0], [22400.0, 2.0], [23200.0, 2.0], [23600.0, 2.0], [24000.0, 1.0], [24400.0, 1.0], [24800.0, 2.0], [25200.0, 2.0], [26000.0, 22.0], [26400.0, 2.0], [26800.0, 1.0], [27200.0, 2.0], [27600.0, 2.0], [28000.0, 3.0], [28400.0, 2.0], [28800.0, 1.0], [29200.0, 3.0], [29600.0, 1.0], [30000.0, 2.0], [30400.0, 1.0], [30800.0, 2.0], [31200.0, 2.0], [31600.0, 2.0], [32000.0, 4.0], [32400.0, 30.0], [32800.0, 18.0], [33600.0, 3.0], [34400.0, 15.0], [35200.0, 1.0], [36000.0, 3.0], [36800.0, 4.0], [37600.0, 28.0], [38400.0, 1.0], [39200.0, 3.0], [40000.0, 2.0], [40800.0, 1.0], [41600.0, 2.0], [42400.0, 1.0], [43200.0, 2.0], [44000.0, 1.0], [44800.0, 1.0], [46400.0, 1.0], [47200.0, 1.0], [48000.0, 2.0], [48800.0, 1.0], [49600.0, 1.0], [50400.0, 2.0], [51200.0, 2.0], [52000.0, 1.0], [52800.0, 1.0], [53600.0, 1.0], [54400.0, 1.0], [33100.0, 51.0], [33900.0, 4.0], [34700.0, 177.0], [35500.0, 12.0], [36300.0, 3.0], [37100.0, 50.0], [37900.0, 1.0], [38700.0, 1.0], [39500.0, 3.0], [41100.0, 3.0], [41900.0, 1.0], [42700.0, 1.0], [43500.0, 1.0], [44300.0, 1.0], [45900.0, 1.0], [46700.0, 1.0], [47500.0, 1.0], [48300.0, 1.0], [49100.0, 2.0], [49900.0, 1.0], [50700.0, 1.0], [51500.0, 1.0], [52300.0, 2.0], [53100.0, 1.0], [54700.0, 1.0], [16500.0, 1.0], [16900.0, 2.0], [17300.0, 2.0], [17700.0, 2.0], [18100.0, 2.0], [18500.0, 1.0], [18900.0, 2.0], [19300.0, 2.0], [19700.0, 9.0], [20100.0, 2.0], [20500.0, 3.0], [20900.0, 2.0], [21300.0, 19.0], [21700.0, 1.0], [22100.0, 1.0], [22500.0, 1.0], [23700.0, 1.0], [24100.0, 2.0], [24900.0, 2.0], [25300.0, 1.0], [25700.0, 1.0], [26500.0, 1.0], [26100.0, 11.0], [26900.0, 1.0], [27300.0, 1.0], [28100.0, 2.0], [28500.0, 2.0], [28900.0, 2.0], [29300.0, 3.0], [29700.0, 4.0], [30100.0, 3.0], [30500.0, 3.0], [30900.0, 2.0], [31300.0, 3.0], [31700.0, 3.0], [32100.0, 11.0], [32500.0, 19.0], [33000.0, 72.0], [33800.0, 1.0], [34600.0, 98.0], [35400.0, 3.0], [36200.0, 4.0], [37000.0, 12.0], [37800.0, 3.0], [38600.0, 2.0], [39400.0, 2.0], [40200.0, 2.0], [41000.0, 3.0], [41800.0, 1.0], [42600.0, 1.0], [44200.0, 1.0], [45000.0, 1.0], [46600.0, 1.0], [47400.0, 1.0], [48200.0, 2.0], [49000.0, 1.0], [49800.0, 1.0], [50600.0, 1.0], [51400.0, 2.0], [52200.0, 1.0], [54600.0, 1.0], [33300.0, 3.0], [34100.0, 4.0], [34900.0, 82.0], [35700.0, 9.0], [36500.0, 3.0], [37300.0, 84.0], [38100.0, 2.0], [38900.0, 1.0], [39700.0, 3.0], [40500.0, 4.0], [41300.0, 2.0], [42900.0, 1.0], [43700.0, 2.0], [44500.0, 1.0], [46100.0, 1.0], [46900.0, 1.0], [47700.0, 1.0], [49300.0, 1.0], [50100.0, 1.0], [51700.0, 1.0], [52500.0, 2.0], [54100.0, 1.0], [8300.0, 3.0], [8500.0, 3.0], [8700.0, 4.0], [8900.0, 14.0], [9100.0, 35.0], [9300.0, 13.0], [9500.0, 4.0], [9700.0, 5.0], [9900.0, 33.0], [10100.0, 6.0], [10300.0, 2.0], [10500.0, 2.0], [10700.0, 2.0], [10900.0, 1.0], [11300.0, 2.0], [11500.0, 1.0], [11700.0, 3.0], [11900.0, 1.0], [12100.0, 1.0], [12300.0, 1.0], [12500.0, 2.0], [12700.0, 3.0], [13100.0, 1.0], [13500.0, 2.0], [13700.0, 2.0], [13900.0, 3.0], [14100.0, 1.0], [14300.0, 3.0], [14500.0, 3.0], [14700.0, 1.0], [14900.0, 3.0], [15100.0, 2.0], [15300.0, 1.0], [15500.0, 2.0], [15700.0, 2.0], [16100.0, 3.0], [16300.0, 3.0], [16600.0, 2.0], [17000.0, 2.0], [17400.0, 2.0], [18200.0, 2.0], [17800.0, 2.0], [19000.0, 3.0], [19400.0, 5.0], [19800.0, 3.0], [20600.0, 2.0], [21000.0, 3.0], [21400.0, 2.0], [21800.0, 1.0], [22200.0, 3.0], [22600.0, 1.0], [23000.0, 1.0], [23400.0, 1.0], [23800.0, 1.0], [24200.0, 1.0], [24600.0, 1.0], [25400.0, 2.0], [25800.0, 2.0], [26200.0, 2.0], [26600.0, 1.0], [27000.0, 3.0], [27400.0, 2.0], [27800.0, 1.0], [28200.0, 1.0], [28600.0, 2.0], [29000.0, 3.0], [29400.0, 2.0], [29800.0, 3.0], [30200.0, 2.0], [30600.0, 3.0], [31000.0, 2.0], [31400.0, 3.0], [31800.0, 3.0], [32200.0, 18.0], [32600.0, 10.0], [33200.0, 16.0], [34000.0, 3.0], [34800.0, 199.0], [35600.0, 10.0], [36400.0, 4.0], [37200.0, 35.0], [38000.0, 2.0], [38800.0, 2.0], [40400.0, 1.0], [41200.0, 2.0], [42000.0, 3.0], [42800.0, 2.0], [43600.0, 2.0], [44400.0, 1.0], [45200.0, 1.0], [46000.0, 2.0], [46800.0, 1.0], [47600.0, 2.0], [48400.0, 1.0], [49200.0, 1.0], [50000.0, 2.0], [50800.0, 2.0], [51600.0, 1.0], [52400.0, 1.0], [53200.0, 2.0], [54000.0, 1.0], [33500.0, 4.0], [34300.0, 4.0], [35100.0, 4.0], [35900.0, 4.0], [36700.0, 5.0], [37500.0, 82.0], [38300.0, 2.0], [39900.0, 2.0], [40700.0, 2.0], [41500.0, 2.0], [42300.0, 2.0], [43100.0, 2.0], [43900.0, 2.0], [44700.0, 1.0], [45500.0, 1.0], [46300.0, 1.0], [47100.0, 2.0], [47900.0, 1.0], [48700.0, 2.0], [49500.0, 1.0], [50300.0, 1.0], [51100.0, 1.0], [51900.0, 2.0], [52700.0, 2.0], [53500.0, 1.0], [54300.0, 1.0], [55100.0, 1.0], [16700.0, 3.0], [17100.0, 1.0], [17500.0, 2.0], [17900.0, 2.0], [18300.0, 2.0], [18700.0, 2.0], [19500.0, 14.0], [19900.0, 2.0], [20300.0, 2.0], [21100.0, 14.0], [21500.0, 2.0], [21900.0, 1.0], [22300.0, 1.0], [22700.0, 1.0], [23100.0, 2.0], [23500.0, 1.0], [23900.0, 1.0], [24300.0, 1.0], [24700.0, 1.0], [25500.0, 1.0], [25900.0, 24.0], [26300.0, 1.0], [26700.0, 1.0], [27100.0, 1.0], [27500.0, 3.0], [27900.0, 3.0], [28300.0, 1.0], [28700.0, 2.0], [29100.0, 1.0], [29500.0, 3.0], [29900.0, 1.0], [30300.0, 3.0], [30700.0, 3.0], [31100.0, 3.0], [31500.0, 4.0], [31900.0, 3.0], [32300.0, 23.0], [32700.0, 6.0], [33400.0, 3.0], [34200.0, 4.0], [35000.0, 29.0], [35800.0, 7.0], [36600.0, 6.0], [37400.0, 115.0], [38200.0, 1.0], [39000.0, 3.0], [39800.0, 1.0], [40600.0, 1.0], [42200.0, 1.0], [45400.0, 1.0], [46200.0, 1.0], [47000.0, 1.0], [47800.0, 1.0], [48600.0, 2.0], [49400.0, 2.0], [50200.0, 1.0], [51000.0, 1.0], [51800.0, 1.0], [55000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 55100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2653.0, "series": [{"data": [[0.0, 15.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 22.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2653.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 534.4864864864874, "minX": 1.75235748E12, "maxY": 994.5547309833025, "series": [{"data": [[1.75235748E12, 994.5547309833025], [1.75235754E12, 534.4864864864874]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235754E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 386.0, "minX": 1.0, "maxY": 37818.0, "series": [{"data": [[2.0, 36460.0], [3.0, 36460.0], [4.0, 36578.0], [5.0, 36438.0], [6.0, 36613.0], [7.0, 36678.0], [8.0, 37278.0], [9.0, 37202.0], [10.0, 37327.0], [11.0, 37392.0], [12.0, 37337.0], [13.0, 37446.0], [14.0, 37605.0], [15.0, 37361.0], [16.0, 37352.0], [17.0, 37485.0], [18.0, 37355.0], [19.0, 37484.0], [20.0, 34299.0], [21.0, 37740.0], [22.0, 34584.0], [23.0, 37207.0], [24.0, 34483.0], [25.0, 34555.0], [26.0, 37369.0], [27.0, 37655.0], [28.0, 34560.0], [29.0, 37484.0], [30.0, 37650.0], [31.0, 34373.0], [33.0, 37789.0], [32.0, 37509.0], [35.0, 34583.0], [34.0, 34493.0], [37.0, 37481.0], [36.0, 34491.0], [39.0, 37656.0], [38.0, 34585.0], [41.0, 34582.0], [40.0, 37476.0], [43.0, 37513.0], [42.0, 37668.0], [45.0, 37818.0], [44.0, 34324.0], [47.0, 34456.0], [46.0, 34497.0], [49.0, 34715.0], [48.0, 34478.0], [50.0, 37518.0], [53.0, 34731.0], [52.0, 36054.0], [55.0, 37548.0], [54.0, 37519.0], [57.0, 34527.0], [56.0, 37600.0], [59.0, 37731.0], [58.0, 34623.0], [61.0, 34537.0], [60.0, 37543.0], [63.0, 37706.0], [62.0, 34764.0], [67.0, 37577.0], [66.0, 34758.0], [65.0, 34549.0], [64.0, 37543.0], [71.0, 34628.0], [70.0, 32552.0], [69.0, 34463.0], [68.0, 37541.0], [75.0, 34749.0], [74.0, 34608.0], [73.0, 37531.0], [72.0, 37579.0], [79.0, 32402.0], [78.0, 37653.0], [77.0, 37582.0], [76.0, 34620.0], [83.0, 34508.0], [82.0, 32405.0], [81.0, 37581.0], [80.0, 34739.0], [87.0, 34637.0], [86.0, 34584.0], [85.0, 37448.0], [84.0, 32545.0], [91.0, 34631.0], [90.0, 37429.0], [89.0, 34736.0], [88.0, 37563.0], [95.0, 34832.0], [94.0, 37572.0], [93.0, 32429.0], [92.0, 37563.0], [99.0, 32730.0], [98.0, 34521.0], [97.0, 32505.0], [96.0, 37553.0], [103.0, 37605.0], [102.0, 34656.0], [101.0, 34722.0], [100.0, 37461.0], [107.0, 34784.0], [106.0, 37625.0], [105.0, 34726.0], [104.0, 37482.0], [111.0, 34785.0], [110.0, 37620.0], [109.0, 37588.0], [108.0, 32699.0], [115.0, 32951.0], [114.0, 34785.0], [113.0, 34634.0], [112.0, 32746.0], [119.0, 34729.0], [118.0, 37363.0], [117.0, 37477.0], [116.0, 34753.0], [123.0, 32813.0], [122.0, 37363.0], [121.0, 34803.0], [120.0, 37623.0], [127.0, 32816.0], [126.0, 37524.0], [125.0, 34803.0], [124.0, 37611.0], [135.0, 37608.0], [134.0, 34732.0], [133.0, 37384.0], [132.0, 34719.0], [131.0, 32952.0], [130.0, 34798.0], [129.0, 37620.0], [128.0, 34588.0], [143.0, 37482.0], [142.0, 32886.0], [141.0, 34820.0], [140.0, 37609.0], [139.0, 34730.0], [138.0, 37370.0], [137.0, 32855.0], [136.0, 34685.0], [151.0, 34679.0], [150.0, 37595.0], [149.0, 37376.0], [148.0, 34781.0], [147.0, 34751.0], [146.0, 33183.0], [145.0, 34813.0], [144.0, 37601.0], [159.0, 37596.0], [158.0, 37548.0], [157.0, 32991.0], [156.0, 37594.0], [155.0, 34816.0], [154.0, 37380.0], [153.0, 32993.0], [152.0, 34789.0], [167.0, 37591.0], [166.0, 34676.0], [165.0, 33114.0], [164.0, 34774.0], [163.0, 37523.0], [162.0, 32994.0], [161.0, 34664.0], [160.0, 34784.0], [175.0, 37560.0], [174.0, 34805.0], [173.0, 37391.0], [172.0, 32978.0], [171.0, 37561.0], [170.0, 34801.0], [169.0, 37409.0], [168.0, 34769.0], [183.0, 34745.0], [182.0, 34687.0], [181.0, 37560.0], [180.0, 33108.0], [179.0, 34757.0], [178.0, 37498.0], [177.0, 32975.0], [176.0, 34616.0], [191.0, 34619.0], [190.0, 37338.0], [189.0, 37551.0], [188.0, 34816.0], [187.0, 32976.0], [186.0, 37367.0], [185.0, 37553.0], [184.0, 34842.0], [199.0, 34844.0], [198.0, 34772.0], [197.0, 37573.0], [196.0, 34692.0], [195.0, 33101.0], [194.0, 34774.0], [193.0, 37491.0], [192.0, 32976.0], [207.0, 32995.0], [206.0, 37287.0], [205.0, 34645.0], [204.0, 37607.0], [203.0, 32970.0], [202.0, 34845.0], [201.0, 37322.0], [200.0, 37603.0], [215.0, 37307.0], [214.0, 34768.0], [213.0, 37455.0], [212.0, 34780.0], [211.0, 34691.0], [210.0, 33122.0], [209.0, 37448.0], [208.0, 34775.0], [222.0, 32996.0], [221.0, 37544.0], [220.0, 37301.0], [219.0, 34772.0], [218.0, 34660.0], [217.0, 32989.0], [216.0, 37560.0], [231.0, 33013.0], [230.0, 37272.0], [229.0, 34828.0], [228.0, 34788.0], [227.0, 33124.0], [226.0, 37516.0], [225.0, 37394.0], [224.0, 34780.0], [239.0, 37405.0], [238.0, 37401.0], [237.0, 34835.0], [236.0, 33025.0], [235.0, 37248.0], [234.0, 34645.0], [233.0, 37410.0], [232.0, 34830.0], [247.0, 33039.0], [246.0, 34781.0], [245.0, 37298.0], [244.0, 34709.0], [243.0, 34787.0], [242.0, 37415.0], [241.0, 33169.0], [240.0, 34780.0], [251.0, 5677.833333333334], [255.0, 34803.0], [254.0, 37418.0], [253.0, 37411.0], [252.0, 34873.0], [250.0, 37413.0], [249.0, 37269.0], [248.0, 34877.0], [270.0, 34691.0], [271.0, 37425.0], [269.0, 37425.0], [268.0, 37422.0], [267.0, 34882.0], [266.0, 33046.0], [265.0, 37418.0], [264.0, 37297.0], [263.0, 34879.0], [257.0, 37418.0], [256.0, 33060.0], [259.0, 34754.0], [258.0, 34789.0], [262.0, 33046.0], [261.0, 34801.0], [260.0, 37285.0], [286.0, 37507.0], [287.0, 33027.0], [285.0, 34709.0], [284.0, 37422.0], [283.0, 34880.0], [282.0, 33027.0], [281.0, 37338.0], [280.0, 37430.0], [279.0, 34881.0], [272.0, 33045.0], [275.0, 33169.0], [274.0, 36119.5], [278.0, 37303.0], [277.0, 34820.0], [276.0, 34755.0], [302.0, 16666.5], [294.0, 17621.5], [293.0, 37371.0], [292.0, 34823.0], [295.0, 37397.0], [289.0, 34828.0], [288.0, 37410.0], [291.0, 33169.0], [290.0, 34753.0], [303.0, 34853.0], [301.0, 37516.0], [300.0, 37394.0], [299.0, 34728.0], [298.0, 33033.0], [297.0, 34850.0], [296.0, 37375.0], [318.0, 33013.0], [319.0, 34829.0], [317.0, 34834.0], [316.0, 37398.0], [315.0, 34802.0], [314.0, 33022.0], [313.0, 37573.0], [312.0, 34715.0], [311.0, 34810.0], [305.0, 34851.0], [304.0, 37400.0], [307.0, 37427.0], [306.0, 33152.0], [310.0, 37428.0], [309.0, 37413.0], [308.0, 34699.0], [334.0, 34857.0], [335.0, 37508.0], [333.0, 33016.0], [332.0, 34783.0], [331.0, 37403.0], [330.0, 34840.0], [329.0, 33009.0], [328.0, 34686.0], [327.0, 37637.0], [321.0, 37431.0], [320.0, 37425.0], [323.0, 33128.0], [322.0, 34831.0], [326.0, 37268.0], [325.0, 34844.0], [324.0, 37494.0], [350.0, 37395.0], [351.0, 34836.0], [349.0, 34870.0], [348.0, 32991.0], [347.0, 34835.0], [346.0, 37390.0], [345.0, 34872.0], [344.0, 33015.0], [343.0, 37584.0], [337.0, 34779.0], [336.0, 37384.0], [339.0, 37397.0], [338.0, 33135.0], [342.0, 34739.0], [341.0, 34787.0], [340.0, 37463.0], [367.0, 34839.0], [360.0, 16683.5], [366.0, 37401.0], [365.0, 32980.0], [364.0, 37496.0], [355.0, 37385.0], [354.0, 34857.0], [353.0, 33144.0], [352.0, 37420.0], [363.0, 34885.0], [362.0, 34715.0], [361.0, 37405.0], [359.0, 34884.0], [358.0, 37523.0], [357.0, 34740.0], [356.0, 37417.0], [382.0, 34835.0], [383.0, 37415.0], [381.0, 37480.0], [380.0, 32990.0], [379.0, 37431.0], [378.0, 34882.0], [377.0, 34707.0], [376.0, 37354.0], [375.0, 37446.0], [369.0, 37426.0], [368.0, 32986.0], [371.0, 34765.0], [370.0, 34838.0], [374.0, 34884.0], [373.0, 37355.0], [372.0, 33124.0], [398.0, 37409.0], [399.0, 33030.0], [397.0, 37454.0], [396.0, 34846.0], [395.0, 33015.0], [394.0, 34892.0], [393.0, 37439.0], [392.0, 37320.0], [391.0, 34736.0], [385.0, 34838.0], [384.0, 33001.0], [387.0, 33127.0], [386.0, 34765.0], [390.0, 34894.0], [389.0, 37442.0], [388.0, 37348.0], [414.0, 33094.0], [415.0, 34814.0], [413.0, 37428.0], [412.0, 37459.0], [411.0, 34822.0], [410.0, 33077.0], [409.0, 34887.0], [408.0, 37431.0], [407.0, 37306.0], [401.0, 34767.0], [400.0, 34847.0], [403.0, 37302.0], [402.0, 33200.0], [406.0, 34721.0], [405.0, 34888.0], [404.0, 37433.0], [430.0, 34896.0], [428.0, 18940.5], [431.0, 34819.0], [429.0, 33101.0], [427.0, 37469.0], [426.0, 34807.0], [425.0, 34895.0], [424.0, 33099.0], [423.0, 37482.0], [417.0, 34735.0], [416.0, 33215.0], [419.0, 37449.0], [418.0, 37340.0], [422.0, 37344.0], [421.0, 34691.0], [420.0, 34887.0], [446.0, 37523.0], [447.0, 34805.0], [445.0, 34927.0], [444.0, 33098.0], [443.0, 37497.0], [442.0, 34801.0], [441.0, 37508.0], [440.0, 34925.0], [439.0, 33125.0], [433.0, 33246.0], [432.0, 37480.0], [435.0, 34919.0], [434.0, 37355.0], [438.0, 37348.0], [437.0, 34678.0], [436.0, 37503.0], [462.0, 34767.0], [463.0, 33085.0], [461.0, 34910.0], [460.0, 37534.0], [459.0, 33082.0], [458.0, 37537.0], [457.0, 34767.0], [456.0, 37507.0], [455.0, 34905.0], [449.0, 34776.0], [448.0, 33235.0], [451.0, 34804.0], [450.0, 37336.0], [454.0, 33084.0], [453.0, 37398.0], [452.0, 37525.0], [478.0, 37592.0], [479.0, 33087.0], [477.0, 34792.0], [476.0, 36173.5], [474.0, 33083.0], [473.0, 34647.0], [472.0, 37601.0], [471.0, 34882.0], [465.0, 37422.0], [464.0, 34766.0], [467.0, 34784.0], [466.0, 37504.0], [470.0, 37478.0], [469.0, 33083.0], [468.0, 37449.0], [494.0, 33068.0], [495.0, 34776.0], [493.0, 37562.0], [492.0, 34777.0], [491.0, 33088.0], [490.0, 37505.0], [489.0, 34899.0], [488.0, 37447.0], [487.0, 34679.0], [481.0, 34773.0], [480.0, 34793.0], [483.0, 37498.0], [482.0, 33216.0], [486.0, 37493.0], [485.0, 34891.0], [484.0, 37453.0], [510.0, 34749.0], [511.0, 37565.0], [509.0, 33046.0], [508.0, 37599.0], [507.0, 34748.0], [506.0, 33070.0], [505.0, 37537.0], [504.0, 34861.0], [503.0, 37458.0], [497.0, 34774.0], [496.0, 37510.0], [499.0, 37458.0], [498.0, 33200.0], [502.0, 34627.0], [501.0, 37514.0], [500.0, 34887.0], [540.0, 37534.0], [522.0, 17599.5], [521.0, 34832.0], [520.0, 37548.0], [523.0, 37571.0], [525.0, 34837.0], [524.0, 33051.0], [527.0, 33191.0], [513.0, 34710.0], [512.0, 33190.0], [515.0, 37546.0], [514.0, 37463.0], [517.0, 34640.0], [516.0, 34829.0], [519.0, 33060.0], [518.0, 37460.0], [526.0, 34751.0], [543.0, 33185.0], [529.0, 37408.0], [528.0, 37385.0], [531.0, 34858.0], [530.0, 37528.0], [533.0, 33064.0], [532.0, 34659.0], [535.0, 37529.0], [534.0, 37399.0], [542.0, 34799.0], [541.0, 34847.0], [539.0, 37537.0], [538.0, 33075.0], [537.0, 34802.0], [536.0, 34851.0], [569.0, 37512.0], [574.0, 37490.0], [575.0, 34817.0], [561.0, 37499.0], [560.0, 37341.0], [563.0, 33020.0], [562.0, 34713.0], [565.0, 37344.0], [564.0, 37513.0], [573.0, 33010.0], [572.0, 34812.0], [570.0, 37490.0], [568.0, 33006.0], [551.0, 34859.0], [550.0, 37504.0], [549.0, 37384.0], [548.0, 33046.0], [547.0, 34721.0], [546.0, 37531.0], [545.0, 37400.0], [544.0, 34794.0], [559.0, 34830.0], [558.0, 33176.0], [557.0, 34801.0], [556.0, 34857.0], [555.0, 37491.0], [554.0, 37502.0], [553.0, 33030.0], [552.0, 34804.0], [567.0, 34699.0], [566.0, 34821.0], [602.0, 37368.0], [606.0, 37496.0], [607.0, 37512.0], [593.0, 37542.0], [592.0, 33154.0], [595.0, 34740.0], [594.0, 34923.0], [597.0, 34947.0], [596.0, 37546.0], [605.0, 34827.0], [604.0, 33001.0], [603.0, 34877.0], [601.0, 35257.5], [583.0, 34898.0], [582.0, 37361.0], [581.0, 34699.0], [580.0, 37514.0], [579.0, 34868.0], [578.0, 34733.0], [577.0, 37511.0], [576.0, 33157.0], [591.0, 34798.0], [590.0, 37490.0], [589.0, 34835.0], [588.0, 33032.0], [587.0, 37373.0], [586.0, 37511.0], [585.0, 34846.0], [584.0, 33024.0], [599.0, 34889.0], [598.0, 37363.0], [637.0, 33173.0], [621.0, 18899.5], [620.0, 34815.0], [619.0, 35186.5], [617.0, 34866.0], [616.0, 33015.0], [622.0, 33147.0], [632.0, 34907.0], [615.0, 37471.0], [614.0, 37367.0], [613.0, 34893.0], [612.0, 34960.0], [611.0, 37482.0], [610.0, 34768.0], [609.0, 34958.0], [608.0, 33128.0], [623.0, 37452.0], [629.0, 16790.0], [628.0, 34860.0], [627.0, 34905.0], [626.0, 37443.0], [625.0, 34906.0], [624.0, 34772.0], [631.0, 37441.0], [630.0, 37368.0], [639.0, 34736.0], [638.0, 34909.0], [636.0, 37350.0], [635.0, 37413.0], [634.0, 33047.0], [633.0, 34856.0], [668.0, 33147.0], [643.0, 17690.0], [651.0, 18858.5], [650.0, 37376.0], [649.0, 33078.0], [648.0, 34815.0], [653.0, 33232.0], [652.0, 34814.0], [655.0, 37499.0], [640.0, 37480.0], [642.0, 37391.0], [641.0, 34939.0], [654.0, 34816.0], [671.0, 34935.0], [657.0, 37369.0], [656.0, 34972.0], [659.0, 33105.0], [658.0, 34816.0], [661.0, 37364.0], [660.0, 34975.0], [663.0, 34814.0], [662.0, 37371.0], [670.0, 37468.0], [669.0, 34822.0], [667.0, 36085.5], [665.0, 37336.0], [664.0, 33122.0], [647.0, 37354.0], [646.0, 37374.0], [645.0, 34936.0], [644.0, 33051.0], [700.0, 37408.0], [703.0, 37534.0], [689.0, 34731.0], [688.0, 37301.0], [691.0, 34873.0], [690.0, 37517.0], [693.0, 34847.0], [692.0, 37262.0], [702.0, 34841.0], [701.0, 33281.0], [699.0, 34721.0], [698.0, 33155.0], [697.0, 37245.0], [696.0, 34820.0], [687.0, 34869.0], [673.0, 34700.0], [672.0, 37331.0], [675.0, 34908.0], [674.0, 33128.0], [677.0, 34834.0], [676.0, 37329.0], [679.0, 37314.0], [678.0, 33137.0], [686.0, 33275.0], [685.0, 37518.0], [684.0, 34759.0], [683.0, 33147.0], [682.0, 37340.0], [681.0, 34856.0], [680.0, 37313.0], [695.0, 37389.0], [694.0, 33149.0], [732.0, 34812.0], [735.0, 37047.0], [721.0, 34829.0], [720.0, 37210.0], [723.0, 37203.0], [722.0, 34818.0], [725.0, 34808.0], [724.0, 33164.0], [734.0, 34673.0], [733.0, 37621.0], [731.0, 33292.0], [730.0, 37475.0], [729.0, 33162.0], [728.0, 37204.0], [719.0, 34703.0], [705.0, 37237.0], [704.0, 34689.0], [707.0, 34815.0], [706.0, 34836.0], [709.0, 33159.0], [708.0, 37213.0], [711.0, 34813.0], [710.0, 37444.0], [718.0, 37615.0], [717.0, 34807.0], [716.0, 33288.0], [715.0, 37478.0], [714.0, 34682.0], [713.0, 33155.0], [712.0, 37193.0], [727.0, 34815.0], [726.0, 37473.0], [764.0, 37618.0], [738.0, 18904.5], [737.0, 34795.0], [736.0, 34800.0], [739.0, 33155.0], [741.0, 34800.0], [740.0, 37502.0], [743.0, 37188.0], [742.0, 34797.0], [751.0, 34806.0], [750.0, 34654.0], [749.0, 37602.0], [748.0, 33268.0], [747.0, 37194.0], [746.0, 34769.0], [745.0, 37503.0], [744.0, 33157.0], [767.0, 34634.0], [753.0, 37189.0], [752.0, 34775.0], [755.0, 37471.0], [754.0, 33141.0], [757.0, 34748.0], [756.0, 34801.0], [759.0, 33115.0], [758.0, 37190.0], [766.0, 34815.0], [765.0, 34683.0], [763.0, 33258.0], [762.0, 37188.0], [761.0, 34749.0], [760.0, 37473.0], [796.0, 34861.0], [799.0, 34593.0], [785.0, 37602.0], [784.0, 37163.0], [787.0, 34756.0], [786.0, 34820.0], [789.0, 33043.0], [788.0, 37155.0], [798.0, 37160.0], [797.0, 33147.0], [795.0, 37462.0], [794.0, 33050.0], [793.0, 34737.0], [792.0, 37464.0], [783.0, 34634.0], [769.0, 33101.0], [768.0, 37188.0], [771.0, 34815.0], [770.0, 37468.0], [773.0, 37186.0], [772.0, 34762.0], [775.0, 37473.0], [774.0, 33100.0], [782.0, 34817.0], [781.0, 33208.0], [780.0, 37622.0], [779.0, 34688.0], [778.0, 33075.0], [777.0, 37187.0], [776.0, 34769.0], [791.0, 34722.0], [790.0, 37157.0], [828.0, 37355.0], [831.0, 37124.0], [817.0, 37489.0], [816.0, 37154.0], [819.0, 37130.0], [818.0, 34717.0], [821.0, 34702.0], [820.0, 32984.0], [830.0, 34843.0], [829.0, 34580.0], [827.0, 33093.0], [826.0, 37124.0], [825.0, 34847.0], [824.0, 37349.0], [815.0, 34874.0], [801.0, 34861.0], [800.0, 37593.0], [803.0, 34710.0], [802.0, 37159.0], [805.0, 37162.0], [804.0, 33029.0], [807.0, 37456.0], [806.0, 34708.0], [814.0, 33855.0], [812.0, 37153.0], [811.0, 37378.0], [810.0, 34871.0], [809.0, 33016.0], [808.0, 34741.0], [823.0, 32977.0], [822.0, 34726.0], [860.0, 37271.0], [863.0, 34888.0], [849.0, 37379.0], [848.0, 34885.0], [851.0, 37117.0], [850.0, 32939.0], [853.0, 32949.0], [852.0, 34691.0], [862.0, 34718.0], [861.0, 37115.0], [859.0, 34918.0], [858.0, 33083.0], [857.0, 37257.0], [856.0, 34695.0], [847.0, 34676.0], [833.0, 37435.0], [832.0, 34700.0], [835.0, 37122.0], [834.0, 34845.0], [837.0, 34704.0], [836.0, 32947.0], [839.0, 37120.0], [838.0, 32953.0], [846.0, 37116.0], [845.0, 37264.0], [844.0, 34890.0], [843.0, 34550.0], [842.0, 33081.0], [841.0, 34863.0], [840.0, 37291.0], [855.0, 37114.0], [854.0, 34793.0], [892.0, 34938.0], [869.0, 386.0], [868.0, 32959.0], [867.0, 34718.0], [866.0, 37110.0], [865.0, 32958.0], [864.0, 37411.0], [871.0, 34767.0], [870.0, 35914.0], [879.0, 37399.0], [878.0, 34878.0], [877.0, 37099.0], [876.0, 34606.0], [875.0, 37274.0], [874.0, 34892.0], [873.0, 32933.0], [872.0, 37266.0], [895.0, 37415.0], [881.0, 34735.0], [880.0, 32916.0], [883.0, 32919.0], [882.0, 37109.0], [885.0, 34740.0], [884.0, 34776.0], [887.0, 37266.0], [886.0, 37094.0], [894.0, 37103.0], [893.0, 34614.0], [891.0, 33054.0], [890.0, 37262.0], [889.0, 34931.0], [888.0, 32933.0], [924.0, 37192.0], [927.0, 37241.0], [913.0, 34856.0], [912.0, 37107.0], [915.0, 34783.0], [914.0, 37404.0], [917.0, 37135.0], [916.0, 32885.0], [926.0, 34784.0], [925.0, 34975.0], [923.0, 37244.0], [922.0, 33016.0], [921.0, 34664.0], [920.0, 34974.0], [911.0, 34780.0], [897.0, 37096.0], [896.0, 34741.0], [899.0, 37385.0], [898.0, 34844.0], [901.0, 34755.0], [900.0, 32924.0], [903.0, 35000.0], [902.0, 37105.0], [910.0, 37255.0], [909.0, 37104.0], [908.0, 33006.0], [907.0, 34640.0], [906.0, 37254.0], [905.0, 34979.0], [904.0, 32897.0], [919.0, 32894.0], [918.0, 34981.0], [956.0, 34722.0], [947.0, 19042.5], [946.0, 34755.0], [945.0, 34876.0], [944.0, 32885.0], [949.0, 32854.0], [948.0, 37144.0], [959.0, 35989.0], [957.0, 37111.0], [955.0, 37104.0], [954.0, 32952.0], [953.0, 35018.0], [952.0, 37110.0], [943.0, 37151.0], [929.0, 34793.0], [928.0, 37183.0], [931.0, 37334.0], [930.0, 32898.0], [933.0, 37174.0], [932.0, 34958.0], [935.0, 34957.0], [934.0, 32912.0], [942.0, 37176.0], [941.0, 34761.0], [940.0, 37018.0], [939.0, 37199.0], [938.0, 34991.0], [937.0, 33017.0], [936.0, 34646.0], [951.0, 35004.0], [950.0, 34760.0], [988.0, 37076.0], [968.0, 11967.666666666666], [969.0, 37051.0], [971.0, 34793.0], [970.0, 37117.0], [973.0, 32880.0], [972.0, 37111.0], [975.0, 34774.0], [961.0, 34754.0], [960.0, 32820.0], [963.0, 32848.0], [962.0, 37238.0], [965.0, 37084.0], [964.0, 35023.0], [967.0, 32987.0], [966.0, 34771.0], [974.0, 34909.0], [991.0, 32939.0], [977.0, 37243.0], [976.0, 37022.0], [979.0, 35026.0], [978.0, 32910.0], [981.0, 32928.0], [980.0, 34777.0], [983.0, 35013.0], [982.0, 36970.0], [990.0, 34788.0], [989.0, 34885.0], [987.0, 34651.0], [986.0, 37073.0], [985.0, 36937.0], [984.0, 33078.0], [996.0, 37163.0], [1000.0, 24738.120287253176], [999.0, 36823.0], [998.0, 33160.0], [997.0, 34997.0], [995.0, 32976.0], [994.0, 34786.0], [993.0, 36094.5], [992.0, 36913.0], [1.0, 36327.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[811.0405204460966, 28575.05576208177]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4131.05, "minX": 1.75235748E12, "maxY": 6646.366666666667, "series": [{"data": [[1.75235748E12, 6646.366666666667], [1.75235754E12, 4374.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235748E12, 6225.45], [1.75235754E12, 4131.05]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235754E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 23998.524427952998, "minX": 1.75235748E12, "maxY": 35471.84156570365, "series": [{"data": [[1.75235748E12, 23998.524427952998], [1.75235754E12, 35471.84156570365]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235754E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 23998.471243042684, "minX": 1.75235748E12, "maxY": 35471.81547064304, "series": [{"data": [[1.75235748E12, 23998.471243042684], [1.75235754E12, 35471.81547064304]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235754E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75235748E12, "maxY": 6.372912801484245, "series": [{"data": [[1.75235748E12, 6.372912801484245], [1.75235754E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235754E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 196.0, "minX": 1.75235748E12, "maxY": 55169.0, "series": [{"data": [[1.75235748E12, 55169.0], [1.75235754E12, 37818.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235748E12, 40502.2], [1.75235754E12, 37504.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235748E12, 52943.13999999999], [1.75235754E12, 37640.38]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235748E12, 47486.99999999999], [1.75235754E12, 37561.3]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235748E12, 196.0], [1.75235754E12, 32402.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235748E12, 25949.0], [1.75235754E12, 34857.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235754E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 253.5, "minX": 7.0, "maxY": 37355.0, "series": [{"data": [[10.0, 253.5], [21.0, 34887.0], [11.0, 37355.0], [24.0, 34777.5], [25.0, 34787.0], [26.0, 5941.0], [27.0, 21257.0], [28.0, 34718.0], [7.0, 36460.0], [29.0, 34639.5], [30.0, 34599.0], [31.0, 33992.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 31.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 253.0, "minX": 7.0, "maxY": 37354.0, "series": [{"data": [[10.0, 253.0], [21.0, 34887.0], [11.0, 37354.0], [24.0, 34777.5], [25.0, 34787.0], [26.0, 5941.0], [27.0, 21257.0], [28.0, 34718.0], [7.0, 36460.0], [29.0, 34639.5], [30.0, 34599.0], [31.0, 33992.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 31.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.2166666666666666, "minX": 1.75235748E12, "maxY": 43.61666666666667, "series": [{"data": [[1.75235748E12, 43.61666666666667], [1.75235754E12, 1.2166666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235754E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 17.883333333333333, "minX": 1.75235748E12, "maxY": 26.95, "series": [{"data": [[1.75235748E12, 26.95], [1.75235754E12, 17.883333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235754E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 17.883333333333333, "minX": 1.75235748E12, "maxY": 26.95, "series": [{"data": [[1.75235748E12, 26.95], [1.75235754E12, 17.883333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235754E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 17.883333333333333, "minX": 1.75235748E12, "maxY": 26.95, "series": [{"data": [[1.75235748E12, 26.95], [1.75235754E12, 17.883333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235754E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

