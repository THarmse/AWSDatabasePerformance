/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 1853.0, "series": [{"data": [[0.0, 3.0], [0.1, 16.0], [0.2, 23.0], [0.3, 27.0], [0.4, 36.0], [0.5, 42.0], [0.6, 46.0], [0.7, 51.0], [0.8, 57.0], [0.9, 68.0], [1.0, 76.0], [1.1, 90.0], [1.2, 103.0], [1.3, 121.0], [1.4, 141.0], [1.5, 171.0], [1.6, 209.0], [1.7, 233.0], [1.8, 272.0], [1.9, 296.0], [2.0, 324.0], [2.1, 354.0], [2.2, 388.0], [2.3, 402.0], [2.4, 411.0], [2.5, 419.0], [2.6, 430.0], [2.7, 441.0], [2.8, 455.0], [2.9, 471.0], [3.0, 479.0], [3.1, 486.0], [3.2, 527.0], [3.3, 545.0], [3.4, 556.0], [3.5, 562.0], [3.6, 616.0], [3.7, 619.0], [3.8, 625.0], [3.9, 629.0], [4.0, 632.0], [4.1, 634.0], [4.2, 635.0], [4.3, 637.0], [4.4, 642.0], [4.5, 647.0], [4.6, 651.0], [4.7, 661.0], [4.8, 667.0], [4.9, 673.0], [5.0, 676.0], [5.1, 678.0], [5.2, 680.0], [5.3, 682.0], [5.4, 683.0], [5.5, 685.0], [5.6, 686.0], [5.7, 687.0], [5.8, 688.0], [5.9, 689.0], [6.0, 690.0], [6.1, 690.0], [6.2, 691.0], [6.3, 692.0], [6.4, 693.0], [6.5, 694.0], [6.6, 695.0], [6.7, 696.0], [6.8, 698.0], [6.9, 699.0], [7.0, 701.0], [7.1, 701.0], [7.2, 702.0], [7.3, 703.0], [7.4, 703.0], [7.5, 704.0], [7.6, 705.0], [7.7, 706.0], [7.8, 706.0], [7.9, 707.0], [8.0, 708.0], [8.1, 708.0], [8.2, 709.0], [8.3, 710.0], [8.4, 711.0], [8.5, 712.0], [8.6, 713.0], [8.7, 714.0], [8.8, 714.0], [8.9, 715.0], [9.0, 716.0], [9.1, 717.0], [9.2, 718.0], [9.3, 718.0], [9.4, 719.0], [9.5, 720.0], [9.6, 720.0], [9.7, 721.0], [9.8, 722.0], [9.9, 722.0], [10.0, 723.0], [10.1, 723.0], [10.2, 723.0], [10.3, 724.0], [10.4, 724.0], [10.5, 725.0], [10.6, 725.0], [10.7, 725.0], [10.8, 726.0], [10.9, 726.0], [11.0, 727.0], [11.1, 727.0], [11.2, 727.0], [11.3, 728.0], [11.4, 728.0], [11.5, 728.0], [11.6, 729.0], [11.7, 729.0], [11.8, 729.0], [11.9, 729.0], [12.0, 729.0], [12.1, 730.0], [12.2, 730.0], [12.3, 730.0], [12.4, 731.0], [12.5, 731.0], [12.6, 731.0], [12.7, 732.0], [12.8, 732.0], [12.9, 732.0], [13.0, 733.0], [13.1, 733.0], [13.2, 734.0], [13.3, 734.0], [13.4, 734.0], [13.5, 734.0], [13.6, 735.0], [13.7, 735.0], [13.8, 735.0], [13.9, 736.0], [14.0, 736.0], [14.1, 736.0], [14.2, 736.0], [14.3, 737.0], [14.4, 737.0], [14.5, 737.0], [14.6, 738.0], [14.7, 738.0], [14.8, 738.0], [14.9, 739.0], [15.0, 739.0], [15.1, 739.0], [15.2, 739.0], [15.3, 739.0], [15.4, 740.0], [15.5, 740.0], [15.6, 740.0], [15.7, 740.0], [15.8, 741.0], [15.9, 741.0], [16.0, 741.0], [16.1, 741.0], [16.2, 742.0], [16.3, 742.0], [16.4, 742.0], [16.5, 742.0], [16.6, 742.0], [16.7, 743.0], [16.8, 743.0], [16.9, 743.0], [17.0, 743.0], [17.1, 744.0], [17.2, 744.0], [17.3, 744.0], [17.4, 744.0], [17.5, 745.0], [17.6, 745.0], [17.7, 745.0], [17.8, 745.0], [17.9, 746.0], [18.0, 746.0], [18.1, 746.0], [18.2, 747.0], [18.3, 747.0], [18.4, 747.0], [18.5, 748.0], [18.6, 748.0], [18.7, 748.0], [18.8, 749.0], [18.9, 749.0], [19.0, 750.0], [19.1, 750.0], [19.2, 750.0], [19.3, 751.0], [19.4, 751.0], [19.5, 752.0], [19.6, 752.0], [19.7, 752.0], [19.8, 753.0], [19.9, 753.0], [20.0, 754.0], [20.1, 754.0], [20.2, 754.0], [20.3, 755.0], [20.4, 755.0], [20.5, 756.0], [20.6, 756.0], [20.7, 757.0], [20.8, 757.0], [20.9, 757.0], [21.0, 758.0], [21.1, 758.0], [21.2, 758.0], [21.3, 759.0], [21.4, 759.0], [21.5, 759.0], [21.6, 760.0], [21.7, 760.0], [21.8, 760.0], [21.9, 761.0], [22.0, 761.0], [22.1, 761.0], [22.2, 761.0], [22.3, 762.0], [22.4, 762.0], [22.5, 762.0], [22.6, 763.0], [22.7, 763.0], [22.8, 763.0], [22.9, 764.0], [23.0, 764.0], [23.1, 764.0], [23.2, 764.0], [23.3, 765.0], [23.4, 765.0], [23.5, 765.0], [23.6, 766.0], [23.7, 766.0], [23.8, 766.0], [23.9, 767.0], [24.0, 767.0], [24.1, 767.0], [24.2, 767.0], [24.3, 767.0], [24.4, 768.0], [24.5, 768.0], [24.6, 768.0], [24.7, 768.0], [24.8, 768.0], [24.9, 769.0], [25.0, 769.0], [25.1, 769.0], [25.2, 769.0], [25.3, 769.0], [25.4, 769.0], [25.5, 770.0], [25.6, 770.0], [25.7, 770.0], [25.8, 770.0], [25.9, 770.0], [26.0, 770.0], [26.1, 770.0], [26.2, 771.0], [26.3, 771.0], [26.4, 771.0], [26.5, 771.0], [26.6, 771.0], [26.7, 771.0], [26.8, 772.0], [26.9, 772.0], [27.0, 772.0], [27.1, 772.0], [27.2, 772.0], [27.3, 772.0], [27.4, 773.0], [27.5, 773.0], [27.6, 773.0], [27.7, 773.0], [27.8, 773.0], [27.9, 773.0], [28.0, 774.0], [28.1, 774.0], [28.2, 774.0], [28.3, 774.0], [28.4, 774.0], [28.5, 774.0], [28.6, 775.0], [28.7, 775.0], [28.8, 775.0], [28.9, 775.0], [29.0, 775.0], [29.1, 776.0], [29.2, 776.0], [29.3, 776.0], [29.4, 776.0], [29.5, 776.0], [29.6, 776.0], [29.7, 776.0], [29.8, 777.0], [29.9, 777.0], [30.0, 777.0], [30.1, 777.0], [30.2, 777.0], [30.3, 777.0], [30.4, 778.0], [30.5, 778.0], [30.6, 778.0], [30.7, 778.0], [30.8, 778.0], [30.9, 778.0], [31.0, 779.0], [31.1, 779.0], [31.2, 779.0], [31.3, 779.0], [31.4, 779.0], [31.5, 780.0], [31.6, 780.0], [31.7, 780.0], [31.8, 780.0], [31.9, 780.0], [32.0, 780.0], [32.1, 780.0], [32.2, 781.0], [32.3, 781.0], [32.4, 781.0], [32.5, 781.0], [32.6, 781.0], [32.7, 781.0], [32.8, 781.0], [32.9, 782.0], [33.0, 782.0], [33.1, 782.0], [33.2, 782.0], [33.3, 782.0], [33.4, 782.0], [33.5, 783.0], [33.6, 783.0], [33.7, 783.0], [33.8, 783.0], [33.9, 783.0], [34.0, 783.0], [34.1, 783.0], [34.2, 784.0], [34.3, 784.0], [34.4, 784.0], [34.5, 784.0], [34.6, 784.0], [34.7, 784.0], [34.8, 784.0], [34.9, 784.0], [35.0, 785.0], [35.1, 785.0], [35.2, 785.0], [35.3, 785.0], [35.4, 785.0], [35.5, 785.0], [35.6, 785.0], [35.7, 786.0], [35.8, 786.0], [35.9, 786.0], [36.0, 786.0], [36.1, 786.0], [36.2, 786.0], [36.3, 787.0], [36.4, 787.0], [36.5, 787.0], [36.6, 787.0], [36.7, 787.0], [36.8, 787.0], [36.9, 788.0], [37.0, 788.0], [37.1, 788.0], [37.2, 788.0], [37.3, 788.0], [37.4, 788.0], [37.5, 788.0], [37.6, 789.0], [37.7, 789.0], [37.8, 789.0], [37.9, 789.0], [38.0, 789.0], [38.1, 789.0], [38.2, 789.0], [38.3, 790.0], [38.4, 790.0], [38.5, 790.0], [38.6, 790.0], [38.7, 790.0], [38.8, 791.0], [38.9, 791.0], [39.0, 791.0], [39.1, 791.0], [39.2, 791.0], [39.3, 791.0], [39.4, 792.0], [39.5, 792.0], [39.6, 792.0], [39.7, 792.0], [39.8, 792.0], [39.9, 792.0], [40.0, 793.0], [40.1, 793.0], [40.2, 793.0], [40.3, 793.0], [40.4, 793.0], [40.5, 793.0], [40.6, 793.0], [40.7, 794.0], [40.8, 794.0], [40.9, 794.0], [41.0, 794.0], [41.1, 794.0], [41.2, 795.0], [41.3, 795.0], [41.4, 795.0], [41.5, 795.0], [41.6, 795.0], [41.7, 796.0], [41.8, 796.0], [41.9, 796.0], [42.0, 796.0], [42.1, 796.0], [42.2, 797.0], [42.3, 797.0], [42.4, 797.0], [42.5, 797.0], [42.6, 797.0], [42.7, 798.0], [42.8, 798.0], [42.9, 798.0], [43.0, 798.0], [43.1, 798.0], [43.2, 799.0], [43.3, 799.0], [43.4, 799.0], [43.5, 799.0], [43.6, 800.0], [43.7, 800.0], [43.8, 800.0], [43.9, 800.0], [44.0, 800.0], [44.1, 801.0], [44.2, 801.0], [44.3, 801.0], [44.4, 801.0], [44.5, 801.0], [44.6, 801.0], [44.7, 802.0], [44.8, 802.0], [44.9, 802.0], [45.0, 802.0], [45.1, 803.0], [45.2, 803.0], [45.3, 803.0], [45.4, 803.0], [45.5, 804.0], [45.6, 804.0], [45.7, 804.0], [45.8, 804.0], [45.9, 804.0], [46.0, 805.0], [46.1, 805.0], [46.2, 805.0], [46.3, 806.0], [46.4, 806.0], [46.5, 806.0], [46.6, 807.0], [46.7, 807.0], [46.8, 807.0], [46.9, 807.0], [47.0, 807.0], [47.1, 808.0], [47.2, 808.0], [47.3, 808.0], [47.4, 809.0], [47.5, 809.0], [47.6, 809.0], [47.7, 809.0], [47.8, 810.0], [47.9, 810.0], [48.0, 810.0], [48.1, 810.0], [48.2, 811.0], [48.3, 811.0], [48.4, 811.0], [48.5, 811.0], [48.6, 812.0], [48.7, 812.0], [48.8, 812.0], [48.9, 813.0], [49.0, 813.0], [49.1, 813.0], [49.2, 814.0], [49.3, 814.0], [49.4, 814.0], [49.5, 815.0], [49.6, 815.0], [49.7, 815.0], [49.8, 816.0], [49.9, 816.0], [50.0, 816.0], [50.1, 817.0], [50.2, 817.0], [50.3, 817.0], [50.4, 818.0], [50.5, 818.0], [50.6, 818.0], [50.7, 819.0], [50.8, 819.0], [50.9, 819.0], [51.0, 820.0], [51.1, 820.0], [51.2, 820.0], [51.3, 820.0], [51.4, 821.0], [51.5, 821.0], [51.6, 821.0], [51.7, 822.0], [51.8, 822.0], [51.9, 822.0], [52.0, 822.0], [52.1, 823.0], [52.2, 823.0], [52.3, 823.0], [52.4, 824.0], [52.5, 824.0], [52.6, 824.0], [52.7, 824.0], [52.8, 825.0], [52.9, 825.0], [53.0, 826.0], [53.1, 826.0], [53.2, 826.0], [53.3, 827.0], [53.4, 827.0], [53.5, 828.0], [53.6, 828.0], [53.7, 828.0], [53.8, 829.0], [53.9, 829.0], [54.0, 830.0], [54.1, 830.0], [54.2, 831.0], [54.3, 831.0], [54.4, 832.0], [54.5, 832.0], [54.6, 833.0], [54.7, 833.0], [54.8, 834.0], [54.9, 834.0], [55.0, 835.0], [55.1, 835.0], [55.2, 836.0], [55.3, 836.0], [55.4, 837.0], [55.5, 837.0], [55.6, 838.0], [55.7, 838.0], [55.8, 839.0], [55.9, 840.0], [56.0, 840.0], [56.1, 841.0], [56.2, 841.0], [56.3, 842.0], [56.4, 843.0], [56.5, 843.0], [56.6, 844.0], [56.7, 845.0], [56.8, 846.0], [56.9, 846.0], [57.0, 847.0], [57.1, 848.0], [57.2, 848.0], [57.3, 849.0], [57.4, 850.0], [57.5, 850.0], [57.6, 851.0], [57.7, 851.0], [57.8, 852.0], [57.9, 852.0], [58.0, 853.0], [58.1, 853.0], [58.2, 853.0], [58.3, 854.0], [58.4, 854.0], [58.5, 855.0], [58.6, 855.0], [58.7, 855.0], [58.8, 856.0], [58.9, 856.0], [59.0, 857.0], [59.1, 857.0], [59.2, 858.0], [59.3, 858.0], [59.4, 859.0], [59.5, 860.0], [59.6, 860.0], [59.7, 861.0], [59.8, 861.0], [59.9, 862.0], [60.0, 862.0], [60.1, 863.0], [60.2, 863.0], [60.3, 864.0], [60.4, 864.0], [60.5, 865.0], [60.6, 865.0], [60.7, 865.0], [60.8, 866.0], [60.9, 866.0], [61.0, 867.0], [61.1, 867.0], [61.2, 868.0], [61.3, 868.0], [61.4, 869.0], [61.5, 870.0], [61.6, 870.0], [61.7, 871.0], [61.8, 872.0], [61.9, 872.0], [62.0, 873.0], [62.1, 873.0], [62.2, 874.0], [62.3, 874.0], [62.4, 875.0], [62.5, 875.0], [62.6, 875.0], [62.7, 876.0], [62.8, 876.0], [62.9, 877.0], [63.0, 877.0], [63.1, 877.0], [63.2, 878.0], [63.3, 878.0], [63.4, 878.0], [63.5, 879.0], [63.6, 879.0], [63.7, 880.0], [63.8, 880.0], [63.9, 880.0], [64.0, 881.0], [64.1, 881.0], [64.2, 881.0], [64.3, 882.0], [64.4, 882.0], [64.5, 882.0], [64.6, 882.0], [64.7, 883.0], [64.8, 883.0], [64.9, 883.0], [65.0, 884.0], [65.1, 884.0], [65.2, 884.0], [65.3, 885.0], [65.4, 885.0], [65.5, 885.0], [65.6, 885.0], [65.7, 886.0], [65.8, 886.0], [65.9, 886.0], [66.0, 886.0], [66.1, 886.0], [66.2, 887.0], [66.3, 887.0], [66.4, 887.0], [66.5, 887.0], [66.6, 888.0], [66.7, 888.0], [66.8, 888.0], [66.9, 888.0], [67.0, 889.0], [67.1, 889.0], [67.2, 889.0], [67.3, 889.0], [67.4, 890.0], [67.5, 890.0], [67.6, 890.0], [67.7, 890.0], [67.8, 890.0], [67.9, 891.0], [68.0, 891.0], [68.1, 891.0], [68.2, 891.0], [68.3, 892.0], [68.4, 892.0], [68.5, 892.0], [68.6, 892.0], [68.7, 892.0], [68.8, 893.0], [68.9, 893.0], [69.0, 893.0], [69.1, 894.0], [69.2, 894.0], [69.3, 894.0], [69.4, 894.0], [69.5, 894.0], [69.6, 895.0], [69.7, 895.0], [69.8, 895.0], [69.9, 895.0], [70.0, 895.0], [70.1, 896.0], [70.2, 896.0], [70.3, 896.0], [70.4, 896.0], [70.5, 896.0], [70.6, 897.0], [70.7, 897.0], [70.8, 897.0], [70.9, 897.0], [71.0, 897.0], [71.1, 898.0], [71.2, 898.0], [71.3, 898.0], [71.4, 898.0], [71.5, 898.0], [71.6, 899.0], [71.7, 899.0], [71.8, 899.0], [71.9, 899.0], [72.0, 899.0], [72.1, 899.0], [72.2, 900.0], [72.3, 900.0], [72.4, 900.0], [72.5, 900.0], [72.6, 901.0], [72.7, 901.0], [72.8, 901.0], [72.9, 901.0], [73.0, 901.0], [73.1, 902.0], [73.2, 902.0], [73.3, 902.0], [73.4, 902.0], [73.5, 902.0], [73.6, 902.0], [73.7, 903.0], [73.8, 903.0], [73.9, 903.0], [74.0, 903.0], [74.1, 903.0], [74.2, 904.0], [74.3, 904.0], [74.4, 904.0], [74.5, 904.0], [74.6, 904.0], [74.7, 904.0], [74.8, 904.0], [74.9, 905.0], [75.0, 905.0], [75.1, 905.0], [75.2, 905.0], [75.3, 905.0], [75.4, 905.0], [75.5, 906.0], [75.6, 906.0], [75.7, 906.0], [75.8, 906.0], [75.9, 906.0], [76.0, 906.0], [76.1, 907.0], [76.2, 907.0], [76.3, 907.0], [76.4, 907.0], [76.5, 907.0], [76.6, 908.0], [76.7, 908.0], [76.8, 908.0], [76.9, 908.0], [77.0, 908.0], [77.1, 908.0], [77.2, 908.0], [77.3, 909.0], [77.4, 909.0], [77.5, 909.0], [77.6, 909.0], [77.7, 909.0], [77.8, 910.0], [77.9, 910.0], [78.0, 910.0], [78.1, 910.0], [78.2, 911.0], [78.3, 911.0], [78.4, 911.0], [78.5, 911.0], [78.6, 911.0], [78.7, 912.0], [78.8, 912.0], [78.9, 912.0], [79.0, 912.0], [79.1, 912.0], [79.2, 913.0], [79.3, 913.0], [79.4, 913.0], [79.5, 913.0], [79.6, 914.0], [79.7, 914.0], [79.8, 914.0], [79.9, 914.0], [80.0, 914.0], [80.1, 915.0], [80.2, 915.0], [80.3, 915.0], [80.4, 915.0], [80.5, 915.0], [80.6, 916.0], [80.7, 916.0], [80.8, 916.0], [80.9, 916.0], [81.0, 917.0], [81.1, 917.0], [81.2, 917.0], [81.3, 917.0], [81.4, 918.0], [81.5, 918.0], [81.6, 918.0], [81.7, 918.0], [81.8, 918.0], [81.9, 919.0], [82.0, 919.0], [82.1, 919.0], [82.2, 920.0], [82.3, 920.0], [82.4, 920.0], [82.5, 920.0], [82.6, 920.0], [82.7, 921.0], [82.8, 921.0], [82.9, 921.0], [83.0, 921.0], [83.1, 922.0], [83.2, 922.0], [83.3, 922.0], [83.4, 922.0], [83.5, 923.0], [83.6, 923.0], [83.7, 923.0], [83.8, 923.0], [83.9, 923.0], [84.0, 924.0], [84.1, 924.0], [84.2, 924.0], [84.3, 924.0], [84.4, 925.0], [84.5, 925.0], [84.6, 925.0], [84.7, 925.0], [84.8, 926.0], [84.9, 926.0], [85.0, 926.0], [85.1, 926.0], [85.2, 926.0], [85.3, 927.0], [85.4, 927.0], [85.5, 927.0], [85.6, 927.0], [85.7, 928.0], [85.8, 928.0], [85.9, 928.0], [86.0, 929.0], [86.1, 929.0], [86.2, 929.0], [86.3, 930.0], [86.4, 930.0], [86.5, 930.0], [86.6, 931.0], [86.7, 931.0], [86.8, 932.0], [86.9, 932.0], [87.0, 933.0], [87.1, 933.0], [87.2, 933.0], [87.3, 934.0], [87.4, 934.0], [87.5, 935.0], [87.6, 935.0], [87.7, 935.0], [87.8, 936.0], [87.9, 936.0], [88.0, 936.0], [88.1, 937.0], [88.2, 937.0], [88.3, 937.0], [88.4, 938.0], [88.5, 938.0], [88.6, 938.0], [88.7, 939.0], [88.8, 939.0], [88.9, 939.0], [89.0, 940.0], [89.1, 940.0], [89.2, 940.0], [89.3, 941.0], [89.4, 941.0], [89.5, 942.0], [89.6, 942.0], [89.7, 943.0], [89.8, 943.0], [89.9, 944.0], [90.0, 945.0], [90.1, 945.0], [90.2, 946.0], [90.3, 947.0], [90.4, 948.0], [90.5, 949.0], [90.6, 950.0], [90.7, 951.0], [90.8, 951.0], [90.9, 952.0], [91.0, 953.0], [91.1, 954.0], [91.2, 955.0], [91.3, 956.0], [91.4, 957.0], [91.5, 958.0], [91.6, 959.0], [91.7, 960.0], [91.8, 962.0], [91.9, 964.0], [92.0, 965.0], [92.1, 966.0], [92.2, 967.0], [92.3, 969.0], [92.4, 970.0], [92.5, 972.0], [92.6, 973.0], [92.7, 975.0], [92.8, 975.0], [92.9, 976.0], [93.0, 977.0], [93.1, 977.0], [93.2, 978.0], [93.3, 979.0], [93.4, 980.0], [93.5, 982.0], [93.6, 983.0], [93.7, 985.0], [93.8, 987.0], [93.9, 988.0], [94.0, 990.0], [94.1, 992.0], [94.2, 994.0], [94.3, 995.0], [94.4, 997.0], [94.5, 998.0], [94.6, 1000.0], [94.7, 1001.0], [94.8, 1003.0], [94.9, 1006.0], [95.0, 1010.0], [95.1, 1017.0], [95.2, 1020.0], [95.3, 1021.0], [95.4, 1022.0], [95.5, 1024.0], [95.6, 1026.0], [95.7, 1028.0], [95.8, 1029.0], [95.9, 1031.0], [96.0, 1033.0], [96.1, 1035.0], [96.2, 1037.0], [96.3, 1040.0], [96.4, 1043.0], [96.5, 1047.0], [96.6, 1056.0], [96.7, 1062.0], [96.8, 1067.0], [96.9, 1073.0], [97.0, 1079.0], [97.1, 1084.0], [97.2, 1086.0], [97.3, 1088.0], [97.4, 1097.0], [97.5, 1100.0], [97.6, 1104.0], [97.7, 1110.0], [97.8, 1116.0], [97.9, 1121.0], [98.0, 1123.0], [98.1, 1126.0], [98.2, 1130.0], [98.3, 1137.0], [98.4, 1145.0], [98.5, 1159.0], [98.6, 1178.0], [98.7, 1187.0], [98.8, 1193.0], [98.9, 1209.0], [99.0, 1220.0], [99.1, 1242.0], [99.2, 1283.0], [99.3, 1318.0], [99.4, 1384.0], [99.5, 1452.0], [99.6, 1478.0], [99.7, 1538.0], [99.8, 1625.0], [99.9, 1757.0], [100.0, 1853.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 34.0, "minX": 0.0, "maxY": 26492.0, "series": [{"data": [[0.0, 853.0], [600.0, 2419.0], [700.0, 26492.0], [200.0, 244.0], [800.0, 20597.0], [900.0, 16214.0], [1000.0, 2077.0], [1100.0, 1005.0], [300.0, 269.0], [1200.0, 289.0], [1300.0, 131.0], [1400.0, 170.0], [1500.0, 73.0], [100.0, 280.0], [400.0, 618.0], [1600.0, 86.0], [1700.0, 34.0], [1800.0, 53.0], [500.0, 305.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 245.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 69699.0, "series": [{"data": [[0.0, 2265.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 69699.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 245.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 977.8617977528083, "minX": 1.75235412E12, "maxY": 981.6610072443925, "series": [{"data": [[1.75235418E12, 977.8617977528083], [1.75235412E12, 981.6610072443925]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235418E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 998.0, "series": [{"data": [[2.0, 22.0], [3.0, 21.0], [4.0, 24.0], [5.0, 23.0], [6.0, 17.0], [7.0, 22.0], [8.0, 26.0], [9.0, 23.0], [10.0, 4.0], [12.0, 16.0], [13.0, 23.0], [14.0, 25.0], [16.0, 28.5], [18.0, 16.0], [19.0, 16.333333333333332], [21.0, 22.5], [23.0, 22.5], [24.0, 31.17525773195877], [25.0, 173.5], [27.0, 331.75], [28.0, 212.5], [29.0, 621.0], [30.0, 462.0], [31.0, 257.6666666666667], [33.0, 364.5], [32.0, 622.0], [35.0, 329.0], [34.0, 254.5], [37.0, 490.25], [39.0, 398.0], [41.0, 726.0], [40.0, 329.3333333333333], [43.0, 505.0], [44.0, 402.75], [47.0, 725.0], [46.0, 298.6666666666667], [49.0, 259.0], [48.0, 538.0], [51.0, 725.0], [50.0, 427.0], [53.0, 511.5], [55.0, 724.0], [54.0, 241.5], [57.0, 249.0], [59.0, 732.0], [58.0, 518.5], [61.0, 670.0], [60.0, 472.0], [63.0, 731.0], [62.0, 245.5], [67.0, 731.0], [66.0, 417.0], [65.0, 472.0], [71.0, 602.5], [70.0, 533.6666666666666], [68.0, 470.0], [75.0, 693.0], [72.0, 352.0], [79.0, 672.0], [78.0, 570.5], [83.0, 672.0], [82.0, 734.0], [81.0, 537.6666666666666], [87.0, 634.6666666666666], [85.0, 471.0], [91.0, 719.0], [90.0, 742.0], [89.0, 472.0], [88.0, 671.0], [95.0, 722.0], [92.0, 596.0], [99.0, 471.0], [97.0, 676.0], [96.0, 634.0], [103.0, 588.5], [101.0, 692.5], [100.0, 719.0], [107.0, 718.0], [106.0, 734.0], [105.0, 704.0], [111.0, 471.0], [110.0, 731.5], [108.0, 606.0], [115.0, 469.0], [114.0, 690.0], [112.0, 738.0], [118.0, 681.0], [117.0, 765.0], [116.0, 737.0], [122.0, 737.0], [121.0, 649.3333333333334], [127.0, 698.6666666666666], [126.0, 630.5], [132.0, 678.2], [142.0, 802.0], [141.0, 776.0], [140.0, 677.5], [139.0, 509.0], [136.0, 679.8], [151.0, 764.0], [150.0, 716.3333333333334], [148.0, 518.0], [146.0, 759.0], [145.0, 641.0], [144.0, 613.0], [154.0, 480.5], [155.0, 201.8], [156.0, 100.61538461538461], [157.0, 246.33333333333334], [158.0, 15.25], [159.0, 648.0], [160.0, 316.0], [161.0, 200.0], [162.0, 16.666666666666668], [163.0, 20.0], [165.0, 37.75], [166.0, 392.8888888888889], [167.0, 74.5], [168.0, 85.8684210526316], [169.0, 51.96932515337425], [173.0, 62.0], [175.0, 812.0], [174.0, 754.0], [172.0, 647.0], [171.0, 734.5], [176.0, 255.33333333333334], [177.0, 64.0], [178.0, 75.55555555555556], [179.0, 309.72727272727275], [180.0, 111.06666666666666], [183.0, 577.0], [182.0, 711.0], [181.0, 798.0], [186.0, 142.04761904761904], [191.0, 716.0], [190.0, 649.0], [189.0, 585.0], [188.0, 800.0], [187.0, 712.0], [185.0, 817.5], [195.0, 450.6666666666667], [199.0, 801.0], [198.0, 838.0], [197.0, 717.0], [196.0, 801.0], [193.0, 820.0], [201.0, 79.0], [203.0, 473.0], [204.0, 445.0], [205.0, 380.0], [207.0, 111.5], [200.0, 364.5], [206.0, 718.0], [202.0, 661.5], [209.0, 486.0], [215.0, 691.0], [214.0, 637.0], [213.0, 841.0], [212.0, 802.0], [211.0, 718.0], [210.0, 689.0], [208.0, 730.0], [221.0, 542.0], [223.0, 839.0], [222.0, 804.0], [218.0, 840.0], [217.0, 803.0], [216.0, 719.0], [228.0, 80.0], [226.0, 318.33333333333337], [225.0, 394.0], [231.0, 761.0], [229.0, 780.0], [227.0, 645.0], [224.0, 720.0], [239.0, 765.0], [237.0, 710.0], [236.0, 722.0], [235.0, 812.0], [234.0, 781.0], [233.0, 688.0], [246.0, 839.0], [245.0, 812.0], [244.0, 705.6666666666666], [242.0, 840.0], [240.0, 812.0], [251.0, 841.0], [250.0, 813.0], [249.0, 705.6666666666666], [269.0, 104.0], [271.0, 317.8181818181818], [268.0, 82.0], [267.0, 406.5], [256.0, 78.75], [265.0, 762.5], [263.0, 779.5], [260.0, 812.0], [259.0, 757.4], [257.0, 706.3333333333334], [284.0, 700.0], [286.0, 98.0], [287.0, 762.5], [285.0, 780.0], [283.0, 839.0], [280.0, 765.3333333333333], [279.0, 694.0], [273.0, 763.5], [277.0, 722.0], [276.0, 841.0], [291.0, 702.5], [301.0, 772.5], [302.0, 708.0], [300.0, 689.0], [296.0, 837.0], [295.0, 707.0], [294.0, 716.0], [293.0, 689.0], [292.0, 837.0], [290.0, 709.0], [289.0, 741.3333333333334], [317.0, 800.6666666666666], [313.0, 670.6666666666666], [308.0, 166.0], [315.0, 787.0], [314.0, 704.0], [312.0, 689.0], [311.0, 773.25], [304.0, 703.0], [309.0, 743.3333333333334], [307.0, 707.0], [305.0, 836.0], [334.0, 720.0], [335.0, 856.0], [333.0, 769.5], [329.0, 846.0], [328.0, 714.5], [327.0, 784.0], [325.0, 789.3333333333334], [322.0, 707.0], [321.0, 801.0], [338.0, 785.0], [350.0, 782.0], [348.0, 728.0], [347.0, 811.75], [343.0, 876.0], [342.0, 783.0], [341.0, 810.6666666666666], [337.0, 855.0], [336.0, 785.6666666666666], [366.0, 134.0], [367.0, 171.0], [365.0, 521.5], [357.0, 660.5], [356.0, 781.0], [364.0, 849.0], [363.0, 734.0], [362.0, 885.0], [361.0, 758.0], [359.0, 849.0], [352.0, 819.3333333333334], [355.0, 789.5], [353.0, 880.0], [358.0, 732.0], [383.0, 798.3333333333334], [378.0, 467.0], [380.0, 739.0], [370.0, 885.0], [369.0, 850.0], [368.0, 751.0], [379.0, 874.0], [377.0, 795.0], [376.0, 735.0], [375.0, 737.0], [374.0, 885.0], [373.0, 850.0], [372.0, 737.5], [397.0, 689.0], [398.0, 480.16666666666663], [396.0, 447.0], [395.0, 473.16666666666663], [394.0, 719.0], [393.0, 498.0], [391.0, 390.25], [390.0, 743.0], [389.0, 880.0], [388.0, 765.5], [386.0, 302.0], [384.0, 402.33333333333337], [385.0, 743.0], [414.0, 698.5], [415.0, 511.33333333333337], [413.0, 36.0], [412.0, 446.25], [410.0, 581.6666666666666], [409.0, 782.6666666666666], [408.0, 192.0], [405.0, 338.0], [403.0, 239.66666666666669], [402.0, 160.0], [400.0, 504.6], [401.0, 864.0], [407.0, 821.0], [404.0, 603.0], [419.0, 384.85714285714283], [430.0, 83.75], [431.0, 677.6666666666666], [424.0, 894.0], [429.0, 275.66666666666663], [428.0, 798.0], [425.0, 283.6666666666667], [427.0, 752.0], [426.0, 914.0], [423.0, 394.5], [422.0, 561.0], [421.0, 228.0], [420.0, 362.33333333333337], [418.0, 174.0], [417.0, 229.97297297297297], [416.0, 328.2], [446.0, 500.5], [447.0, 178.0], [445.0, 597.0], [435.0, 536.6], [433.0, 295.0], [432.0, 752.0], [443.0, 512.0], [442.0, 402.5], [441.0, 417.4], [440.0, 17.0], [439.0, 467.5], [438.0, 42.0], [436.0, 249.5], [437.0, 758.0], [451.0, 709.6666666666666], [462.0, 470.5], [463.0, 481.0], [456.0, 918.5], [461.0, 655.0], [460.0, 912.0], [457.0, 278.33333333333337], [458.0, 785.0], [455.0, 109.33333333333334], [454.0, 411.5], [452.0, 161.0], [450.0, 200.0], [449.0, 596.3333333333334], [479.0, 307.75], [476.0, 391.3333333333333], [475.0, 668.3333333333334], [474.0, 168.0], [473.0, 853.25], [472.0, 809.0], [471.0, 31.25], [469.0, 689.4], [468.0, 263.0], [465.0, 405.0], [464.0, 925.0], [466.0, 810.0], [477.0, 783.0], [481.0, 525.5], [495.0, 310.5], [490.0, 548.6666666666666], [491.0, 874.0], [489.0, 251.25], [486.0, 475.0], [485.0, 576.6666666666666], [484.0, 808.5], [480.0, 598.0], [487.0, 923.0], [493.0, 775.5], [492.0, 920.0], [509.0, 60.0], [508.0, 36.5], [499.0, 852.5], [498.0, 823.0], [496.0, 843.5], [506.0, 471.5], [505.0, 842.8], [503.0, 41.5], [502.0, 472.0], [500.0, 441.25], [501.0, 824.0], [511.0, 848.5], [510.0, 792.0], [507.0, 918.0], [518.0, 37.0], [541.0, 599.4], [542.0, 634.75], [543.0, 922.0], [528.0, 801.5], [539.0, 590.3333333333334], [538.0, 365.6], [533.0, 618.1818181818181], [535.0, 842.3333333333334], [532.0, 124.66666666666667], [530.0, 39.0], [529.0, 70.0], [526.0, 629.75], [527.0, 917.0], [512.0, 871.5], [515.0, 634.0], [513.0, 38.0], [517.0, 44.0], [516.0, 25.0], [519.0, 155.0], [537.0, 771.0], [536.0, 822.0], [525.0, 237.0], [523.0, 297.0], [521.0, 779.0], [520.0, 848.5714285714286], [524.0, 871.8], [551.0, 197.7142857142857], [573.0, 210.5], [570.0, 342.125], [568.0, 911.0], [572.0, 773.0], [571.0, 875.0], [566.0, 58.0], [567.0, 828.6666666666666], [565.0, 81.0], [564.0, 243.0], [574.0, 793.0], [562.0, 801.0], [560.0, 792.0], [563.0, 916.5], [557.0, 647.6666666666666], [556.0, 223.4], [552.0, 79.0], [554.0, 922.0], [553.0, 823.75], [555.0, 823.75], [547.0, 493.5], [550.0, 921.0], [549.0, 794.0], [546.0, 219.4], [559.0, 921.0], [545.0, 824.0], [558.0, 840.5], [604.0, 478.5], [594.0, 435.0], [600.0, 639.3333333333334], [603.0, 792.0], [602.0, 841.3333333333334], [583.0, 311.33333333333337], [582.0, 416.5], [591.0, 918.0], [577.0, 920.0], [576.0, 801.0], [580.0, 845.5], [578.0, 810.0], [581.0, 923.0], [599.0, 492.5], [598.0, 216.0], [597.0, 117.5], [596.0, 846.2], [595.0, 827.0], [593.0, 384.4], [592.0, 435.0], [607.0, 774.0], [605.0, 829.0], [590.0, 442.5], [589.0, 272.6], [588.0, 873.0], [587.0, 425.5], [586.0, 277.75], [585.0, 498.6666666666667], [614.0, 148.80000000000007], [613.0, 241.27777777777774], [612.0, 773.0], [611.0, 265.42857142857144], [608.0, 279.7142857142857], [610.0, 830.0], [609.0, 792.0], [623.0, 346.83333333333337], [621.0, 792.0], [620.0, 849.5], [619.0, 871.5], [616.0, 791.0], [638.0, 792.0], [624.0, 849.5], [627.0, 916.0], [626.0, 792.0], [629.0, 794.0], [628.0, 844.6666666666666], [631.0, 777.0], [630.0, 828.0], [637.0, 869.6666666666666], [636.0, 826.0], [634.0, 792.0], [633.0, 917.0], [615.0, 869.6666666666666], [664.0, 410.5], [644.0, 406.75], [643.0, 476.0], [642.0, 921.0], [641.0, 838.3333333333334], [645.0, 478.0], [647.0, 789.0], [646.0, 921.0], [650.0, 757.4], [654.0, 858.5], [651.0, 788.0], [655.0, 480.5], [663.0, 619.6666666666666], [662.0, 825.0], [661.0, 913.0], [659.0, 854.0], [658.0, 844.0], [656.0, 826.0], [665.0, 162.0], [667.0, 887.6666666666666], [666.0, 778.0], [668.0, 789.0], [700.0, 866.75], [692.0, 496.5], [694.0, 388.4], [703.0, 863.75], [696.0, 778.0], [676.0, 855.5], [675.0, 844.5], [674.0, 830.0], [673.0, 789.0], [672.0, 860.75], [695.0, 832.0], [690.0, 848.8], [685.0, 852.25], [681.0, 808.5], [680.0, 861.0], [731.0, 832.0], [717.0, 209.0], [716.0, 848.5], [719.0, 339.0], [721.0, 439.0], [720.0, 858.0], [722.0, 920.0], [732.0, 269.5], [735.0, 860.75], [730.0, 785.0], [728.0, 934.5], [711.0, 789.0], [710.0, 845.5], [709.0, 887.0], [707.0, 853.75], [704.0, 811.0], [726.0, 833.0], [725.0, 837.6666666666666], [760.0, 580.5], [738.0, 225.0], [736.0, 833.0], [740.0, 945.0], [739.0, 833.3333333333334], [750.0, 947.0], [749.0, 834.6666666666666], [746.0, 834.0], [745.0, 863.0], [744.0, 860.5], [741.0, 272.3333333333333], [743.0, 301.0], [742.0, 833.0], [762.0, 281.25], [761.0, 834.0], [763.0, 837.0], [767.0, 836.5], [753.0, 836.3333333333334], [755.0, 865.0], [754.0, 949.0], [759.0, 837.0], [757.0, 867.0], [766.0, 951.0], [765.0, 836.5], [764.0, 951.0], [795.0, 958.5], [772.0, 458.5714285714286], [775.0, 439.3333333333333], [774.0, 854.3333333333334], [773.0, 866.25], [792.0, 899.0], [776.0, 538.0], [778.0, 861.8], [781.0, 863.8], [779.0, 868.0], [783.0, 643.0], [768.0, 951.0], [771.0, 837.0], [769.0, 834.0], [782.0, 869.25], [799.0, 794.0], [785.0, 957.0], [784.0, 866.5], [787.0, 850.0], [786.0, 792.0], [789.0, 870.0], [788.0, 954.0], [791.0, 852.0], [790.0, 792.0], [798.0, 889.25], [796.0, 793.0], [794.0, 853.0], [793.0, 789.0], [827.0, 928.6666666666666], [806.0, 288.85714285714283], [807.0, 764.8333333333334], [824.0, 892.5], [808.0, 354.0], [810.0, 875.0], [809.0, 873.4], [812.0, 879.6666666666666], [811.0, 876.0], [815.0, 904.25], [801.0, 855.0], [803.0, 794.0], [802.0, 902.3333333333334], [813.0, 866.6], [831.0, 894.5], [818.0, 871.0], [821.0, 930.0], [820.0, 918.0], [823.0, 890.0], [822.0, 861.6666666666666], [830.0, 917.75], [828.0, 805.0], [826.0, 833.6666666666666], [825.0, 928.8], [858.0, 767.2], [835.0, 762.2], [839.0, 227.0], [837.0, 898.4], [857.0, 907.0], [856.0, 907.6], [840.0, 523.6], [841.0, 935.6666666666666], [846.0, 895.0], [833.0, 886.0], [832.0, 898.0], [845.0, 901.0], [852.0, 400.0], [853.0, 345.0], [854.0, 798.1666666666667], [860.0, 267.5], [859.0, 814.0], [861.0, 393.0], [863.0, 905.2], [851.0, 877.6666666666666], [850.0, 990.0], [849.0, 897.0], [848.0, 905.0], [862.0, 927.0], [892.0, 944.0], [877.0, 487.0476190476191], [876.0, 906.5], [875.0, 930.75], [873.0, 895.0], [878.0, 994.0], [889.0, 450.4666666666667], [890.0, 469.2083333333333], [895.0, 920.0], [881.0, 913.8], [880.0, 912.2], [883.0, 915.6], [882.0, 914.2], [885.0, 916.2], [884.0, 915.4], [887.0, 918.75], [886.0, 917.2], [894.0, 905.0], [893.0, 852.0], [891.0, 920.0], [888.0, 918.4], [871.0, 887.25], [870.0, 936.0], [869.0, 904.6666666666666], [868.0, 877.6666666666666], [867.0, 919.6666666666667], [866.0, 905.3333333333334], [879.0, 899.5], [920.0, 756.6666666666666], [901.0, 803.8333333333333], [902.0, 288.0], [903.0, 922.6], [906.0, 610.75], [905.0, 935.75], [904.0, 920.6], [907.0, 915.8], [909.0, 930.5], [908.0, 930.75], [911.0, 775.25], [897.0, 921.5], [900.0, 922.75], [898.0, 921.0], [910.0, 962.3333333333334], [912.0, 668.0], [915.0, 492.8333333333333], [914.0, 946.5], [913.0, 938.4285714285713], [917.0, 936.25], [916.0, 836.0], [918.0, 533.6666666666666], [919.0, 936.0], [922.0, 811.0526315789473], [921.0, 856.0], [924.0, 894.75], [923.0, 998.0], [925.0, 559.6], [927.0, 730.1111111111111], [926.0, 917.0], [955.0, 606.7777777777778], [928.0, 720.75], [932.0, 652.1818181818182], [931.0, 906.5], [930.0, 952.0], [929.0, 914.6], [933.0, 928.5], [952.0, 855.0], [934.0, 928.5], [954.0, 832.0], [953.0, 913.2], [937.0, 456.1666666666667], [936.0, 884.3333333333334], [939.0, 882.5], [938.0, 900.0], [940.0, 788.6], [941.0, 619.75], [943.0, 895.0], [942.0, 912.5], [946.0, 576.375], [950.0, 856.0], [948.0, 914.9], [947.0, 986.0], [951.0, 558.0], [959.0, 932.5], [945.0, 829.0], [944.0, 861.0], [958.0, 899.0], [957.0, 932.25], [956.0, 831.0], [986.0, 365.75], [975.0, 353.99999999999994], [963.0, 438.3333333333333], [962.0, 915.75], [961.0, 897.0], [960.0, 888.6666666666666], [965.0, 901.0], [964.0, 899.6], [967.0, 924.6666666666666], [966.0, 944.0], [984.0, 342.3333333333333], [985.0, 855.0], [990.0, 669.7777777777778], [989.0, 912.8], [988.0, 912.0], [987.0, 911.8], [991.0, 490.89473684210526], [968.0, 691.0], [970.0, 859.0], [969.0, 936.909090909091], [971.0, 354.2], [974.0, 454.3333333333333], [973.0, 916.5], [972.0, 915.0], [976.0, 630.0], [977.0, 484.2941176470589], [978.0, 912.8], [979.0, 524.8], [981.0, 533.7857142857143], [982.0, 815.5], [983.0, 664.5555555555555], [992.0, 745.8571428571429], [993.0, 579.8620689655172], [994.0, 785.5333333333333], [996.0, 766.2857142857142], [997.0, 477.0], [998.0, 812.9166666666667], [1000.0, 840.6687889775291], [999.0, 916.0333333333333], [1.0, 24.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[979.9789915384465, 824.7713304435781]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 123888.0, "minX": 1.75235412E12, "maxY": 184124.58333333334, "series": [{"data": [[1.75235418E12, 146848.8], [1.75235412E12, 184124.58333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235418E12, 123888.0], [1.75235412E12, 155320.13333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235418E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 804.9754786029047, "minX": 1.75235412E12, "maxY": 849.5896691635471, "series": [{"data": [[1.75235418E12, 849.5896691635471], [1.75235412E12, 804.9754786029047]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235418E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 804.9689312654067, "minX": 1.75235412E12, "maxY": 849.5852996254702, "series": [{"data": [[1.75235418E12, 849.5852996254702], [1.75235412E12, 804.9689312654067]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235418E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2.1847690387016215E-4, "minX": 1.75235412E12, "maxY": 0.2613707087555086, "series": [{"data": [[1.75235418E12, 2.1847690387016215E-4], [1.75235412E12, 0.2613707087555086]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235418E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.75235412E12, "maxY": 1853.0, "series": [{"data": [[1.75235418E12, 1853.0], [1.75235412E12, 1651.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235418E12, 940.0], [1.75235412E12, 937.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235418E12, 1093.9900000000016], [1.75235412E12, 1085.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235418E12, 987.0], [1.75235412E12, 967.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235418E12, 3.0], [1.75235412E12, 7.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235418E12, 814.0], [1.75235412E12, 832.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235418E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 52.0, "minX": 493.0, "maxY": 1025.0, "series": [{"data": [[685.0, 52.0], [862.0, 900.0], [981.0, 958.0], [965.0, 948.0], [1011.0, 976.0], [1139.0, 839.0], [1104.0, 864.0], [1144.0, 853.0], [1146.0, 837.0], [1103.0, 789.0], [1151.0, 1025.0], [1142.0, 871.0], [1102.0, 862.0], [1209.0, 818.0], [1206.0, 825.0], [1208.0, 876.0], [1207.0, 801.0], [1173.0, 806.0], [1177.0, 849.0], [1175.0, 814.0], [1179.0, 829.0], [1168.0, 852.0], [1172.0, 859.5], [1198.0, 878.5], [1199.0, 794.0], [1192.0, 882.0], [1193.0, 804.0], [1196.0, 820.0], [1197.0, 812.0], [1191.0, 799.0], [1212.0, 790.0], [1213.0, 857.0], [1214.0, 804.0], [1203.0, 824.0], [1152.0, 820.0], [1154.0, 850.0], [1160.0, 849.0], [1183.0, 811.0], [1223.0, 780.0], [1263.0, 318.0], [1216.0, 786.0], [1241.0, 796.0], [1236.0, 769.0], [1259.0, 783.0], [1222.0, 787.5], [1224.0, 773.0], [1231.0, 786.0], [1229.0, 814.0], [1275.0, 804.0], [1266.0, 820.0], [1218.0, 784.0], [1220.0, 794.0], [1227.0, 787.0], [1225.0, 810.0], [1353.0, 779.0], [1350.0, 776.0], [493.0, 672.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1353.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 52.0, "minX": 493.0, "maxY": 1025.0, "series": [{"data": [[685.0, 52.0], [862.0, 900.0], [981.0, 958.0], [965.0, 948.0], [1011.0, 976.0], [1139.0, 839.0], [1104.0, 864.0], [1144.0, 853.0], [1146.0, 837.0], [1103.0, 789.0], [1151.0, 1025.0], [1142.0, 871.0], [1102.0, 862.0], [1209.0, 818.0], [1206.0, 825.0], [1208.0, 876.0], [1207.0, 801.0], [1173.0, 806.0], [1177.0, 849.0], [1175.0, 814.0], [1179.0, 829.0], [1168.0, 852.0], [1172.0, 859.5], [1198.0, 878.5], [1199.0, 794.0], [1192.0, 882.0], [1193.0, 804.0], [1196.0, 820.0], [1197.0, 812.0], [1191.0, 799.0], [1212.0, 790.0], [1213.0, 857.0], [1214.0, 804.0], [1203.0, 824.0], [1152.0, 820.0], [1154.0, 850.0], [1160.0, 849.0], [1183.0, 811.0], [1223.0, 780.0], [1263.0, 318.0], [1216.0, 786.0], [1241.0, 796.0], [1236.0, 769.0], [1259.0, 783.0], [1222.0, 787.5], [1224.0, 773.0], [1231.0, 786.0], [1229.0, 814.0], [1275.0, 804.0], [1266.0, 820.0], [1218.0, 784.0], [1220.0, 794.0], [1227.0, 787.0], [1225.0, 810.0], [1353.0, 779.0], [1350.0, 776.0], [493.0, 672.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1353.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 517.3333333333334, "minX": 1.75235412E12, "maxY": 686.15, "series": [{"data": [[1.75235418E12, 517.3333333333334], [1.75235412E12, 686.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235418E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 534.0, "minX": 1.75235412E12, "maxY": 669.4833333333333, "series": [{"data": [[1.75235418E12, 534.0], [1.75235412E12, 669.4833333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235418E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 534.0, "minX": 1.75235412E12, "maxY": 669.4833333333333, "series": [{"data": [[1.75235418E12, 534.0], [1.75235412E12, 669.4833333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235418E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 534.0, "minX": 1.75235412E12, "maxY": 669.4833333333333, "series": [{"data": [[1.75235418E12, 534.0], [1.75235412E12, 669.4833333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235418E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

