/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 2967.0, "series": [{"data": [[0.0, 0.0], [0.1, 2.0], [0.2, 3.0], [0.3, 4.0], [0.4, 4.0], [0.5, 5.0], [0.6, 6.0], [0.7, 9.0], [0.8, 13.0], [0.9, 20.0], [1.0, 28.0], [1.1, 37.0], [1.2, 45.0], [1.3, 50.0], [1.4, 54.0], [1.5, 56.0], [1.6, 57.0], [1.7, 58.0], [1.8, 60.0], [1.9, 61.0], [2.0, 63.0], [2.1, 64.0], [2.2, 65.0], [2.3, 66.0], [2.4, 67.0], [2.5, 68.0], [2.6, 70.0], [2.7, 72.0], [2.8, 75.0], [2.9, 78.0], [3.0, 82.0], [3.1, 85.0], [3.2, 89.0], [3.3, 92.0], [3.4, 94.0], [3.5, 96.0], [3.6, 97.0], [3.7, 98.0], [3.8, 99.0], [3.9, 100.0], [4.0, 100.0], [4.1, 101.0], [4.2, 102.0], [4.3, 103.0], [4.4, 105.0], [4.5, 105.0], [4.6, 106.0], [4.7, 107.0], [4.8, 108.0], [4.9, 109.0], [5.0, 110.0], [5.1, 111.0], [5.2, 112.0], [5.3, 114.0], [5.4, 115.0], [5.5, 116.0], [5.6, 117.0], [5.7, 118.0], [5.8, 120.0], [5.9, 122.0], [6.0, 124.0], [6.1, 125.0], [6.2, 127.0], [6.3, 129.0], [6.4, 131.0], [6.5, 132.0], [6.6, 134.0], [6.7, 137.0], [6.8, 143.0], [6.9, 149.0], [7.0, 153.0], [7.1, 156.0], [7.2, 160.0], [7.3, 163.0], [7.4, 165.0], [7.5, 168.0], [7.6, 170.0], [7.7, 173.0], [7.8, 174.0], [7.9, 176.0], [8.0, 177.0], [8.1, 180.0], [8.2, 182.0], [8.3, 185.0], [8.4, 187.0], [8.5, 188.0], [8.6, 189.0], [8.7, 191.0], [8.8, 192.0], [8.9, 193.0], [9.0, 194.0], [9.1, 195.0], [9.2, 196.0], [9.3, 196.0], [9.4, 197.0], [9.5, 198.0], [9.6, 199.0], [9.7, 200.0], [9.8, 200.0], [9.9, 201.0], [10.0, 202.0], [10.1, 202.0], [10.2, 203.0], [10.3, 204.0], [10.4, 205.0], [10.5, 206.0], [10.6, 208.0], [10.7, 209.0], [10.8, 210.0], [10.9, 210.0], [11.0, 211.0], [11.1, 212.0], [11.2, 212.0], [11.3, 213.0], [11.4, 214.0], [11.5, 215.0], [11.6, 215.0], [11.7, 216.0], [11.8, 216.0], [11.9, 217.0], [12.0, 217.0], [12.1, 218.0], [12.2, 218.0], [12.3, 219.0], [12.4, 220.0], [12.5, 220.0], [12.6, 221.0], [12.7, 221.0], [12.8, 222.0], [12.9, 222.0], [13.0, 223.0], [13.1, 224.0], [13.2, 224.0], [13.3, 225.0], [13.4, 225.0], [13.5, 226.0], [13.6, 227.0], [13.7, 227.0], [13.8, 228.0], [13.9, 228.0], [14.0, 229.0], [14.1, 230.0], [14.2, 231.0], [14.3, 232.0], [14.4, 232.0], [14.5, 233.0], [14.6, 234.0], [14.7, 236.0], [14.8, 237.0], [14.9, 238.0], [15.0, 239.0], [15.1, 241.0], [15.2, 243.0], [15.3, 244.0], [15.4, 246.0], [15.5, 247.0], [15.6, 249.0], [15.7, 251.0], [15.8, 252.0], [15.9, 253.0], [16.0, 254.0], [16.1, 256.0], [16.2, 257.0], [16.3, 258.0], [16.4, 259.0], [16.5, 260.0], [16.6, 260.0], [16.7, 261.0], [16.8, 262.0], [16.9, 262.0], [17.0, 262.0], [17.1, 263.0], [17.2, 263.0], [17.3, 263.0], [17.4, 264.0], [17.5, 264.0], [17.6, 264.0], [17.7, 265.0], [17.8, 265.0], [17.9, 265.0], [18.0, 266.0], [18.1, 266.0], [18.2, 267.0], [18.3, 267.0], [18.4, 267.0], [18.5, 268.0], [18.6, 268.0], [18.7, 268.0], [18.8, 269.0], [18.9, 269.0], [19.0, 269.0], [19.1, 270.0], [19.2, 270.0], [19.3, 270.0], [19.4, 270.0], [19.5, 271.0], [19.6, 271.0], [19.7, 271.0], [19.8, 272.0], [19.9, 272.0], [20.0, 272.0], [20.1, 272.0], [20.2, 273.0], [20.3, 273.0], [20.4, 273.0], [20.5, 274.0], [20.6, 274.0], [20.7, 274.0], [20.8, 274.0], [20.9, 275.0], [21.0, 275.0], [21.1, 275.0], [21.2, 275.0], [21.3, 276.0], [21.4, 276.0], [21.5, 276.0], [21.6, 276.0], [21.7, 277.0], [21.8, 277.0], [21.9, 277.0], [22.0, 277.0], [22.1, 278.0], [22.2, 278.0], [22.3, 278.0], [22.4, 278.0], [22.5, 279.0], [22.6, 279.0], [22.7, 279.0], [22.8, 279.0], [22.9, 280.0], [23.0, 280.0], [23.1, 280.0], [23.2, 280.0], [23.3, 281.0], [23.4, 281.0], [23.5, 281.0], [23.6, 281.0], [23.7, 281.0], [23.8, 282.0], [23.9, 282.0], [24.0, 282.0], [24.1, 282.0], [24.2, 283.0], [24.3, 283.0], [24.4, 283.0], [24.5, 284.0], [24.6, 284.0], [24.7, 284.0], [24.8, 284.0], [24.9, 285.0], [25.0, 285.0], [25.1, 285.0], [25.2, 285.0], [25.3, 286.0], [25.4, 286.0], [25.5, 286.0], [25.6, 287.0], [25.7, 287.0], [25.8, 287.0], [25.9, 288.0], [26.0, 288.0], [26.1, 288.0], [26.2, 288.0], [26.3, 289.0], [26.4, 289.0], [26.5, 289.0], [26.6, 289.0], [26.7, 290.0], [26.8, 290.0], [26.9, 290.0], [27.0, 290.0], [27.1, 290.0], [27.2, 291.0], [27.3, 291.0], [27.4, 291.0], [27.5, 292.0], [27.6, 292.0], [27.7, 292.0], [27.8, 292.0], [27.9, 293.0], [28.0, 293.0], [28.1, 293.0], [28.2, 293.0], [28.3, 294.0], [28.4, 294.0], [28.5, 294.0], [28.6, 294.0], [28.7, 295.0], [28.8, 295.0], [28.9, 295.0], [29.0, 295.0], [29.1, 295.0], [29.2, 296.0], [29.3, 296.0], [29.4, 296.0], [29.5, 296.0], [29.6, 297.0], [29.7, 297.0], [29.8, 297.0], [29.9, 297.0], [30.0, 298.0], [30.1, 298.0], [30.2, 298.0], [30.3, 298.0], [30.4, 299.0], [30.5, 299.0], [30.6, 299.0], [30.7, 299.0], [30.8, 300.0], [30.9, 300.0], [31.0, 300.0], [31.1, 300.0], [31.2, 301.0], [31.3, 301.0], [31.4, 301.0], [31.5, 301.0], [31.6, 302.0], [31.7, 302.0], [31.8, 302.0], [31.9, 302.0], [32.0, 303.0], [32.1, 303.0], [32.2, 303.0], [32.3, 303.0], [32.4, 303.0], [32.5, 304.0], [32.6, 304.0], [32.7, 304.0], [32.8, 304.0], [32.9, 304.0], [33.0, 305.0], [33.1, 305.0], [33.2, 305.0], [33.3, 305.0], [33.4, 305.0], [33.5, 306.0], [33.6, 306.0], [33.7, 306.0], [33.8, 306.0], [33.9, 306.0], [34.0, 306.0], [34.1, 307.0], [34.2, 307.0], [34.3, 307.0], [34.4, 307.0], [34.5, 307.0], [34.6, 307.0], [34.7, 308.0], [34.8, 308.0], [34.9, 308.0], [35.0, 308.0], [35.1, 308.0], [35.2, 308.0], [35.3, 309.0], [35.4, 309.0], [35.5, 309.0], [35.6, 309.0], [35.7, 309.0], [35.8, 309.0], [35.9, 310.0], [36.0, 310.0], [36.1, 310.0], [36.2, 310.0], [36.3, 310.0], [36.4, 311.0], [36.5, 311.0], [36.6, 311.0], [36.7, 311.0], [36.8, 311.0], [36.9, 311.0], [37.0, 312.0], [37.1, 312.0], [37.2, 312.0], [37.3, 312.0], [37.4, 312.0], [37.5, 312.0], [37.6, 313.0], [37.7, 313.0], [37.8, 313.0], [37.9, 313.0], [38.0, 313.0], [38.1, 313.0], [38.2, 313.0], [38.3, 314.0], [38.4, 314.0], [38.5, 314.0], [38.6, 314.0], [38.7, 314.0], [38.8, 314.0], [38.9, 315.0], [39.0, 315.0], [39.1, 315.0], [39.2, 315.0], [39.3, 315.0], [39.4, 315.0], [39.5, 315.0], [39.6, 316.0], [39.7, 316.0], [39.8, 316.0], [39.9, 316.0], [40.0, 316.0], [40.1, 316.0], [40.2, 317.0], [40.3, 317.0], [40.4, 317.0], [40.5, 317.0], [40.6, 317.0], [40.7, 317.0], [40.8, 317.0], [40.9, 318.0], [41.0, 318.0], [41.1, 318.0], [41.2, 318.0], [41.3, 318.0], [41.4, 318.0], [41.5, 319.0], [41.6, 319.0], [41.7, 319.0], [41.8, 319.0], [41.9, 319.0], [42.0, 319.0], [42.1, 319.0], [42.2, 320.0], [42.3, 320.0], [42.4, 320.0], [42.5, 320.0], [42.6, 320.0], [42.7, 320.0], [42.8, 320.0], [42.9, 321.0], [43.0, 321.0], [43.1, 321.0], [43.2, 321.0], [43.3, 321.0], [43.4, 321.0], [43.5, 321.0], [43.6, 322.0], [43.7, 322.0], [43.8, 322.0], [43.9, 322.0], [44.0, 322.0], [44.1, 322.0], [44.2, 322.0], [44.3, 323.0], [44.4, 323.0], [44.5, 323.0], [44.6, 323.0], [44.7, 323.0], [44.8, 323.0], [44.9, 323.0], [45.0, 323.0], [45.1, 324.0], [45.2, 324.0], [45.3, 324.0], [45.4, 324.0], [45.5, 324.0], [45.6, 324.0], [45.7, 324.0], [45.8, 325.0], [45.9, 325.0], [46.0, 325.0], [46.1, 325.0], [46.2, 325.0], [46.3, 325.0], [46.4, 325.0], [46.5, 325.0], [46.6, 326.0], [46.7, 326.0], [46.8, 326.0], [46.9, 326.0], [47.0, 326.0], [47.1, 326.0], [47.2, 326.0], [47.3, 327.0], [47.4, 327.0], [47.5, 327.0], [47.6, 327.0], [47.7, 327.0], [47.8, 327.0], [47.9, 328.0], [48.0, 328.0], [48.1, 328.0], [48.2, 328.0], [48.3, 328.0], [48.4, 328.0], [48.5, 329.0], [48.6, 329.0], [48.7, 329.0], [48.8, 329.0], [48.9, 329.0], [49.0, 329.0], [49.1, 329.0], [49.2, 330.0], [49.3, 330.0], [49.4, 330.0], [49.5, 330.0], [49.6, 330.0], [49.7, 330.0], [49.8, 330.0], [49.9, 331.0], [50.0, 331.0], [50.1, 331.0], [50.2, 331.0], [50.3, 331.0], [50.4, 332.0], [50.5, 332.0], [50.6, 332.0], [50.7, 332.0], [50.8, 332.0], [50.9, 332.0], [51.0, 333.0], [51.1, 333.0], [51.2, 333.0], [51.3, 333.0], [51.4, 333.0], [51.5, 333.0], [51.6, 334.0], [51.7, 334.0], [51.8, 334.0], [51.9, 334.0], [52.0, 334.0], [52.1, 334.0], [52.2, 335.0], [52.3, 335.0], [52.4, 335.0], [52.5, 335.0], [52.6, 335.0], [52.7, 335.0], [52.8, 335.0], [52.9, 336.0], [53.0, 336.0], [53.1, 336.0], [53.2, 336.0], [53.3, 336.0], [53.4, 337.0], [53.5, 337.0], [53.6, 337.0], [53.7, 337.0], [53.8, 337.0], [53.9, 337.0], [54.0, 338.0], [54.1, 338.0], [54.2, 338.0], [54.3, 338.0], [54.4, 338.0], [54.5, 339.0], [54.6, 339.0], [54.7, 339.0], [54.8, 339.0], [54.9, 339.0], [55.0, 340.0], [55.1, 340.0], [55.2, 340.0], [55.3, 340.0], [55.4, 340.0], [55.5, 340.0], [55.6, 341.0], [55.7, 341.0], [55.8, 341.0], [55.9, 341.0], [56.0, 342.0], [56.1, 342.0], [56.2, 342.0], [56.3, 342.0], [56.4, 342.0], [56.5, 342.0], [56.6, 343.0], [56.7, 343.0], [56.8, 343.0], [56.9, 343.0], [57.0, 343.0], [57.1, 344.0], [57.2, 344.0], [57.3, 344.0], [57.4, 344.0], [57.5, 344.0], [57.6, 344.0], [57.7, 344.0], [57.8, 345.0], [57.9, 345.0], [58.0, 345.0], [58.1, 345.0], [58.2, 345.0], [58.3, 346.0], [58.4, 346.0], [58.5, 346.0], [58.6, 346.0], [58.7, 346.0], [58.8, 346.0], [58.9, 347.0], [59.0, 347.0], [59.1, 347.0], [59.2, 347.0], [59.3, 347.0], [59.4, 348.0], [59.5, 348.0], [59.6, 348.0], [59.7, 348.0], [59.8, 348.0], [59.9, 348.0], [60.0, 349.0], [60.1, 349.0], [60.2, 349.0], [60.3, 349.0], [60.4, 349.0], [60.5, 350.0], [60.6, 350.0], [60.7, 350.0], [60.8, 350.0], [60.9, 350.0], [61.0, 351.0], [61.1, 351.0], [61.2, 351.0], [61.3, 351.0], [61.4, 352.0], [61.5, 352.0], [61.6, 352.0], [61.7, 352.0], [61.8, 353.0], [61.9, 353.0], [62.0, 353.0], [62.1, 353.0], [62.2, 354.0], [62.3, 354.0], [62.4, 354.0], [62.5, 354.0], [62.6, 355.0], [62.7, 355.0], [62.8, 355.0], [62.9, 355.0], [63.0, 356.0], [63.1, 356.0], [63.2, 356.0], [63.3, 356.0], [63.4, 357.0], [63.5, 357.0], [63.6, 357.0], [63.7, 357.0], [63.8, 358.0], [63.9, 358.0], [64.0, 358.0], [64.1, 358.0], [64.2, 359.0], [64.3, 359.0], [64.4, 359.0], [64.5, 359.0], [64.6, 360.0], [64.7, 360.0], [64.8, 360.0], [64.9, 360.0], [65.0, 361.0], [65.1, 361.0], [65.2, 361.0], [65.3, 361.0], [65.4, 362.0], [65.5, 362.0], [65.6, 362.0], [65.7, 363.0], [65.8, 363.0], [65.9, 363.0], [66.0, 363.0], [66.1, 363.0], [66.2, 364.0], [66.3, 364.0], [66.4, 364.0], [66.5, 365.0], [66.6, 365.0], [66.7, 365.0], [66.8, 366.0], [66.9, 366.0], [67.0, 366.0], [67.1, 366.0], [67.2, 367.0], [67.3, 367.0], [67.4, 367.0], [67.5, 368.0], [67.6, 368.0], [67.7, 368.0], [67.8, 368.0], [67.9, 369.0], [68.0, 369.0], [68.1, 369.0], [68.2, 369.0], [68.3, 370.0], [68.4, 370.0], [68.5, 370.0], [68.6, 371.0], [68.7, 371.0], [68.8, 371.0], [68.9, 371.0], [69.0, 371.0], [69.1, 372.0], [69.2, 372.0], [69.3, 372.0], [69.4, 372.0], [69.5, 373.0], [69.6, 373.0], [69.7, 373.0], [69.8, 373.0], [69.9, 374.0], [70.0, 374.0], [70.1, 374.0], [70.2, 374.0], [70.3, 375.0], [70.4, 375.0], [70.5, 375.0], [70.6, 375.0], [70.7, 376.0], [70.8, 376.0], [70.9, 376.0], [71.0, 376.0], [71.1, 377.0], [71.2, 377.0], [71.3, 377.0], [71.4, 377.0], [71.5, 378.0], [71.6, 378.0], [71.7, 378.0], [71.8, 378.0], [71.9, 378.0], [72.0, 379.0], [72.1, 379.0], [72.2, 379.0], [72.3, 380.0], [72.4, 380.0], [72.5, 380.0], [72.6, 380.0], [72.7, 381.0], [72.8, 381.0], [72.9, 381.0], [73.0, 381.0], [73.1, 382.0], [73.2, 382.0], [73.3, 382.0], [73.4, 383.0], [73.5, 383.0], [73.6, 383.0], [73.7, 384.0], [73.8, 384.0], [73.9, 384.0], [74.0, 384.0], [74.1, 385.0], [74.2, 385.0], [74.3, 385.0], [74.4, 385.0], [74.5, 386.0], [74.6, 386.0], [74.7, 386.0], [74.8, 387.0], [74.9, 387.0], [75.0, 388.0], [75.1, 388.0], [75.2, 388.0], [75.3, 389.0], [75.4, 389.0], [75.5, 389.0], [75.6, 389.0], [75.7, 390.0], [75.8, 390.0], [75.9, 390.0], [76.0, 390.0], [76.1, 391.0], [76.2, 391.0], [76.3, 391.0], [76.4, 391.0], [76.5, 392.0], [76.6, 392.0], [76.7, 392.0], [76.8, 392.0], [76.9, 393.0], [77.0, 393.0], [77.1, 393.0], [77.2, 393.0], [77.3, 394.0], [77.4, 394.0], [77.5, 394.0], [77.6, 395.0], [77.7, 395.0], [77.8, 395.0], [77.9, 395.0], [78.0, 396.0], [78.1, 396.0], [78.2, 396.0], [78.3, 396.0], [78.4, 396.0], [78.5, 397.0], [78.6, 397.0], [78.7, 397.0], [78.8, 398.0], [78.9, 398.0], [79.0, 398.0], [79.1, 398.0], [79.2, 399.0], [79.3, 399.0], [79.4, 399.0], [79.5, 399.0], [79.6, 400.0], [79.7, 400.0], [79.8, 400.0], [79.9, 401.0], [80.0, 401.0], [80.1, 401.0], [80.2, 402.0], [80.3, 402.0], [80.4, 402.0], [80.5, 403.0], [80.6, 403.0], [80.7, 403.0], [80.8, 404.0], [80.9, 404.0], [81.0, 404.0], [81.1, 405.0], [81.2, 405.0], [81.3, 406.0], [81.4, 406.0], [81.5, 406.0], [81.6, 407.0], [81.7, 407.0], [81.8, 408.0], [81.9, 408.0], [82.0, 408.0], [82.1, 409.0], [82.2, 409.0], [82.3, 410.0], [82.4, 410.0], [82.5, 410.0], [82.6, 411.0], [82.7, 411.0], [82.8, 412.0], [82.9, 412.0], [83.0, 412.0], [83.1, 413.0], [83.2, 413.0], [83.3, 414.0], [83.4, 414.0], [83.5, 415.0], [83.6, 415.0], [83.7, 415.0], [83.8, 416.0], [83.9, 416.0], [84.0, 417.0], [84.1, 417.0], [84.2, 417.0], [84.3, 418.0], [84.4, 418.0], [84.5, 419.0], [84.6, 419.0], [84.7, 419.0], [84.8, 420.0], [84.9, 420.0], [85.0, 420.0], [85.1, 421.0], [85.2, 421.0], [85.3, 422.0], [85.4, 422.0], [85.5, 422.0], [85.6, 423.0], [85.7, 423.0], [85.8, 423.0], [85.9, 424.0], [86.0, 424.0], [86.1, 425.0], [86.2, 425.0], [86.3, 426.0], [86.4, 426.0], [86.5, 427.0], [86.6, 427.0], [86.7, 428.0], [86.8, 428.0], [86.9, 429.0], [87.0, 429.0], [87.1, 430.0], [87.2, 431.0], [87.3, 431.0], [87.4, 432.0], [87.5, 433.0], [87.6, 433.0], [87.7, 434.0], [87.8, 435.0], [87.9, 435.0], [88.0, 436.0], [88.1, 437.0], [88.2, 437.0], [88.3, 438.0], [88.4, 438.0], [88.5, 439.0], [88.6, 439.0], [88.7, 440.0], [88.8, 440.0], [88.9, 441.0], [89.0, 442.0], [89.1, 442.0], [89.2, 443.0], [89.3, 443.0], [89.4, 444.0], [89.5, 445.0], [89.6, 445.0], [89.7, 446.0], [89.8, 447.0], [89.9, 448.0], [90.0, 449.0], [90.1, 450.0], [90.2, 451.0], [90.3, 452.0], [90.4, 453.0], [90.5, 454.0], [90.6, 455.0], [90.7, 456.0], [90.8, 458.0], [90.9, 459.0], [91.0, 460.0], [91.1, 461.0], [91.2, 462.0], [91.3, 463.0], [91.4, 464.0], [91.5, 464.0], [91.6, 465.0], [91.7, 466.0], [91.8, 467.0], [91.9, 468.0], [92.0, 469.0], [92.1, 470.0], [92.2, 471.0], [92.3, 472.0], [92.4, 473.0], [92.5, 474.0], [92.6, 475.0], [92.7, 476.0], [92.8, 477.0], [92.9, 479.0], [93.0, 480.0], [93.1, 481.0], [93.2, 482.0], [93.3, 483.0], [93.4, 484.0], [93.5, 485.0], [93.6, 487.0], [93.7, 488.0], [93.8, 489.0], [93.9, 490.0], [94.0, 491.0], [94.1, 493.0], [94.2, 494.0], [94.3, 496.0], [94.4, 498.0], [94.5, 500.0], [94.6, 502.0], [94.7, 504.0], [94.8, 506.0], [94.9, 508.0], [95.0, 510.0], [95.1, 512.0], [95.2, 514.0], [95.3, 517.0], [95.4, 518.0], [95.5, 521.0], [95.6, 523.0], [95.7, 526.0], [95.8, 529.0], [95.9, 533.0], [96.0, 535.0], [96.1, 538.0], [96.2, 541.0], [96.3, 544.0], [96.4, 547.0], [96.5, 550.0], [96.6, 553.0], [96.7, 557.0], [96.8, 560.0], [96.9, 565.0], [97.0, 570.0], [97.1, 575.0], [97.2, 585.0], [97.3, 595.0], [97.4, 602.0], [97.5, 611.0], [97.6, 635.0], [97.7, 660.0], [97.8, 685.0], [97.9, 722.0], [98.0, 765.0], [98.1, 784.0], [98.2, 814.0], [98.3, 840.0], [98.4, 864.0], [98.5, 882.0], [98.6, 896.0], [98.7, 906.0], [98.8, 933.0], [98.9, 990.0], [99.0, 1025.0], [99.1, 1064.0], [99.2, 1122.0], [99.3, 1193.0], [99.4, 1225.0], [99.5, 1303.0], [99.6, 1389.0], [99.7, 1468.0], [99.8, 1533.0], [99.9, 1625.0], [100.0, 2967.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 84556.0, "series": [{"data": [[0.0, 6699.0], [2200.0, 1.0], [600.0, 842.0], [2400.0, 1.0], [2500.0, 1.0], [700.0, 554.0], [2900.0, 2.0], [200.0, 36544.0], [800.0, 828.0], [900.0, 489.0], [1000.0, 441.0], [1100.0, 230.0], [300.0, 84556.0], [1200.0, 314.0], [1300.0, 200.0], [1400.0, 220.0], [1500.0, 238.0], [100.0, 10090.0], [400.0, 25927.0], [1600.0, 98.0], [1700.0, 91.0], [1800.0, 21.0], [500.0, 5001.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 163877.0, "series": [{"data": [[0.0, 163877.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 9034.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 452.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 25.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 812.6552719200901, "minX": 1.75235388E12, "maxY": 994.4949810801969, "series": [{"data": [[1.75235388E12, 994.4949810801969], [1.75235394E12, 812.6552719200901]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235394E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 1253.0, "series": [{"data": [[2.0, 13.0], [3.0, 8.0], [4.0, 12.0], [5.0, 11.0], [6.0, 6.0], [7.0, 2.0], [9.0, 7.371584699453554], [10.0, 184.33333333333334], [11.0, 369.33333333333337], [12.0, 1220.0], [13.0, 148.9090909090909], [14.0, 176.0], [15.0, 106.4], [16.0, 78.42857142857143], [17.0, 94.33333333333333], [18.0, 96.83333333333333], [19.0, 161.75], [20.0, 111.50000000000001], [21.0, 85.375], [22.0, 117.91666666666667], [23.0, 109.71428571428571], [24.0, 102.8125], [25.0, 106.375], [26.0, 80.0], [27.0, 59.2], [28.0, 110.87500000000001], [29.0, 177.2], [30.0, 223.25], [31.0, 131.42857142857144], [33.0, 131.42857142857142], [32.0, 227.25], [35.0, 105.94444444444443], [34.0, 134.71428571428572], [37.0, 155.5], [36.0, 307.3333333333333], [39.0, 235.25], [38.0, 185.8], [41.0, 234.75], [40.0, 191.4], [43.0, 144.94444444444443], [42.0, 237.75], [45.0, 124.25], [44.0, 196.0], [47.0, 241.5], [46.0, 241.75], [49.0, 482.0], [48.0, 242.75], [51.0, 245.75], [50.0, 322.6666666666667], [53.0, 486.5], [52.0, 327.3333333333333], [55.0, 336.6666666666667], [54.0, 487.0], [57.0, 402.8], [59.0, 338.0], [58.0, 338.3333333333333], [61.0, 209.4], [60.0, 505.0], [63.0, 512.0], [62.0, 207.2], [67.0, 213.2], [66.0, 259.25], [65.0, 175.16666666666666], [64.0, 515.0], [71.0, 211.6], [70.0, 263.5], [69.0, 522.5], [68.0, 522.5], [75.0, 213.8], [74.0, 1041.0], [73.0, 211.6], [72.0, 177.83333333333334], [79.0, 358.6666666666667], [78.0, 359.0], [77.0, 357.6666666666667], [76.0, 356.0], [83.0, 181.16666666666669], [82.0, 102.0], [81.0, 157.57142857142858], [80.0, 359.6666666666667], [86.0, 70.25], [85.0, 537.5], [84.0, 218.0], [91.0, 540.5], [90.0, 360.0], [89.0, 74.5], [88.0, 272.1111111111111], [95.0, 347.5], [93.0, 7.0], [92.0, 80.25], [99.0, 1068.0], [98.0, 157.5], [97.0, 1070.0], [96.0, 359.0], [103.0, 715.6666666666666], [101.0, 169.5], [100.0, 225.2], [107.0, 361.3333333333333], [106.0, 363.0], [105.0, 167.5], [104.0, 363.0], [111.0, 12.0], [110.0, 1072.0], [108.0, 333.0], [115.0, 362.0], [114.0, 199.0], [113.0, 158.57142857142858], [112.0, 324.625], [119.0, 214.5], [118.0, 271.25], [117.0, 213.0], [116.0, 63.714285714285715], [123.0, 272.5], [122.0, 212.0], [121.0, 538.0], [120.0, 272.75], [127.0, 536.5], [126.0, 67.42857142857143], [125.0, 360.66666666666663], [124.0, 114.25], [135.0, 485.4], [132.0, 23.0], [131.0, 110.8], [130.0, 1064.0], [129.0, 71.42857142857142], [128.0, 218.0], [143.0, 85.0], [142.0, 156.0], [141.0, 168.0], [140.0, 138.0], [139.0, 132.0], [138.0, 49.666666666666664], [137.0, 164.0], [151.0, 182.0], [150.0, 401.25], [149.0, 92.5], [148.0, 175.0], [146.0, 341.5], [144.0, 89.0], [159.0, 526.0], [158.0, 207.0], [157.0, 255.0], [155.0, 1046.0], [154.0, 183.0], [153.0, 275.0], [152.0, 1045.0], [167.0, 82.66666666666667], [166.0, 229.0], [165.0, 297.0], [164.0, 229.0], [163.0, 148.25], [162.0, 208.0], [161.0, 7.0], [160.0, 107.5], [175.0, 1050.0], [174.0, 132.5], [173.0, 436.6666666666667], [171.0, 128.0], [170.0, 127.0], [169.0, 587.0], [168.0, 123.0], [183.0, 122.66666666666667], [182.0, 158.5], [181.0, 1056.0], [180.0, 603.0], [179.0, 147.5], [178.0, 531.5], [177.0, 272.0], [176.0, 132.0], [191.0, 366.0], [190.0, 839.5], [188.0, 68.0], [187.0, 203.0], [186.0, 313.0], [185.0, 65.0], [184.0, 685.5], [199.0, 232.0], [197.0, 612.0], [196.0, 227.5], [194.0, 76.0], [193.0, 366.0], [192.0, 76.0], [205.0, 81.0], [204.0, 573.0], [203.0, 352.5], [201.0, 402.0], [200.0, 82.0], [213.0, 1064.0], [212.0, 248.5], [211.0, 80.0], [210.0, 420.0], [209.0, 550.5], [223.0, 316.5], [220.0, 99.0], [219.0, 348.5], [231.0, 1063.0], [230.0, 405.75], [229.0, 581.5], [227.0, 435.0], [239.0, 435.0], [238.0, 110.0], [237.0, 480.0], [235.0, 441.0], [233.0, 440.0], [232.0, 112.0], [247.0, 398.6666666666667], [244.0, 111.0], [243.0, 1060.0], [242.0, 272.5], [240.0, 635.0], [255.0, 462.25], [254.0, 465.0], [253.0, 17.0], [252.0, 442.0], [250.0, 15.0], [249.0, 112.0], [269.0, 116.0], [270.0, 1060.0], [268.0, 28.0], [259.0, 288.5], [258.0, 21.0], [257.0, 114.0], [267.0, 473.0], [266.0, 70.5], [264.0, 858.0], [262.0, 468.0], [261.0, 114.0], [260.0, 22.0], [275.0, 473.0], [285.0, 350.0], [287.0, 306.0], [284.0, 554.3333333333334], [274.0, 37.0], [273.0, 116.0], [272.0, 252.0], [281.0, 41.0], [280.0, 553.0], [279.0, 36.0], [278.0, 659.0], [277.0, 36.0], [276.0, 1062.0], [301.0, 1065.0], [299.0, 507.0], [298.0, 85.5], [297.0, 554.5], [295.0, 503.0], [288.0, 39.0], [294.0, 85.0], [292.0, 575.0], [290.0, 41.0], [289.0, 1067.0], [317.0, 325.5], [318.0, 44.0], [316.0, 519.0], [307.0, 511.0], [304.0, 336.75], [315.0, 1071.0], [314.0, 596.5], [313.0, 545.6666666666666], [311.0, 101.66666666666667], [309.0, 44.0], [308.0, 362.0], [333.0, 294.0], [334.0, 117.0], [332.0, 435.33333333333337], [330.0, 461.25], [329.0, 45.0], [327.0, 533.0], [326.0, 44.0], [325.0, 578.3333333333334], [322.0, 547.0], [320.0, 416.0], [350.0, 315.6666666666667], [351.0, 398.0], [349.0, 567.0], [348.0, 389.66666666666663], [347.0, 228.0], [346.0, 566.0], [345.0, 303.5], [344.0, 353.5], [343.0, 45.0], [337.0, 473.25], [339.0, 559.0], [338.0, 663.0], [342.0, 560.0], [341.0, 563.5], [365.0, 141.22727272727272], [364.0, 71.66666666666666], [354.0, 566.0], [353.0, 408.5], [352.0, 459.66666666666663], [366.0, 363.375], [367.0, 114.77777777777777], [361.0, 45.0], [360.0, 433.00000000000006], [359.0, 47.0], [358.0, 129.33333333333334], [356.0, 642.3333333333334], [369.0, 90.14285714285714], [368.0, 43.08333333333333], [370.0, 97.6], [371.0, 34.6875], [372.0, 14.5], [373.0, 59.849999999999994], [374.0, 211.57142857142858], [375.0, 72.9375], [376.0, 72.68750000000001], [378.0, 143.8], [377.0, 1077.0], [380.0, 129.10000000000002], [381.0, 27.5], [382.0, 25.0], [383.0, 266.5], [385.0, 31.25], [384.0, 320.2], [386.0, 330.4], [387.0, 93.55555555555556], [388.0, 143.42857142857142], [389.0, 381.0], [390.0, 214.66666666666666], [391.0, 150.5], [392.0, 172.5], [399.0, 240.15384615384616], [396.0, 355.0], [397.0, 47.0], [398.0, 91.0], [393.0, 121.16666666666666], [394.0, 67.55555555555556], [395.0, 215.79999999999998], [403.0, 101.99792531120333], [400.0, 105.18131868131869], [407.0, 1080.0], [406.0, 271.3333333333333], [405.0, 249.5], [404.0, 227.5], [401.0, 137.16176470588232], [402.0, 75.41666666666667], [415.0, 85.22222222222223], [408.0, 298.1666666666667], [414.0, 186.33333333333331], [413.0, 371.5], [412.0, 195.00000000000003], [411.0, 227.0], [410.0, 523.0], [409.0, 157.0], [429.0, 485.6666666666667], [431.0, 198.5], [430.0, 601.0], [428.0, 169.2], [419.0, 266.2], [418.0, 147.28571428571428], [417.0, 295.625], [416.0, 456.7142857142857], [426.0, 273.0], [427.0, 273.0], [425.0, 259.7692307692308], [424.0, 111.0], [423.0, 384.5], [422.0, 169.25], [421.0, 250.28571428571428], [420.0, 257.4], [446.0, 121.5], [445.0, 318.33333333333337], [432.0, 275.125], [433.0, 391.0], [435.0, 507.3333333333333], [434.0, 691.0], [444.0, 357.6666666666667], [443.0, 168.25], [442.0, 254.33333333333334], [441.0, 135.5], [447.0, 453.3333333333333], [440.0, 1078.0], [439.0, 279.8], [438.0, 193.75], [437.0, 250.74999999999997], [436.0, 217.0], [462.0, 216.8], [463.0, 404.6], [461.0, 336.8571428571429], [460.0, 288.0], [459.0, 314.5], [458.0, 4.0], [457.0, 371.8333333333333], [456.0, 103.0], [455.0, 207.16666666666666], [448.0, 382.0], [449.0, 237.0], [451.0, 197.42857142857144], [450.0, 365.75], [453.0, 378.3333333333333], [452.0, 211.5], [477.0, 434.3333333333333], [478.0, 219.33333333333334], [476.0, 233.66666666666666], [467.0, 353.0], [465.0, 7.0], [466.0, 300.5], [464.0, 294.0], [475.0, 163.4], [474.0, 321.75], [472.0, 9.0], [473.0, 611.0], [479.0, 1061.0], [471.0, 238.4], [470.0, 12.0], [468.0, 132.2], [469.0, 560.5], [494.0, 7.0], [495.0, 390.0], [492.0, 354.2], [493.0, 274.0], [491.0, 227.75], [490.0, 327.0], [489.0, 247.0], [488.0, 370.5], [485.0, 301.49999999999994], [487.0, 351.0], [486.0, 489.0], [483.0, 6.0], [481.0, 346.0], [482.0, 649.0], [480.0, 286.25], [499.0, 41.75], [509.0, 90.0], [511.0, 5.0], [504.0, 355.5], [510.0, 503.0], [508.0, 4.0], [507.0, 188.25], [506.0, 541.6666666666666], [505.0, 4.0], [503.0, 348.0], [501.0, 180.0], [500.0, 615.25], [502.0, 407.33333333333337], [498.0, 94.0], [497.0, 255.0], [496.0, 230.0], [536.0, 128.5], [531.0, 314.5], [541.0, 346.29999999999995], [515.0, 217.175], [513.0, 419.6], [514.0, 782.5], [512.0, 120.5], [526.0, 379.8], [517.0, 16.0], [516.0, 364.5], [519.0, 187.0], [518.0, 412.8], [524.0, 454.0], [523.0, 5.0], [522.0, 186.0], [521.0, 343.0], [520.0, 316.66666666666663], [543.0, 5.0], [528.0, 749.0], [530.0, 252.33333333333334], [529.0, 248.66666666666666], [538.0, 5.0], [540.0, 708.5], [535.0, 278.25], [534.0, 419.33333333333337], [533.0, 249.25], [532.0, 223.16666666666669], [559.0, 388.0], [572.0, 270.0], [575.0, 410.1666666666667], [560.0, 270.0], [574.0, 295.0], [573.0, 501.0], [568.0, 171.0], [551.0, 1044.0], [550.0, 290.0], [571.0, 1038.0], [570.0, 492.6666666666667], [549.0, 376.25], [547.0, 273.0], [548.0, 890.5], [545.0, 360.5], [546.0, 282.3333333333333], [564.0, 309.75], [562.0, 323.6], [567.0, 883.5], [566.0, 673.0], [561.0, 266.75], [557.0, 66.75], [556.0, 328.7142857142857], [555.0, 7.0], [554.0, 358.8888888888889], [553.0, 5.8], [603.0, 392.0], [605.0, 292.33333333333337], [607.0, 254.0], [596.0, 669.0], [595.0, 449.33333333333337], [594.0, 595.75], [606.0, 765.0], [604.0, 193.25], [602.0, 385.1666666666667], [601.0, 38.0], [599.0, 4.0], [597.0, 136.66666666666666], [591.0, 7.0], [589.0, 709.5], [576.0, 273.0], [578.0, 227.66666666666666], [577.0, 5.2], [583.0, 252.33333333333334], [582.0, 467.5], [581.0, 747.0], [580.0, 375.5], [600.0, 755.5], [579.0, 275.1666666666667], [588.0, 47.5], [586.0, 203.0], [585.0, 750.0], [584.0, 395.0], [587.0, 503.0], [636.0, 251.0], [637.0, 42.333333333333336], [639.0, 664.0], [624.0, 304.0], [638.0, 510.75], [633.0, 360.5], [635.0, 115.0], [634.0, 1026.0], [615.0, 355.0], [614.0, 160.0], [613.0, 128.5], [612.0, 59.0], [609.0, 127.75], [608.0, 487.66666666666663], [610.0, 432.5], [611.0, 1033.0], [631.0, 205.66666666666666], [630.0, 769.0], [629.0, 3.0], [628.0, 205.0], [627.0, 439.0], [626.0, 221.0], [623.0, 386.5], [621.0, 263.0], [620.0, 249.0], [618.0, 5.333333333333333], [619.0, 435.5], [617.0, 261.6666666666667], [616.0, 21.0], [666.0, 7.0], [658.0, 11.5], [669.0, 388.5], [670.0, 527.2352941176471], [671.0, 776.0], [657.0, 7.0], [656.0, 388.5], [668.0, 3.5], [667.0, 635.5], [664.0, 279.5], [647.0, 392.5], [646.0, 498.0], [645.0, 6.0], [643.0, 126.4], [644.0, 112.0], [655.0, 501.0], [642.0, 516.0], [641.0, 497.0], [654.0, 264.66666666666663], [651.0, 262.6], [653.0, 239.0], [650.0, 3.0], [648.0, 198.0], [649.0, 902.0], [663.0, 4.0], [661.0, 4.5], [659.0, 6.5], [696.0, 4.0], [690.0, 28.0], [702.0, 390.5], [701.0, 537.0], [700.0, 76.75], [698.0, 266.0], [697.0, 569.6666666666666], [686.0, 171.0], [687.0, 125.0], [673.0, 234.5], [672.0, 79.66666666666667], [675.0, 283.6], [676.0, 674.0], [674.0, 3.5], [679.0, 4.0], [678.0, 776.0], [677.0, 219.33333333333334], [685.0, 391.0], [683.0, 255.0], [684.0, 127.0], [682.0, 401.25], [681.0, 283.3333333333333], [680.0, 526.6666666666666], [694.0, 348.125], [695.0, 586.0], [693.0, 3.0], [692.0, 255.5], [691.0, 646.3333333333334], [689.0, 214.0], [688.0, 672.0], [703.0, 506.0], [730.0, 6.25], [722.0, 912.25], [735.0, 3.0], [734.0, 5.333333333333333], [732.0, 5.0], [731.0, 402.2], [733.0, 308.8], [715.0, 413.0], [714.0, 336.5], [716.0, 337.0], [719.0, 485.5], [718.0, 511.0], [706.0, 177.33333333333334], [705.0, 152.0], [704.0, 201.0], [709.0, 205.75], [707.0, 398.0], [711.0, 82.0], [728.0, 339.5], [710.0, 116.83333333333334], [713.0, 198.2], [712.0, 266.0], [726.0, 179.33333333333334], [725.0, 513.5], [723.0, 237.75], [724.0, 729.3333333333334], [720.0, 180.66666666666666], [721.0, 1024.0], [753.0, 4.0], [766.0, 5.666666666666666], [765.0, 611.3333333333334], [764.0, 421.0], [763.0, 5.666666666666667], [762.0, 640.25], [761.0, 97.0], [750.0, 233.33333333333334], [751.0, 597.4545454545456], [736.0, 450.71428571428567], [738.0, 3.0], [737.0, 4.5], [741.0, 4.0], [760.0, 544.0], [742.0, 565.6], [740.0, 471.4], [749.0, 260.0], [748.0, 322.5], [745.0, 307.4], [747.0, 811.0], [759.0, 265.5], [758.0, 511.0], [757.0, 255.25], [755.0, 49.0], [754.0, 467.8], [756.0, 185.0], [752.0, 5.5], [767.0, 519.0], [795.0, 297.6666666666667], [787.0, 331.5], [797.0, 4.0], [798.0, 511.5], [799.0, 231.0], [785.0, 325.0], [784.0, 4.0], [796.0, 296.8333333333333], [793.0, 444.7142857142857], [794.0, 582.0645161290321], [775.0, 13.0], [774.0, 7.0], [773.0, 4.5], [772.0, 346.5], [771.0, 70.66666666666666], [770.0, 53.25], [768.0, 3.0], [783.0, 5.0], [782.0, 4.0], [781.0, 330.5], [780.0, 99.5], [779.0, 428.0], [778.0, 227.5], [777.0, 5.0], [776.0, 4.0], [791.0, 4.0], [790.0, 4.0], [789.0, 181.0], [825.0, 4.0], [828.0, 78.0], [830.0, 387.66666666666663], [829.0, 548.0], [831.0, 234.0], [816.0, 523.0], [827.0, 385.0], [826.0, 520.0], [822.0, 7.0], [820.0, 769.0], [818.0, 233.0], [823.0, 551.5384615384615], [817.0, 334.375], [815.0, 372.33333333333337], [801.0, 566.6], [800.0, 374.66666666666663], [803.0, 4.0], [804.0, 538.3333333333334], [802.0, 485.0], [807.0, 428.5], [806.0, 330.6666666666667], [805.0, 4.0], [814.0, 420.33333333333337], [813.0, 225.33333333333334], [812.0, 699.0], [811.0, 189.75], [810.0, 250.0], [809.0, 58.25], [860.0, 815.7142857142857], [855.0, 902.9190751445083], [856.0, 1115.1666666666667], [857.0, 249.0], [839.0, 398.66666666666663], [838.0, 120.5], [836.0, 761.0], [835.0, 5.0], [833.0, 438.7692307692308], [834.0, 562.5], [847.0, 533.0], [845.0, 4.0], [844.0, 521.0], [843.0, 500.75], [841.0, 10.0], [840.0, 232.0], [842.0, 467.5], [858.0, 1033.0], [859.0, 809.4285714285713], [861.0, 676.0], [862.0, 602.6363636363637], [863.0, 918.25], [848.0, 272.5], [851.0, 180.66666666666666], [850.0, 596.1666666666667], [849.0, 356.5], [853.0, 404.52941176470586], [852.0, 342.0], [854.0, 317.5], [870.0, 418.66666666666663], [866.0, 773.25], [864.0, 733.8571428571429], [865.0, 388.0], [879.0, 20.25], [877.0, 511.33333333333337], [878.0, 238.3], [875.0, 188.66666666666666], [876.0, 18.0], [867.0, 602.7142857142857], [868.0, 528.75], [869.0, 259.1428571428571], [871.0, 17.0], [888.0, 494.16666666666663], [889.0, 25.333333333333332], [890.0, 24.75], [891.0, 286.54545454545456], [892.0, 408.6666666666667], [893.0, 430.3333333333333], [894.0, 312.6], [895.0, 318.8], [880.0, 222.2], [881.0, 247.2], [882.0, 297.75], [883.0, 21.666666666666668], [884.0, 359.0], [885.0, 331.0], [887.0, 57.28571428571428], [872.0, 317.2857142857143], [873.0, 526.0], [874.0, 178.57142857142858], [899.0, 29.0], [896.0, 29.166666666666668], [911.0, 93.5625], [908.0, 115.0], [909.0, 972.0], [910.0, 268.25], [906.0, 419.8], [907.0, 79.4], [897.0, 37.0], [898.0, 217.0], [900.0, 484.57142857142856], [901.0, 201.66666666666666], [902.0, 352.16666666666663], [903.0, 144.5], [912.0, 442.77777777777777], [926.0, 91.58333333333333], [927.0, 378.12499999999994], [922.0, 162.125], [923.0, 594.3333333333334], [924.0, 234.83333333333331], [920.0, 359.3333333333333], [921.0, 381.57142857142856], [913.0, 108.14285714285714], [914.0, 36.0], [915.0, 537.5], [916.0, 36.0], [917.0, 36.0], [918.0, 35.5], [919.0, 526.8823529411765], [904.0, 205.875], [905.0, 319.2], [934.0, 43.4], [929.0, 441.3333333333333], [928.0, 156.0], [943.0, 478.00000000000006], [939.0, 320.0], [940.0, 1020.0], [941.0, 344.75], [930.0, 254.16666666666669], [931.0, 42.4], [932.0, 43.0], [933.0, 403.5], [935.0, 42.0], [952.0, 225.57142857142856], [953.0, 270.3636363636363], [954.0, 884.0], [955.0, 105.25], [956.0, 47.0], [957.0, 363.125], [959.0, 735.25], [945.0, 610.3333333333334], [958.0, 1077.0], [946.0, 561.2], [947.0, 50.0], [948.0, 625.3333333333334], [949.0, 208.17647058823528], [950.0, 211.88888888888889], [951.0, 1024.0], [936.0, 526.5], [937.0, 231.0], [967.0, 267.7142857142857], [962.0, 481.0], [960.0, 534.0], [961.0, 799.0], [975.0, 126.06666666666668], [963.0, 429.5], [964.0, 378.0], [966.0, 472.6666666666667], [965.0, 693.3333333333334], [976.0, 315.6666666666667], [986.0, 135.4310954063604], [988.0, 130.5], [990.0, 649.5], [989.0, 566.8], [991.0, 127.25], [984.0, 300.0], [985.0, 424.0], [977.0, 567.3636363636364], [978.0, 426.875], [979.0, 167.66666666666669], [980.0, 655.5], [981.0, 124.5], [982.0, 597.8571428571429], [983.0, 297.5], [969.0, 363.375], [968.0, 771.0], [970.0, 698.0], [971.0, 256.1612903225806], [973.0, 59.0], [974.0, 281.0], [996.0, 740.6666666666665], [999.0, 142.44619422572183], [998.0, 431.5], [997.0, 727.4545454545455], [995.0, 679.9999999999999], [993.0, 346.2], [1000.0, 344.2838380763093], [994.0, 1253.0], [992.0, 668.6666666666666], [1.0, 12.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[985.0467564075905, 341.01572196461046]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 21924.333333333332, "minX": 1.75235388E12, "maxY": 1238071.9833333334, "series": [{"data": [[1.75235388E12, 1238071.9833333334], [1.75235394E12, 67826.81666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235388E12, 399937.8], [1.75235394E12, 21924.333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235394E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 330.21784545376977, "minX": 1.75235388E12, "maxY": 538.0116537180891, "series": [{"data": [[1.75235388E12, 330.21784545376977], [1.75235394E12, 538.0116537180891]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235394E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 330.19879180911937, "minX": 1.75235388E12, "maxY": 538.0068812430624, "series": [{"data": [[1.75235388E12, 330.19879180911937], [1.75235394E12, 538.0068812430624]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235394E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.008990011098779123, "minX": 1.75235388E12, "maxY": 1.2134288043411852, "series": [{"data": [[1.75235388E12, 1.2134288043411852], [1.75235394E12, 0.008990011098779123]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235394E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.75235388E12, "maxY": 2967.0, "series": [{"data": [[1.75235388E12, 1641.0], [1.75235394E12, 2967.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235388E12, 443.0], [1.75235394E12, 1276.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235388E12, 538.0], [1.75235394E12, 1748.8899999999994]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235388E12, 482.0], [1.75235394E12, 1497.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235388E12, 2.0], [1.75235394E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235388E12, 358.0], [1.75235394E12, 401.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235394E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 986.0, "maxY": 994.0, "series": [{"data": [[986.0, 54.0], [1021.0, 5.0], [1041.0, 882.0], [1230.0, 423.0], [1480.0, 994.0], [1749.0, 572.0], [1878.0, 518.0], [1980.0, 76.0], [2360.0, 382.0], [2792.0, 344.0], [2772.0, 339.0], [2762.0, 374.0], [2723.0, 350.0], [2815.0, 391.0], [2927.0, 336.0], [2925.0, 342.0], [2921.0, 364.0], [2858.0, 329.0], [2939.0, 331.0], [2941.0, 327.0], [2906.0, 329.0], [2931.0, 324.0], [2937.0, 325.0], [2913.0, 376.0], [2916.0, 381.0], [3050.0, 332.0], [2994.0, 298.0], [2966.0, 346.0], [3042.0, 325.0], [2974.0, 344.0], [3027.0, 336.0], [3014.0, 328.0], [3064.0, 327.0], [3030.0, 317.0], [3013.0, 311.0], [2989.0, 341.0], [2978.0, 418.0], [2988.0, 347.0], [3054.0, 422.0], [3129.0, 323.0], [3184.0, 316.0], [3156.0, 350.0], [3159.0, 383.0], [3163.0, 317.0], [3105.0, 326.0], [3104.0, 316.0], [3080.0, 324.0], [3076.0, 323.0], [3077.0, 333.0], [3132.0, 316.0], [3107.0, 308.0], [3128.0, 319.0], [3122.0, 331.0], [3110.0, 391.0], [3093.0, 323.0], [3103.0, 336.0], [3082.0, 307.0], [3092.0, 336.0], [3182.0, 318.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2921.0, 86.0], [2994.0, 1.0], [1749.0, 154.0], [1980.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3184.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 986.0, "maxY": 994.0, "series": [{"data": [[986.0, 54.0], [1021.0, 5.0], [1041.0, 882.0], [1230.0, 423.0], [1480.0, 994.0], [1749.0, 572.0], [1878.0, 518.0], [1980.0, 76.0], [2360.0, 382.0], [2792.0, 344.0], [2772.0, 339.0], [2762.0, 374.0], [2723.0, 350.0], [2815.0, 391.0], [2927.0, 336.0], [2925.0, 342.0], [2921.0, 364.0], [2858.0, 329.0], [2939.0, 331.0], [2941.0, 327.0], [2906.0, 329.0], [2931.0, 324.0], [2937.0, 325.0], [2913.0, 376.0], [2916.0, 381.0], [3050.0, 332.0], [2994.0, 298.0], [2966.0, 346.0], [3042.0, 325.0], [2974.0, 344.0], [3027.0, 336.0], [3014.0, 328.0], [3064.0, 327.0], [3030.0, 317.0], [3013.0, 311.0], [2989.0, 341.0], [2978.0, 418.0], [2988.0, 347.0], [3054.0, 422.0], [3129.0, 323.0], [3184.0, 316.0], [3156.0, 350.0], [3159.0, 383.0], [3163.0, 317.0], [3105.0, 326.0], [3104.0, 316.0], [3080.0, 324.0], [3076.0, 322.5], [3077.0, 333.0], [3132.0, 316.0], [3107.0, 308.0], [3128.0, 319.0], [3122.0, 331.0], [3110.0, 391.0], [3093.0, 323.0], [3103.0, 336.0], [3082.0, 307.0], [3092.0, 336.0], [3182.0, 318.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2921.0, 86.0], [2994.0, 0.0], [1749.0, 154.0], [1980.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3184.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 133.5, "minX": 1.75235388E12, "maxY": 2756.3, "series": [{"data": [[1.75235388E12, 2756.3], [1.75235394E12, 133.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235394E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.75235388E12, "maxY": 2739.2166666666667, "series": [{"data": [[1.75235388E12, 2739.2166666666667], [1.75235394E12, 150.16666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75235388E12, 0.08333333333333333]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.75235388E12, 0.3333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235394E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.75235388E12, "maxY": 2739.2166666666667, "series": [{"data": [[1.75235388E12, 2739.2166666666667], [1.75235394E12, 150.16666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75235388E12, 0.4166666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235394E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.75235388E12, "maxY": 2739.2166666666667, "series": [{"data": [[1.75235388E12, 2739.2166666666667], [1.75235394E12, 150.16666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75235388E12, 0.4166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235394E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

