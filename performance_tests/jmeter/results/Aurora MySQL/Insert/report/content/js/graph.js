/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 72.0, "minX": 0.0, "maxY": 3034.0, "series": [{"data": [[0.0, 72.0], [0.1, 240.0], [0.2, 265.0], [0.3, 275.0], [0.4, 290.0], [0.5, 312.0], [0.6, 337.0], [0.7, 399.0], [0.8, 438.0], [0.9, 493.0], [1.0, 536.0], [1.1, 599.0], [1.2, 695.0], [1.3, 793.0], [1.4, 886.0], [1.5, 901.0], [1.6, 923.0], [1.7, 939.0], [1.8, 958.0], [1.9, 971.0], [2.0, 988.0], [2.1, 1003.0], [2.2, 1016.0], [2.3, 1027.0], [2.4, 1035.0], [2.5, 1041.0], [2.6, 1049.0], [2.7, 1056.0], [2.8, 1061.0], [2.9, 1074.0], [3.0, 1085.0], [3.1, 1096.0], [3.2, 1110.0], [3.3, 1121.0], [3.4, 1130.0], [3.5, 1135.0], [3.6, 1140.0], [3.7, 1145.0], [3.8, 1151.0], [3.9, 1154.0], [4.0, 1157.0], [4.1, 1159.0], [4.2, 1161.0], [4.3, 1164.0], [4.4, 1166.0], [4.5, 1168.0], [4.6, 1171.0], [4.7, 1173.0], [4.8, 1174.0], [4.9, 1176.0], [5.0, 1177.0], [5.1, 1179.0], [5.2, 1180.0], [5.3, 1181.0], [5.4, 1183.0], [5.5, 1184.0], [5.6, 1185.0], [5.7, 1186.0], [5.8, 1187.0], [5.9, 1188.0], [6.0, 1189.0], [6.1, 1190.0], [6.2, 1190.0], [6.3, 1191.0], [6.4, 1192.0], [6.5, 1192.0], [6.6, 1193.0], [6.7, 1194.0], [6.8, 1194.0], [6.9, 1195.0], [7.0, 1195.0], [7.1, 1196.0], [7.2, 1196.0], [7.3, 1197.0], [7.4, 1198.0], [7.5, 1198.0], [7.6, 1199.0], [7.7, 1199.0], [7.8, 1200.0], [7.9, 1200.0], [8.0, 1201.0], [8.1, 1201.0], [8.2, 1202.0], [8.3, 1202.0], [8.4, 1203.0], [8.5, 1203.0], [8.6, 1204.0], [8.7, 1204.0], [8.8, 1204.0], [8.9, 1205.0], [9.0, 1205.0], [9.1, 1206.0], [9.2, 1206.0], [9.3, 1207.0], [9.4, 1207.0], [9.5, 1207.0], [9.6, 1208.0], [9.7, 1208.0], [9.8, 1209.0], [9.9, 1209.0], [10.0, 1209.0], [10.1, 1210.0], [10.2, 1210.0], [10.3, 1210.0], [10.4, 1211.0], [10.5, 1211.0], [10.6, 1211.0], [10.7, 1212.0], [10.8, 1212.0], [10.9, 1213.0], [11.0, 1213.0], [11.1, 1213.0], [11.2, 1214.0], [11.3, 1214.0], [11.4, 1215.0], [11.5, 1215.0], [11.6, 1215.0], [11.7, 1216.0], [11.8, 1216.0], [11.9, 1216.0], [12.0, 1217.0], [12.1, 1217.0], [12.2, 1217.0], [12.3, 1218.0], [12.4, 1218.0], [12.5, 1219.0], [12.6, 1219.0], [12.7, 1220.0], [12.8, 1220.0], [12.9, 1220.0], [13.0, 1221.0], [13.1, 1221.0], [13.2, 1222.0], [13.3, 1222.0], [13.4, 1222.0], [13.5, 1222.0], [13.6, 1223.0], [13.7, 1223.0], [13.8, 1224.0], [13.9, 1224.0], [14.0, 1224.0], [14.1, 1225.0], [14.2, 1225.0], [14.3, 1225.0], [14.4, 1226.0], [14.5, 1226.0], [14.6, 1226.0], [14.7, 1227.0], [14.8, 1227.0], [14.9, 1227.0], [15.0, 1228.0], [15.1, 1228.0], [15.2, 1228.0], [15.3, 1229.0], [15.4, 1229.0], [15.5, 1230.0], [15.6, 1230.0], [15.7, 1230.0], [15.8, 1230.0], [15.9, 1231.0], [16.0, 1231.0], [16.1, 1231.0], [16.2, 1232.0], [16.3, 1232.0], [16.4, 1232.0], [16.5, 1233.0], [16.6, 1233.0], [16.7, 1233.0], [16.8, 1233.0], [16.9, 1234.0], [17.0, 1234.0], [17.1, 1234.0], [17.2, 1235.0], [17.3, 1235.0], [17.4, 1235.0], [17.5, 1236.0], [17.6, 1236.0], [17.7, 1237.0], [17.8, 1237.0], [17.9, 1237.0], [18.0, 1238.0], [18.1, 1238.0], [18.2, 1239.0], [18.3, 1239.0], [18.4, 1239.0], [18.5, 1239.0], [18.6, 1240.0], [18.7, 1240.0], [18.8, 1241.0], [18.9, 1241.0], [19.0, 1241.0], [19.1, 1241.0], [19.2, 1242.0], [19.3, 1242.0], [19.4, 1243.0], [19.5, 1243.0], [19.6, 1243.0], [19.7, 1244.0], [19.8, 1244.0], [19.9, 1244.0], [20.0, 1245.0], [20.1, 1245.0], [20.2, 1245.0], [20.3, 1245.0], [20.4, 1246.0], [20.5, 1246.0], [20.6, 1247.0], [20.7, 1247.0], [20.8, 1247.0], [20.9, 1248.0], [21.0, 1248.0], [21.1, 1248.0], [21.2, 1248.0], [21.3, 1249.0], [21.4, 1249.0], [21.5, 1249.0], [21.6, 1250.0], [21.7, 1250.0], [21.8, 1250.0], [21.9, 1250.0], [22.0, 1251.0], [22.1, 1251.0], [22.2, 1252.0], [22.3, 1252.0], [22.4, 1252.0], [22.5, 1252.0], [22.6, 1253.0], [22.7, 1253.0], [22.8, 1253.0], [22.9, 1254.0], [23.0, 1254.0], [23.1, 1254.0], [23.2, 1255.0], [23.3, 1255.0], [23.4, 1255.0], [23.5, 1256.0], [23.6, 1256.0], [23.7, 1256.0], [23.8, 1257.0], [23.9, 1257.0], [24.0, 1257.0], [24.1, 1258.0], [24.2, 1258.0], [24.3, 1258.0], [24.4, 1259.0], [24.5, 1259.0], [24.6, 1259.0], [24.7, 1260.0], [24.8, 1260.0], [24.9, 1260.0], [25.0, 1260.0], [25.1, 1261.0], [25.2, 1261.0], [25.3, 1261.0], [25.4, 1262.0], [25.5, 1262.0], [25.6, 1262.0], [25.7, 1262.0], [25.8, 1263.0], [25.9, 1263.0], [26.0, 1263.0], [26.1, 1264.0], [26.2, 1264.0], [26.3, 1264.0], [26.4, 1265.0], [26.5, 1265.0], [26.6, 1265.0], [26.7, 1266.0], [26.8, 1266.0], [26.9, 1266.0], [27.0, 1267.0], [27.1, 1267.0], [27.2, 1267.0], [27.3, 1267.0], [27.4, 1268.0], [27.5, 1268.0], [27.6, 1268.0], [27.7, 1269.0], [27.8, 1269.0], [27.9, 1269.0], [28.0, 1269.0], [28.1, 1270.0], [28.2, 1270.0], [28.3, 1270.0], [28.4, 1271.0], [28.5, 1271.0], [28.6, 1271.0], [28.7, 1271.0], [28.8, 1272.0], [28.9, 1272.0], [29.0, 1272.0], [29.1, 1273.0], [29.2, 1273.0], [29.3, 1273.0], [29.4, 1273.0], [29.5, 1274.0], [29.6, 1274.0], [29.7, 1275.0], [29.8, 1275.0], [29.9, 1275.0], [30.0, 1275.0], [30.1, 1276.0], [30.2, 1276.0], [30.3, 1276.0], [30.4, 1277.0], [30.5, 1277.0], [30.6, 1277.0], [30.7, 1278.0], [30.8, 1278.0], [30.9, 1278.0], [31.0, 1279.0], [31.1, 1279.0], [31.2, 1279.0], [31.3, 1279.0], [31.4, 1280.0], [31.5, 1280.0], [31.6, 1280.0], [31.7, 1280.0], [31.8, 1281.0], [31.9, 1281.0], [32.0, 1281.0], [32.1, 1281.0], [32.2, 1282.0], [32.3, 1282.0], [32.4, 1282.0], [32.5, 1282.0], [32.6, 1283.0], [32.7, 1283.0], [32.8, 1283.0], [32.9, 1284.0], [33.0, 1284.0], [33.1, 1284.0], [33.2, 1285.0], [33.3, 1285.0], [33.4, 1285.0], [33.5, 1286.0], [33.6, 1286.0], [33.7, 1286.0], [33.8, 1287.0], [33.9, 1287.0], [34.0, 1287.0], [34.1, 1288.0], [34.2, 1288.0], [34.3, 1289.0], [34.4, 1289.0], [34.5, 1290.0], [34.6, 1290.0], [34.7, 1290.0], [34.8, 1291.0], [34.9, 1291.0], [35.0, 1292.0], [35.1, 1292.0], [35.2, 1293.0], [35.3, 1293.0], [35.4, 1294.0], [35.5, 1294.0], [35.6, 1295.0], [35.7, 1295.0], [35.8, 1296.0], [35.9, 1296.0], [36.0, 1297.0], [36.1, 1297.0], [36.2, 1298.0], [36.3, 1298.0], [36.4, 1299.0], [36.5, 1299.0], [36.6, 1300.0], [36.7, 1300.0], [36.8, 1301.0], [36.9, 1301.0], [37.0, 1302.0], [37.1, 1303.0], [37.2, 1303.0], [37.3, 1304.0], [37.4, 1304.0], [37.5, 1305.0], [37.6, 1305.0], [37.7, 1306.0], [37.8, 1306.0], [37.9, 1307.0], [38.0, 1307.0], [38.1, 1308.0], [38.2, 1308.0], [38.3, 1309.0], [38.4, 1309.0], [38.5, 1309.0], [38.6, 1310.0], [38.7, 1310.0], [38.8, 1311.0], [38.9, 1312.0], [39.0, 1312.0], [39.1, 1313.0], [39.2, 1313.0], [39.3, 1314.0], [39.4, 1314.0], [39.5, 1314.0], [39.6, 1315.0], [39.7, 1315.0], [39.8, 1316.0], [39.9, 1316.0], [40.0, 1316.0], [40.1, 1317.0], [40.2, 1318.0], [40.3, 1318.0], [40.4, 1319.0], [40.5, 1319.0], [40.6, 1319.0], [40.7, 1320.0], [40.8, 1321.0], [40.9, 1321.0], [41.0, 1321.0], [41.1, 1322.0], [41.2, 1322.0], [41.3, 1323.0], [41.4, 1323.0], [41.5, 1323.0], [41.6, 1324.0], [41.7, 1324.0], [41.8, 1325.0], [41.9, 1325.0], [42.0, 1326.0], [42.1, 1327.0], [42.2, 1327.0], [42.3, 1328.0], [42.4, 1328.0], [42.5, 1328.0], [42.6, 1329.0], [42.7, 1329.0], [42.8, 1330.0], [42.9, 1330.0], [43.0, 1331.0], [43.1, 1331.0], [43.2, 1332.0], [43.3, 1332.0], [43.4, 1333.0], [43.5, 1334.0], [43.6, 1334.0], [43.7, 1335.0], [43.8, 1335.0], [43.9, 1336.0], [44.0, 1336.0], [44.1, 1337.0], [44.2, 1337.0], [44.3, 1338.0], [44.4, 1338.0], [44.5, 1339.0], [44.6, 1339.0], [44.7, 1339.0], [44.8, 1340.0], [44.9, 1340.0], [45.0, 1341.0], [45.1, 1341.0], [45.2, 1342.0], [45.3, 1342.0], [45.4, 1343.0], [45.5, 1343.0], [45.6, 1344.0], [45.7, 1344.0], [45.8, 1345.0], [45.9, 1346.0], [46.0, 1346.0], [46.1, 1347.0], [46.2, 1347.0], [46.3, 1348.0], [46.4, 1348.0], [46.5, 1349.0], [46.6, 1349.0], [46.7, 1350.0], [46.8, 1350.0], [46.9, 1351.0], [47.0, 1351.0], [47.1, 1352.0], [47.2, 1352.0], [47.3, 1353.0], [47.4, 1353.0], [47.5, 1354.0], [47.6, 1354.0], [47.7, 1355.0], [47.8, 1355.0], [47.9, 1356.0], [48.0, 1357.0], [48.1, 1357.0], [48.2, 1357.0], [48.3, 1358.0], [48.4, 1358.0], [48.5, 1359.0], [48.6, 1359.0], [48.7, 1360.0], [48.8, 1360.0], [48.9, 1361.0], [49.0, 1361.0], [49.1, 1362.0], [49.2, 1362.0], [49.3, 1362.0], [49.4, 1363.0], [49.5, 1363.0], [49.6, 1364.0], [49.7, 1364.0], [49.8, 1365.0], [49.9, 1365.0], [50.0, 1366.0], [50.1, 1366.0], [50.2, 1367.0], [50.3, 1367.0], [50.4, 1368.0], [50.5, 1368.0], [50.6, 1369.0], [50.7, 1369.0], [50.8, 1370.0], [50.9, 1370.0], [51.0, 1371.0], [51.1, 1372.0], [51.2, 1372.0], [51.3, 1373.0], [51.4, 1373.0], [51.5, 1374.0], [51.6, 1375.0], [51.7, 1375.0], [51.8, 1376.0], [51.9, 1377.0], [52.0, 1378.0], [52.1, 1379.0], [52.2, 1379.0], [52.3, 1380.0], [52.4, 1381.0], [52.5, 1381.0], [52.6, 1382.0], [52.7, 1383.0], [52.8, 1383.0], [52.9, 1384.0], [53.0, 1384.0], [53.1, 1385.0], [53.2, 1385.0], [53.3, 1386.0], [53.4, 1386.0], [53.5, 1387.0], [53.6, 1387.0], [53.7, 1388.0], [53.8, 1389.0], [53.9, 1389.0], [54.0, 1390.0], [54.1, 1390.0], [54.2, 1391.0], [54.3, 1391.0], [54.4, 1391.0], [54.5, 1392.0], [54.6, 1393.0], [54.7, 1393.0], [54.8, 1394.0], [54.9, 1394.0], [55.0, 1395.0], [55.1, 1395.0], [55.2, 1396.0], [55.3, 1397.0], [55.4, 1397.0], [55.5, 1398.0], [55.6, 1399.0], [55.7, 1399.0], [55.8, 1400.0], [55.9, 1400.0], [56.0, 1401.0], [56.1, 1401.0], [56.2, 1402.0], [56.3, 1402.0], [56.4, 1403.0], [56.5, 1403.0], [56.6, 1404.0], [56.7, 1404.0], [56.8, 1405.0], [56.9, 1405.0], [57.0, 1406.0], [57.1, 1406.0], [57.2, 1407.0], [57.3, 1407.0], [57.4, 1407.0], [57.5, 1408.0], [57.6, 1408.0], [57.7, 1409.0], [57.8, 1409.0], [57.9, 1410.0], [58.0, 1410.0], [58.1, 1410.0], [58.2, 1411.0], [58.3, 1411.0], [58.4, 1412.0], [58.5, 1412.0], [58.6, 1412.0], [58.7, 1413.0], [58.8, 1413.0], [58.9, 1414.0], [59.0, 1414.0], [59.1, 1415.0], [59.2, 1415.0], [59.3, 1415.0], [59.4, 1416.0], [59.5, 1416.0], [59.6, 1417.0], [59.7, 1417.0], [59.8, 1418.0], [59.9, 1418.0], [60.0, 1418.0], [60.1, 1419.0], [60.2, 1419.0], [60.3, 1419.0], [60.4, 1420.0], [60.5, 1420.0], [60.6, 1421.0], [60.7, 1421.0], [60.8, 1421.0], [60.9, 1422.0], [61.0, 1422.0], [61.1, 1423.0], [61.2, 1423.0], [61.3, 1423.0], [61.4, 1424.0], [61.5, 1424.0], [61.6, 1425.0], [61.7, 1425.0], [61.8, 1426.0], [61.9, 1426.0], [62.0, 1426.0], [62.1, 1427.0], [62.2, 1427.0], [62.3, 1428.0], [62.4, 1428.0], [62.5, 1428.0], [62.6, 1429.0], [62.7, 1429.0], [62.8, 1429.0], [62.9, 1430.0], [63.0, 1430.0], [63.1, 1431.0], [63.2, 1431.0], [63.3, 1431.0], [63.4, 1432.0], [63.5, 1432.0], [63.6, 1432.0], [63.7, 1433.0], [63.8, 1433.0], [63.9, 1433.0], [64.0, 1434.0], [64.1, 1434.0], [64.2, 1434.0], [64.3, 1435.0], [64.4, 1435.0], [64.5, 1435.0], [64.6, 1436.0], [64.7, 1436.0], [64.8, 1436.0], [64.9, 1436.0], [65.0, 1437.0], [65.1, 1437.0], [65.2, 1437.0], [65.3, 1438.0], [65.4, 1438.0], [65.5, 1438.0], [65.6, 1439.0], [65.7, 1439.0], [65.8, 1439.0], [65.9, 1440.0], [66.0, 1440.0], [66.1, 1440.0], [66.2, 1441.0], [66.3, 1441.0], [66.4, 1441.0], [66.5, 1441.0], [66.6, 1442.0], [66.7, 1442.0], [66.8, 1442.0], [66.9, 1443.0], [67.0, 1443.0], [67.1, 1443.0], [67.2, 1443.0], [67.3, 1444.0], [67.4, 1444.0], [67.5, 1444.0], [67.6, 1444.0], [67.7, 1445.0], [67.8, 1445.0], [67.9, 1445.0], [68.0, 1446.0], [68.1, 1446.0], [68.2, 1446.0], [68.3, 1446.0], [68.4, 1447.0], [68.5, 1447.0], [68.6, 1447.0], [68.7, 1447.0], [68.8, 1448.0], [68.9, 1448.0], [69.0, 1448.0], [69.1, 1449.0], [69.2, 1449.0], [69.3, 1449.0], [69.4, 1450.0], [69.5, 1450.0], [69.6, 1450.0], [69.7, 1450.0], [69.8, 1451.0], [69.9, 1451.0], [70.0, 1451.0], [70.1, 1452.0], [70.2, 1452.0], [70.3, 1452.0], [70.4, 1452.0], [70.5, 1453.0], [70.6, 1453.0], [70.7, 1453.0], [70.8, 1453.0], [70.9, 1454.0], [71.0, 1454.0], [71.1, 1454.0], [71.2, 1455.0], [71.3, 1455.0], [71.4, 1455.0], [71.5, 1455.0], [71.6, 1456.0], [71.7, 1456.0], [71.8, 1456.0], [71.9, 1456.0], [72.0, 1457.0], [72.1, 1457.0], [72.2, 1457.0], [72.3, 1457.0], [72.4, 1458.0], [72.5, 1458.0], [72.6, 1458.0], [72.7, 1459.0], [72.8, 1459.0], [72.9, 1459.0], [73.0, 1459.0], [73.1, 1460.0], [73.2, 1460.0], [73.3, 1460.0], [73.4, 1460.0], [73.5, 1461.0], [73.6, 1461.0], [73.7, 1461.0], [73.8, 1461.0], [73.9, 1461.0], [74.0, 1462.0], [74.1, 1462.0], [74.2, 1462.0], [74.3, 1462.0], [74.4, 1463.0], [74.5, 1463.0], [74.6, 1463.0], [74.7, 1463.0], [74.8, 1464.0], [74.9, 1464.0], [75.0, 1464.0], [75.1, 1464.0], [75.2, 1465.0], [75.3, 1465.0], [75.4, 1465.0], [75.5, 1466.0], [75.6, 1466.0], [75.7, 1466.0], [75.8, 1466.0], [75.9, 1467.0], [76.0, 1467.0], [76.1, 1467.0], [76.2, 1467.0], [76.3, 1468.0], [76.4, 1468.0], [76.5, 1468.0], [76.6, 1468.0], [76.7, 1469.0], [76.8, 1469.0], [76.9, 1469.0], [77.0, 1470.0], [77.1, 1470.0], [77.2, 1470.0], [77.3, 1470.0], [77.4, 1471.0], [77.5, 1471.0], [77.6, 1471.0], [77.7, 1472.0], [77.8, 1472.0], [77.9, 1472.0], [78.0, 1473.0], [78.1, 1473.0], [78.2, 1473.0], [78.3, 1474.0], [78.4, 1474.0], [78.5, 1474.0], [78.6, 1475.0], [78.7, 1475.0], [78.8, 1475.0], [78.9, 1476.0], [79.0, 1476.0], [79.1, 1476.0], [79.2, 1477.0], [79.3, 1477.0], [79.4, 1478.0], [79.5, 1478.0], [79.6, 1478.0], [79.7, 1479.0], [79.8, 1479.0], [79.9, 1479.0], [80.0, 1480.0], [80.1, 1480.0], [80.2, 1481.0], [80.3, 1481.0], [80.4, 1481.0], [80.5, 1481.0], [80.6, 1482.0], [80.7, 1482.0], [80.8, 1482.0], [80.9, 1483.0], [81.0, 1483.0], [81.1, 1483.0], [81.2, 1483.0], [81.3, 1484.0], [81.4, 1484.0], [81.5, 1484.0], [81.6, 1485.0], [81.7, 1485.0], [81.8, 1485.0], [81.9, 1486.0], [82.0, 1486.0], [82.1, 1486.0], [82.2, 1487.0], [82.3, 1487.0], [82.4, 1487.0], [82.5, 1488.0], [82.6, 1488.0], [82.7, 1488.0], [82.8, 1488.0], [82.9, 1489.0], [83.0, 1489.0], [83.1, 1489.0], [83.2, 1490.0], [83.3, 1490.0], [83.4, 1491.0], [83.5, 1491.0], [83.6, 1491.0], [83.7, 1492.0], [83.8, 1492.0], [83.9, 1492.0], [84.0, 1492.0], [84.1, 1493.0], [84.2, 1493.0], [84.3, 1493.0], [84.4, 1494.0], [84.5, 1494.0], [84.6, 1495.0], [84.7, 1495.0], [84.8, 1496.0], [84.9, 1497.0], [85.0, 1497.0], [85.1, 1498.0], [85.2, 1498.0], [85.3, 1499.0], [85.4, 1499.0], [85.5, 1499.0], [85.6, 1500.0], [85.7, 1500.0], [85.8, 1501.0], [85.9, 1501.0], [86.0, 1502.0], [86.1, 1502.0], [86.2, 1503.0], [86.3, 1503.0], [86.4, 1504.0], [86.5, 1504.0], [86.6, 1505.0], [86.7, 1505.0], [86.8, 1506.0], [86.9, 1506.0], [87.0, 1507.0], [87.1, 1507.0], [87.2, 1508.0], [87.3, 1508.0], [87.4, 1509.0], [87.5, 1509.0], [87.6, 1510.0], [87.7, 1510.0], [87.8, 1511.0], [87.9, 1511.0], [88.0, 1512.0], [88.1, 1512.0], [88.2, 1513.0], [88.3, 1513.0], [88.4, 1514.0], [88.5, 1515.0], [88.6, 1515.0], [88.7, 1516.0], [88.8, 1517.0], [88.9, 1517.0], [89.0, 1518.0], [89.1, 1519.0], [89.2, 1519.0], [89.3, 1520.0], [89.4, 1521.0], [89.5, 1522.0], [89.6, 1523.0], [89.7, 1525.0], [89.8, 1526.0], [89.9, 1527.0], [90.0, 1528.0], [90.1, 1530.0], [90.2, 1531.0], [90.3, 1532.0], [90.4, 1533.0], [90.5, 1534.0], [90.6, 1536.0], [90.7, 1537.0], [90.8, 1538.0], [90.9, 1540.0], [91.0, 1541.0], [91.1, 1543.0], [91.2, 1544.0], [91.3, 1545.0], [91.4, 1547.0], [91.5, 1548.0], [91.6, 1550.0], [91.7, 1552.0], [91.8, 1554.0], [91.9, 1555.0], [92.0, 1557.0], [92.1, 1558.0], [92.2, 1559.0], [92.3, 1560.0], [92.4, 1561.0], [92.5, 1561.0], [92.6, 1562.0], [92.7, 1564.0], [92.8, 1565.0], [92.9, 1566.0], [93.0, 1567.0], [93.1, 1568.0], [93.2, 1569.0], [93.3, 1570.0], [93.4, 1571.0], [93.5, 1574.0], [93.6, 1576.0], [93.7, 1580.0], [93.8, 1583.0], [93.9, 1585.0], [94.0, 1588.0], [94.1, 1592.0], [94.2, 1596.0], [94.3, 1601.0], [94.4, 1604.0], [94.5, 1607.0], [94.6, 1610.0], [94.7, 1613.0], [94.8, 1620.0], [94.9, 1632.0], [95.0, 1644.0], [95.1, 1653.0], [95.2, 1665.0], [95.3, 1674.0], [95.4, 1683.0], [95.5, 1688.0], [95.6, 1694.0], [95.7, 1699.0], [95.8, 1708.0], [95.9, 1722.0], [96.0, 1739.0], [96.1, 1748.0], [96.2, 1758.0], [96.3, 1775.0], [96.4, 1787.0], [96.5, 1794.0], [96.6, 1800.0], [96.7, 1817.0], [96.8, 1834.0], [96.9, 1850.0], [97.0, 1877.0], [97.1, 1894.0], [97.2, 1905.0], [97.3, 1915.0], [97.4, 1927.0], [97.5, 1937.0], [97.6, 1953.0], [97.7, 1974.0], [97.8, 1992.0], [97.9, 2000.0], [98.0, 2015.0], [98.1, 2036.0], [98.2, 2069.0], [98.3, 2093.0], [98.4, 2135.0], [98.5, 2163.0], [98.6, 2181.0], [98.7, 2198.0], [98.8, 2212.0], [98.9, 2224.0], [99.0, 2242.0], [99.1, 2262.0], [99.2, 2299.0], [99.3, 2352.0], [99.4, 2421.0], [99.5, 2449.0], [99.6, 2473.0], [99.7, 2501.0], [99.8, 2588.0], [99.9, 2653.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 12983.0, "series": [{"data": [[0.0, 7.0], [600.0, 46.0], [700.0, 44.0], [800.0, 72.0], [900.0, 265.0], [1000.0, 455.0], [1100.0, 2028.0], [1200.0, 12563.0], [1300.0, 8398.0], [1400.0, 12983.0], [1500.0, 3822.0], [100.0, 26.0], [1600.0, 624.0], [1700.0, 384.0], [1800.0, 245.0], [1900.0, 324.0], [2000.0, 189.0], [2100.0, 173.0], [2200.0, 212.0], [2300.0, 62.0], [2400.0, 155.0], [2500.0, 48.0], [2600.0, 65.0], [2700.0, 17.0], [3000.0, 2.0], [200.0, 170.0], [300.0, 105.0], [400.0, 89.0], [500.0, 84.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 398.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 37042.0, "series": [{"data": [[0.0, 398.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 37042.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6217.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 984.8803418803407, "minX": 1.75235706E12, "maxY": 987.6475311513142, "series": [{"data": [[1.75235712E12, 987.6475311513142], [1.75235706E12, 984.8803418803407]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235712E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 270.0, "minX": 1.0, "maxY": 1575.0, "series": [{"data": [[2.0, 1231.0], [3.0, 1244.0], [5.0, 1249.0], [6.0, 1263.0], [7.0, 1276.0], [8.0, 1337.0], [9.0, 1339.0], [10.0, 1389.0], [11.0, 1339.0], [13.0, 1352.0], [15.0, 1366.5], [16.0, 1381.0], [17.0, 1384.0], [18.0, 1395.0], [19.0, 1400.0], [20.0, 1393.0], [21.0, 1395.0], [22.0, 1400.0], [23.0, 1393.0], [24.0, 1403.0], [25.0, 1406.0], [26.0, 1407.0], [27.0, 1406.0], [28.0, 1405.0], [29.0, 1404.0], [30.0, 1406.0], [31.0, 1350.0], [33.0, 1378.0], [32.0, 1403.0], [35.0, 1392.0], [37.0, 1398.0], [36.0, 1383.0], [39.0, 1389.0], [41.0, 1392.0], [43.0, 1379.0], [42.0, 1410.0], [45.0, 1397.0], [47.0, 1397.5], [49.0, 1396.5], [50.0, 1190.0], [53.0, 1352.0], [52.0, 1411.0], [57.0, 1412.0], [56.0, 1377.3333333333333], [59.0, 1363.0], [60.0, 1412.0], [62.0, 1368.0], [65.0, 1389.0], [64.0, 1383.0], [68.0, 1388.6666666666667], [72.0, 1347.75], [77.0, 1277.4], [82.0, 1286.2], [87.0, 1292.8], [91.0, 1420.0], [89.0, 1401.0], [88.0, 1262.0], [95.0, 1420.0], [93.0, 1400.0], [92.0, 1206.5], [99.0, 1259.0], [98.0, 1036.0], [97.0, 1227.6666666666667], [102.0, 1217.5], [101.0, 1397.0], [107.0, 1288.25], [106.0, 1401.0], [111.0, 1269.0], [110.0, 1042.0], [109.0, 1429.0], [115.0, 1330.5], [118.0, 1348.0], [117.0, 1402.0], [120.0, 1251.5], [126.0, 1402.0], [125.0, 1321.4], [135.0, 1043.0], [134.0, 1418.5], [132.0, 1272.0], [131.0, 1456.0], [130.0, 1309.0], [128.0, 1267.0], [143.0, 1272.0], [141.0, 1335.4], [136.0, 1085.0], [149.0, 1349.0], [144.0, 1308.5], [159.0, 1349.0], [154.0, 1338.0], [152.0, 1406.0], [165.0, 1337.0], [161.0, 1402.0], [160.0, 1177.0], [175.0, 1225.5], [173.0, 1432.3333333333333], [170.0, 1349.4], [183.0, 1226.5], [181.0, 1391.5], [177.0, 1175.0], [176.0, 1274.0], [188.0, 1320.75], [185.0, 1454.0], [197.0, 1399.0], [195.0, 1319.0], [193.0, 1350.4], [207.0, 1341.75], [203.0, 1397.0], [202.0, 1194.0], [201.0, 1427.0], [200.0, 1338.25], [212.0, 1281.0], [211.0, 1367.0], [208.0, 1400.0], [222.0, 1360.0], [217.0, 1359.8], [231.0, 1338.0], [227.0, 1440.0], [226.0, 1348.75], [236.0, 1384.3333333333333], [234.0, 1439.0], [233.0, 1204.0], [246.0, 1394.0], [245.0, 1465.0], [244.0, 1308.3333333333333], [241.0, 1358.6], [254.0, 1329.5], [252.0, 1381.5], [250.0, 1355.5], [269.0, 1351.5], [267.0, 1359.0], [263.0, 1389.0], [262.0, 1365.6], [257.0, 1387.6666666666667], [287.0, 1382.0], [286.0, 1352.0], [284.0, 1365.8], [279.0, 1364.0], [274.0, 1222.0], [273.0, 1296.0], [272.0, 1375.0], [299.0, 1386.3333333333333], [296.0, 1384.0], [294.0, 1342.5], [291.0, 1361.5], [319.0, 1243.0], [318.0, 1415.0], [314.0, 1336.6666666666667], [313.0, 1438.5], [309.0, 1344.0], [307.0, 1386.0], [305.0, 1386.5], [335.0, 1386.0], [332.0, 1381.25], [328.0, 1386.0], [327.0, 1379.8], [322.0, 1273.0], [320.0, 1474.0], [351.0, 1382.75], [350.0, 1379.0], [346.0, 1379.25], [342.0, 1380.4], [337.0, 1379.0], [366.0, 1241.0], [365.0, 1379.8], [360.0, 1379.25], [356.0, 1369.5], [355.0, 1484.0], [354.0, 1310.0], [353.0, 1377.0], [382.0, 1399.5], [380.0, 1310.0], [377.0, 1380.4], [372.0, 1485.5], [370.0, 1413.75], [397.0, 1381.0], [393.0, 1384.0], [392.0, 1346.3333333333333], [390.0, 1437.5], [387.0, 1380.0], [412.0, 1382.6], [407.0, 1384.2], [402.0, 1381.6], [428.0, 1388.0], [427.0, 1385.8], [422.0, 1381.75], [418.0, 1387.0], [417.0, 1382.8], [446.0, 1390.8], [441.0, 1413.3333333333333], [440.0, 1389.0], [437.0, 1234.0], [436.0, 1500.0], [434.0, 1385.0], [433.0, 1231.0], [432.0, 1385.0], [461.0, 1320.0], [460.0, 1382.0], [459.0, 1527.0], [456.0, 1398.0], [451.0, 1239.0], [450.0, 1435.25], [479.0, 1451.6666666666667], [476.0, 1400.75], [472.0, 1404.0], [471.0, 1357.6666666666667], [470.0, 1468.5], [466.0, 1401.4], [493.0, 1404.2], [488.0, 1403.8], [483.0, 1441.75], [508.0, 1405.0], [503.0, 1405.0], [500.0, 1399.0], [498.0, 1404.0], [539.0, 1334.0], [543.0, 1425.75], [538.0, 1401.0], [537.0, 1331.0], [534.0, 1511.0], [533.0, 1406.8], [528.0, 1408.5], [527.0, 1402.0], [518.0, 1405.75], [514.0, 1401.0], [513.0, 1405.0], [523.0, 1405.2], [549.0, 1399.0], [571.0, 1255.0], [570.0, 1410.0], [566.0, 1394.0], [565.0, 1408.4], [560.0, 1407.4], [555.0, 1376.5], [553.0, 1434.0], [552.0, 1330.0], [548.0, 1424.0], [544.0, 1335.0], [581.0, 1258.0], [605.0, 1397.0], [606.0, 1410.0], [601.0, 1409.4], [596.0, 1431.25], [592.0, 1321.0], [591.0, 1408.8], [586.0, 1410.6], [580.0, 1417.0], [579.0, 1549.0], [577.0, 1395.0], [576.0, 1406.0], [635.0, 1252.0], [637.0, 1389.0], [634.0, 1405.8], [629.0, 1318.6666666666667], [626.0, 1519.0], [625.0, 1406.8], [620.0, 1410.25], [616.0, 1396.0], [615.0, 1440.3333333333333], [614.0, 1316.0], [611.0, 1407.8], [666.0, 1257.0], [671.0, 1371.6666666666667], [670.0, 1401.0], [668.0, 1560.0], [665.0, 1413.0], [647.0, 1479.0], [645.0, 1407.5], [644.0, 1523.0], [642.0, 1353.5], [640.0, 1413.5], [660.0, 1412.4], [655.0, 1411.2], [650.0, 1527.0], [649.0, 1289.5], [696.0, 1416.6], [703.0, 1526.0], [701.0, 1417.75], [697.0, 1408.0], [691.0, 1418.5], [687.0, 1407.0], [675.0, 1321.0], [674.0, 1495.0], [677.0, 1557.0], [676.0, 1259.0], [686.0, 1470.6666666666667], [683.0, 1335.5], [681.0, 1379.75], [733.0, 1370.6666666666667], [734.0, 1415.0], [731.0, 1565.0], [730.0, 1414.0], [728.0, 1417.8], [711.0, 1417.2], [706.0, 1383.3333333333333], [705.0, 1413.0], [723.0, 1294.0], [722.0, 1565.0], [720.0, 1523.0], [719.0, 1413.0], [718.0, 1412.0], [716.0, 1419.25], [712.0, 1411.0], [764.0, 1410.0], [763.0, 1415.2], [758.0, 1383.0], [756.0, 1519.0], [755.0, 1411.0], [753.0, 1414.0], [748.0, 1414.8], [743.0, 1419.25], [741.0, 1412.0], [738.0, 1419.75], [774.0, 1564.0], [799.0, 1422.9], [792.0, 1437.0], [790.0, 1322.0], [784.0, 1436.75], [780.0, 1436.25], [776.0, 1287.0], [773.0, 1329.0], [770.0, 1540.5], [768.0, 1413.0], [818.0, 1405.0], [830.0, 1404.0], [831.0, 1393.0], [816.0, 1418.0], [827.0, 1316.0], [826.0, 1412.25], [825.0, 1404.0], [807.0, 1405.0], [806.0, 1574.0], [805.0, 1372.25], [802.0, 1437.0], [800.0, 1322.0], [813.0, 1404.0], [811.0, 1419.0], [823.0, 1414.75], [822.0, 1405.0], [819.0, 1415.75], [846.0, 1381.0], [860.0, 1409.2], [855.0, 1383.8333333333333], [851.0, 1410.8], [843.0, 1507.0], [842.0, 1245.0], [841.0, 1535.5], [840.0, 1306.0], [839.0, 1407.75], [835.0, 1408.4], [893.0, 1336.0], [895.0, 1422.3333333333333], [891.0, 1421.4], [889.0, 1509.0], [888.0, 1398.75], [868.0, 1411.6], [864.0, 1411.0], [879.0, 1507.0], [878.0, 1288.5], [877.0, 1326.0], [876.0, 1438.75], [873.0, 1414.0], [886.0, 1415.0], [884.0, 1473.6666666666667], [881.0, 1418.0], [880.0, 1575.0], [909.0, 407.2], [900.0, 350.5140186915887], [899.0, 1261.0], [898.0, 1466.0], [901.0, 342.3333333333333], [903.0, 430.62962962962996], [920.0, 1425.0], [921.0, 603.5], [922.0, 285.8], [923.0, 380.6666666666667], [925.0, 1427.75], [905.0, 515.5], [906.0, 436.8], [907.0, 782.0714285714287], [910.0, 783.076923076923], [911.0, 406.875], [913.0, 376.6], [919.0, 421.61538461538464], [915.0, 1397.3333333333335], [941.0, 389.6666666666667], [929.0, 908.3], [928.0, 286.0], [943.0, 414.8333333333333], [931.0, 340.2], [932.0, 291.8], [933.0, 844.1666666666667], [952.0, 393.6], [956.0, 441.8], [954.0, 1426.6], [957.0, 444.8], [958.0, 963.9000000000001], [959.0, 1264.0], [944.0, 1427.6], [945.0, 442.0], [947.0, 933.4000000000001], [948.0, 270.0], [950.0, 1425.0], [936.0, 814.4444444444445], [937.0, 527.6], [939.0, 896.8333333333333], [962.0, 411.8], [960.0, 431.0], [964.0, 464.0], [963.0, 1423.4], [965.0, 510.0], [967.0, 498.2], [985.0, 1427.6666666666665], [984.0, 1424.1428571428573], [987.0, 1428.7], [986.0, 1429.5555555555554], [990.0, 1433.6], [989.0, 1417.1818181818182], [968.0, 1077.357142857143], [970.0, 1413.0], [971.0, 1018.5000000000001], [972.0, 739.0], [974.0, 1448.5], [975.0, 1336.0], [977.0, 957.7058823529411], [980.0, 1018.3], [979.0, 1430.2], [978.0, 1440.0], [981.0, 1439.2222222222222], [982.0, 690.0], [983.0, 1216.3846153846155], [996.0, 1270.0], [993.0, 1165.8666666666666], [1000.0, 1386.6538461538537], [999.0, 1431.2], [998.0, 1409.875], [997.0, 1422.888888888889], [995.0, 1449.888888888889], [994.0, 1433.2], [992.0, 1434.0999999999997], [1.0, 1230.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[987.4695008818682, 1375.1244015850905]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10951.2, "minX": 1.75235706E12, "maxY": 170204.16666666666, "series": [{"data": [[1.75235712E12, 170204.16666666666], [1.75235706E12, 11716.666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235712E12, 159311.1], [1.75235706E12, 10951.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235712E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1084.5523504273515, "minX": 1.75235706E12, "maxY": 1395.098607065044, "series": [{"data": [[1.75235712E12, 1395.098607065044], [1.75235706E12, 1084.5523504273515]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235712E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1084.2083333333308, "minX": 1.75235706E12, "maxY": 1395.0914098264404, "series": [{"data": [[1.75235712E12, 1395.0914098264404], [1.75235706E12, 1084.2083333333308]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235712E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75235706E12, "maxY": 19.88425925925935, "series": [{"data": [[1.75235712E12, 0.0], [1.75235706E12, 19.88425925925935]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235712E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 72.0, "minX": 1.75235706E12, "maxY": 3034.0, "series": [{"data": [[1.75235712E12, 2723.0], [1.75235706E12, 3034.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235712E12, 1491.0], [1.75235706E12, 1455.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235712E12, 1566.0], [1.75235706E12, 2369.3499999999876]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235712E12, 1512.0], [1.75235706E12, 2009.5499999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235712E12, 980.0], [1.75235706E12, 72.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235712E12, 1341.0], [1.75235706E12, 1116.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235712E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 371.0, "minX": 29.0, "maxY": 2155.5, "series": [{"data": [[558.0, 371.0], [552.0, 2155.5], [607.0, 1849.0], [616.0, 1487.0], [660.0, 1603.0], [679.0, 1383.0], [686.0, 1375.5], [701.0, 1464.0], [733.0, 1408.0], [722.0, 1512.0], [730.0, 1073.0], [727.0, 1375.0], [729.0, 1379.0], [728.0, 1302.0], [710.0, 1367.5], [711.0, 1416.0], [705.0, 1372.0], [712.0, 1360.0], [714.0, 1395.0], [720.0, 1497.5], [721.0, 1381.0], [735.0, 1335.0], [734.0, 1386.5], [731.0, 1355.0], [732.0, 1363.0], [724.0, 1341.0], [725.0, 1391.0], [742.0, 1365.5], [763.0, 1309.0], [757.0, 1230.0], [756.0, 1313.0], [753.0, 1307.0], [752.0, 1334.5], [739.0, 1386.0], [738.0, 1292.0], [736.0, 1314.0], [737.0, 1375.5], [741.0, 1358.0], [751.0, 1342.0], [749.0, 1342.0], [750.0, 1342.0], [748.0, 1320.0], [745.0, 1283.0], [762.0, 1306.0], [760.0, 1305.5], [743.0, 1343.0], [759.0, 1368.0], [758.0, 1333.5], [29.0, 1383.0], [451.0, 1888.0], [476.0, 1636.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 763.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 371.0, "minX": 29.0, "maxY": 2155.5, "series": [{"data": [[558.0, 371.0], [552.0, 2155.5], [607.0, 1849.0], [616.0, 1487.0], [660.0, 1603.0], [679.0, 1383.0], [686.0, 1375.5], [701.0, 1464.0], [733.0, 1408.0], [722.0, 1512.0], [730.0, 1073.0], [727.0, 1375.0], [729.0, 1379.0], [728.0, 1302.0], [710.0, 1367.5], [711.0, 1416.0], [705.0, 1372.0], [712.0, 1360.0], [714.0, 1395.0], [720.0, 1497.5], [721.0, 1381.0], [735.0, 1335.0], [734.0, 1386.5], [731.0, 1355.0], [732.0, 1363.0], [724.0, 1341.0], [725.0, 1391.0], [742.0, 1365.5], [763.0, 1309.0], [757.0, 1230.0], [756.0, 1313.0], [753.0, 1307.0], [752.0, 1334.5], [739.0, 1386.0], [738.0, 1292.0], [736.0, 1314.0], [737.0, 1375.5], [741.0, 1358.0], [751.0, 1342.0], [749.0, 1342.0], [750.0, 1342.0], [748.0, 1320.0], [745.0, 1283.0], [762.0, 1306.0], [760.0, 1305.5], [743.0, 1343.0], [759.0, 1368.0], [758.0, 1333.5], [29.0, 1383.0], [451.0, 1888.0], [476.0, 1636.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 763.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 63.46666666666667, "minX": 1.75235706E12, "maxY": 664.15, "series": [{"data": [[1.75235712E12, 664.15], [1.75235706E12, 63.46666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235712E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 46.8, "minX": 1.75235706E12, "maxY": 680.8166666666667, "series": [{"data": [[1.75235712E12, 680.8166666666667], [1.75235706E12, 46.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235712E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 46.8, "minX": 1.75235706E12, "maxY": 680.8166666666667, "series": [{"data": [[1.75235712E12, 680.8166666666667], [1.75235706E12, 46.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235712E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 46.8, "minX": 1.75235706E12, "maxY": 680.8166666666667, "series": [{"data": [[1.75235712E12, 680.8166666666667], [1.75235706E12, 46.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235712E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

