/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "maxY": 2853.0, "series": [{"data": [[0.0, 18.0], [0.1, 97.0], [0.2, 128.0], [0.3, 143.0], [0.4, 184.0], [0.5, 223.0], [0.6, 247.0], [0.7, 343.0], [0.8, 403.0], [0.9, 417.0], [1.0, 448.0], [1.1, 486.0], [1.2, 506.0], [1.3, 525.0], [1.4, 539.0], [1.5, 549.0], [1.6, 562.0], [1.7, 570.0], [1.8, 577.0], [1.9, 583.0], [2.0, 592.0], [2.1, 635.0], [2.2, 664.0], [2.3, 691.0], [2.4, 707.0], [2.5, 720.0], [2.6, 798.0], [2.7, 818.0], [2.8, 841.0], [2.9, 897.0], [3.0, 1080.0], [3.1, 1133.0], [3.2, 1205.0], [3.3, 1211.0], [3.4, 1247.0], [3.5, 1280.0], [3.6, 1288.0], [3.7, 1311.0], [3.8, 1395.0], [3.9, 1400.0], [4.0, 1402.0], [4.1, 1405.0], [4.2, 1407.0], [4.3, 1410.0], [4.4, 1412.0], [4.5, 1414.0], [4.6, 1415.0], [4.7, 1417.0], [4.8, 1419.0], [4.9, 1421.0], [5.0, 1423.0], [5.1, 1424.0], [5.2, 1426.0], [5.3, 1427.0], [5.4, 1429.0], [5.5, 1430.0], [5.6, 1431.0], [5.7, 1432.0], [5.8, 1433.0], [5.9, 1434.0], [6.0, 1435.0], [6.1, 1436.0], [6.2, 1437.0], [6.3, 1438.0], [6.4, 1439.0], [6.5, 1440.0], [6.6, 1441.0], [6.7, 1442.0], [6.8, 1443.0], [6.9, 1444.0], [7.0, 1444.0], [7.1, 1445.0], [7.2, 1446.0], [7.3, 1447.0], [7.4, 1447.0], [7.5, 1448.0], [7.6, 1449.0], [7.7, 1450.0], [7.8, 1451.0], [7.9, 1451.0], [8.0, 1452.0], [8.1, 1453.0], [8.2, 1454.0], [8.3, 1455.0], [8.4, 1455.0], [8.5, 1456.0], [8.6, 1457.0], [8.7, 1458.0], [8.8, 1458.0], [8.9, 1459.0], [9.0, 1459.0], [9.1, 1460.0], [9.2, 1461.0], [9.3, 1461.0], [9.4, 1462.0], [9.5, 1463.0], [9.6, 1463.0], [9.7, 1464.0], [9.8, 1465.0], [9.9, 1465.0], [10.0, 1466.0], [10.1, 1466.0], [10.2, 1467.0], [10.3, 1467.0], [10.4, 1468.0], [10.5, 1468.0], [10.6, 1469.0], [10.7, 1469.0], [10.8, 1470.0], [10.9, 1470.0], [11.0, 1470.0], [11.1, 1471.0], [11.2, 1471.0], [11.3, 1471.0], [11.4, 1472.0], [11.5, 1472.0], [11.6, 1473.0], [11.7, 1473.0], [11.8, 1473.0], [11.9, 1474.0], [12.0, 1474.0], [12.1, 1474.0], [12.2, 1474.0], [12.3, 1475.0], [12.4, 1475.0], [12.5, 1475.0], [12.6, 1476.0], [12.7, 1476.0], [12.8, 1476.0], [12.9, 1477.0], [13.0, 1477.0], [13.1, 1477.0], [13.2, 1478.0], [13.3, 1478.0], [13.4, 1478.0], [13.5, 1479.0], [13.6, 1479.0], [13.7, 1479.0], [13.8, 1480.0], [13.9, 1480.0], [14.0, 1480.0], [14.1, 1481.0], [14.2, 1481.0], [14.3, 1481.0], [14.4, 1482.0], [14.5, 1482.0], [14.6, 1482.0], [14.7, 1483.0], [14.8, 1483.0], [14.9, 1483.0], [15.0, 1484.0], [15.1, 1484.0], [15.2, 1484.0], [15.3, 1485.0], [15.4, 1485.0], [15.5, 1485.0], [15.6, 1486.0], [15.7, 1486.0], [15.8, 1486.0], [15.9, 1487.0], [16.0, 1487.0], [16.1, 1487.0], [16.2, 1488.0], [16.3, 1488.0], [16.4, 1488.0], [16.5, 1489.0], [16.6, 1489.0], [16.7, 1489.0], [16.8, 1490.0], [16.9, 1490.0], [17.0, 1490.0], [17.1, 1491.0], [17.2, 1491.0], [17.3, 1491.0], [17.4, 1492.0], [17.5, 1492.0], [17.6, 1492.0], [17.7, 1493.0], [17.8, 1493.0], [17.9, 1494.0], [18.0, 1494.0], [18.1, 1494.0], [18.2, 1495.0], [18.3, 1495.0], [18.4, 1495.0], [18.5, 1496.0], [18.6, 1496.0], [18.7, 1496.0], [18.8, 1497.0], [18.9, 1497.0], [19.0, 1497.0], [19.1, 1498.0], [19.2, 1498.0], [19.3, 1498.0], [19.4, 1499.0], [19.5, 1499.0], [19.6, 1499.0], [19.7, 1500.0], [19.8, 1500.0], [19.9, 1500.0], [20.0, 1501.0], [20.1, 1501.0], [20.2, 1501.0], [20.3, 1501.0], [20.4, 1502.0], [20.5, 1502.0], [20.6, 1502.0], [20.7, 1502.0], [20.8, 1503.0], [20.9, 1503.0], [21.0, 1503.0], [21.1, 1503.0], [21.2, 1504.0], [21.3, 1504.0], [21.4, 1504.0], [21.5, 1505.0], [21.6, 1505.0], [21.7, 1505.0], [21.8, 1505.0], [21.9, 1506.0], [22.0, 1506.0], [22.1, 1506.0], [22.2, 1506.0], [22.3, 1507.0], [22.4, 1507.0], [22.5, 1507.0], [22.6, 1507.0], [22.7, 1508.0], [22.8, 1508.0], [22.9, 1508.0], [23.0, 1509.0], [23.1, 1509.0], [23.2, 1509.0], [23.3, 1509.0], [23.4, 1510.0], [23.5, 1510.0], [23.6, 1510.0], [23.7, 1510.0], [23.8, 1511.0], [23.9, 1511.0], [24.0, 1511.0], [24.1, 1511.0], [24.2, 1511.0], [24.3, 1512.0], [24.4, 1512.0], [24.5, 1512.0], [24.6, 1513.0], [24.7, 1513.0], [24.8, 1513.0], [24.9, 1513.0], [25.0, 1514.0], [25.1, 1514.0], [25.2, 1514.0], [25.3, 1514.0], [25.4, 1515.0], [25.5, 1515.0], [25.6, 1515.0], [25.7, 1515.0], [25.8, 1516.0], [25.9, 1516.0], [26.0, 1516.0], [26.1, 1516.0], [26.2, 1516.0], [26.3, 1517.0], [26.4, 1517.0], [26.5, 1517.0], [26.6, 1518.0], [26.7, 1518.0], [26.8, 1518.0], [26.9, 1518.0], [27.0, 1518.0], [27.1, 1519.0], [27.2, 1519.0], [27.3, 1519.0], [27.4, 1519.0], [27.5, 1519.0], [27.6, 1520.0], [27.7, 1520.0], [27.8, 1520.0], [27.9, 1520.0], [28.0, 1520.0], [28.1, 1521.0], [28.2, 1521.0], [28.3, 1521.0], [28.4, 1521.0], [28.5, 1521.0], [28.6, 1522.0], [28.7, 1522.0], [28.8, 1522.0], [28.9, 1522.0], [29.0, 1523.0], [29.1, 1523.0], [29.2, 1523.0], [29.3, 1523.0], [29.4, 1524.0], [29.5, 1524.0], [29.6, 1524.0], [29.7, 1524.0], [29.8, 1524.0], [29.9, 1525.0], [30.0, 1525.0], [30.1, 1525.0], [30.2, 1525.0], [30.3, 1525.0], [30.4, 1525.0], [30.5, 1526.0], [30.6, 1526.0], [30.7, 1526.0], [30.8, 1526.0], [30.9, 1527.0], [31.0, 1527.0], [31.1, 1527.0], [31.2, 1527.0], [31.3, 1527.0], [31.4, 1528.0], [31.5, 1528.0], [31.6, 1528.0], [31.7, 1528.0], [31.8, 1529.0], [31.9, 1529.0], [32.0, 1529.0], [32.1, 1529.0], [32.2, 1529.0], [32.3, 1529.0], [32.4, 1530.0], [32.5, 1530.0], [32.6, 1530.0], [32.7, 1530.0], [32.8, 1530.0], [32.9, 1531.0], [33.0, 1531.0], [33.1, 1531.0], [33.2, 1531.0], [33.3, 1531.0], [33.4, 1532.0], [33.5, 1532.0], [33.6, 1532.0], [33.7, 1532.0], [33.8, 1532.0], [33.9, 1533.0], [34.0, 1533.0], [34.1, 1533.0], [34.2, 1533.0], [34.3, 1534.0], [34.4, 1534.0], [34.5, 1534.0], [34.6, 1534.0], [34.7, 1535.0], [34.8, 1535.0], [34.9, 1535.0], [35.0, 1535.0], [35.1, 1535.0], [35.2, 1536.0], [35.3, 1536.0], [35.4, 1536.0], [35.5, 1536.0], [35.6, 1537.0], [35.7, 1537.0], [35.8, 1537.0], [35.9, 1537.0], [36.0, 1537.0], [36.1, 1538.0], [36.2, 1538.0], [36.3, 1538.0], [36.4, 1538.0], [36.5, 1538.0], [36.6, 1539.0], [36.7, 1539.0], [36.8, 1539.0], [36.9, 1539.0], [37.0, 1540.0], [37.1, 1540.0], [37.2, 1540.0], [37.3, 1540.0], [37.4, 1540.0], [37.5, 1541.0], [37.6, 1541.0], [37.7, 1541.0], [37.8, 1541.0], [37.9, 1542.0], [38.0, 1542.0], [38.1, 1542.0], [38.2, 1542.0], [38.3, 1543.0], [38.4, 1543.0], [38.5, 1543.0], [38.6, 1543.0], [38.7, 1543.0], [38.8, 1544.0], [38.9, 1544.0], [39.0, 1544.0], [39.1, 1544.0], [39.2, 1545.0], [39.3, 1545.0], [39.4, 1545.0], [39.5, 1545.0], [39.6, 1545.0], [39.7, 1546.0], [39.8, 1546.0], [39.9, 1546.0], [40.0, 1546.0], [40.1, 1546.0], [40.2, 1547.0], [40.3, 1547.0], [40.4, 1547.0], [40.5, 1547.0], [40.6, 1547.0], [40.7, 1548.0], [40.8, 1548.0], [40.9, 1548.0], [41.0, 1548.0], [41.1, 1548.0], [41.2, 1549.0], [41.3, 1549.0], [41.4, 1549.0], [41.5, 1549.0], [41.6, 1549.0], [41.7, 1550.0], [41.8, 1550.0], [41.9, 1550.0], [42.0, 1550.0], [42.1, 1551.0], [42.2, 1551.0], [42.3, 1551.0], [42.4, 1551.0], [42.5, 1552.0], [42.6, 1552.0], [42.7, 1552.0], [42.8, 1552.0], [42.9, 1552.0], [43.0, 1552.0], [43.1, 1553.0], [43.2, 1553.0], [43.3, 1553.0], [43.4, 1553.0], [43.5, 1553.0], [43.6, 1554.0], [43.7, 1554.0], [43.8, 1554.0], [43.9, 1554.0], [44.0, 1554.0], [44.1, 1555.0], [44.2, 1555.0], [44.3, 1555.0], [44.4, 1555.0], [44.5, 1555.0], [44.6, 1556.0], [44.7, 1556.0], [44.8, 1556.0], [44.9, 1556.0], [45.0, 1556.0], [45.1, 1556.0], [45.2, 1557.0], [45.3, 1557.0], [45.4, 1557.0], [45.5, 1557.0], [45.6, 1558.0], [45.7, 1558.0], [45.8, 1558.0], [45.9, 1558.0], [46.0, 1558.0], [46.1, 1559.0], [46.2, 1559.0], [46.3, 1559.0], [46.4, 1559.0], [46.5, 1560.0], [46.6, 1560.0], [46.7, 1560.0], [46.8, 1560.0], [46.9, 1560.0], [47.0, 1561.0], [47.1, 1561.0], [47.2, 1561.0], [47.3, 1561.0], [47.4, 1562.0], [47.5, 1562.0], [47.6, 1562.0], [47.7, 1562.0], [47.8, 1562.0], [47.9, 1563.0], [48.0, 1563.0], [48.1, 1563.0], [48.2, 1563.0], [48.3, 1564.0], [48.4, 1564.0], [48.5, 1564.0], [48.6, 1564.0], [48.7, 1565.0], [48.8, 1565.0], [48.9, 1565.0], [49.0, 1565.0], [49.1, 1566.0], [49.2, 1566.0], [49.3, 1566.0], [49.4, 1566.0], [49.5, 1566.0], [49.6, 1567.0], [49.7, 1567.0], [49.8, 1567.0], [49.9, 1567.0], [50.0, 1568.0], [50.1, 1568.0], [50.2, 1568.0], [50.3, 1568.0], [50.4, 1568.0], [50.5, 1569.0], [50.6, 1569.0], [50.7, 1569.0], [50.8, 1569.0], [50.9, 1570.0], [51.0, 1570.0], [51.1, 1570.0], [51.2, 1570.0], [51.3, 1571.0], [51.4, 1571.0], [51.5, 1571.0], [51.6, 1571.0], [51.7, 1572.0], [51.8, 1572.0], [51.9, 1572.0], [52.0, 1572.0], [52.1, 1573.0], [52.2, 1573.0], [52.3, 1573.0], [52.4, 1573.0], [52.5, 1574.0], [52.6, 1574.0], [52.7, 1574.0], [52.8, 1574.0], [52.9, 1575.0], [53.0, 1575.0], [53.1, 1575.0], [53.2, 1575.0], [53.3, 1576.0], [53.4, 1576.0], [53.5, 1576.0], [53.6, 1576.0], [53.7, 1576.0], [53.8, 1577.0], [53.9, 1577.0], [54.0, 1577.0], [54.1, 1577.0], [54.2, 1578.0], [54.3, 1578.0], [54.4, 1578.0], [54.5, 1578.0], [54.6, 1578.0], [54.7, 1579.0], [54.8, 1579.0], [54.9, 1579.0], [55.0, 1579.0], [55.1, 1580.0], [55.2, 1580.0], [55.3, 1580.0], [55.4, 1580.0], [55.5, 1581.0], [55.6, 1581.0], [55.7, 1581.0], [55.8, 1581.0], [55.9, 1582.0], [56.0, 1582.0], [56.1, 1582.0], [56.2, 1582.0], [56.3, 1583.0], [56.4, 1583.0], [56.5, 1583.0], [56.6, 1583.0], [56.7, 1583.0], [56.8, 1584.0], [56.9, 1584.0], [57.0, 1584.0], [57.1, 1584.0], [57.2, 1585.0], [57.3, 1585.0], [57.4, 1585.0], [57.5, 1586.0], [57.6, 1586.0], [57.7, 1586.0], [57.8, 1587.0], [57.9, 1587.0], [58.0, 1587.0], [58.1, 1587.0], [58.2, 1588.0], [58.3, 1588.0], [58.4, 1588.0], [58.5, 1589.0], [58.6, 1589.0], [58.7, 1589.0], [58.8, 1590.0], [58.9, 1590.0], [59.0, 1590.0], [59.1, 1591.0], [59.2, 1591.0], [59.3, 1592.0], [59.4, 1592.0], [59.5, 1592.0], [59.6, 1592.0], [59.7, 1593.0], [59.8, 1593.0], [59.9, 1594.0], [60.0, 1594.0], [60.1, 1594.0], [60.2, 1595.0], [60.3, 1595.0], [60.4, 1595.0], [60.5, 1596.0], [60.6, 1596.0], [60.7, 1596.0], [60.8, 1597.0], [60.9, 1597.0], [61.0, 1597.0], [61.1, 1598.0], [61.2, 1598.0], [61.3, 1598.0], [61.4, 1598.0], [61.5, 1599.0], [61.6, 1599.0], [61.7, 1599.0], [61.8, 1600.0], [61.9, 1600.0], [62.0, 1601.0], [62.1, 1601.0], [62.2, 1602.0], [62.3, 1602.0], [62.4, 1602.0], [62.5, 1603.0], [62.6, 1603.0], [62.7, 1603.0], [62.8, 1604.0], [62.9, 1604.0], [63.0, 1605.0], [63.1, 1605.0], [63.2, 1605.0], [63.3, 1606.0], [63.4, 1606.0], [63.5, 1606.0], [63.6, 1607.0], [63.7, 1607.0], [63.8, 1607.0], [63.9, 1608.0], [64.0, 1608.0], [64.1, 1608.0], [64.2, 1609.0], [64.3, 1609.0], [64.4, 1610.0], [64.5, 1610.0], [64.6, 1611.0], [64.7, 1611.0], [64.8, 1612.0], [64.9, 1612.0], [65.0, 1612.0], [65.1, 1613.0], [65.2, 1613.0], [65.3, 1613.0], [65.4, 1614.0], [65.5, 1614.0], [65.6, 1615.0], [65.7, 1615.0], [65.8, 1615.0], [65.9, 1616.0], [66.0, 1616.0], [66.1, 1617.0], [66.2, 1617.0], [66.3, 1617.0], [66.4, 1617.0], [66.5, 1618.0], [66.6, 1618.0], [66.7, 1619.0], [66.8, 1619.0], [66.9, 1619.0], [67.0, 1620.0], [67.1, 1620.0], [67.2, 1621.0], [67.3, 1621.0], [67.4, 1621.0], [67.5, 1622.0], [67.6, 1622.0], [67.7, 1622.0], [67.8, 1623.0], [67.9, 1623.0], [68.0, 1623.0], [68.1, 1624.0], [68.2, 1624.0], [68.3, 1624.0], [68.4, 1625.0], [68.5, 1625.0], [68.6, 1625.0], [68.7, 1626.0], [68.8, 1626.0], [68.9, 1626.0], [69.0, 1627.0], [69.1, 1627.0], [69.2, 1628.0], [69.3, 1628.0], [69.4, 1628.0], [69.5, 1628.0], [69.6, 1629.0], [69.7, 1629.0], [69.8, 1629.0], [69.9, 1630.0], [70.0, 1630.0], [70.1, 1630.0], [70.2, 1631.0], [70.3, 1631.0], [70.4, 1631.0], [70.5, 1632.0], [70.6, 1632.0], [70.7, 1632.0], [70.8, 1633.0], [70.9, 1633.0], [71.0, 1633.0], [71.1, 1634.0], [71.2, 1634.0], [71.3, 1634.0], [71.4, 1635.0], [71.5, 1635.0], [71.6, 1635.0], [71.7, 1636.0], [71.8, 1636.0], [71.9, 1636.0], [72.0, 1636.0], [72.1, 1637.0], [72.2, 1637.0], [72.3, 1638.0], [72.4, 1638.0], [72.5, 1638.0], [72.6, 1639.0], [72.7, 1639.0], [72.8, 1639.0], [72.9, 1640.0], [73.0, 1640.0], [73.1, 1640.0], [73.2, 1641.0], [73.3, 1641.0], [73.4, 1641.0], [73.5, 1641.0], [73.6, 1642.0], [73.7, 1642.0], [73.8, 1643.0], [73.9, 1643.0], [74.0, 1643.0], [74.1, 1644.0], [74.2, 1644.0], [74.3, 1644.0], [74.4, 1645.0], [74.5, 1645.0], [74.6, 1646.0], [74.7, 1646.0], [74.8, 1647.0], [74.9, 1647.0], [75.0, 1647.0], [75.1, 1648.0], [75.2, 1648.0], [75.3, 1649.0], [75.4, 1649.0], [75.5, 1649.0], [75.6, 1650.0], [75.7, 1650.0], [75.8, 1651.0], [75.9, 1651.0], [76.0, 1652.0], [76.1, 1652.0], [76.2, 1652.0], [76.3, 1653.0], [76.4, 1653.0], [76.5, 1653.0], [76.6, 1654.0], [76.7, 1654.0], [76.8, 1655.0], [76.9, 1655.0], [77.0, 1656.0], [77.1, 1656.0], [77.2, 1656.0], [77.3, 1657.0], [77.4, 1657.0], [77.5, 1657.0], [77.6, 1658.0], [77.7, 1658.0], [77.8, 1659.0], [77.9, 1659.0], [78.0, 1660.0], [78.1, 1660.0], [78.2, 1660.0], [78.3, 1661.0], [78.4, 1661.0], [78.5, 1661.0], [78.6, 1662.0], [78.7, 1662.0], [78.8, 1663.0], [78.9, 1663.0], [79.0, 1664.0], [79.1, 1664.0], [79.2, 1665.0], [79.3, 1665.0], [79.4, 1665.0], [79.5, 1666.0], [79.6, 1666.0], [79.7, 1667.0], [79.8, 1667.0], [79.9, 1667.0], [80.0, 1668.0], [80.1, 1668.0], [80.2, 1669.0], [80.3, 1669.0], [80.4, 1670.0], [80.5, 1670.0], [80.6, 1671.0], [80.7, 1672.0], [80.8, 1672.0], [80.9, 1673.0], [81.0, 1673.0], [81.1, 1674.0], [81.2, 1674.0], [81.3, 1675.0], [81.4, 1676.0], [81.5, 1676.0], [81.6, 1677.0], [81.7, 1677.0], [81.8, 1678.0], [81.9, 1679.0], [82.0, 1679.0], [82.1, 1680.0], [82.2, 1681.0], [82.3, 1681.0], [82.4, 1682.0], [82.5, 1683.0], [82.6, 1683.0], [82.7, 1684.0], [82.8, 1684.0], [82.9, 1685.0], [83.0, 1686.0], [83.1, 1686.0], [83.2, 1687.0], [83.3, 1688.0], [83.4, 1688.0], [83.5, 1689.0], [83.6, 1690.0], [83.7, 1690.0], [83.8, 1691.0], [83.9, 1692.0], [84.0, 1693.0], [84.1, 1694.0], [84.2, 1695.0], [84.3, 1696.0], [84.4, 1697.0], [84.5, 1698.0], [84.6, 1699.0], [84.7, 1700.0], [84.8, 1700.0], [84.9, 1701.0], [85.0, 1702.0], [85.1, 1703.0], [85.2, 1703.0], [85.3, 1704.0], [85.4, 1705.0], [85.5, 1706.0], [85.6, 1707.0], [85.7, 1708.0], [85.8, 1709.0], [85.9, 1710.0], [86.0, 1711.0], [86.1, 1712.0], [86.2, 1713.0], [86.3, 1714.0], [86.4, 1715.0], [86.5, 1716.0], [86.6, 1717.0], [86.7, 1718.0], [86.8, 1720.0], [86.9, 1721.0], [87.0, 1723.0], [87.1, 1725.0], [87.2, 1727.0], [87.3, 1729.0], [87.4, 1730.0], [87.5, 1732.0], [87.6, 1733.0], [87.7, 1735.0], [87.8, 1736.0], [87.9, 1738.0], [88.0, 1739.0], [88.1, 1740.0], [88.2, 1742.0], [88.3, 1743.0], [88.4, 1744.0], [88.5, 1745.0], [88.6, 1746.0], [88.7, 1748.0], [88.8, 1749.0], [88.9, 1750.0], [89.0, 1751.0], [89.1, 1753.0], [89.2, 1754.0], [89.3, 1755.0], [89.4, 1757.0], [89.5, 1758.0], [89.6, 1760.0], [89.7, 1761.0], [89.8, 1763.0], [89.9, 1764.0], [90.0, 1766.0], [90.1, 1767.0], [90.2, 1769.0], [90.3, 1771.0], [90.4, 1773.0], [90.5, 1777.0], [90.6, 1780.0], [90.7, 1783.0], [90.8, 1785.0], [90.9, 1787.0], [91.0, 1789.0], [91.1, 1792.0], [91.2, 1796.0], [91.3, 1799.0], [91.4, 1804.0], [91.5, 1808.0], [91.6, 1810.0], [91.7, 1814.0], [91.8, 1817.0], [91.9, 1819.0], [92.0, 1822.0], [92.1, 1824.0], [92.2, 1827.0], [92.3, 1829.0], [92.4, 1832.0], [92.5, 1834.0], [92.6, 1837.0], [92.7, 1840.0], [92.8, 1842.0], [92.9, 1845.0], [93.0, 1847.0], [93.1, 1849.0], [93.2, 1853.0], [93.3, 1856.0], [93.4, 1859.0], [93.5, 1861.0], [93.6, 1864.0], [93.7, 1869.0], [93.8, 1872.0], [93.9, 1876.0], [94.0, 1881.0], [94.1, 1887.0], [94.2, 1894.0], [94.3, 1899.0], [94.4, 1908.0], [94.5, 1917.0], [94.6, 1930.0], [94.7, 1936.0], [94.8, 1947.0], [94.9, 1954.0], [95.0, 1963.0], [95.1, 1976.0], [95.2, 1985.0], [95.3, 1994.0], [95.4, 2002.0], [95.5, 2011.0], [95.6, 2018.0], [95.7, 2023.0], [95.8, 2033.0], [95.9, 2043.0], [96.0, 2050.0], [96.1, 2059.0], [96.2, 2067.0], [96.3, 2078.0], [96.4, 2090.0], [96.5, 2100.0], [96.6, 2108.0], [96.7, 2116.0], [96.8, 2134.0], [96.9, 2147.0], [97.0, 2161.0], [97.1, 2176.0], [97.2, 2188.0], [97.3, 2196.0], [97.4, 2205.0], [97.5, 2212.0], [97.6, 2221.0], [97.7, 2231.0], [97.8, 2238.0], [97.9, 2243.0], [98.0, 2250.0], [98.1, 2259.0], [98.2, 2268.0], [98.3, 2279.0], [98.4, 2291.0], [98.5, 2303.0], [98.6, 2316.0], [98.7, 2328.0], [98.8, 2337.0], [98.9, 2347.0], [99.0, 2355.0], [99.1, 2362.0], [99.2, 2378.0], [99.3, 2405.0], [99.4, 2422.0], [99.5, 2443.0], [99.6, 2521.0], [99.7, 2588.0], [99.8, 2683.0], [99.9, 2778.0], [100.0, 2853.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 15968.0, "series": [{"data": [[0.0, 41.0], [600.0, 122.0], [700.0, 94.0], [800.0, 114.0], [900.0, 8.0], [1000.0, 37.0], [1100.0, 56.0], [1200.0, 189.0], [1300.0, 84.0], [1400.0, 5972.0], [1500.0, 15968.0], [100.0, 138.0], [1600.0, 8718.0], [1700.0, 2513.0], [1800.0, 1136.0], [1900.0, 401.0], [2000.0, 430.0], [2100.0, 325.0], [2300.0, 303.0], [2200.0, 427.0], [2400.0, 113.0], [2500.0, 63.0], [2600.0, 31.0], [2700.0, 52.0], [2800.0, 17.0], [200.0, 75.0], [300.0, 47.0], [400.0, 145.0], [500.0, 327.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 449.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 30357.0, "series": [{"data": [[0.0, 449.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7140.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 30357.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 955.9586056644871, "minX": 1.75235724E12, "maxY": 984.0826459390863, "series": [{"data": [[1.7523573E12, 984.0826459390863], [1.75235724E12, 955.9586056644871]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523573E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.0, "maxY": 1643.0, "series": [{"data": [[2.0, 1500.0], [3.0, 1501.0], [4.0, 1506.0], [5.0, 1511.0], [7.0, 1448.0], [8.0, 1511.0], [9.0, 1385.0], [10.0, 1513.0], [11.0, 1518.0], [12.0, 1400.0], [13.0, 1517.0], [14.0, 1404.0], [15.0, 1407.0], [16.0, 1512.0], [17.0, 1416.0], [18.0, 1417.0], [19.0, 1515.0], [20.0, 1425.0], [22.0, 1472.5], [23.0, 1449.0], [24.0, 1519.0], [27.0, 1474.3333333333333], [30.0, 1477.3333333333333], [33.0, 1478.0], [35.0, 1493.0], [36.0, 1451.0], [39.0, 1483.0], [40.0, 1460.0], [43.0, 1465.0], [42.0, 1496.0], [44.0, 1470.0], [47.0, 1487.6666666666667], [49.0, 1438.5], [52.0, 1490.3333333333333], [54.0, 1379.0], [57.0, 1495.0], [58.0, 1369.0], [63.0, 1370.0], [62.0, 1473.25], [67.0, 1473.75], [71.0, 1460.3333333333333], [68.0, 1469.0], [74.0, 1522.0], [76.0, 1463.75], [81.0, 1477.6], [84.0, 1486.6666666666667], [91.0, 1519.0], [89.0, 1479.4], [94.0, 1500.0], [93.0, 1488.0], [92.0, 1451.0], [97.0, 1490.0], [96.0, 1461.5], [101.0, 1475.75], [106.0, 1488.6], [111.0, 1510.0], [110.0, 1485.0], [119.0, 1490.0], [117.0, 1540.0], [116.0, 1508.0], [122.0, 1571.0], [121.0, 1513.5], [127.0, 1514.2], [135.0, 1527.0], [134.0, 1403.0], [133.0, 1501.0], [132.0, 1406.0], [131.0, 1564.0], [130.0, 1536.0], [129.0, 1582.0], [128.0, 1497.0], [143.0, 1568.5], [141.0, 1529.0], [140.0, 1399.0], [139.0, 1498.0], [138.0, 1548.6666666666667], [144.0, 46.0], [145.0, 60.285714285714285], [148.0, 787.6], [154.0, 70.16666666666667], [158.0, 1516.6], [153.0, 1515.0], [160.0, 274.8571428571429], [161.0, 58.5], [162.0, 30.0], [166.0, 1536.0], [163.0, 1501.0], [172.0, 91.6], [174.0, 1515.2], [169.0, 1577.0], [168.0, 1511.25], [177.0, 112.5], [183.0, 112.5], [179.0, 1512.8], [185.0, 849.5], [186.0, 144.0], [188.0, 118.8], [190.0, 136.2], [189.0, 1498.25], [184.0, 1513.4], [196.0, 129.4], [199.0, 1509.8], [194.0, 1510.8], [200.0, 145.0], [204.0, 357.16666666666663], [206.0, 128.25], [203.0, 1503.75], [208.0, 934.8571428571429], [209.0, 95.5], [211.0, 135.5], [213.0, 1511.0], [220.0, 136.6], [223.0, 1505.4], [218.0, 1509.2], [228.0, 1506.2], [236.0, 151.2], [238.0, 1505.6], [233.0, 1506.0], [243.0, 1503.0], [252.0, 1500.75], [248.0, 1504.6], [257.0, 1114.0], [267.0, 1504.0], [262.0, 1505.4], [272.0, 842.1], [283.0, 378.83333333333337], [287.0, 1499.5], [282.0, 1529.75], [281.0, 1395.0], [277.0, 1500.8], [302.0, 146.25], [292.0, 148.0], [303.0, 1534.0], [299.0, 1481.6666666666667], [298.0, 1531.0], [296.0, 1569.0], [294.0, 1563.0], [293.0, 1507.4], [288.0, 1559.0], [313.0, 175.25], [319.0, 200.5], [315.0, 1493.0], [311.0, 1578.0], [310.0, 1503.5], [309.0, 1530.0], [305.0, 1573.0], [304.0, 1505.75], [327.0, 167.25], [331.0, 198.2], [332.0, 126.5], [335.0, 886.0], [334.0, 1508.4], [329.0, 1502.75], [325.0, 1508.4], [320.0, 1509.4], [339.0, 1400.0], [336.0, 121.0], [338.0, 539.5], [337.0, 1502.5], [341.0, 418.33333333333337], [345.0, 173.0], [347.0, 538.25], [351.0, 1508.25], [346.0, 1509.2], [340.0, 1580.0], [364.0, 185.8], [354.0, 216.4], [355.0, 207.2], [359.0, 188.6], [357.0, 1564.0], [356.0, 1510.0], [361.0, 188.0], [363.0, 205.2], [365.0, 187.8], [367.0, 1510.4], [362.0, 1510.2], [381.0, 254.33333333333331], [368.0, 413.33333333333337], [371.0, 193.0], [372.0, 799.8888888888889], [374.0, 247.0], [373.0, 1528.0], [377.0, 721.75], [376.0, 1405.0], [382.0, 237.0], [383.0, 1516.0], [378.0, 1591.0], [396.0, 293.0], [385.0, 278.6], [386.0, 283.8], [387.0, 826.5555555555555], [388.0, 435.75], [391.0, 1573.0], [399.0, 286.4], [398.0, 1500.5], [397.0, 1570.0], [393.0, 1597.0], [392.0, 1494.3333333333333], [403.0, 990.0000000000001], [407.0, 330.2], [413.0, 937.2], [415.0, 343.0], [408.0, 1515.2], [416.0, 384.5], [417.0, 400.75], [419.0, 333.5], [428.0, 1557.0], [426.0, 1439.0], [425.0, 1568.0], [423.0, 1511.8], [418.0, 1513.8], [433.0, 942.9999999999999], [443.0, 1510.8], [438.0, 1511.25], [435.0, 1516.0], [451.0, 363.6], [458.0, 435.6666666666667], [462.0, 1572.0], [461.0, 1496.5], [459.0, 1510.2], [454.0, 1512.8], [449.0, 1568.0], [448.0, 1511.2], [477.0, 1483.0], [465.0, 368.6666666666667], [479.0, 1554.5], [476.0, 1572.0], [475.0, 1412.0], [474.0, 1551.0], [472.0, 1518.75], [468.0, 1406.0], [467.0, 1511.4], [483.0, 390.6], [488.0, 858.0], [490.0, 753.3333333333333], [494.0, 1503.75], [489.0, 1483.0], [487.0, 1520.0], [486.0, 1598.0], [485.0, 1570.0], [484.0, 1517.2], [497.0, 650.0], [511.0, 1523.25], [507.0, 1486.0], [506.0, 1596.0], [505.0, 1515.0], [501.0, 1513.0], [500.0, 1563.0], [499.0, 1498.25], [537.0, 1508.0], [540.0, 315.3333333333333], [512.0, 551.3333333333334], [535.0, 364.93333333333334], [543.0, 1540.75], [539.0, 1489.0], [536.0, 1515.25], [517.0, 1518.2], [532.0, 1516.0], [527.0, 1516.2], [522.0, 1534.3333333333333], [520.0, 1491.5], [568.0, 1518.0], [553.0, 611.2], [573.0, 926.4444444444445], [574.0, 1611.0], [570.0, 1504.0], [563.0, 1518.0], [559.0, 1503.75], [549.0, 1516.4], [544.0, 1413.0], [555.0, 1567.0], [554.0, 1517.25], [605.0, 1517.0], [578.0, 491.0], [592.0, 416.4], [600.0, 1567.0], [581.0, 1465.5], [579.0, 1517.4], [599.0, 1515.0], [598.0, 1477.0], [596.0, 1566.0], [594.0, 1520.0], [589.0, 1520.8], [584.0, 1552.3333333333333], [637.0, 1473.0], [608.0, 419.8], [623.0, 464.75], [619.0, 1465.0], [616.0, 1575.0], [638.0, 1507.0], [636.0, 1594.5], [634.0, 1519.75], [615.0, 1607.0], [614.0, 1515.3333333333333], [611.0, 1419.0], [610.0, 1516.2], [630.0, 1508.0], [629.0, 1540.5], [626.0, 1420.0], [624.0, 1515.8], [665.0, 828.0], [649.0, 512.4], [648.0, 1546.5], [670.0, 1626.0], [669.0, 1473.6666666666667], [667.0, 1588.0], [663.0, 1525.6], [658.0, 1527.0], [654.0, 1514.0], [642.0, 1522.0], [647.0, 1420.0], [643.0, 1621.0], [653.0, 1523.0], [700.0, 1532.0], [681.0, 614.8333333333334], [685.0, 1518.0], [676.0, 1551.5], [674.0, 1505.5], [679.0, 1619.0], [678.0, 1458.5], [684.0, 1535.25], [697.0, 552.0], [698.0, 502.99999999999994], [701.0, 1484.0], [695.0, 1594.0], [694.0, 1535.2], [689.0, 1589.0], [688.0, 1518.3333333333333], [732.0, 455.75], [714.0, 487.6], [716.0, 1535.6], [717.0, 583.0], [724.0, 489.6], [731.0, 511.0], [733.0, 1540.8], [728.0, 1540.2], [711.0, 1532.2], [706.0, 1533.0], [723.0, 1624.0], [722.0, 1469.5], [720.0, 1558.75], [765.0, 1448.0], [739.0, 534.0], [738.0, 1063.888888888889], [743.0, 759.5], [742.0, 1560.3333333333333], [740.0, 1522.0], [760.0, 1598.0], [763.0, 1629.0], [762.0, 1526.0], [745.0, 434.5], [748.0, 1543.2], [749.0, 748.75], [758.0, 943.7777777777778], [754.0, 1603.0], [753.0, 1568.5], [767.0, 1502.0], [766.0, 1530.0], [798.0, 1017.4000000000001], [768.0, 803.7142857142858], [772.0, 546.0], [771.0, 1525.0], [769.0, 1634.0], [773.0, 1505.0], [782.0, 478.0], [779.0, 1526.0], [777.0, 1560.0], [783.0, 1548.25], [784.0, 527.5], [786.0, 540.0], [788.0, 1551.5], [787.0, 1540.0], [799.0, 487.6666666666667], [793.0, 1530.6666666666667], [774.0, 1584.5], [791.0, 1602.0], [789.0, 1539.0], [814.0, 495.4], [803.0, 1016.4], [808.0, 960.7777777777778], [810.0, 493.2], [811.0, 640.5714285714286], [812.0, 1582.6666666666667], [815.0, 512.0], [818.0, 672.3333333333334], [831.0, 524.6666666666666], [817.0, 1551.2], [827.0, 963.3333333333334], [804.0, 1540.0], [828.0, 1628.0], [830.0, 511.2], [821.0, 517.3333333333334], [822.0, 1182.8333333333333], [823.0, 1605.0], [856.0, 577.2], [832.0, 588.7692307692307], [833.0, 1544.6], [834.0, 739.8], [838.0, 858.4615384615386], [835.0, 1448.0], [839.0, 1532.0], [844.0, 572.2], [843.0, 1549.75], [859.0, 732.5], [858.0, 1548.4], [861.0, 685.0], [862.0, 524.0], [848.0, 1546.2], [853.0, 1562.3333333333333], [850.0, 1519.0], [860.0, 1531.0], [889.0, 1380.5], [868.0, 578.2], [871.0, 610.25], [869.0, 1550.2], [878.0, 661.4], [874.0, 1554.0], [879.0, 1090.0], [864.0, 1551.0], [886.0, 642.6], [894.0, 1551.4], [884.0, 1544.0], [882.0, 1615.0], [881.0, 1512.0], [922.0, 595.8], [898.0, 629.4], [902.0, 986.75], [899.0, 1556.5], [921.0, 1555.6], [903.0, 1643.0], [904.0, 610.8], [908.0, 1466.0], [907.0, 1558.75], [909.0, 607.6], [910.0, 599.2], [896.0, 1539.0], [925.0, 584.0], [923.0, 1538.0], [926.0, 510.0], [927.0, 1554.0], [916.0, 1557.6], [912.0, 1554.6], [956.0, 585.5], [932.0, 583.2], [940.0, 567.8333333333333], [939.0, 1553.0], [938.0, 1525.0], [937.0, 1555.5], [942.0, 1529.0], [931.0, 1551.6], [941.0, 1560.0], [946.0, 1066.9], [948.0, 1512.0], [949.0, 758.5], [951.0, 583.25], [950.0, 1604.0], [955.0, 586.4], [957.0, 1073.8], [953.0, 1558.2], [935.0, 1549.8], [988.0, 1530.6], [979.0, 1312.8000000000002], [978.0, 1554.6], [977.0, 1554.6], [976.0, 1570.5], [981.0, 1548.9545454545455], [980.0, 1546.6666666666667], [991.0, 1611.0], [990.0, 1559.6666666666667], [987.0, 1548.5714285714287], [986.0, 1639.0], [985.0, 1549.75], [984.0, 1564.3333333333333], [975.0, 1554.0], [960.0, 1556.5], [965.0, 1506.0], [963.0, 1571.4], [967.0, 1477.0], [966.0, 1573.5], [974.0, 1553.2], [973.0, 1552.4], [972.0, 1538.0], [971.0, 1562.6666666666665], [970.0, 1554.4], [969.0, 1556.777777777778], [968.0, 1576.0], [983.0, 1557.5], [982.0, 1560.4], [996.0, 1561.7142857142858], [993.0, 856.7142857142857], [995.0, 1417.625], [1000.0, 1605.6098283499427], [999.0, 1550.8], [998.0, 1614.0], [997.0, 1545.8333333333333], [994.0, 1558.6666666666667], [992.0, 1535.0], [1.0, 1493.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[979.3199810256641, 1581.6661571707284]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 25489.8, "minX": 1.75235724E12, "maxY": 155235.71666666667, "series": [{"data": [[1.7523573E12, 155235.71666666667], [1.75235724E12, 31664.483333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7523573E12, 125029.33333333333], [1.75235724E12, 25489.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523573E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1372.7928727046346, "minX": 1.75235724E12, "maxY": 1624.249270304573, "series": [{"data": [[1.7523573E12, 1624.249270304573], [1.75235724E12, 1372.7928727046346]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523573E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1372.7721755368802, "minX": 1.75235724E12, "maxY": 1624.2442258883161, "series": [{"data": [[1.7523573E12, 1624.2442258883161], [1.75235724E12, 1372.7721755368802]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523573E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75235724E12, "maxY": 1.2332710862122562, "series": [{"data": [[1.7523573E12, 0.0], [1.75235724E12, 1.2332710862122562]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523573E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.75235724E12, "maxY": 2853.0, "series": [{"data": [[1.7523573E12, 2853.0], [1.75235724E12, 2536.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7523573E12, 1643.9000000000015], [1.75235724E12, 1658.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7523573E12, 1751.0], [1.75235724E12, 1882.1899999999987]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7523573E12, 1688.0], [1.75235724E12, 1683.6499999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7523573E12, 1352.0], [1.75235724E12, 18.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7523573E12, 1546.0], [1.75235724E12, 1535.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523573E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 57.5, "minX": 32.0, "maxY": 2347.0, "series": [{"data": [[531.0, 2173.0], [564.0, 1706.5], [571.0, 1727.0], [576.0, 1801.5], [586.0, 1670.0], [592.0, 1661.0], [604.0, 1602.0], [601.0, 1746.0], [602.0, 1658.5], [633.0, 1573.0], [628.0, 1246.0], [635.0, 729.0], [637.0, 1520.0], [634.0, 1573.0], [639.0, 1580.0], [638.0, 1544.0], [629.0, 1563.0], [631.0, 1531.0], [623.0, 1533.0], [622.0, 1624.0], [609.0, 1574.0], [621.0, 1576.0], [626.0, 1583.0], [624.0, 1557.0], [620.0, 1621.0], [616.0, 1639.0], [617.0, 1539.0], [643.0, 1577.0], [664.0, 1533.0], [653.0, 1544.0], [642.0, 1580.0], [655.0, 1558.0], [662.0, 1536.0], [660.0, 1523.0], [648.0, 1569.0], [650.0, 1542.0], [645.0, 1540.0], [647.0, 1569.0], [656.0, 1511.0], [671.0, 1516.0], [657.0, 1511.0], [651.0, 1543.0], [652.0, 1552.0], [676.0, 1530.0], [32.0, 57.5], [133.0, 1486.0], [407.0, 2206.0], [429.0, 1884.0], [446.0, 2347.0], [499.0, 1723.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 676.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 57.5, "minX": 32.0, "maxY": 2347.0, "series": [{"data": [[531.0, 2173.0], [564.0, 1706.5], [571.0, 1727.0], [576.0, 1801.5], [586.0, 1670.0], [592.0, 1661.0], [604.0, 1602.0], [601.0, 1746.0], [602.0, 1658.0], [633.0, 1573.0], [628.0, 1246.0], [635.0, 729.0], [637.0, 1520.0], [634.0, 1573.0], [639.0, 1580.0], [638.0, 1544.0], [629.0, 1563.0], [631.0, 1531.0], [623.0, 1533.0], [622.0, 1624.0], [609.0, 1574.0], [621.0, 1576.0], [626.0, 1583.0], [624.0, 1557.0], [620.0, 1621.0], [616.0, 1639.0], [617.0, 1539.0], [643.0, 1577.0], [664.0, 1533.0], [653.0, 1544.0], [642.0, 1580.0], [655.0, 1558.0], [662.0, 1536.0], [660.0, 1523.0], [648.0, 1569.0], [650.0, 1542.0], [645.0, 1540.0], [647.0, 1569.0], [656.0, 1511.0], [671.0, 1516.0], [657.0, 1511.0], [651.0, 1543.0], [652.0, 1552.0], [676.0, 1530.0], [32.0, 57.5], [133.0, 1486.0], [407.0, 2206.0], [429.0, 1884.0], [446.0, 2347.0], [499.0, 1723.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 676.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 123.76666666666667, "minX": 1.75235724E12, "maxY": 508.6666666666667, "series": [{"data": [[1.7523573E12, 508.6666666666667], [1.75235724E12, 123.76666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523573E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 107.1, "minX": 1.75235724E12, "maxY": 525.3333333333334, "series": [{"data": [[1.7523573E12, 525.3333333333334], [1.75235724E12, 107.1]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7523573E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 107.1, "minX": 1.75235724E12, "maxY": 525.3333333333334, "series": [{"data": [[1.7523573E12, 525.3333333333334], [1.75235724E12, 107.1]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523573E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 107.1, "minX": 1.75235724E12, "maxY": 525.3333333333334, "series": [{"data": [[1.7523573E12, 525.3333333333334], [1.75235724E12, 107.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7523573E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

