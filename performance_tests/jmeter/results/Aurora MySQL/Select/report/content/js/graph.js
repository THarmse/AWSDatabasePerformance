/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 3302.0, "series": [{"data": [[0.0, 0.0], [0.1, 13.0], [0.2, 19.0], [0.3, 28.0], [0.4, 44.0], [0.5, 63.0], [0.6, 74.0], [0.7, 84.0], [0.8, 95.0], [0.9, 98.0], [1.0, 100.0], [1.1, 103.0], [1.2, 107.0], [1.3, 113.0], [1.4, 116.0], [1.5, 122.0], [1.6, 126.0], [1.7, 131.0], [1.8, 138.0], [1.9, 142.0], [2.0, 149.0], [2.1, 152.0], [2.2, 153.0], [2.3, 155.0], [2.4, 155.0], [2.5, 156.0], [2.6, 157.0], [2.7, 158.0], [2.8, 160.0], [2.9, 161.0], [3.0, 162.0], [3.1, 163.0], [3.2, 164.0], [3.3, 165.0], [3.4, 166.0], [3.5, 167.0], [3.6, 168.0], [3.7, 169.0], [3.8, 171.0], [3.9, 172.0], [4.0, 173.0], [4.1, 175.0], [4.2, 176.0], [4.3, 178.0], [4.4, 179.0], [4.5, 179.0], [4.6, 180.0], [4.7, 181.0], [4.8, 181.0], [4.9, 182.0], [5.0, 183.0], [5.1, 184.0], [5.2, 185.0], [5.3, 186.0], [5.4, 187.0], [5.5, 188.0], [5.6, 190.0], [5.7, 191.0], [5.8, 192.0], [5.9, 193.0], [6.0, 194.0], [6.1, 195.0], [6.2, 196.0], [6.3, 197.0], [6.4, 199.0], [6.5, 202.0], [6.6, 205.0], [6.7, 208.0], [6.8, 211.0], [6.9, 213.0], [7.0, 215.0], [7.1, 216.0], [7.2, 218.0], [7.3, 222.0], [7.4, 226.0], [7.5, 230.0], [7.6, 235.0], [7.7, 237.0], [7.8, 240.0], [7.9, 243.0], [8.0, 245.0], [8.1, 247.0], [8.2, 248.0], [8.3, 252.0], [8.4, 254.0], [8.5, 256.0], [8.6, 257.0], [8.7, 258.0], [8.8, 259.0], [8.9, 261.0], [9.0, 262.0], [9.1, 264.0], [9.2, 265.0], [9.3, 266.0], [9.4, 267.0], [9.5, 269.0], [9.6, 270.0], [9.7, 271.0], [9.8, 273.0], [9.9, 275.0], [10.0, 278.0], [10.1, 281.0], [10.2, 283.0], [10.3, 286.0], [10.4, 291.0], [10.5, 294.0], [10.6, 296.0], [10.7, 300.0], [10.8, 303.0], [10.9, 305.0], [11.0, 306.0], [11.1, 308.0], [11.2, 309.0], [11.3, 310.0], [11.4, 311.0], [11.5, 312.0], [11.6, 313.0], [11.7, 314.0], [11.8, 315.0], [11.9, 316.0], [12.0, 316.0], [12.1, 317.0], [12.2, 318.0], [12.3, 319.0], [12.4, 320.0], [12.5, 320.0], [12.6, 321.0], [12.7, 322.0], [12.8, 322.0], [12.9, 323.0], [13.0, 324.0], [13.1, 324.0], [13.2, 325.0], [13.3, 326.0], [13.4, 327.0], [13.5, 328.0], [13.6, 328.0], [13.7, 329.0], [13.8, 329.0], [13.9, 330.0], [14.0, 331.0], [14.1, 332.0], [14.2, 333.0], [14.3, 334.0], [14.4, 336.0], [14.5, 337.0], [14.6, 338.0], [14.7, 339.0], [14.8, 340.0], [14.9, 341.0], [15.0, 342.0], [15.1, 342.0], [15.2, 344.0], [15.3, 345.0], [15.4, 346.0], [15.5, 348.0], [15.6, 349.0], [15.7, 350.0], [15.8, 351.0], [15.9, 351.0], [16.0, 352.0], [16.1, 353.0], [16.2, 353.0], [16.3, 354.0], [16.4, 354.0], [16.5, 355.0], [16.6, 355.0], [16.7, 356.0], [16.8, 356.0], [16.9, 357.0], [17.0, 357.0], [17.1, 358.0], [17.2, 358.0], [17.3, 359.0], [17.4, 359.0], [17.5, 359.0], [17.6, 360.0], [17.7, 360.0], [17.8, 361.0], [17.9, 361.0], [18.0, 361.0], [18.1, 362.0], [18.2, 362.0], [18.3, 362.0], [18.4, 363.0], [18.5, 363.0], [18.6, 364.0], [18.7, 364.0], [18.8, 364.0], [18.9, 365.0], [19.0, 365.0], [19.1, 365.0], [19.2, 365.0], [19.3, 366.0], [19.4, 366.0], [19.5, 366.0], [19.6, 366.0], [19.7, 367.0], [19.8, 367.0], [19.9, 367.0], [20.0, 368.0], [20.1, 368.0], [20.2, 368.0], [20.3, 368.0], [20.4, 369.0], [20.5, 369.0], [20.6, 369.0], [20.7, 370.0], [20.8, 370.0], [20.9, 370.0], [21.0, 370.0], [21.1, 370.0], [21.2, 371.0], [21.3, 371.0], [21.4, 371.0], [21.5, 371.0], [21.6, 371.0], [21.7, 372.0], [21.8, 372.0], [21.9, 372.0], [22.0, 372.0], [22.1, 373.0], [22.2, 373.0], [22.3, 373.0], [22.4, 373.0], [22.5, 373.0], [22.6, 374.0], [22.7, 374.0], [22.8, 374.0], [22.9, 374.0], [23.0, 374.0], [23.1, 374.0], [23.2, 375.0], [23.3, 375.0], [23.4, 375.0], [23.5, 375.0], [23.6, 375.0], [23.7, 375.0], [23.8, 376.0], [23.9, 376.0], [24.0, 376.0], [24.1, 376.0], [24.2, 376.0], [24.3, 376.0], [24.4, 376.0], [24.5, 377.0], [24.6, 377.0], [24.7, 377.0], [24.8, 377.0], [24.9, 377.0], [25.0, 377.0], [25.1, 377.0], [25.2, 377.0], [25.3, 378.0], [25.4, 378.0], [25.5, 378.0], [25.6, 378.0], [25.7, 378.0], [25.8, 378.0], [25.9, 379.0], [26.0, 379.0], [26.1, 379.0], [26.2, 379.0], [26.3, 379.0], [26.4, 380.0], [26.5, 380.0], [26.6, 380.0], [26.7, 380.0], [26.8, 380.0], [26.9, 380.0], [27.0, 380.0], [27.1, 381.0], [27.2, 381.0], [27.3, 381.0], [27.4, 381.0], [27.5, 381.0], [27.6, 382.0], [27.7, 382.0], [27.8, 382.0], [27.9, 382.0], [28.0, 382.0], [28.1, 382.0], [28.2, 383.0], [28.3, 383.0], [28.4, 383.0], [28.5, 383.0], [28.6, 383.0], [28.7, 384.0], [28.8, 384.0], [28.9, 384.0], [29.0, 384.0], [29.1, 384.0], [29.2, 384.0], [29.3, 384.0], [29.4, 385.0], [29.5, 385.0], [29.6, 385.0], [29.7, 385.0], [29.8, 385.0], [29.9, 385.0], [30.0, 385.0], [30.1, 386.0], [30.2, 386.0], [30.3, 386.0], [30.4, 386.0], [30.5, 386.0], [30.6, 387.0], [30.7, 387.0], [30.8, 387.0], [30.9, 387.0], [31.0, 387.0], [31.1, 387.0], [31.2, 388.0], [31.3, 388.0], [31.4, 388.0], [31.5, 388.0], [31.6, 388.0], [31.7, 388.0], [31.8, 388.0], [31.9, 389.0], [32.0, 389.0], [32.1, 389.0], [32.2, 389.0], [32.3, 389.0], [32.4, 389.0], [32.5, 389.0], [32.6, 390.0], [32.7, 390.0], [32.8, 390.0], [32.9, 390.0], [33.0, 390.0], [33.1, 390.0], [33.2, 390.0], [33.3, 391.0], [33.4, 391.0], [33.5, 391.0], [33.6, 391.0], [33.7, 391.0], [33.8, 391.0], [33.9, 392.0], [34.0, 392.0], [34.1, 392.0], [34.2, 392.0], [34.3, 392.0], [34.4, 392.0], [34.5, 392.0], [34.6, 393.0], [34.7, 393.0], [34.8, 393.0], [34.9, 393.0], [35.0, 393.0], [35.1, 393.0], [35.2, 393.0], [35.3, 394.0], [35.4, 394.0], [35.5, 394.0], [35.6, 394.0], [35.7, 394.0], [35.8, 394.0], [35.9, 394.0], [36.0, 395.0], [36.1, 395.0], [36.2, 395.0], [36.3, 395.0], [36.4, 395.0], [36.5, 395.0], [36.6, 395.0], [36.7, 396.0], [36.8, 396.0], [36.9, 396.0], [37.0, 396.0], [37.1, 396.0], [37.2, 396.0], [37.3, 396.0], [37.4, 396.0], [37.5, 397.0], [37.6, 397.0], [37.7, 397.0], [37.8, 397.0], [37.9, 397.0], [38.0, 397.0], [38.1, 397.0], [38.2, 397.0], [38.3, 397.0], [38.4, 398.0], [38.5, 398.0], [38.6, 398.0], [38.7, 398.0], [38.8, 398.0], [38.9, 398.0], [39.0, 399.0], [39.1, 399.0], [39.2, 399.0], [39.3, 399.0], [39.4, 399.0], [39.5, 399.0], [39.6, 400.0], [39.7, 400.0], [39.8, 400.0], [39.9, 400.0], [40.0, 400.0], [40.1, 400.0], [40.2, 401.0], [40.3, 401.0], [40.4, 401.0], [40.5, 401.0], [40.6, 401.0], [40.7, 402.0], [40.8, 402.0], [40.9, 402.0], [41.0, 402.0], [41.1, 402.0], [41.2, 402.0], [41.3, 403.0], [41.4, 403.0], [41.5, 403.0], [41.6, 403.0], [41.7, 404.0], [41.8, 404.0], [41.9, 404.0], [42.0, 404.0], [42.1, 405.0], [42.2, 405.0], [42.3, 405.0], [42.4, 405.0], [42.5, 405.0], [42.6, 405.0], [42.7, 406.0], [42.8, 406.0], [42.9, 406.0], [43.0, 406.0], [43.1, 407.0], [43.2, 407.0], [43.3, 407.0], [43.4, 407.0], [43.5, 408.0], [43.6, 408.0], [43.7, 408.0], [43.8, 408.0], [43.9, 409.0], [44.0, 409.0], [44.1, 409.0], [44.2, 409.0], [44.3, 410.0], [44.4, 410.0], [44.5, 410.0], [44.6, 410.0], [44.7, 411.0], [44.8, 411.0], [44.9, 411.0], [45.0, 411.0], [45.1, 412.0], [45.2, 412.0], [45.3, 412.0], [45.4, 413.0], [45.5, 413.0], [45.6, 413.0], [45.7, 414.0], [45.8, 414.0], [45.9, 414.0], [46.0, 415.0], [46.1, 415.0], [46.2, 416.0], [46.3, 416.0], [46.4, 416.0], [46.5, 417.0], [46.6, 417.0], [46.7, 418.0], [46.8, 418.0], [46.9, 419.0], [47.0, 419.0], [47.1, 419.0], [47.2, 420.0], [47.3, 420.0], [47.4, 421.0], [47.5, 421.0], [47.6, 421.0], [47.7, 422.0], [47.8, 422.0], [47.9, 423.0], [48.0, 423.0], [48.1, 423.0], [48.2, 424.0], [48.3, 424.0], [48.4, 425.0], [48.5, 425.0], [48.6, 425.0], [48.7, 426.0], [48.8, 426.0], [48.9, 426.0], [49.0, 427.0], [49.1, 427.0], [49.2, 427.0], [49.3, 428.0], [49.4, 428.0], [49.5, 429.0], [49.6, 429.0], [49.7, 429.0], [49.8, 430.0], [49.9, 430.0], [50.0, 430.0], [50.1, 430.0], [50.2, 431.0], [50.3, 431.0], [50.4, 431.0], [50.5, 431.0], [50.6, 432.0], [50.7, 432.0], [50.8, 432.0], [50.9, 432.0], [51.0, 432.0], [51.1, 433.0], [51.2, 433.0], [51.3, 433.0], [51.4, 434.0], [51.5, 434.0], [51.6, 434.0], [51.7, 434.0], [51.8, 435.0], [51.9, 435.0], [52.0, 435.0], [52.1, 435.0], [52.2, 436.0], [52.3, 436.0], [52.4, 436.0], [52.5, 436.0], [52.6, 437.0], [52.7, 437.0], [52.8, 437.0], [52.9, 437.0], [53.0, 438.0], [53.1, 438.0], [53.2, 438.0], [53.3, 438.0], [53.4, 439.0], [53.5, 439.0], [53.6, 439.0], [53.7, 439.0], [53.8, 440.0], [53.9, 440.0], [54.0, 440.0], [54.1, 440.0], [54.2, 441.0], [54.3, 441.0], [54.4, 441.0], [54.5, 441.0], [54.6, 442.0], [54.7, 442.0], [54.8, 442.0], [54.9, 442.0], [55.0, 443.0], [55.1, 443.0], [55.2, 443.0], [55.3, 443.0], [55.4, 443.0], [55.5, 444.0], [55.6, 444.0], [55.7, 444.0], [55.8, 444.0], [55.9, 444.0], [56.0, 445.0], [56.1, 445.0], [56.2, 445.0], [56.3, 445.0], [56.4, 445.0], [56.5, 446.0], [56.6, 446.0], [56.7, 446.0], [56.8, 446.0], [56.9, 446.0], [57.0, 447.0], [57.1, 447.0], [57.2, 447.0], [57.3, 447.0], [57.4, 447.0], [57.5, 448.0], [57.6, 448.0], [57.7, 448.0], [57.8, 448.0], [57.9, 449.0], [58.0, 449.0], [58.1, 449.0], [58.2, 449.0], [58.3, 449.0], [58.4, 450.0], [58.5, 450.0], [58.6, 450.0], [58.7, 451.0], [58.8, 451.0], [58.9, 451.0], [59.0, 451.0], [59.1, 451.0], [59.2, 452.0], [59.3, 452.0], [59.4, 452.0], [59.5, 452.0], [59.6, 452.0], [59.7, 453.0], [59.8, 453.0], [59.9, 453.0], [60.0, 453.0], [60.1, 454.0], [60.2, 454.0], [60.3, 454.0], [60.4, 454.0], [60.5, 455.0], [60.6, 455.0], [60.7, 455.0], [60.8, 455.0], [60.9, 455.0], [61.0, 456.0], [61.1, 456.0], [61.2, 456.0], [61.3, 456.0], [61.4, 456.0], [61.5, 457.0], [61.6, 457.0], [61.7, 457.0], [61.8, 457.0], [61.9, 458.0], [62.0, 458.0], [62.1, 458.0], [62.2, 458.0], [62.3, 459.0], [62.4, 459.0], [62.5, 459.0], [62.6, 460.0], [62.7, 460.0], [62.8, 460.0], [62.9, 460.0], [63.0, 461.0], [63.1, 461.0], [63.2, 461.0], [63.3, 462.0], [63.4, 462.0], [63.5, 462.0], [63.6, 462.0], [63.7, 463.0], [63.8, 463.0], [63.9, 463.0], [64.0, 463.0], [64.1, 464.0], [64.2, 464.0], [64.3, 464.0], [64.4, 465.0], [64.5, 465.0], [64.6, 465.0], [64.7, 466.0], [64.8, 466.0], [64.9, 466.0], [65.0, 467.0], [65.1, 467.0], [65.2, 467.0], [65.3, 468.0], [65.4, 468.0], [65.5, 468.0], [65.6, 469.0], [65.7, 469.0], [65.8, 469.0], [65.9, 470.0], [66.0, 470.0], [66.1, 470.0], [66.2, 471.0], [66.3, 471.0], [66.4, 471.0], [66.5, 472.0], [66.6, 472.0], [66.7, 472.0], [66.8, 473.0], [66.9, 473.0], [67.0, 473.0], [67.1, 473.0], [67.2, 474.0], [67.3, 474.0], [67.4, 474.0], [67.5, 474.0], [67.6, 475.0], [67.7, 475.0], [67.8, 475.0], [67.9, 475.0], [68.0, 475.0], [68.1, 476.0], [68.2, 476.0], [68.3, 476.0], [68.4, 477.0], [68.5, 477.0], [68.6, 477.0], [68.7, 477.0], [68.8, 478.0], [68.9, 478.0], [69.0, 478.0], [69.1, 478.0], [69.2, 479.0], [69.3, 479.0], [69.4, 479.0], [69.5, 479.0], [69.6, 480.0], [69.7, 480.0], [69.8, 480.0], [69.9, 480.0], [70.0, 481.0], [70.1, 481.0], [70.2, 481.0], [70.3, 481.0], [70.4, 482.0], [70.5, 482.0], [70.6, 482.0], [70.7, 483.0], [70.8, 483.0], [70.9, 483.0], [71.0, 484.0], [71.1, 484.0], [71.2, 484.0], [71.3, 485.0], [71.4, 485.0], [71.5, 485.0], [71.6, 485.0], [71.7, 486.0], [71.8, 486.0], [71.9, 486.0], [72.0, 487.0], [72.1, 487.0], [72.2, 487.0], [72.3, 487.0], [72.4, 487.0], [72.5, 488.0], [72.6, 488.0], [72.7, 488.0], [72.8, 488.0], [72.9, 488.0], [73.0, 488.0], [73.1, 489.0], [73.2, 489.0], [73.3, 489.0], [73.4, 489.0], [73.5, 489.0], [73.6, 489.0], [73.7, 490.0], [73.8, 490.0], [73.9, 490.0], [74.0, 490.0], [74.1, 490.0], [74.2, 491.0], [74.3, 491.0], [74.4, 491.0], [74.5, 491.0], [74.6, 491.0], [74.7, 491.0], [74.8, 492.0], [74.9, 492.0], [75.0, 492.0], [75.1, 492.0], [75.2, 493.0], [75.3, 493.0], [75.4, 493.0], [75.5, 493.0], [75.6, 493.0], [75.7, 494.0], [75.8, 494.0], [75.9, 494.0], [76.0, 494.0], [76.1, 494.0], [76.2, 494.0], [76.3, 495.0], [76.4, 495.0], [76.5, 495.0], [76.6, 495.0], [76.7, 495.0], [76.8, 496.0], [76.9, 496.0], [77.0, 496.0], [77.1, 496.0], [77.2, 497.0], [77.3, 497.0], [77.4, 497.0], [77.5, 497.0], [77.6, 498.0], [77.7, 498.0], [77.8, 498.0], [77.9, 499.0], [78.0, 499.0], [78.1, 499.0], [78.2, 499.0], [78.3, 500.0], [78.4, 500.0], [78.5, 500.0], [78.6, 500.0], [78.7, 501.0], [78.8, 501.0], [78.9, 501.0], [79.0, 501.0], [79.1, 502.0], [79.2, 502.0], [79.3, 502.0], [79.4, 502.0], [79.5, 503.0], [79.6, 503.0], [79.7, 503.0], [79.8, 503.0], [79.9, 504.0], [80.0, 504.0], [80.1, 504.0], [80.2, 505.0], [80.3, 505.0], [80.4, 505.0], [80.5, 506.0], [80.6, 506.0], [80.7, 506.0], [80.8, 507.0], [80.9, 507.0], [81.0, 507.0], [81.1, 507.0], [81.2, 508.0], [81.3, 508.0], [81.4, 508.0], [81.5, 509.0], [81.6, 509.0], [81.7, 509.0], [81.8, 510.0], [81.9, 510.0], [82.0, 511.0], [82.1, 511.0], [82.2, 512.0], [82.3, 512.0], [82.4, 512.0], [82.5, 513.0], [82.6, 513.0], [82.7, 513.0], [82.8, 514.0], [82.9, 514.0], [83.0, 514.0], [83.1, 515.0], [83.2, 515.0], [83.3, 516.0], [83.4, 516.0], [83.5, 517.0], [83.6, 517.0], [83.7, 518.0], [83.8, 518.0], [83.9, 519.0], [84.0, 519.0], [84.1, 519.0], [84.2, 520.0], [84.3, 520.0], [84.4, 521.0], [84.5, 521.0], [84.6, 522.0], [84.7, 522.0], [84.8, 523.0], [84.9, 523.0], [85.0, 524.0], [85.1, 524.0], [85.2, 525.0], [85.3, 526.0], [85.4, 526.0], [85.5, 527.0], [85.6, 528.0], [85.7, 529.0], [85.8, 530.0], [85.9, 531.0], [86.0, 533.0], [86.1, 534.0], [86.2, 535.0], [86.3, 536.0], [86.4, 536.0], [86.5, 538.0], [86.6, 539.0], [86.7, 540.0], [86.8, 541.0], [86.9, 541.0], [87.0, 542.0], [87.1, 543.0], [87.2, 544.0], [87.3, 545.0], [87.4, 547.0], [87.5, 549.0], [87.6, 550.0], [87.7, 552.0], [87.8, 554.0], [87.9, 556.0], [88.0, 558.0], [88.1, 559.0], [88.2, 561.0], [88.3, 562.0], [88.4, 564.0], [88.5, 566.0], [88.6, 568.0], [88.7, 570.0], [88.8, 572.0], [88.9, 573.0], [89.0, 575.0], [89.1, 576.0], [89.2, 577.0], [89.3, 579.0], [89.4, 582.0], [89.5, 584.0], [89.6, 585.0], [89.7, 587.0], [89.8, 589.0], [89.9, 592.0], [90.0, 593.0], [90.1, 594.0], [90.2, 595.0], [90.3, 596.0], [90.4, 597.0], [90.5, 599.0], [90.6, 600.0], [90.7, 601.0], [90.8, 603.0], [90.9, 605.0], [91.0, 606.0], [91.1, 608.0], [91.2, 609.0], [91.3, 610.0], [91.4, 611.0], [91.5, 612.0], [91.6, 613.0], [91.7, 614.0], [91.8, 615.0], [91.9, 617.0], [92.0, 618.0], [92.1, 619.0], [92.2, 621.0], [92.3, 623.0], [92.4, 625.0], [92.5, 627.0], [92.6, 628.0], [92.7, 630.0], [92.8, 631.0], [92.9, 633.0], [93.0, 634.0], [93.1, 636.0], [93.2, 638.0], [93.3, 640.0], [93.4, 641.0], [93.5, 643.0], [93.6, 644.0], [93.7, 647.0], [93.8, 651.0], [93.9, 655.0], [94.0, 658.0], [94.1, 660.0], [94.2, 661.0], [94.3, 663.0], [94.4, 664.0], [94.5, 666.0], [94.6, 668.0], [94.7, 670.0], [94.8, 673.0], [94.9, 678.0], [95.0, 683.0], [95.1, 687.0], [95.2, 689.0], [95.3, 692.0], [95.4, 694.0], [95.5, 697.0], [95.6, 700.0], [95.7, 703.0], [95.8, 710.0], [95.9, 716.0], [96.0, 719.0], [96.1, 723.0], [96.2, 726.0], [96.3, 732.0], [96.4, 739.0], [96.5, 741.0], [96.6, 747.0], [96.7, 759.0], [96.8, 774.0], [96.9, 782.0], [97.0, 790.0], [97.1, 808.0], [97.2, 818.0], [97.3, 827.0], [97.4, 833.0], [97.5, 843.0], [97.6, 866.0], [97.7, 872.0], [97.8, 884.0], [97.9, 887.0], [98.0, 894.0], [98.1, 898.0], [98.2, 905.0], [98.3, 912.0], [98.4, 923.0], [98.5, 935.0], [98.6, 947.0], [98.7, 957.0], [98.8, 967.0], [98.9, 983.0], [99.0, 999.0], [99.1, 1020.0], [99.2, 1051.0], [99.3, 1133.0], [99.4, 1232.0], [99.5, 1363.0], [99.6, 1464.0], [99.7, 1592.0], [99.8, 1833.0], [99.9, 2016.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 51898.0, "series": [{"data": [[0.0, 1321.0], [600.0, 6751.0], [700.0, 1964.0], [800.0, 1458.0], [900.0, 1174.0], [1000.0, 356.0], [1100.0, 133.0], [1200.0, 112.0], [1300.0, 98.0], [1400.0, 143.0], [1500.0, 104.0], [100.0, 7283.0], [1600.0, 71.0], [1700.0, 34.0], [1800.0, 64.0], [1900.0, 78.0], [2000.0, 104.0], [2100.0, 27.0], [2200.0, 3.0], [2300.0, 3.0], [2400.0, 2.0], [2500.0, 1.0], [200.0, 5731.0], [3200.0, 4.0], [3300.0, 1.0], [300.0, 38777.0], [400.0, 51898.0], [500.0, 16459.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 105556.0, "series": [{"data": [[0.0, 105556.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 28100.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 495.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 968.8128886376471, "minX": 1.75235718E12, "maxY": 994.3736867343789, "series": [{"data": [[1.75235718E12, 994.3736867343789], [1.75235724E12, 968.8128886376471]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235724E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.0, "maxY": 892.0, "series": [{"data": [[2.0, 137.0], [3.0, 154.0], [4.0, 198.0], [5.0, 231.0], [6.0, 552.0], [7.0, 812.0], [8.0, 86.0], [9.0, 815.0], [10.0, 111.0], [11.0, 872.0], [12.0, 112.0], [13.0, 131.0], [14.0, 258.0], [15.0, 155.0], [16.0, 268.0], [17.0, 243.0], [18.0, 310.0], [19.0, 320.0], [20.0, 310.0], [22.0, 320.5], [24.0, 328.5], [25.0, 334.0], [26.0, 337.0], [27.0, 334.0], [28.0, 370.0], [29.0, 378.0], [30.0, 374.0], [31.0, 417.0], [33.0, 417.0], [32.0, 387.0], [35.0, 417.0], [34.0, 390.0], [37.0, 416.0], [36.0, 401.0], [39.0, 409.5], [41.0, 418.0], [40.0, 401.0], [43.0, 413.0], [45.0, 407.0], [44.0, 422.0], [47.0, 231.0], [49.0, 31.0], [48.0, 407.0], [51.0, 743.0], [50.0, 430.0], [53.0, 24.0], [52.0, 31.0], [54.0, 432.0], [57.0, 32.0], [56.0, 391.5], [59.0, 442.0], [58.0, 23.0], [61.0, 32.0], [60.0, 24.0], [63.0, 776.0], [62.0, 23.0], [67.0, 24.0], [66.0, 34.0], [65.0, 245.0], [71.0, 441.0], [70.0, 52.0], [69.0, 437.5], [75.0, 822.0], [74.0, 59.0], [73.0, 88.0], [72.0, 23.0], [79.0, 69.0], [78.0, 55.0], [76.0, 445.0], [83.0, 339.75], [87.0, 209.0], [86.0, 46.0], [84.0, 108.0], [91.0, 361.5], [89.0, 892.0], [88.0, 445.0], [95.0, 361.5], [93.0, 444.0], [92.0, 23.0], [99.0, 364.0], [97.0, 233.0], [102.0, 233.5], [100.0, 405.0], [107.0, 425.0], [105.0, 227.0], [104.0, 254.0], [111.0, 444.0], [110.0, 199.5], [109.0, 444.0], [108.0, 123.33333333333334], [115.0, 417.0], [114.0, 139.66666666666669], [113.0, 220.0], [112.0, 187.5], [119.0, 739.0], [118.0, 454.0], [117.0, 330.0], [116.0, 218.33333333333334], [123.0, 332.66666666666663], [122.0, 473.0], [120.0, 238.0], [127.0, 763.0], [126.0, 374.0], [125.0, 429.0], [135.0, 432.0], [134.0, 437.0], [133.0, 509.0], [132.0, 190.0], [131.0, 423.5], [130.0, 432.0], [129.0, 507.0], [128.0, 191.0], [143.0, 431.0], [142.0, 200.0], [141.0, 310.5], [140.0, 792.0], [139.0, 431.0], [138.0, 462.6666666666667], [136.0, 203.0], [150.0, 514.0], [149.0, 268.0], [148.0, 179.0], [147.0, 436.0], [146.0, 514.0], [145.0, 195.33333333333334], [144.0, 509.0], [159.0, 198.5], [158.0, 274.0], [157.0, 373.6666666666667], [156.0, 223.0], [154.0, 273.0], [153.0, 272.6666666666667], [167.0, 168.0], [166.0, 477.5], [165.0, 281.0], [164.0, 231.0], [163.0, 168.0], [162.0, 516.0], [161.0, 359.5], [175.0, 518.0], [174.0, 287.0], [172.0, 300.0], [171.0, 231.0], [170.0, 373.6666666666667], [169.0, 299.0], [168.0, 231.0], [183.0, 435.0], [182.0, 241.33333333333334], [179.0, 435.0], [178.0, 240.66666666666666], [191.0, 525.0], [190.0, 256.3333333333333], [187.0, 446.0], [186.0, 316.0], [199.0, 525.0], [198.0, 448.0], [197.0, 558.5], [196.0, 524.0], [195.0, 380.0], [193.0, 420.5], [206.0, 733.0], [205.0, 578.3333333333334], [204.0, 524.0], [203.0, 445.0], [202.0, 674.0], [201.0, 316.0], [200.0, 717.0], [215.0, 324.0], [214.0, 736.0], [213.0, 482.5], [212.0, 703.0], [211.0, 321.0], [210.0, 733.0], [209.0, 553.0], [208.0, 321.0], [223.0, 383.0], [221.0, 616.0], [220.0, 324.0], [219.0, 438.0], [218.0, 738.0], [217.0, 615.0], [230.0, 275.0], [229.0, 523.0], [228.0, 187.0], [227.0, 341.0], [226.0, 485.0], [225.0, 185.0], [239.0, 443.0], [238.0, 522.0], [237.0, 298.0], [236.0, 378.0], [234.0, 331.4], [245.0, 294.0], [244.0, 304.0], [243.0, 521.0], [242.0, 235.0], [241.0, 324.5], [254.0, 440.0], [253.0, 527.0], [252.0, 347.0], [251.0, 275.5], [250.0, 439.0], [249.0, 353.25], [270.0, 313.0], [269.0, 363.5], [259.0, 374.0], [258.0, 527.0], [257.0, 349.0], [256.0, 278.0], [267.0, 529.0], [266.0, 314.0], [265.0, 267.0], [264.0, 439.0], [263.0, 311.0], [262.0, 527.0], [261.0, 259.0], [260.0, 363.0], [286.0, 316.0], [287.0, 371.0], [285.0, 377.5], [275.0, 331.3333333333333], [274.0, 439.0], [273.0, 336.0], [272.0, 529.0], [283.0, 370.0], [282.0, 422.0], [280.0, 310.0], [279.0, 406.0], [277.0, 317.0], [276.0, 529.0], [302.0, 372.0], [303.0, 314.0], [301.0, 320.0], [300.0, 527.0], [299.0, 314.0], [298.0, 372.0], [297.0, 321.0], [296.0, 340.5], [294.0, 527.0], [289.0, 418.5], [291.0, 445.0], [290.0, 321.0], [293.0, 315.5], [292.0, 371.0], [317.0, 526.0], [318.0, 314.0], [316.0, 414.0], [307.0, 404.0], [306.0, 322.0], [305.0, 343.0], [304.0, 424.0], [315.0, 315.0], [314.0, 326.0], [312.0, 525.0], [311.0, 344.0], [309.0, 324.0], [308.0, 445.0], [332.0, 391.0], [334.0, 375.0], [335.0, 524.0], [333.0, 327.0], [330.0, 525.0], [329.0, 349.5], [327.0, 315.0], [323.0, 321.0], [321.0, 385.6666666666667], [326.0, 459.0], [325.0, 448.5], [350.0, 527.0], [351.0, 457.0], [349.0, 371.0], [348.0, 394.0], [347.0, 448.0], [345.0, 328.0], [344.0, 374.0], [343.0, 392.5], [337.0, 459.0], [336.0, 332.0], [339.0, 375.0], [338.0, 327.0], [342.0, 524.0], [340.0, 332.0], [354.0, 376.0], [366.0, 380.0], [365.0, 340.5], [363.0, 452.0], [361.0, 458.0], [360.0, 339.0], [359.0, 380.0], [358.0, 429.5], [357.0, 400.0], [353.0, 330.0], [352.0, 343.0], [382.0, 385.0], [373.0, 29.420689655172414], [374.0, 78.0], [375.0, 159.75], [368.0, 492.0], [371.0, 381.0], [370.0, 338.5], [376.0, 34.52127659574469], [378.0, 87.0], [377.0, 340.0], [379.0, 344.0], [383.0, 344.0], [381.0, 343.0], [380.0, 456.0], [398.0, 11.0], [385.0, 416.75], [384.0, 11.5], [386.0, 176.5], [387.0, 386.0], [390.0, 502.74999999999994], [388.0, 346.0], [391.0, 385.0], [392.0, 80.6], [395.0, 383.6666666666667], [394.0, 385.0], [393.0, 344.0], [399.0, 143.66666666666666], [397.0, 348.0], [396.0, 387.0], [402.0, 77.0], [405.0, 270.6666666666667], [406.0, 14.0], [407.0, 249.0], [401.0, 387.0], [400.0, 347.0], [408.0, 184.5], [409.0, 15.0], [411.0, 15.0], [410.0, 489.5], [413.0, 276.75], [403.0, 345.0], [414.0, 17.0], [415.0, 490.5], [428.0, 237.0], [417.0, 15.75], [418.0, 277.5], [422.0, 16.0], [420.0, 490.5], [423.0, 278.5], [430.0, 127.66666666666666], [431.0, 526.0], [427.0, 390.0], [426.0, 350.5], [424.0, 525.0], [444.0, 16.0], [433.0, 204.0], [434.0, 182.5], [435.0, 351.0], [436.0, 119.0], [437.0, 201.0], [439.0, 16.0], [432.0, 457.0], [438.0, 457.0], [445.0, 171.8], [447.0, 273.0], [440.0, 352.5], [443.0, 353.0], [442.0, 458.5], [446.0, 389.0], [450.0, 163.0], [449.0, 240.66666666666666], [451.0, 141.0], [460.0, 456.0], [461.0, 56.22222222222222], [462.0, 42.0], [463.0, 144.0], [452.0, 190.0], [453.0, 73.16666666666666], [455.0, 132.85714285714286], [454.0, 351.0], [456.0, 16.8], [457.0, 187.4], [458.0, 129.33333333333331], [459.0, 109.5], [476.0, 79.33333333333334], [464.0, 91.6], [466.0, 19.400000000000002], [465.0, 363.0], [467.0, 449.6666666666667], [477.0, 149.85714285714286], [478.0, 241.5], [479.0, 93.83333333333333], [468.0, 99.0], [469.0, 191.66666666666666], [470.0, 21.5], [471.0, 422.5], [472.0, 69.0], [473.0, 82.83333333333333], [474.0, 281.0], [475.0, 94.83333333333334], [482.0, 31.5], [480.0, 75.57142857142857], [481.0, 554.0], [483.0, 106.0], [492.0, 363.0], [493.0, 29.4], [494.0, 98.63636363636363], [495.0, 176.5], [485.0, 88.5], [484.0, 412.0], [486.0, 206.66666666666666], [487.0, 88.5], [488.0, 122.66666666666666], [489.0, 123.57142857142857], [490.0, 118.66666666666666], [491.0, 389.0], [498.0, 99.16666666666667], [496.0, 125.28571428571428], [497.0, 457.0], [499.0, 34.0], [501.0, 119.5], [500.0, 432.3333333333333], [502.0, 229.85714285714286], [503.0, 100.66666666666667], [505.0, 100.16666666666667], [507.0, 229.0], [508.0, 79.66666666666666], [510.0, 36.0], [509.0, 368.0], [511.0, 177.42857142857144], [504.0, 389.0], [519.0, 128.5], [513.0, 42.4], [512.0, 30.0], [525.0, 241.10000000000002], [514.0, 264.6666666666667], [515.0, 42.25], [517.0, 43.4], [516.0, 491.5], [518.0, 425.0], [528.0, 244.5], [541.0, 110.85964912280701], [542.0, 459.6666666666667], [543.0, 413.5], [537.0, 54.75], [536.0, 370.0], [539.0, 394.0], [538.0, 480.3333333333333], [540.0, 78.37185929648244], [529.0, 114.5], [531.0, 42.2], [530.0, 490.0], [532.0, 217.0], [533.0, 42.0], [534.0, 46.0], [535.0, 291.25], [521.0, 160.0], [520.0, 503.0], [522.0, 250.85714285714286], [523.0, 64.5], [524.0, 55.0], [550.0, 87.33333333333333], [557.0, 256.33333333333337], [545.0, 379.75], [544.0, 374.0], [546.0, 456.0], [547.0, 95.0], [549.0, 306.75], [548.0, 386.0], [561.0, 179.66666666666669], [560.0, 373.0], [563.0, 374.0], [562.0, 386.0], [572.0, 354.0], [574.0, 156.5], [570.0, 103.0], [569.0, 493.0], [568.0, 397.0], [551.0, 386.0], [571.0, 284.0], [565.0, 210.85714285714283], [567.0, 234.0], [566.0, 412.5], [553.0, 402.6666666666667], [554.0, 157.75], [555.0, 214.66666666666669], [556.0, 373.5], [559.0, 161.0], [558.0, 398.0], [579.0, 92.33333333333333], [576.0, 192.8], [590.0, 143.16666666666669], [591.0, 156.75], [588.0, 149.16666666666666], [589.0, 176.27272727272728], [586.0, 273.0], [587.0, 93.0], [577.0, 159.77777777777777], [578.0, 170.0], [580.0, 152.6], [581.0, 180.25], [582.0, 95.66666666666667], [583.0, 201.5], [592.0, 89.25], [606.0, 103.0], [607.0, 177.88888888888889], [604.0, 158.8], [605.0, 159.63636363636365], [602.0, 241.33333333333334], [603.0, 188.33333333333331], [600.0, 152.44444444444446], [601.0, 188.71428571428572], [593.0, 135.11111111111111], [594.0, 178.14285714285714], [595.0, 148.45454545454544], [597.0, 146.8], [596.0, 377.0], [598.0, 68.0], [599.0, 259.0], [584.0, 157.2], [585.0, 97.2], [611.0, 159.0], [620.0, 230.75], [609.0, 90.0], [623.0, 115.6], [608.0, 415.0], [621.0, 318.0], [622.0, 299.66666666666663], [613.0, 70.0], [614.0, 94.5], [615.0, 294.0], [632.0, 96.4], [634.0, 142.83333333333331], [633.0, 411.6666666666667], [635.0, 266.33333333333337], [636.0, 167.875], [637.0, 259.25], [638.0, 95.71428571428571], [639.0, 363.25], [625.0, 194.75], [626.0, 476.0], [627.0, 157.0], [629.0, 168.125], [628.0, 460.25], [630.0, 415.6666666666667], [631.0, 96.4], [616.0, 87.5], [617.0, 426.0], [618.0, 147.83333333333331], [619.0, 352.66666666666663], [644.0, 209.28571428571428], [641.0, 247.85714285714286], [640.0, 454.0], [642.0, 116.0], [643.0, 304.6666666666667], [645.0, 212.375], [646.0, 219.0], [647.0, 198.33333333333331], [664.0, 95.0], [665.0, 74.0], [669.0, 468.0], [666.0, 417.0], [671.0, 464.0], [659.0, 485.6666666666667], [656.0, 392.5], [670.0, 378.0], [648.0, 226.0], [649.0, 460.0], [651.0, 385.0], [650.0, 609.0], [654.0, 535.5], [652.0, 379.0], [655.0, 385.0], [660.0, 112.0], [662.0, 82.0], [661.0, 395.0], [663.0, 497.0], [700.0, 378.0], [686.0, 246.5], [685.0, 411.0], [684.0, 496.5], [682.0, 378.0], [681.0, 399.0], [691.0, 267.5], [690.0, 378.0], [689.0, 606.0], [688.0, 398.5], [693.0, 378.0], [692.0, 386.0], [702.0, 496.5], [701.0, 410.0], [699.0, 424.0], [698.0, 508.0], [696.0, 378.0], [679.0, 608.0], [678.0, 378.0], [677.0, 463.0], [676.0, 399.0], [675.0, 608.0], [674.0, 378.0], [673.0, 398.5], [687.0, 461.0], [695.0, 461.0], [694.0, 467.6666666666667], [732.0, 81.0], [728.0, 468.3333333333333], [714.0, 186.66666666666669], [713.0, 398.0], [712.0, 481.0], [717.0, 397.5], [716.0, 397.5], [719.0, 397.5], [706.0, 386.0], [705.0, 416.0], [709.0, 393.0], [707.0, 606.0], [711.0, 397.5], [710.0, 462.0], [718.0, 601.0], [731.0, 172.07142857142858], [734.0, 74.0], [735.0, 390.6666666666667], [721.0, 397.0], [720.0, 529.0], [724.0, 386.0], [723.0, 490.6666666666667], [726.0, 408.0], [725.0, 378.0], [733.0, 530.0], [730.0, 378.0], [729.0, 386.0], [762.0, 230.5], [739.0, 334.25], [743.0, 320.5], [740.0, 600.0], [747.0, 235.0], [745.0, 489.3333333333333], [749.0, 420.0], [748.0, 504.5], [751.0, 409.0], [737.0, 381.0], [750.0, 385.0], [756.0, 100.0], [755.0, 409.0], [754.0, 408.3333333333333], [757.0, 408.5], [759.0, 460.0], [758.0, 383.0], [766.0, 382.5], [767.0, 189.33333333333331], [763.0, 408.0], [760.0, 408.0], [793.0, 344.0], [768.0, 245.5], [775.0, 230.0], [774.0, 394.5], [773.0, 590.0], [772.0, 395.5], [770.0, 459.0], [769.0, 380.0], [792.0, 407.4], [776.0, 83.0], [778.0, 381.0], [777.0, 524.5], [780.0, 409.0], [779.0, 396.5], [781.0, 227.0], [783.0, 385.0], [782.0, 524.0], [785.0, 245.5], [786.0, 377.0], [791.0, 453.3333333333333], [788.0, 395.5], [794.0, 233.5], [795.0, 338.75], [796.0, 371.3333333333333], [797.0, 433.5], [799.0, 461.6666666666667], [784.0, 395.5], [798.0, 380.0], [825.0, 332.75], [800.0, 225.66666666666669], [815.0, 417.5], [814.0, 397.0], [813.0, 460.5], [812.0, 452.6666666666667], [811.0, 416.6666666666667], [810.0, 382.0], [824.0, 462.6666666666667], [806.0, 419.0], [805.0, 500.5], [804.0, 384.0], [803.0, 419.0], [802.0, 410.0], [801.0, 487.5], [808.0, 292.6666666666667], [809.0, 284.66666666666663], [817.0, 126.5], [821.0, 292.0], [820.0, 594.0], [818.0, 392.0], [823.0, 384.0], [822.0, 462.0], [826.0, 120.0], [827.0, 352.6666666666667], [830.0, 468.6666666666667], [829.0, 383.0], [828.0, 397.0], [831.0, 266.0], [816.0, 593.0], [861.0, 273.75], [834.0, 368.0], [839.0, 342.5], [835.0, 384.0], [856.0, 417.3333333333333], [858.0, 420.5], [857.0, 465.0], [860.0, 384.0], [859.0, 465.0], [843.0, 255.0], [842.0, 383.0], [841.0, 462.25], [840.0, 384.0], [844.0, 446.2], [845.0, 179.75], [847.0, 489.0], [832.0, 383.5], [848.0, 338.0], [852.0, 355.0], [851.0, 412.0], [850.0, 422.5], [849.0, 463.3333333333333], [853.0, 387.0], [855.0, 491.5], [854.0, 417.6666666666667], [863.0, 412.0], [862.0, 597.0], [891.0, 338.375], [868.0, 285.6666666666667], [865.0, 102.0], [864.0, 387.0], [867.0, 462.25], [871.0, 265.6666666666667], [870.0, 444.5], [869.0, 444.3636363636364], [888.0, 262.8], [890.0, 34.0], [889.0, 390.0], [893.0, 677.0], [892.0, 445.75], [894.0, 434.3333333333333], [895.0, 439.5], [873.0, 376.0], [874.0, 271.0], [877.0, 530.3333333333334], [876.0, 429.6666666666667], [875.0, 437.66666666666663], [878.0, 389.0], [879.0, 323.6666666666667], [880.0, 340.8], [881.0, 87.0], [882.0, 398.5], [883.0, 355.6666666666667], [884.0, 71.0], [885.0, 101.0], [886.0, 370.33333333333337], [887.0, 174.0], [899.0, 479.3333333333333], [908.0, 519.75], [897.0, 360.8], [896.0, 670.0], [910.0, 424.5], [909.0, 526.5], [911.0, 408.25], [898.0, 490.83333333333337], [902.0, 520.6666666666666], [901.0, 388.0], [900.0, 408.33333333333337], [920.0, 432.5], [903.0, 387.0], [913.0, 496.625], [912.0, 475.57142857142856], [915.0, 469.0], [914.0, 449.2], [917.0, 497.0], [916.0, 418.3333333333333], [919.0, 497.5], [918.0, 410.75], [927.0, 490.3333333333333], [926.0, 449.5], [925.0, 451.0], [922.0, 384.75], [924.0, 401.625], [921.0, 245.0], [904.0, 401.2], [905.0, 505.0], [907.0, 476.25], [954.0, 349.77777777777777], [947.0, 328.90624999999994], [928.0, 267.0], [929.0, 390.0], [931.0, 462.3333333333333], [930.0, 432.5], [933.0, 607.0], [932.0, 419.3333333333333], [935.0, 421.5], [934.0, 402.5], [942.0, 426.3], [941.0, 466.5], [938.0, 470.3333333333333], [937.0, 421.5], [936.0, 470.3333333333333], [945.0, 393.2857142857143], [946.0, 253.3296703296703], [948.0, 407.0], [949.0, 529.1333333333332], [950.0, 576.3055555555557], [951.0, 534.7428571428571], [952.0, 487.0], [953.0, 516.8732394366198], [955.0, 398.85185185185185], [956.0, 359.6551724137932], [957.0, 391.0], [958.0, 295.3965517241379], [959.0, 240.5], [944.0, 471.5], [967.0, 304.0769230769231], [963.0, 282.57894736842104], [960.0, 162.66666666666663], [975.0, 371.6], [974.0, 450.2], [973.0, 495.0], [972.0, 409.0], [971.0, 450.0], [970.0, 482.2], [961.0, 194.62499999999997], [962.0, 167.40625000000006], [964.0, 205.0769230769231], [965.0, 206.98275862068968], [966.0, 244.70270270270268], [979.0, 411.25], [991.0, 280.25], [977.0, 450.0], [976.0, 469.0], [978.0, 392.0], [989.0, 339.4], [988.0, 480.3333333333333], [987.0, 444.8333333333333], [986.0, 444.45454545454544], [985.0, 448.37500000000006], [984.0, 449.59999999999997], [990.0, 267.3333333333333], [980.0, 396.6666666666667], [981.0, 409.125], [983.0, 400.0], [982.0, 500.5], [968.0, 193.14285714285717], [969.0, 197.51724137931035], [995.0, 233.38095238095238], [992.0, 424.1153846153846], [993.0, 267.54166666666663], [994.0, 235.4], [996.0, 414.52604166666674], [997.0, 485.24999999999994], [998.0, 494.7179487179488], [999.0, 344.9642857142857], [1000.0, 447.13515260157476], [1.0, 135.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[990.6661001535542, 441.9083366876869]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 47674.55, "minX": 1.75235718E12, "maxY": 857844.2, "series": [{"data": [[1.75235718E12, 857844.2], [1.75235724E12, 145409.78333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235718E12, 280997.85], [1.75235724E12, 47674.55]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235724E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 431.5950215789686, "minX": 1.75235718E12, "maxY": 502.6969525669375, "series": [{"data": [[1.75235718E12, 431.5950215789686], [1.75235724E12, 502.6969525669375]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235724E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 431.55671127774013, "minX": 1.75235718E12, "maxY": 502.69248162803746, "series": [{"data": [[1.75235718E12, 431.55671127774013], [1.75235724E12, 502.69248162803746]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235724E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.03407163780255919, "minX": 1.75235718E12, "maxY": 1.0000087187758824, "series": [{"data": [[1.75235718E12, 1.0000087187758824], [1.75235724E12, 0.03407163780255919]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235724E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.75235718E12, "maxY": 3302.0, "series": [{"data": [[1.75235718E12, 1936.0], [1.75235724E12, 3302.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235718E12, 701.0], [1.75235724E12, 910.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235718E12, 837.0], [1.75235724E12, 1934.800000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235718E12, 747.0], [1.75235724E12, 1017.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235718E12, 3.0], [1.75235724E12, 22.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235718E12, 452.0], [1.75235724E12, 385.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235724E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 798.0, "maxY": 574.0, "series": [{"data": [[798.0, 28.0], [1257.0, 387.0], [1486.0, 406.0], [1725.0, 397.0], [1800.0, 390.0], [2171.0, 443.0], [2077.0, 334.0], [2132.0, 356.0], [2287.0, 444.0], [2303.0, 431.0], [2232.0, 178.0], [2187.0, 453.0], [2188.0, 466.0], [2276.0, 437.0], [2203.0, 365.0], [2278.0, 409.0], [2283.0, 440.0], [2285.0, 519.0], [2289.0, 474.0], [2288.0, 574.0], [2280.0, 445.0], [2281.0, 493.0], [2211.0, 439.0], [2210.0, 558.0], [2218.0, 453.0], [2221.0, 394.0], [2265.0, 446.0], [2266.0, 566.0], [2267.0, 414.0], [2249.0, 447.0], [2254.0, 457.0], [2250.0, 455.0], [2259.0, 445.0], [2255.0, 391.0], [2256.0, 429.0], [2257.0, 393.0], [2290.0, 427.0], [2293.0, 447.0], [2292.0, 298.0], [2300.0, 431.0], [2299.0, 441.0], [2319.0, 437.0], [2329.0, 430.0], [2326.0, 446.0], [2341.0, 431.0], [2338.0, 440.0], [2309.0, 442.0], [2322.0, 434.0], [2308.0, 426.0], [2324.0, 436.0], [2313.0, 456.0], [2317.0, 464.0], [2358.0, 439.0], [2345.0, 574.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2232.0, 9.0], [2281.0, 530.0], [2221.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2358.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 798.0, "maxY": 574.0, "series": [{"data": [[798.0, 28.0], [1257.0, 387.0], [1486.0, 406.0], [1725.0, 397.0], [1800.0, 390.0], [2171.0, 443.0], [2077.0, 334.0], [2132.0, 356.0], [2287.0, 444.0], [2303.0, 431.0], [2232.0, 177.0], [2187.0, 453.0], [2188.0, 466.0], [2276.0, 437.0], [2203.0, 365.0], [2278.0, 409.0], [2283.0, 440.0], [2285.0, 519.0], [2289.0, 474.0], [2288.0, 574.0], [2280.0, 445.0], [2281.0, 493.0], [2211.0, 439.0], [2210.0, 558.0], [2218.0, 453.0], [2221.0, 394.0], [2265.0, 446.0], [2266.0, 566.0], [2267.0, 414.0], [2249.0, 447.0], [2254.0, 457.0], [2250.0, 455.0], [2259.0, 445.0], [2255.0, 391.0], [2256.0, 429.0], [2257.0, 393.0], [2290.0, 427.0], [2293.0, 447.0], [2292.0, 298.0], [2300.0, 431.0], [2299.0, 441.0], [2319.0, 437.0], [2329.0, 430.0], [2326.0, 446.0], [2341.0, 431.0], [2338.0, 440.0], [2309.0, 442.0], [2322.0, 434.0], [2308.0, 426.0], [2324.0, 436.0], [2313.0, 456.0], [2317.0, 464.0], [2358.0, 439.0], [2345.0, 574.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2232.0, 0.0], [2281.0, 530.0], [2221.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2358.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 307.65, "minX": 1.75235718E12, "maxY": 1928.25, "series": [{"data": [[1.75235718E12, 1928.25], [1.75235724E12, 307.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235724E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75235718E12, "maxY": 1911.5333333333333, "series": [{"data": [[1.75235718E12, 1911.5333333333333], [1.75235724E12, 324.31666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75235718E12, 0.016666666666666666]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.75235718E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235724E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.75235718E12, "maxY": 1911.5333333333333, "series": [{"data": [[1.75235718E12, 1911.5333333333333], [1.75235724E12, 324.31666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75235718E12, 0.05]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235724E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.75235718E12, "maxY": 1911.5333333333333, "series": [{"data": [[1.75235718E12, 1911.5333333333333], [1.75235724E12, 324.31666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75235718E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235724E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

