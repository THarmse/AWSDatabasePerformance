/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 2794.0, "series": [{"data": [[0.0, 7.0], [0.1, 55.0], [0.2, 79.0], [0.3, 88.0], [0.4, 107.0], [0.5, 113.0], [0.6, 121.0], [0.7, 129.0], [0.8, 143.0], [0.9, 159.0], [1.0, 170.0], [1.1, 183.0], [1.2, 201.0], [1.3, 215.0], [1.4, 225.0], [1.5, 236.0], [1.6, 246.0], [1.7, 258.0], [1.8, 265.0], [1.9, 278.0], [2.0, 285.0], [2.1, 296.0], [2.2, 310.0], [2.3, 317.0], [2.4, 330.0], [2.5, 355.0], [2.6, 377.0], [2.7, 385.0], [2.8, 407.0], [2.9, 416.0], [3.0, 428.0], [3.1, 514.0], [3.2, 534.0], [3.3, 567.0], [3.4, 577.0], [3.5, 591.0], [3.6, 633.0], [3.7, 646.0], [3.8, 650.0], [3.9, 653.0], [4.0, 659.0], [4.1, 667.0], [4.2, 672.0], [4.3, 676.0], [4.4, 678.0], [4.5, 680.0], [4.6, 682.0], [4.7, 686.0], [4.8, 688.0], [4.9, 690.0], [5.0, 691.0], [5.1, 693.0], [5.2, 695.0], [5.3, 696.0], [5.4, 697.0], [5.5, 699.0], [5.6, 700.0], [5.7, 701.0], [5.8, 702.0], [5.9, 704.0], [6.0, 705.0], [6.1, 706.0], [6.2, 707.0], [6.3, 708.0], [6.4, 708.0], [6.5, 709.0], [6.6, 710.0], [6.7, 710.0], [6.8, 711.0], [6.9, 712.0], [7.0, 713.0], [7.1, 713.0], [7.2, 714.0], [7.3, 715.0], [7.4, 716.0], [7.5, 716.0], [7.6, 717.0], [7.7, 717.0], [7.8, 718.0], [7.9, 719.0], [8.0, 719.0], [8.1, 720.0], [8.2, 720.0], [8.3, 721.0], [8.4, 721.0], [8.5, 722.0], [8.6, 722.0], [8.7, 722.0], [8.8, 723.0], [8.9, 723.0], [9.0, 724.0], [9.1, 724.0], [9.2, 725.0], [9.3, 725.0], [9.4, 726.0], [9.5, 726.0], [9.6, 727.0], [9.7, 727.0], [9.8, 727.0], [9.9, 728.0], [10.0, 728.0], [10.1, 729.0], [10.2, 729.0], [10.3, 730.0], [10.4, 730.0], [10.5, 731.0], [10.6, 731.0], [10.7, 732.0], [10.8, 732.0], [10.9, 733.0], [11.0, 734.0], [11.1, 734.0], [11.2, 735.0], [11.3, 736.0], [11.4, 736.0], [11.5, 737.0], [11.6, 738.0], [11.7, 739.0], [11.8, 740.0], [11.9, 741.0], [12.0, 742.0], [12.1, 742.0], [12.2, 743.0], [12.3, 744.0], [12.4, 746.0], [12.5, 747.0], [12.6, 748.0], [12.7, 748.0], [12.8, 749.0], [12.9, 750.0], [13.0, 751.0], [13.1, 751.0], [13.2, 752.0], [13.3, 753.0], [13.4, 754.0], [13.5, 754.0], [13.6, 755.0], [13.7, 755.0], [13.8, 756.0], [13.9, 757.0], [14.0, 757.0], [14.1, 758.0], [14.2, 759.0], [14.3, 759.0], [14.4, 760.0], [14.5, 760.0], [14.6, 761.0], [14.7, 761.0], [14.8, 762.0], [14.9, 763.0], [15.0, 763.0], [15.1, 764.0], [15.2, 765.0], [15.3, 766.0], [15.4, 766.0], [15.5, 768.0], [15.6, 768.0], [15.7, 769.0], [15.8, 770.0], [15.9, 771.0], [16.0, 772.0], [16.1, 773.0], [16.2, 774.0], [16.3, 775.0], [16.4, 776.0], [16.5, 776.0], [16.6, 777.0], [16.7, 778.0], [16.8, 779.0], [16.9, 780.0], [17.0, 780.0], [17.1, 781.0], [17.2, 783.0], [17.3, 783.0], [17.4, 784.0], [17.5, 785.0], [17.6, 785.0], [17.7, 786.0], [17.8, 787.0], [17.9, 788.0], [18.0, 789.0], [18.1, 790.0], [18.2, 791.0], [18.3, 791.0], [18.4, 792.0], [18.5, 793.0], [18.6, 793.0], [18.7, 794.0], [18.8, 795.0], [18.9, 795.0], [19.0, 796.0], [19.1, 797.0], [19.2, 798.0], [19.3, 798.0], [19.4, 799.0], [19.5, 799.0], [19.6, 800.0], [19.7, 801.0], [19.8, 802.0], [19.9, 802.0], [20.0, 803.0], [20.1, 803.0], [20.2, 804.0], [20.3, 804.0], [20.4, 804.0], [20.5, 805.0], [20.6, 805.0], [20.7, 806.0], [20.8, 806.0], [20.9, 807.0], [21.0, 807.0], [21.1, 808.0], [21.2, 808.0], [21.3, 809.0], [21.4, 809.0], [21.5, 810.0], [21.6, 810.0], [21.7, 810.0], [21.8, 811.0], [21.9, 811.0], [22.0, 812.0], [22.1, 812.0], [22.2, 813.0], [22.3, 813.0], [22.4, 814.0], [22.5, 814.0], [22.6, 815.0], [22.7, 815.0], [22.8, 815.0], [22.9, 815.0], [23.0, 816.0], [23.1, 816.0], [23.2, 817.0], [23.3, 817.0], [23.4, 817.0], [23.5, 818.0], [23.6, 818.0], [23.7, 818.0], [23.8, 819.0], [23.9, 819.0], [24.0, 819.0], [24.1, 820.0], [24.2, 820.0], [24.3, 821.0], [24.4, 821.0], [24.5, 821.0], [24.6, 821.0], [24.7, 822.0], [24.8, 822.0], [24.9, 823.0], [25.0, 823.0], [25.1, 823.0], [25.2, 824.0], [25.3, 824.0], [25.4, 824.0], [25.5, 824.0], [25.6, 825.0], [25.7, 825.0], [25.8, 826.0], [25.9, 826.0], [26.0, 826.0], [26.1, 826.0], [26.2, 827.0], [26.3, 827.0], [26.4, 827.0], [26.5, 828.0], [26.6, 828.0], [26.7, 828.0], [26.8, 828.0], [26.9, 829.0], [27.0, 829.0], [27.1, 829.0], [27.2, 830.0], [27.3, 830.0], [27.4, 830.0], [27.5, 830.0], [27.6, 831.0], [27.7, 831.0], [27.8, 831.0], [27.9, 831.0], [28.0, 832.0], [28.1, 832.0], [28.2, 832.0], [28.3, 833.0], [28.4, 833.0], [28.5, 833.0], [28.6, 834.0], [28.7, 834.0], [28.8, 834.0], [28.9, 834.0], [29.0, 835.0], [29.1, 835.0], [29.2, 835.0], [29.3, 836.0], [29.4, 836.0], [29.5, 836.0], [29.6, 837.0], [29.7, 837.0], [29.8, 837.0], [29.9, 837.0], [30.0, 838.0], [30.1, 838.0], [30.2, 838.0], [30.3, 839.0], [30.4, 839.0], [30.5, 840.0], [30.6, 840.0], [30.7, 840.0], [30.8, 841.0], [30.9, 841.0], [31.0, 841.0], [31.1, 842.0], [31.2, 842.0], [31.3, 842.0], [31.4, 843.0], [31.5, 843.0], [31.6, 844.0], [31.7, 844.0], [31.8, 844.0], [31.9, 845.0], [32.0, 845.0], [32.1, 846.0], [32.2, 846.0], [32.3, 847.0], [32.4, 847.0], [32.5, 847.0], [32.6, 848.0], [32.7, 848.0], [32.8, 849.0], [32.9, 849.0], [33.0, 850.0], [33.1, 850.0], [33.2, 851.0], [33.3, 851.0], [33.4, 851.0], [33.5, 852.0], [33.6, 852.0], [33.7, 852.0], [33.8, 853.0], [33.9, 853.0], [34.0, 853.0], [34.1, 854.0], [34.2, 854.0], [34.3, 855.0], [34.4, 855.0], [34.5, 855.0], [34.6, 856.0], [34.7, 856.0], [34.8, 856.0], [34.9, 857.0], [35.0, 857.0], [35.1, 857.0], [35.2, 858.0], [35.3, 858.0], [35.4, 859.0], [35.5, 859.0], [35.6, 859.0], [35.7, 860.0], [35.8, 860.0], [35.9, 860.0], [36.0, 861.0], [36.1, 861.0], [36.2, 862.0], [36.3, 862.0], [36.4, 863.0], [36.5, 863.0], [36.6, 864.0], [36.7, 864.0], [36.8, 865.0], [36.9, 865.0], [37.0, 866.0], [37.1, 866.0], [37.2, 867.0], [37.3, 868.0], [37.4, 868.0], [37.5, 869.0], [37.6, 870.0], [37.7, 870.0], [37.8, 871.0], [37.9, 871.0], [38.0, 872.0], [38.1, 872.0], [38.2, 872.0], [38.3, 873.0], [38.4, 873.0], [38.5, 874.0], [38.6, 874.0], [38.7, 874.0], [38.8, 875.0], [38.9, 875.0], [39.0, 876.0], [39.1, 876.0], [39.2, 876.0], [39.3, 877.0], [39.4, 877.0], [39.5, 877.0], [39.6, 878.0], [39.7, 878.0], [39.8, 879.0], [39.9, 879.0], [40.0, 879.0], [40.1, 880.0], [40.2, 880.0], [40.3, 880.0], [40.4, 881.0], [40.5, 881.0], [40.6, 882.0], [40.7, 882.0], [40.8, 882.0], [40.9, 883.0], [41.0, 883.0], [41.1, 883.0], [41.2, 884.0], [41.3, 884.0], [41.4, 884.0], [41.5, 884.0], [41.6, 885.0], [41.7, 885.0], [41.8, 885.0], [41.9, 886.0], [42.0, 886.0], [42.1, 886.0], [42.2, 887.0], [42.3, 887.0], [42.4, 887.0], [42.5, 888.0], [42.6, 888.0], [42.7, 888.0], [42.8, 888.0], [42.9, 889.0], [43.0, 889.0], [43.1, 889.0], [43.2, 889.0], [43.3, 890.0], [43.4, 890.0], [43.5, 890.0], [43.6, 891.0], [43.7, 891.0], [43.8, 891.0], [43.9, 892.0], [44.0, 892.0], [44.1, 892.0], [44.2, 892.0], [44.3, 893.0], [44.4, 893.0], [44.5, 893.0], [44.6, 893.0], [44.7, 894.0], [44.8, 894.0], [44.9, 894.0], [45.0, 894.0], [45.1, 895.0], [45.2, 895.0], [45.3, 895.0], [45.4, 895.0], [45.5, 896.0], [45.6, 896.0], [45.7, 896.0], [45.8, 897.0], [45.9, 897.0], [46.0, 897.0], [46.1, 898.0], [46.2, 898.0], [46.3, 898.0], [46.4, 899.0], [46.5, 899.0], [46.6, 899.0], [46.7, 900.0], [46.8, 900.0], [46.9, 900.0], [47.0, 900.0], [47.1, 901.0], [47.2, 901.0], [47.3, 901.0], [47.4, 902.0], [47.5, 902.0], [47.6, 902.0], [47.7, 903.0], [47.8, 903.0], [47.9, 903.0], [48.0, 903.0], [48.1, 904.0], [48.2, 904.0], [48.3, 904.0], [48.4, 904.0], [48.5, 905.0], [48.6, 905.0], [48.7, 905.0], [48.8, 905.0], [48.9, 906.0], [49.0, 906.0], [49.1, 906.0], [49.2, 906.0], [49.3, 907.0], [49.4, 907.0], [49.5, 907.0], [49.6, 907.0], [49.7, 908.0], [49.8, 908.0], [49.9, 908.0], [50.0, 908.0], [50.1, 909.0], [50.2, 909.0], [50.3, 909.0], [50.4, 910.0], [50.5, 910.0], [50.6, 910.0], [50.7, 910.0], [50.8, 911.0], [50.9, 911.0], [51.0, 911.0], [51.1, 911.0], [51.2, 912.0], [51.3, 912.0], [51.4, 912.0], [51.5, 912.0], [51.6, 912.0], [51.7, 913.0], [51.8, 913.0], [51.9, 913.0], [52.0, 914.0], [52.1, 914.0], [52.2, 914.0], [52.3, 914.0], [52.4, 915.0], [52.5, 915.0], [52.6, 915.0], [52.7, 915.0], [52.8, 916.0], [52.9, 916.0], [53.0, 916.0], [53.1, 916.0], [53.2, 917.0], [53.3, 917.0], [53.4, 917.0], [53.5, 918.0], [53.6, 918.0], [53.7, 918.0], [53.8, 919.0], [53.9, 919.0], [54.0, 919.0], [54.1, 920.0], [54.2, 920.0], [54.3, 920.0], [54.4, 921.0], [54.5, 921.0], [54.6, 921.0], [54.7, 921.0], [54.8, 922.0], [54.9, 922.0], [55.0, 922.0], [55.1, 923.0], [55.2, 923.0], [55.3, 923.0], [55.4, 923.0], [55.5, 924.0], [55.6, 924.0], [55.7, 924.0], [55.8, 924.0], [55.9, 925.0], [56.0, 925.0], [56.1, 925.0], [56.2, 925.0], [56.3, 926.0], [56.4, 926.0], [56.5, 926.0], [56.6, 926.0], [56.7, 927.0], [56.8, 927.0], [56.9, 927.0], [57.0, 927.0], [57.1, 928.0], [57.2, 928.0], [57.3, 928.0], [57.4, 928.0], [57.5, 929.0], [57.6, 929.0], [57.7, 929.0], [57.8, 930.0], [57.9, 930.0], [58.0, 930.0], [58.1, 930.0], [58.2, 931.0], [58.3, 931.0], [58.4, 931.0], [58.5, 932.0], [58.6, 932.0], [58.7, 932.0], [58.8, 932.0], [58.9, 933.0], [59.0, 933.0], [59.1, 933.0], [59.2, 933.0], [59.3, 934.0], [59.4, 934.0], [59.5, 934.0], [59.6, 934.0], [59.7, 935.0], [59.8, 935.0], [59.9, 935.0], [60.0, 935.0], [60.1, 936.0], [60.2, 936.0], [60.3, 936.0], [60.4, 937.0], [60.5, 937.0], [60.6, 937.0], [60.7, 938.0], [60.8, 938.0], [60.9, 938.0], [61.0, 939.0], [61.1, 939.0], [61.2, 939.0], [61.3, 940.0], [61.4, 940.0], [61.5, 940.0], [61.6, 941.0], [61.7, 941.0], [61.8, 941.0], [61.9, 942.0], [62.0, 942.0], [62.1, 942.0], [62.2, 943.0], [62.3, 943.0], [62.4, 943.0], [62.5, 944.0], [62.6, 944.0], [62.7, 944.0], [62.8, 944.0], [62.9, 945.0], [63.0, 945.0], [63.1, 945.0], [63.2, 945.0], [63.3, 945.0], [63.4, 946.0], [63.5, 946.0], [63.6, 946.0], [63.7, 947.0], [63.8, 947.0], [63.9, 947.0], [64.0, 948.0], [64.1, 948.0], [64.2, 948.0], [64.3, 949.0], [64.4, 949.0], [64.5, 949.0], [64.6, 949.0], [64.7, 950.0], [64.8, 950.0], [64.9, 950.0], [65.0, 951.0], [65.1, 951.0], [65.2, 951.0], [65.3, 952.0], [65.4, 952.0], [65.5, 952.0], [65.6, 953.0], [65.7, 953.0], [65.8, 953.0], [65.9, 954.0], [66.0, 954.0], [66.1, 954.0], [66.2, 954.0], [66.3, 955.0], [66.4, 955.0], [66.5, 955.0], [66.6, 956.0], [66.7, 956.0], [66.8, 956.0], [66.9, 957.0], [67.0, 957.0], [67.1, 957.0], [67.2, 958.0], [67.3, 958.0], [67.4, 958.0], [67.5, 959.0], [67.6, 959.0], [67.7, 959.0], [67.8, 960.0], [67.9, 960.0], [68.0, 960.0], [68.1, 961.0], [68.2, 961.0], [68.3, 961.0], [68.4, 962.0], [68.5, 962.0], [68.6, 962.0], [68.7, 963.0], [68.8, 963.0], [68.9, 963.0], [69.0, 964.0], [69.1, 964.0], [69.2, 964.0], [69.3, 965.0], [69.4, 965.0], [69.5, 965.0], [69.6, 965.0], [69.7, 966.0], [69.8, 966.0], [69.9, 966.0], [70.0, 967.0], [70.1, 967.0], [70.2, 967.0], [70.3, 967.0], [70.4, 968.0], [70.5, 968.0], [70.6, 968.0], [70.7, 969.0], [70.8, 969.0], [70.9, 969.0], [71.0, 970.0], [71.1, 970.0], [71.2, 970.0], [71.3, 970.0], [71.4, 971.0], [71.5, 971.0], [71.6, 971.0], [71.7, 972.0], [71.8, 972.0], [71.9, 972.0], [72.0, 973.0], [72.1, 973.0], [72.2, 974.0], [72.3, 974.0], [72.4, 974.0], [72.5, 975.0], [72.6, 975.0], [72.7, 976.0], [72.8, 976.0], [72.9, 976.0], [73.0, 977.0], [73.1, 977.0], [73.2, 977.0], [73.3, 978.0], [73.4, 978.0], [73.5, 979.0], [73.6, 979.0], [73.7, 980.0], [73.8, 980.0], [73.9, 980.0], [74.0, 981.0], [74.1, 981.0], [74.2, 982.0], [74.3, 982.0], [74.4, 983.0], [74.5, 983.0], [74.6, 984.0], [74.7, 984.0], [74.8, 984.0], [74.9, 985.0], [75.0, 985.0], [75.1, 985.0], [75.2, 986.0], [75.3, 986.0], [75.4, 986.0], [75.5, 987.0], [75.6, 987.0], [75.7, 987.0], [75.8, 987.0], [75.9, 988.0], [76.0, 988.0], [76.1, 988.0], [76.2, 989.0], [76.3, 989.0], [76.4, 989.0], [76.5, 989.0], [76.6, 990.0], [76.7, 990.0], [76.8, 990.0], [76.9, 991.0], [77.0, 991.0], [77.1, 991.0], [77.2, 991.0], [77.3, 992.0], [77.4, 992.0], [77.5, 992.0], [77.6, 993.0], [77.7, 993.0], [77.8, 993.0], [77.9, 993.0], [78.0, 994.0], [78.1, 994.0], [78.2, 994.0], [78.3, 994.0], [78.4, 995.0], [78.5, 995.0], [78.6, 995.0], [78.7, 995.0], [78.8, 996.0], [78.9, 996.0], [79.0, 996.0], [79.1, 996.0], [79.2, 997.0], [79.3, 997.0], [79.4, 997.0], [79.5, 997.0], [79.6, 998.0], [79.7, 998.0], [79.8, 998.0], [79.9, 998.0], [80.0, 999.0], [80.1, 999.0], [80.2, 999.0], [80.3, 1000.0], [80.4, 1000.0], [80.5, 1000.0], [80.6, 1000.0], [80.7, 1001.0], [80.8, 1001.0], [80.9, 1001.0], [81.0, 1002.0], [81.1, 1002.0], [81.2, 1002.0], [81.3, 1002.0], [81.4, 1003.0], [81.5, 1003.0], [81.6, 1003.0], [81.7, 1003.0], [81.8, 1004.0], [81.9, 1004.0], [82.0, 1004.0], [82.1, 1004.0], [82.2, 1005.0], [82.3, 1005.0], [82.4, 1005.0], [82.5, 1006.0], [82.6, 1006.0], [82.7, 1006.0], [82.8, 1006.0], [82.9, 1006.0], [83.0, 1007.0], [83.1, 1007.0], [83.2, 1007.0], [83.3, 1007.0], [83.4, 1008.0], [83.5, 1008.0], [83.6, 1008.0], [83.7, 1008.0], [83.8, 1009.0], [83.9, 1009.0], [84.0, 1009.0], [84.1, 1009.0], [84.2, 1010.0], [84.3, 1010.0], [84.4, 1010.0], [84.5, 1010.0], [84.6, 1011.0], [84.7, 1011.0], [84.8, 1011.0], [84.9, 1012.0], [85.0, 1012.0], [85.1, 1012.0], [85.2, 1013.0], [85.3, 1013.0], [85.4, 1014.0], [85.5, 1014.0], [85.6, 1014.0], [85.7, 1015.0], [85.8, 1015.0], [85.9, 1015.0], [86.0, 1015.0], [86.1, 1016.0], [86.2, 1016.0], [86.3, 1017.0], [86.4, 1017.0], [86.5, 1018.0], [86.6, 1018.0], [86.7, 1018.0], [86.8, 1019.0], [86.9, 1019.0], [87.0, 1019.0], [87.1, 1020.0], [87.2, 1020.0], [87.3, 1021.0], [87.4, 1021.0], [87.5, 1021.0], [87.6, 1022.0], [87.7, 1022.0], [87.8, 1022.0], [87.9, 1023.0], [88.0, 1023.0], [88.1, 1024.0], [88.2, 1024.0], [88.3, 1024.0], [88.4, 1025.0], [88.5, 1025.0], [88.6, 1026.0], [88.7, 1026.0], [88.8, 1027.0], [88.9, 1027.0], [89.0, 1028.0], [89.1, 1028.0], [89.2, 1029.0], [89.3, 1029.0], [89.4, 1030.0], [89.5, 1030.0], [89.6, 1031.0], [89.7, 1031.0], [89.8, 1032.0], [89.9, 1032.0], [90.0, 1033.0], [90.1, 1034.0], [90.2, 1034.0], [90.3, 1035.0], [90.4, 1036.0], [90.5, 1036.0], [90.6, 1037.0], [90.7, 1037.0], [90.8, 1038.0], [90.9, 1039.0], [91.0, 1039.0], [91.1, 1040.0], [91.2, 1041.0], [91.3, 1041.0], [91.4, 1042.0], [91.5, 1042.0], [91.6, 1043.0], [91.7, 1044.0], [91.8, 1044.0], [91.9, 1044.0], [92.0, 1045.0], [92.1, 1045.0], [92.2, 1046.0], [92.3, 1046.0], [92.4, 1047.0], [92.5, 1047.0], [92.6, 1048.0], [92.7, 1048.0], [92.8, 1049.0], [92.9, 1049.0], [93.0, 1050.0], [93.1, 1051.0], [93.2, 1052.0], [93.3, 1052.0], [93.4, 1053.0], [93.5, 1054.0], [93.6, 1055.0], [93.7, 1056.0], [93.8, 1057.0], [93.9, 1059.0], [94.0, 1060.0], [94.1, 1061.0], [94.2, 1063.0], [94.3, 1064.0], [94.4, 1065.0], [94.5, 1066.0], [94.6, 1068.0], [94.7, 1070.0], [94.8, 1072.0], [94.9, 1075.0], [95.0, 1077.0], [95.1, 1080.0], [95.2, 1081.0], [95.3, 1085.0], [95.4, 1088.0], [95.5, 1090.0], [95.6, 1093.0], [95.7, 1097.0], [95.8, 1101.0], [95.9, 1104.0], [96.0, 1107.0], [96.1, 1111.0], [96.2, 1118.0], [96.3, 1123.0], [96.4, 1132.0], [96.5, 1161.0], [96.6, 1185.0], [96.7, 1211.0], [96.8, 1220.0], [96.9, 1230.0], [97.0, 1237.0], [97.1, 1252.0], [97.2, 1271.0], [97.3, 1297.0], [97.4, 1326.0], [97.5, 1353.0], [97.6, 1381.0], [97.7, 1407.0], [97.8, 1444.0], [97.9, 1482.0], [98.0, 1515.0], [98.1, 1540.0], [98.2, 1581.0], [98.3, 1602.0], [98.4, 1623.0], [98.5, 1655.0], [98.6, 1682.0], [98.7, 1712.0], [98.8, 1742.0], [98.9, 1767.0], [99.0, 1804.0], [99.1, 1858.0], [99.2, 1928.0], [99.3, 2060.0], [99.4, 2119.0], [99.5, 2170.0], [99.6, 2221.0], [99.7, 2353.0], [99.8, 2446.0], [99.9, 2519.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 21944.0, "series": [{"data": [[0.0, 246.0], [600.0, 1323.0], [700.0, 9111.0], [800.0, 17772.0], [900.0, 21944.0], [1000.0, 10126.0], [1100.0, 583.0], [1200.0, 423.0], [1300.0, 242.0], [1400.0, 171.0], [1500.0, 224.0], [100.0, 526.0], [1600.0, 241.0], [1700.0, 224.0], [1800.0, 106.0], [1900.0, 71.0], [2000.0, 72.0], [2100.0, 117.0], [2200.0, 73.0], [2300.0, 63.0], [2400.0, 67.0], [2500.0, 81.0], [2600.0, 6.0], [2700.0, 1.0], [200.0, 629.0], [300.0, 402.0], [400.0, 213.0], [500.0, 297.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 61994.0, "series": [{"data": [[0.0, 2016.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 61994.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1343.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 918.7911402277286, "minX": 1.75235838E12, "maxY": 990.0966077819239, "series": [{"data": [[1.75235844E12, 990.0966077819239], [1.75235838E12, 918.7911402277286]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235844E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 33.5, "minX": 1.0, "maxY": 1107.0, "series": [{"data": [[2.0, 682.0], [4.0, 682.5], [5.0, 683.0], [6.0, 691.0], [8.0, 689.0], [9.0, 683.0], [10.0, 698.0], [12.0, 690.5], [13.0, 700.0], [14.0, 682.0], [15.0, 701.0], [16.0, 779.0], [17.0, 702.0], [19.0, 793.0], [20.0, 679.0], [21.0, 753.5], [24.0, 1020.0], [25.0, 729.0], [26.0, 1033.0], [28.0, 753.5], [29.0, 679.0], [30.0, 699.0], [31.0, 1029.0], [32.0, 873.0], [34.0, 739.5], [37.0, 874.0], [36.0, 865.0], [39.0, 702.0], [38.0, 674.0], [41.0, 804.0], [40.0, 1030.0], [42.0, 674.0], [44.0, 788.0], [47.0, 675.0], [46.0, 915.5], [49.0, 873.0], [48.0, 809.0], [51.0, 804.0], [50.0, 1040.0], [53.0, 809.0], [52.0, 675.0], [55.0, 1039.0], [54.0, 924.0], [57.0, 675.0], [56.0, 924.0], [59.0, 806.0], [63.0, 810.0], [62.0, 885.3333333333334], [64.0, 802.0], [71.0, 927.3333333333334], [68.0, 867.0], [74.0, 801.0], [73.0, 791.0], [79.0, 773.0], [78.0, 808.0], [77.0, 853.0], [76.0, 1050.0], [82.0, 872.5], [81.0, 1048.0], [87.0, 827.75], [86.0, 1051.0], [91.0, 908.6666666666666], [88.0, 784.0], [95.0, 782.0], [92.0, 795.0], [97.0, 797.0], [96.0, 908.0], [102.0, 797.0], [101.0, 877.5], [107.0, 780.0], [106.0, 1039.0], [104.0, 854.0], [111.0, 780.0], [108.0, 927.0], [112.0, 866.6666666666666], [117.0, 798.0], [116.0, 877.25], [123.0, 1040.0], [121.0, 822.3333333333334], [120.0, 1039.0], [125.0, 817.0], [124.0, 844.5], [135.0, 876.5], [134.0, 983.5], [133.0, 761.0], [130.0, 885.6], [142.0, 765.0], [141.0, 906.0], [140.0, 873.0], [139.0, 1043.0], [138.0, 906.0], [137.0, 928.0], [136.0, 763.0], [150.0, 909.0], [149.0, 987.5], [147.0, 764.0], [146.0, 908.0], [145.0, 886.0], [144.0, 986.0], [159.0, 908.0], [158.0, 982.0], [155.0, 976.0], [152.0, 845.0], [164.0, 909.0], [163.0, 1012.0], [161.0, 925.0], [160.0, 760.0], [175.0, 987.0], [174.0, 909.0], [173.0, 930.0], [170.0, 938.0], [169.0, 925.4], [179.0, 909.0], [178.0, 936.0], [177.0, 902.5], [188.0, 908.0], [185.0, 931.5], [199.0, 936.4], [198.0, 930.0], [195.0, 937.0], [206.0, 849.5], [204.0, 933.2], [215.0, 987.0], [214.0, 921.0], [213.0, 933.5], [209.0, 984.5], [208.0, 987.0], [223.0, 913.0], [220.0, 987.0], [219.0, 922.0], [218.0, 935.0], [217.0, 903.0], [229.0, 919.0], [228.0, 960.0], [226.0, 1047.0], [225.0, 762.0], [224.0, 919.0], [235.0, 63.666666666666664], [236.0, 87.0], [237.0, 563.6], [238.0, 158.28571428571428], [239.0, 179.4], [234.0, 987.0], [233.0, 1043.0], [232.0, 894.0], [240.0, 33.5], [241.0, 47.0], [242.0, 356.1], [243.0, 123.12121212121211], [244.0, 166.87999999999997], [245.0, 124.66666666666667], [246.0, 195.03571428571433], [247.0, 96.22222222222223], [248.0, 209.14285714285714], [249.0, 83.0], [250.0, 88.3], [251.0, 402.875], [252.0, 148.33333333333334], [254.0, 110.73076923076923], [255.0, 90.4705882352941], [253.0, 920.0], [257.0, 180.77777777777777], [256.0, 161.95833333333331], [258.0, 206.20000000000002], [259.0, 250.16666666666669], [260.0, 128.33333333333334], [261.0, 206.27272727272725], [262.0, 181.46153846153845], [263.0, 101.0], [264.0, 108.75000000000001], [268.0, 177.15999999999997], [269.0, 987.0], [271.0, 327.4285714285715], [266.0, 98.6], [267.0, 572.8888888888889], [273.0, 158.4375], [272.0, 187.0], [274.0, 165.73333333333335], [275.0, 344.0], [276.0, 263.4], [277.0, 230.8], [278.0, 369.1428571428571], [282.0, 437.625], [285.0, 495.57142857142856], [287.0, 281.5], [280.0, 989.0], [286.0, 1049.0], [283.0, 253.8], [290.0, 258.0], [289.0, 308.5], [291.0, 128.41666666666666], [301.0, 349.7142857142857], [303.0, 840.0], [302.0, 938.0], [292.0, 128.0], [293.0, 446.125], [294.0, 132.25], [295.0, 185.25], [296.0, 168.6], [297.0, 390.8571428571429], [298.0, 224.8666666666667], [299.0, 981.0], [306.0, 268.25], [304.0, 143.5], [305.0, 934.0], [307.0, 387.3333333333333], [316.0, 614.0], [317.0, 386.1666666666667], [318.0, 154.2], [308.0, 159.4], [309.0, 141.6], [310.0, 597.5], [311.0, 436.375], [312.0, 217.0], [313.0, 188.33333333333334], [314.0, 256.6], [315.0, 201.2], [321.0, 371.1333333333333], [320.0, 158.0], [322.0, 404.1666666666667], [323.0, 330.1111111111111], [324.0, 172.7], [325.0, 312.03125000000006], [326.0, 676.6666666666666], [327.0, 455.66666666666663], [328.0, 440.66666666666663], [332.0, 271.65517241379314], [334.0, 349.8], [329.0, 259.96153846153845], [330.0, 176.23076923076923], [331.0, 254.0], [337.0, 501.0], [336.0, 758.5], [338.0, 348.0], [339.0, 647.8], [340.0, 347.18181818181813], [341.0, 626.5], [342.0, 601.2], [343.0, 268.764705882353], [344.0, 421.25], [351.0, 933.0], [350.0, 991.0], [348.0, 245.2], [349.0, 413.6], [345.0, 370.0], [346.0, 358.1666666666667], [347.0, 620.625], [364.0, 525.6666666666666], [352.0, 517.6], [355.0, 858.0], [354.0, 1028.5], [358.0, 220.0], [356.0, 928.0], [359.0, 431.75], [361.0, 446.0], [366.0, 399.6666666666667], [367.0, 353.54545454545456], [365.0, 955.5], [362.0, 955.4], [381.0, 382.0], [369.0, 291.4], [368.0, 529.6666666666666], [375.0, 935.0], [371.0, 537.125], [380.0, 1059.0], [373.0, 431.4], [372.0, 999.0], [374.0, 392.41666666666663], [376.0, 278.22580645161287], [378.0, 312.40000000000003], [379.0, 936.0], [382.0, 403.0], [383.0, 227.16666666666666], [396.0, 230.8], [385.0, 227.2], [387.0, 227.4], [388.0, 554.0], [389.0, 348.0], [384.0, 934.0], [394.0, 377.6], [395.0, 629.0], [398.0, 493.125], [399.0, 414.75], [393.0, 992.0], [392.0, 948.6666666666666], [412.0, 250.0], [401.0, 236.75], [403.0, 521.875], [406.0, 369.16666666666663], [400.0, 1056.0], [405.0, 1056.0], [404.0, 933.0], [408.0, 477.83333333333337], [409.0, 465.5], [410.0, 641.5], [414.0, 726.1666666666667], [415.0, 1055.0], [431.0, 998.0], [422.0, 778.0], [418.0, 464.25], [419.0, 864.0], [423.0, 936.0], [417.0, 961.5], [421.0, 227.0], [420.0, 1051.0], [426.0, 416.0], [430.0, 929.0], [429.0, 996.0], [427.0, 865.0], [425.0, 996.0], [424.0, 1060.0], [444.0, 416.5], [433.0, 398.6666666666667], [432.0, 321.25], [439.0, 865.0], [435.0, 240.5], [434.0, 1061.0], [437.0, 386.0], [436.0, 964.5], [438.0, 222.0], [441.0, 807.75], [442.0, 266.0], [443.0, 538.4], [445.0, 392.25], [446.0, 667.75], [447.0, 391.0], [440.0, 1062.0], [449.0, 223.0], [448.0, 326.0], [451.0, 737.3333333333334], [450.0, 995.5], [452.0, 303.0], [453.0, 227.0], [454.0, 299.5], [455.0, 963.5], [461.0, 631.625], [462.0, 1062.0], [457.0, 928.0], [456.0, 933.0], [465.0, 287.25], [467.0, 323.3333333333333], [466.0, 931.0], [468.0, 261.0], [469.0, 499.75], [470.0, 514.8], [471.0, 965.0], [474.0, 290.8], [475.0, 596.25], [476.0, 734.0], [477.0, 994.0], [493.0, 481.42857142857144], [480.0, 273.8], [495.0, 395.33333333333337], [494.0, 867.0], [491.0, 925.0], [488.0, 931.0], [487.0, 1066.0], [486.0, 963.25], [482.0, 926.0], [481.0, 948.5], [503.0, 263.0], [501.0, 301.095238095238], [500.0, 975.3333333333334], [506.0, 473.0], [511.0, 318.2], [510.0, 937.0], [509.0, 1031.0], [497.0, 928.0], [507.0, 924.0], [504.0, 1030.5], [502.0, 923.0], [536.0, 279.0], [524.0, 614.0], [513.0, 482.1428571428571], [516.0, 417.8333333333333], [515.0, 1000.6666666666666], [519.0, 939.0], [518.0, 1033.5], [538.0, 666.5], [537.0, 897.5], [541.0, 938.0], [540.0, 961.5], [543.0, 429.4], [542.0, 857.0], [520.0, 443.0], [521.0, 314.6], [523.0, 416.88235294117646], [526.0, 413.0], [525.0, 939.0], [527.0, 269.0], [529.0, 814.2], [531.0, 263.0], [530.0, 939.0], [532.0, 485.5], [534.0, 421.4], [533.0, 963.0], [535.0, 997.0], [548.0, 268.5], [552.0, 399.66666666666663], [556.0, 929.75], [557.0, 266.8], [559.0, 539.125], [546.0, 937.0], [545.0, 961.0], [562.0, 413.6], [561.0, 854.0], [560.0, 941.0], [571.0, 268.5], [572.0, 1034.0], [574.0, 932.0], [563.0, 599.0], [567.0, 438.0], [566.0, 960.5], [564.0, 918.0], [568.0, 277.0], [551.0, 955.6], [569.0, 1032.5], [570.0, 373.6666666666667], [601.0, 241.0], [594.0, 560.0], [582.0, 404.72727272727275], [583.0, 420.2], [600.0, 1012.5], [603.0, 272.0], [602.0, 931.0], [604.0, 979.6666666666666], [607.0, 971.5], [593.0, 930.0], [605.0, 941.0], [588.0, 252.5], [586.0, 940.0], [585.0, 1071.0], [584.0, 855.0], [589.0, 803.0], [591.0, 281.5], [580.0, 998.0], [579.0, 856.0], [578.0, 939.0], [577.0, 996.6666666666666], [590.0, 940.0], [596.0, 578.0], [595.0, 941.0], [597.0, 631.0], [598.0, 260.0], [599.0, 437.75], [612.0, 329.1525423728814], [608.0, 278.0], [610.0, 958.0], [613.0, 285.5], [615.0, 686.2857142857143], [616.0, 330.8], [617.0, 437.4], [620.0, 563.375], [618.0, 1088.0], [622.0, 893.0], [623.0, 454.5], [626.0, 456.16666666666663], [625.0, 855.0], [624.0, 940.0], [627.0, 933.0], [637.0, 538.5], [638.0, 942.0], [639.0, 995.0], [634.0, 425.0], [633.0, 941.0], [632.0, 933.0], [636.0, 701.5], [628.0, 430.0], [629.0, 325.4], [631.0, 399.6], [630.0, 1048.0], [664.0, 309.0], [641.0, 340.75], [642.0, 677.6666666666666], [647.0, 927.6666666666666], [643.0, 1021.0], [648.0, 516.7142857142857], [649.0, 1099.0], [652.0, 936.5], [651.0, 993.0], [658.0, 481.5], [659.0, 428.0], [663.0, 312.75], [661.0, 931.3333333333334], [671.0, 945.0], [657.0, 964.6], [670.0, 1102.0], [669.0, 925.6666666666666], [666.0, 1100.0], [665.0, 933.25], [702.0, 996.3333333333334], [674.0, 314.0], [681.0, 315.2], [680.0, 945.0], [683.0, 926.3333333333334], [685.0, 855.0], [684.0, 945.0], [687.0, 946.0], [686.0, 995.0], [689.0, 545.125], [690.0, 948.0], [692.0, 1052.0], [691.0, 860.0], [696.0, 312.2], [679.0, 962.5], [677.0, 854.0], [676.0, 964.2], [699.0, 995.0], [698.0, 968.4], [695.0, 904.5], [694.0, 940.0], [707.0, 587.3333333333334], [704.0, 544.875], [705.0, 1107.0], [719.0, 987.0], [709.0, 326.0], [708.0, 1106.0], [711.0, 902.5], [710.0, 962.5], [729.0, 979.0], [728.0, 934.0], [713.0, 238.0], [714.0, 967.8], [715.0, 642.0], [716.0, 296.5], [717.0, 993.3333333333334], [718.0, 743.5], [730.0, 482.1428571428571], [735.0, 979.5], [720.0, 1100.0], [724.0, 992.0], [722.0, 932.0], [727.0, 1012.5], [725.0, 925.5], [734.0, 932.25], [732.0, 1098.0], [731.0, 993.0], [764.0, 616.0], [754.0, 446.75], [747.0, 458.2], [746.0, 931.5], [744.0, 1095.0], [761.0, 977.0], [743.0, 963.6], [740.0, 964.8], [737.0, 956.3333333333334], [750.0, 930.75], [755.0, 473.2857142857143], [757.0, 301.0], [759.0, 944.0], [758.0, 927.0], [765.0, 469.0], [767.0, 995.0], [753.0, 859.0], [752.0, 958.0], [766.0, 976.5], [763.0, 922.0], [762.0, 996.0], [794.0, 425.6666666666667], [768.0, 640.5], [774.0, 515.8333333333333], [773.0, 1005.5], [771.0, 995.0], [770.0, 861.0], [769.0, 943.0], [793.0, 933.5], [775.0, 860.0], [778.0, 633.375], [779.0, 944.0], [780.0, 494.6666666666667], [783.0, 944.0], [782.0, 1044.0], [788.0, 496.66666666666663], [787.0, 1003.6666666666666], [784.0, 849.0], [791.0, 1042.0], [789.0, 856.0], [798.0, 503.0], [799.0, 995.0], [797.0, 942.0], [796.0, 1003.0], [829.0, 965.5], [805.0, 416.0], [808.0, 500.16666666666663], [811.0, 985.0], [815.0, 938.0], [801.0, 925.0], [800.0, 1089.0], [803.0, 995.0], [802.0, 942.0], [814.0, 964.75], [818.0, 463.0], [822.0, 293.0], [820.0, 926.5], [823.0, 1010.0], [824.0, 462.6666666666667], [807.0, 906.3333333333334], [806.0, 1089.0], [825.0, 926.6666666666666], [830.0, 849.0], [816.0, 1092.0], [828.0, 972.0], [826.0, 925.0], [857.0, 924.75], [847.0, 341.5], [834.0, 474.3333333333333], [833.0, 986.75], [837.0, 935.0], [836.0, 1005.3333333333334], [856.0, 927.0], [838.0, 1096.0], [846.0, 716.2857142857143], [843.0, 1096.0], [841.0, 922.3333333333334], [855.0, 550.7142857142857], [854.0, 849.0], [853.0, 1047.0], [852.0, 934.0], [851.0, 924.0], [850.0, 1095.0], [849.0, 952.6666666666666], [848.0, 970.0], [861.0, 679.4], [863.0, 926.0], [862.0, 1094.0], [859.0, 960.6], [888.0, 928.6666666666666], [893.0, 709.25], [890.0, 370.0], [871.0, 495.5], [870.0, 959.8], [868.0, 951.3333333333334], [867.0, 955.6666666666666], [866.0, 964.0], [865.0, 926.25], [864.0, 972.0], [879.0, 948.75], [878.0, 948.25], [877.0, 960.6], [876.0, 956.3333333333334], [875.0, 968.0], [874.0, 968.0], [873.0, 890.0], [872.0, 954.3333333333334], [885.0, 563.5], [884.0, 931.0], [883.0, 1088.0], [882.0, 886.5], [881.0, 1087.0], [880.0, 948.75], [886.0, 1089.0], [892.0, 346.0], [895.0, 936.0], [894.0, 929.0], [891.0, 928.3333333333334], [889.0, 1088.0], [899.0, 303.5], [898.0, 814.75], [896.0, 968.5], [900.0, 824.3333333333334], [901.0, 386.8947368421052], [904.0, 542.75], [906.0, 973.5], [905.0, 887.0], [907.0, 333.0], [909.0, 723.3333333333334], [908.0, 967.0], [910.0, 925.0], [911.0, 935.0], [912.0, 696.4], [914.0, 1009.0], [919.0, 990.25], [915.0, 903.3333333333334], [925.0, 382.0], [926.0, 942.3333333333334], [923.0, 774.3333333333334], [922.0, 930.0], [920.0, 1090.0], [902.0, 937.0], [924.0, 852.6], [933.0, 384.0], [929.0, 889.5], [928.0, 327.0], [943.0, 926.0], [932.0, 747.6666666666666], [931.0, 980.6666666666666], [938.0, 668.75], [936.0, 924.0], [941.0, 1090.0], [939.0, 929.0], [942.0, 644.0], [947.0, 650.75], [946.0, 981.6666666666666], [949.0, 1107.0], [948.0, 892.0], [951.0, 892.5], [950.0, 967.5], [959.0, 1019.0], [958.0, 1014.0], [957.0, 937.0], [955.0, 513.25], [954.0, 937.0], [953.0, 1015.0], [935.0, 929.0], [934.0, 981.0], [956.0, 832.5], [988.0, 699.4444444444445], [960.0, 631.75], [961.0, 1104.0], [966.0, 965.0], [963.0, 931.0], [975.0, 997.0], [974.0, 850.0], [973.0, 966.2], [985.0, 1002.5], [984.0, 968.2], [968.0, 614.0], [971.0, 966.0], [969.0, 957.6666666666666], [972.0, 469.2], [978.0, 531.6666666666666], [977.0, 996.75], [976.0, 850.0], [980.0, 932.0], [979.0, 997.5], [982.0, 851.0], [981.0, 990.3333333333334], [991.0, 975.0], [990.0, 961.0], [989.0, 959.2], [987.0, 969.6], [986.0, 848.0], [994.0, 760.6666666666666], [1000.0, 922.0519563925947], [999.0, 947.4444444444445], [998.0, 960.8], [997.0, 982.8333333333333], [996.0, 983.9166666666667], [995.0, 938.5], [993.0, 991.75], [992.0, 939.0], [1.0, 682.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[976.106971264194, 903.3805887933323]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 48723.6, "minX": 1.75235838E12, "maxY": 238172.31666666668, "series": [{"data": [[1.75235844E12, 238172.31666666668], [1.75235838E12, 58143.066666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235844E12, 199617.8], [1.75235838E12, 48723.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235844E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 736.5724535953796, "minX": 1.75235838E12, "maxY": 944.0950849006283, "series": [{"data": [[1.75235844E12, 944.0950849006283], [1.75235838E12, 736.5724535953796]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235844E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 736.5029636562167, "minX": 1.75235838E12, "maxY": 944.089869032214, "series": [{"data": [[1.75235844E12, 944.089869032214], [1.75235838E12, 736.5029636562167]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235844E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.71324145282873E-4, "minX": 1.75235838E12, "maxY": 2.3716268912805942, "series": [{"data": [[1.75235844E12, 1.71324145282873E-4], [1.75235838E12, 2.3716268912805942]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235844E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.75235838E12, "maxY": 2794.0, "series": [{"data": [[1.75235844E12, 2794.0], [1.75235838E12, 1589.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235844E12, 1044.0], [1.75235838E12, 920.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235844E12, 1102.0], [1.75235838E12, 1064.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235844E12, 1061.0], [1.75235838E12, 940.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235844E12, 647.0], [1.75235838E12, 7.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235844E12, 962.0], [1.75235838E12, 824.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235844E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9.0, "minX": 508.0, "maxY": 1813.0, "series": [{"data": [[563.0, 1067.0], [645.0, 1813.0], [725.0, 934.0], [885.0, 127.0], [914.0, 1271.5], [962.0, 986.0], [1023.0, 979.0], [996.0, 1004.0], [1022.0, 1000.0], [1087.0, 898.0], [1077.0, 927.0], [1049.0, 947.0], [1046.0, 950.5], [1045.0, 954.0], [1065.0, 927.0], [1082.0, 918.0], [1075.0, 913.0], [1039.0, 962.0], [1037.0, 970.0], [1035.0, 966.0], [1069.0, 937.0], [1063.0, 945.0], [1064.0, 965.0], [1055.0, 943.0], [1119.0, 933.0], [1116.0, 902.0], [1137.0, 933.0], [1113.0, 953.0], [1117.0, 916.0], [1107.0, 904.5], [1131.0, 905.0], [1094.0, 907.0], [1096.0, 933.0], [1102.0, 951.0], [1098.0, 937.0], [1121.0, 897.0], [1120.0, 888.0], [1202.0, 829.0], [1182.0, 302.5], [1189.0, 688.0], [1159.0, 874.0], [1155.0, 877.0], [1158.0, 852.0], [1164.0, 863.0], [1165.0, 844.0], [1174.0, 842.0], [1171.0, 858.0], [1176.0, 832.0], [1186.0, 841.0], [1194.0, 892.0], [1198.0, 852.0], [1199.0, 853.0], [1237.0, 826.0], [1230.0, 810.5], [508.0, 1652.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[645.0, 9.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1237.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 508.0, "maxY": 1813.0, "series": [{"data": [[563.0, 1067.0], [645.0, 1813.0], [725.0, 934.0], [885.0, 127.0], [914.0, 1271.5], [962.0, 986.0], [1023.0, 979.0], [996.0, 1004.0], [1022.0, 1000.0], [1087.0, 898.0], [1077.0, 927.0], [1049.0, 947.0], [1046.0, 950.5], [1045.0, 954.0], [1065.0, 927.0], [1082.0, 918.0], [1075.0, 913.0], [1039.0, 962.0], [1037.0, 970.0], [1035.0, 966.0], [1069.0, 937.0], [1063.0, 945.0], [1064.0, 965.0], [1055.0, 943.0], [1119.0, 933.0], [1116.0, 902.0], [1137.0, 933.0], [1113.0, 953.0], [1117.0, 916.0], [1107.0, 904.5], [1131.0, 905.0], [1094.0, 907.0], [1096.0, 933.0], [1102.0, 951.0], [1098.0, 937.0], [1121.0, 897.0], [1120.0, 888.0], [1202.0, 829.0], [1182.0, 302.5], [1189.0, 688.0], [1159.0, 874.0], [1155.0, 877.0], [1158.0, 852.0], [1164.0, 863.0], [1165.0, 844.0], [1174.0, 842.0], [1171.0, 858.0], [1176.0, 832.0], [1186.0, 841.0], [1194.0, 892.0], [1198.0, 852.0], [1199.0, 853.0], [1237.0, 826.0], [1230.0, 810.5], [508.0, 1652.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[645.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1237.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 230.36666666666667, "minX": 1.75235838E12, "maxY": 858.8666666666667, "series": [{"data": [[1.75235844E12, 858.8666666666667], [1.75235838E12, 230.36666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235844E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75235838E12, "maxY": 875.5166666666667, "series": [{"data": [[1.75235844E12, 875.5166666666667], [1.75235838E12, 213.7]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75235844E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235844E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75235838E12, "maxY": 875.5166666666667, "series": [{"data": [[1.75235844E12, 875.5166666666667], [1.75235838E12, 213.7]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75235844E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235844E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75235838E12, "maxY": 875.5166666666667, "series": [{"data": [[1.75235844E12, 875.5166666666667], [1.75235838E12, 213.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75235844E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235844E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

