/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 2487.0, "series": [{"data": [[0.0, 3.0], [0.1, 258.0], [0.2, 297.0], [0.3, 324.0], [0.4, 340.0], [0.5, 380.0], [0.6, 412.0], [0.7, 433.0], [0.8, 455.0], [0.9, 485.0], [1.0, 509.0], [1.1, 517.0], [1.2, 525.0], [1.3, 548.0], [1.4, 583.0], [1.5, 676.0], [1.6, 762.0], [1.7, 794.0], [1.8, 817.0], [1.9, 830.0], [2.0, 855.0], [2.1, 860.0], [2.2, 864.0], [2.3, 877.0], [2.4, 885.0], [2.5, 892.0], [2.6, 896.0], [2.7, 913.0], [2.8, 937.0], [2.9, 955.0], [3.0, 970.0], [3.1, 976.0], [3.2, 988.0], [3.3, 1020.0], [3.4, 1047.0], [3.5, 1063.0], [3.6, 1066.0], [3.7, 1072.0], [3.8, 1103.0], [3.9, 1135.0], [4.0, 1143.0], [4.1, 1153.0], [4.2, 1166.0], [4.3, 1175.0], [4.4, 1177.0], [4.5, 1177.0], [4.6, 1178.0], [4.7, 1180.0], [4.8, 1180.0], [4.9, 1181.0], [5.0, 1181.0], [5.1, 1182.0], [5.2, 1182.0], [5.3, 1183.0], [5.4, 1183.0], [5.5, 1184.0], [5.6, 1184.0], [5.7, 1184.0], [5.8, 1185.0], [5.9, 1185.0], [6.0, 1186.0], [6.1, 1186.0], [6.2, 1187.0], [6.3, 1187.0], [6.4, 1187.0], [6.5, 1188.0], [6.6, 1188.0], [6.7, 1189.0], [6.8, 1189.0], [6.9, 1189.0], [7.0, 1189.0], [7.1, 1190.0], [7.2, 1190.0], [7.3, 1190.0], [7.4, 1190.0], [7.5, 1191.0], [7.6, 1191.0], [7.7, 1191.0], [7.8, 1191.0], [7.9, 1192.0], [8.0, 1192.0], [8.1, 1192.0], [8.2, 1192.0], [8.3, 1193.0], [8.4, 1193.0], [8.5, 1193.0], [8.6, 1194.0], [8.7, 1194.0], [8.8, 1194.0], [8.9, 1194.0], [9.0, 1195.0], [9.1, 1195.0], [9.2, 1195.0], [9.3, 1196.0], [9.4, 1196.0], [9.5, 1196.0], [9.6, 1196.0], [9.7, 1197.0], [9.8, 1197.0], [9.9, 1197.0], [10.0, 1197.0], [10.1, 1197.0], [10.2, 1198.0], [10.3, 1198.0], [10.4, 1198.0], [10.5, 1198.0], [10.6, 1198.0], [10.7, 1198.0], [10.8, 1199.0], [10.9, 1199.0], [11.0, 1199.0], [11.1, 1199.0], [11.2, 1199.0], [11.3, 1200.0], [11.4, 1200.0], [11.5, 1200.0], [11.6, 1200.0], [11.7, 1200.0], [11.8, 1200.0], [11.9, 1201.0], [12.0, 1201.0], [12.1, 1201.0], [12.2, 1201.0], [12.3, 1201.0], [12.4, 1201.0], [12.5, 1202.0], [12.6, 1202.0], [12.7, 1202.0], [12.8, 1202.0], [12.9, 1202.0], [13.0, 1203.0], [13.1, 1203.0], [13.2, 1203.0], [13.3, 1203.0], [13.4, 1203.0], [13.5, 1204.0], [13.6, 1204.0], [13.7, 1204.0], [13.8, 1204.0], [13.9, 1204.0], [14.0, 1205.0], [14.1, 1205.0], [14.2, 1205.0], [14.3, 1205.0], [14.4, 1206.0], [14.5, 1206.0], [14.6, 1206.0], [14.7, 1206.0], [14.8, 1206.0], [14.9, 1207.0], [15.0, 1207.0], [15.1, 1207.0], [15.2, 1207.0], [15.3, 1208.0], [15.4, 1208.0], [15.5, 1208.0], [15.6, 1208.0], [15.7, 1208.0], [15.8, 1209.0], [15.9, 1209.0], [16.0, 1209.0], [16.1, 1209.0], [16.2, 1209.0], [16.3, 1210.0], [16.4, 1210.0], [16.5, 1210.0], [16.6, 1210.0], [16.7, 1210.0], [16.8, 1211.0], [16.9, 1211.0], [17.0, 1211.0], [17.1, 1211.0], [17.2, 1211.0], [17.3, 1212.0], [17.4, 1212.0], [17.5, 1212.0], [17.6, 1212.0], [17.7, 1213.0], [17.8, 1213.0], [17.9, 1213.0], [18.0, 1213.0], [18.1, 1214.0], [18.2, 1214.0], [18.3, 1214.0], [18.4, 1214.0], [18.5, 1215.0], [18.6, 1215.0], [18.7, 1215.0], [18.8, 1215.0], [18.9, 1216.0], [19.0, 1216.0], [19.1, 1216.0], [19.2, 1216.0], [19.3, 1217.0], [19.4, 1217.0], [19.5, 1217.0], [19.6, 1217.0], [19.7, 1218.0], [19.8, 1218.0], [19.9, 1218.0], [20.0, 1218.0], [20.1, 1219.0], [20.2, 1219.0], [20.3, 1219.0], [20.4, 1219.0], [20.5, 1219.0], [20.6, 1220.0], [20.7, 1220.0], [20.8, 1220.0], [20.9, 1220.0], [21.0, 1220.0], [21.1, 1221.0], [21.2, 1221.0], [21.3, 1221.0], [21.4, 1221.0], [21.5, 1221.0], [21.6, 1221.0], [21.7, 1222.0], [21.8, 1222.0], [21.9, 1222.0], [22.0, 1222.0], [22.1, 1222.0], [22.2, 1222.0], [22.3, 1223.0], [22.4, 1223.0], [22.5, 1223.0], [22.6, 1223.0], [22.7, 1223.0], [22.8, 1224.0], [22.9, 1224.0], [23.0, 1224.0], [23.1, 1224.0], [23.2, 1224.0], [23.3, 1225.0], [23.4, 1225.0], [23.5, 1225.0], [23.6, 1225.0], [23.7, 1225.0], [23.8, 1225.0], [23.9, 1226.0], [24.0, 1226.0], [24.1, 1226.0], [24.2, 1226.0], [24.3, 1226.0], [24.4, 1226.0], [24.5, 1227.0], [24.6, 1227.0], [24.7, 1227.0], [24.8, 1227.0], [24.9, 1227.0], [25.0, 1228.0], [25.1, 1228.0], [25.2, 1228.0], [25.3, 1228.0], [25.4, 1228.0], [25.5, 1228.0], [25.6, 1229.0], [25.7, 1229.0], [25.8, 1229.0], [25.9, 1229.0], [26.0, 1229.0], [26.1, 1229.0], [26.2, 1229.0], [26.3, 1230.0], [26.4, 1230.0], [26.5, 1230.0], [26.6, 1230.0], [26.7, 1230.0], [26.8, 1231.0], [26.9, 1231.0], [27.0, 1231.0], [27.1, 1231.0], [27.2, 1232.0], [27.3, 1232.0], [27.4, 1232.0], [27.5, 1232.0], [27.6, 1233.0], [27.7, 1233.0], [27.8, 1233.0], [27.9, 1233.0], [28.0, 1234.0], [28.1, 1234.0], [28.2, 1234.0], [28.3, 1234.0], [28.4, 1234.0], [28.5, 1235.0], [28.6, 1235.0], [28.7, 1235.0], [28.8, 1235.0], [28.9, 1236.0], [29.0, 1236.0], [29.1, 1236.0], [29.2, 1236.0], [29.3, 1237.0], [29.4, 1237.0], [29.5, 1237.0], [29.6, 1237.0], [29.7, 1237.0], [29.8, 1238.0], [29.9, 1238.0], [30.0, 1238.0], [30.1, 1238.0], [30.2, 1238.0], [30.3, 1239.0], [30.4, 1239.0], [30.5, 1239.0], [30.6, 1239.0], [30.7, 1240.0], [30.8, 1240.0], [30.9, 1240.0], [31.0, 1240.0], [31.1, 1241.0], [31.2, 1241.0], [31.3, 1241.0], [31.4, 1241.0], [31.5, 1241.0], [31.6, 1242.0], [31.7, 1242.0], [31.8, 1242.0], [31.9, 1243.0], [32.0, 1243.0], [32.1, 1243.0], [32.2, 1243.0], [32.3, 1243.0], [32.4, 1244.0], [32.5, 1244.0], [32.6, 1244.0], [32.7, 1244.0], [32.8, 1245.0], [32.9, 1245.0], [33.0, 1245.0], [33.1, 1245.0], [33.2, 1245.0], [33.3, 1246.0], [33.4, 1246.0], [33.5, 1246.0], [33.6, 1246.0], [33.7, 1246.0], [33.8, 1247.0], [33.9, 1247.0], [34.0, 1247.0], [34.1, 1248.0], [34.2, 1248.0], [34.3, 1249.0], [34.4, 1249.0], [34.5, 1249.0], [34.6, 1250.0], [34.7, 1250.0], [34.8, 1250.0], [34.9, 1251.0], [35.0, 1251.0], [35.1, 1251.0], [35.2, 1252.0], [35.3, 1252.0], [35.4, 1252.0], [35.5, 1253.0], [35.6, 1253.0], [35.7, 1253.0], [35.8, 1254.0], [35.9, 1254.0], [36.0, 1255.0], [36.1, 1255.0], [36.2, 1255.0], [36.3, 1256.0], [36.4, 1256.0], [36.5, 1257.0], [36.6, 1257.0], [36.7, 1258.0], [36.8, 1258.0], [36.9, 1259.0], [37.0, 1259.0], [37.1, 1260.0], [37.2, 1260.0], [37.3, 1260.0], [37.4, 1261.0], [37.5, 1261.0], [37.6, 1262.0], [37.7, 1262.0], [37.8, 1262.0], [37.9, 1263.0], [38.0, 1263.0], [38.1, 1264.0], [38.2, 1264.0], [38.3, 1264.0], [38.4, 1265.0], [38.5, 1265.0], [38.6, 1266.0], [38.7, 1266.0], [38.8, 1267.0], [38.9, 1267.0], [39.0, 1267.0], [39.1, 1268.0], [39.2, 1268.0], [39.3, 1269.0], [39.4, 1269.0], [39.5, 1269.0], [39.6, 1269.0], [39.7, 1270.0], [39.8, 1270.0], [39.9, 1270.0], [40.0, 1270.0], [40.1, 1271.0], [40.2, 1271.0], [40.3, 1271.0], [40.4, 1272.0], [40.5, 1272.0], [40.6, 1272.0], [40.7, 1273.0], [40.8, 1273.0], [40.9, 1273.0], [41.0, 1273.0], [41.1, 1274.0], [41.2, 1274.0], [41.3, 1274.0], [41.4, 1275.0], [41.5, 1275.0], [41.6, 1275.0], [41.7, 1276.0], [41.8, 1276.0], [41.9, 1277.0], [42.0, 1277.0], [42.1, 1278.0], [42.2, 1278.0], [42.3, 1279.0], [42.4, 1279.0], [42.5, 1280.0], [42.6, 1280.0], [42.7, 1281.0], [42.8, 1281.0], [42.9, 1281.0], [43.0, 1282.0], [43.1, 1282.0], [43.2, 1283.0], [43.3, 1283.0], [43.4, 1283.0], [43.5, 1284.0], [43.6, 1284.0], [43.7, 1284.0], [43.8, 1285.0], [43.9, 1285.0], [44.0, 1285.0], [44.1, 1286.0], [44.2, 1286.0], [44.3, 1287.0], [44.4, 1287.0], [44.5, 1287.0], [44.6, 1288.0], [44.7, 1288.0], [44.8, 1289.0], [44.9, 1289.0], [45.0, 1289.0], [45.1, 1290.0], [45.2, 1290.0], [45.3, 1291.0], [45.4, 1291.0], [45.5, 1291.0], [45.6, 1292.0], [45.7, 1292.0], [45.8, 1292.0], [45.9, 1293.0], [46.0, 1293.0], [46.1, 1293.0], [46.2, 1294.0], [46.3, 1294.0], [46.4, 1294.0], [46.5, 1295.0], [46.6, 1295.0], [46.7, 1295.0], [46.8, 1295.0], [46.9, 1296.0], [47.0, 1296.0], [47.1, 1296.0], [47.2, 1297.0], [47.3, 1297.0], [47.4, 1297.0], [47.5, 1298.0], [47.6, 1298.0], [47.7, 1298.0], [47.8, 1299.0], [47.9, 1299.0], [48.0, 1299.0], [48.1, 1300.0], [48.2, 1300.0], [48.3, 1300.0], [48.4, 1301.0], [48.5, 1301.0], [48.6, 1301.0], [48.7, 1302.0], [48.8, 1302.0], [48.9, 1302.0], [49.0, 1303.0], [49.1, 1303.0], [49.2, 1303.0], [49.3, 1304.0], [49.4, 1304.0], [49.5, 1304.0], [49.6, 1305.0], [49.7, 1305.0], [49.8, 1305.0], [49.9, 1306.0], [50.0, 1306.0], [50.1, 1306.0], [50.2, 1307.0], [50.3, 1307.0], [50.4, 1307.0], [50.5, 1308.0], [50.6, 1308.0], [50.7, 1308.0], [50.8, 1309.0], [50.9, 1309.0], [51.0, 1309.0], [51.1, 1310.0], [51.2, 1310.0], [51.3, 1310.0], [51.4, 1311.0], [51.5, 1311.0], [51.6, 1311.0], [51.7, 1312.0], [51.8, 1312.0], [51.9, 1313.0], [52.0, 1313.0], [52.1, 1314.0], [52.2, 1315.0], [52.3, 1315.0], [52.4, 1316.0], [52.5, 1317.0], [52.6, 1318.0], [52.7, 1318.0], [52.8, 1319.0], [52.9, 1320.0], [53.0, 1321.0], [53.1, 1321.0], [53.2, 1322.0], [53.3, 1323.0], [53.4, 1324.0], [53.5, 1324.0], [53.6, 1325.0], [53.7, 1325.0], [53.8, 1326.0], [53.9, 1327.0], [54.0, 1327.0], [54.1, 1328.0], [54.2, 1329.0], [54.3, 1329.0], [54.4, 1330.0], [54.5, 1331.0], [54.6, 1332.0], [54.7, 1332.0], [54.8, 1333.0], [54.9, 1334.0], [55.0, 1334.0], [55.1, 1335.0], [55.2, 1336.0], [55.3, 1337.0], [55.4, 1338.0], [55.5, 1339.0], [55.6, 1340.0], [55.7, 1341.0], [55.8, 1341.0], [55.9, 1342.0], [56.0, 1343.0], [56.1, 1344.0], [56.2, 1344.0], [56.3, 1345.0], [56.4, 1346.0], [56.5, 1346.0], [56.6, 1347.0], [56.7, 1347.0], [56.8, 1348.0], [56.9, 1348.0], [57.0, 1349.0], [57.1, 1349.0], [57.2, 1350.0], [57.3, 1350.0], [57.4, 1351.0], [57.5, 1351.0], [57.6, 1352.0], [57.7, 1352.0], [57.8, 1353.0], [57.9, 1353.0], [58.0, 1354.0], [58.1, 1354.0], [58.2, 1354.0], [58.3, 1355.0], [58.4, 1355.0], [58.5, 1356.0], [58.6, 1356.0], [58.7, 1356.0], [58.8, 1357.0], [58.9, 1357.0], [59.0, 1358.0], [59.1, 1358.0], [59.2, 1359.0], [59.3, 1359.0], [59.4, 1359.0], [59.5, 1360.0], [59.6, 1360.0], [59.7, 1360.0], [59.8, 1361.0], [59.9, 1361.0], [60.0, 1361.0], [60.1, 1362.0], [60.2, 1362.0], [60.3, 1362.0], [60.4, 1363.0], [60.5, 1363.0], [60.6, 1363.0], [60.7, 1364.0], [60.8, 1364.0], [60.9, 1364.0], [61.0, 1365.0], [61.1, 1365.0], [61.2, 1366.0], [61.3, 1366.0], [61.4, 1366.0], [61.5, 1367.0], [61.6, 1367.0], [61.7, 1368.0], [61.8, 1368.0], [61.9, 1369.0], [62.0, 1369.0], [62.1, 1369.0], [62.2, 1370.0], [62.3, 1370.0], [62.4, 1370.0], [62.5, 1371.0], [62.6, 1371.0], [62.7, 1371.0], [62.8, 1371.0], [62.9, 1372.0], [63.0, 1372.0], [63.1, 1372.0], [63.2, 1373.0], [63.3, 1373.0], [63.4, 1373.0], [63.5, 1374.0], [63.6, 1374.0], [63.7, 1374.0], [63.8, 1375.0], [63.9, 1375.0], [64.0, 1375.0], [64.1, 1375.0], [64.2, 1376.0], [64.3, 1376.0], [64.4, 1376.0], [64.5, 1377.0], [64.6, 1377.0], [64.7, 1377.0], [64.8, 1378.0], [64.9, 1378.0], [65.0, 1378.0], [65.1, 1378.0], [65.2, 1379.0], [65.3, 1379.0], [65.4, 1379.0], [65.5, 1380.0], [65.6, 1380.0], [65.7, 1380.0], [65.8, 1380.0], [65.9, 1381.0], [66.0, 1381.0], [66.1, 1381.0], [66.2, 1381.0], [66.3, 1382.0], [66.4, 1382.0], [66.5, 1382.0], [66.6, 1382.0], [66.7, 1383.0], [66.8, 1383.0], [66.9, 1383.0], [67.0, 1384.0], [67.1, 1384.0], [67.2, 1384.0], [67.3, 1385.0], [67.4, 1385.0], [67.5, 1385.0], [67.6, 1385.0], [67.7, 1386.0], [67.8, 1386.0], [67.9, 1386.0], [68.0, 1386.0], [68.1, 1387.0], [68.2, 1387.0], [68.3, 1387.0], [68.4, 1388.0], [68.5, 1388.0], [68.6, 1388.0], [68.7, 1388.0], [68.8, 1388.0], [68.9, 1389.0], [69.0, 1389.0], [69.1, 1389.0], [69.2, 1389.0], [69.3, 1390.0], [69.4, 1390.0], [69.5, 1390.0], [69.6, 1390.0], [69.7, 1391.0], [69.8, 1391.0], [69.9, 1391.0], [70.0, 1391.0], [70.1, 1392.0], [70.2, 1392.0], [70.3, 1392.0], [70.4, 1392.0], [70.5, 1392.0], [70.6, 1393.0], [70.7, 1393.0], [70.8, 1393.0], [70.9, 1393.0], [71.0, 1393.0], [71.1, 1394.0], [71.2, 1394.0], [71.3, 1394.0], [71.4, 1394.0], [71.5, 1394.0], [71.6, 1395.0], [71.7, 1395.0], [71.8, 1395.0], [71.9, 1395.0], [72.0, 1395.0], [72.1, 1396.0], [72.2, 1396.0], [72.3, 1396.0], [72.4, 1396.0], [72.5, 1397.0], [72.6, 1397.0], [72.7, 1397.0], [72.8, 1397.0], [72.9, 1397.0], [73.0, 1398.0], [73.1, 1398.0], [73.2, 1398.0], [73.3, 1398.0], [73.4, 1398.0], [73.5, 1399.0], [73.6, 1399.0], [73.7, 1399.0], [73.8, 1399.0], [73.9, 1399.0], [74.0, 1400.0], [74.1, 1400.0], [74.2, 1400.0], [74.3, 1400.0], [74.4, 1400.0], [74.5, 1401.0], [74.6, 1401.0], [74.7, 1401.0], [74.8, 1401.0], [74.9, 1402.0], [75.0, 1402.0], [75.1, 1402.0], [75.2, 1402.0], [75.3, 1402.0], [75.4, 1403.0], [75.5, 1403.0], [75.6, 1403.0], [75.7, 1403.0], [75.8, 1403.0], [75.9, 1404.0], [76.0, 1404.0], [76.1, 1404.0], [76.2, 1404.0], [76.3, 1405.0], [76.4, 1405.0], [76.5, 1405.0], [76.6, 1405.0], [76.7, 1406.0], [76.8, 1406.0], [76.9, 1406.0], [77.0, 1406.0], [77.1, 1407.0], [77.2, 1407.0], [77.3, 1407.0], [77.4, 1407.0], [77.5, 1408.0], [77.6, 1408.0], [77.7, 1408.0], [77.8, 1408.0], [77.9, 1409.0], [78.0, 1409.0], [78.1, 1409.0], [78.2, 1409.0], [78.3, 1410.0], [78.4, 1410.0], [78.5, 1410.0], [78.6, 1410.0], [78.7, 1411.0], [78.8, 1411.0], [78.9, 1411.0], [79.0, 1411.0], [79.1, 1412.0], [79.2, 1412.0], [79.3, 1412.0], [79.4, 1412.0], [79.5, 1412.0], [79.6, 1413.0], [79.7, 1413.0], [79.8, 1413.0], [79.9, 1414.0], [80.0, 1414.0], [80.1, 1414.0], [80.2, 1414.0], [80.3, 1415.0], [80.4, 1415.0], [80.5, 1415.0], [80.6, 1415.0], [80.7, 1416.0], [80.8, 1416.0], [80.9, 1416.0], [81.0, 1416.0], [81.1, 1417.0], [81.2, 1417.0], [81.3, 1417.0], [81.4, 1417.0], [81.5, 1418.0], [81.6, 1418.0], [81.7, 1418.0], [81.8, 1419.0], [81.9, 1419.0], [82.0, 1419.0], [82.1, 1420.0], [82.2, 1420.0], [82.3, 1420.0], [82.4, 1421.0], [82.5, 1421.0], [82.6, 1422.0], [82.7, 1422.0], [82.8, 1423.0], [82.9, 1423.0], [83.0, 1423.0], [83.1, 1424.0], [83.2, 1424.0], [83.3, 1425.0], [83.4, 1425.0], [83.5, 1425.0], [83.6, 1426.0], [83.7, 1426.0], [83.8, 1427.0], [83.9, 1427.0], [84.0, 1428.0], [84.1, 1428.0], [84.2, 1429.0], [84.3, 1429.0], [84.4, 1429.0], [84.5, 1430.0], [84.6, 1430.0], [84.7, 1430.0], [84.8, 1431.0], [84.9, 1431.0], [85.0, 1431.0], [85.1, 1432.0], [85.2, 1432.0], [85.3, 1433.0], [85.4, 1433.0], [85.5, 1434.0], [85.6, 1434.0], [85.7, 1434.0], [85.8, 1435.0], [85.9, 1435.0], [86.0, 1436.0], [86.1, 1436.0], [86.2, 1437.0], [86.3, 1438.0], [86.4, 1438.0], [86.5, 1439.0], [86.6, 1440.0], [86.7, 1440.0], [86.8, 1441.0], [86.9, 1441.0], [87.0, 1442.0], [87.1, 1442.0], [87.2, 1443.0], [87.3, 1444.0], [87.4, 1444.0], [87.5, 1445.0], [87.6, 1445.0], [87.7, 1446.0], [87.8, 1446.0], [87.9, 1447.0], [88.0, 1447.0], [88.1, 1447.0], [88.2, 1448.0], [88.3, 1448.0], [88.4, 1448.0], [88.5, 1449.0], [88.6, 1449.0], [88.7, 1450.0], [88.8, 1450.0], [88.9, 1451.0], [89.0, 1451.0], [89.1, 1452.0], [89.2, 1452.0], [89.3, 1453.0], [89.4, 1454.0], [89.5, 1454.0], [89.6, 1455.0], [89.7, 1455.0], [89.8, 1456.0], [89.9, 1457.0], [90.0, 1457.0], [90.1, 1458.0], [90.2, 1459.0], [90.3, 1460.0], [90.4, 1460.0], [90.5, 1461.0], [90.6, 1462.0], [90.7, 1462.0], [90.8, 1463.0], [90.9, 1463.0], [91.0, 1464.0], [91.1, 1464.0], [91.2, 1465.0], [91.3, 1465.0], [91.4, 1466.0], [91.5, 1467.0], [91.6, 1467.0], [91.7, 1469.0], [91.8, 1470.0], [91.9, 1471.0], [92.0, 1473.0], [92.1, 1474.0], [92.2, 1476.0], [92.3, 1477.0], [92.4, 1478.0], [92.5, 1479.0], [92.6, 1479.0], [92.7, 1480.0], [92.8, 1481.0], [92.9, 1482.0], [93.0, 1483.0], [93.1, 1485.0], [93.2, 1486.0], [93.3, 1487.0], [93.4, 1488.0], [93.5, 1489.0], [93.6, 1491.0], [93.7, 1492.0], [93.8, 1494.0], [93.9, 1496.0], [94.0, 1497.0], [94.1, 1498.0], [94.2, 1499.0], [94.3, 1501.0], [94.4, 1503.0], [94.5, 1504.0], [94.6, 1505.0], [94.7, 1506.0], [94.8, 1509.0], [94.9, 1511.0], [95.0, 1514.0], [95.1, 1515.0], [95.2, 1517.0], [95.3, 1518.0], [95.4, 1520.0], [95.5, 1523.0], [95.6, 1526.0], [95.7, 1529.0], [95.8, 1531.0], [95.9, 1534.0], [96.0, 1537.0], [96.1, 1540.0], [96.2, 1541.0], [96.3, 1543.0], [96.4, 1547.0], [96.5, 1552.0], [96.6, 1554.0], [96.7, 1558.0], [96.8, 1562.0], [96.9, 1564.0], [97.0, 1566.0], [97.1, 1571.0], [97.2, 1583.0], [97.3, 1592.0], [97.4, 1603.0], [97.5, 1614.0], [97.6, 1619.0], [97.7, 1626.0], [97.8, 1631.0], [97.9, 1637.0], [98.0, 1655.0], [98.1, 1682.0], [98.2, 1728.0], [98.3, 1753.0], [98.4, 1784.0], [98.5, 1830.0], [98.6, 1863.0], [98.7, 1912.0], [98.8, 1947.0], [98.9, 1998.0], [99.0, 2031.0], [99.1, 2080.0], [99.2, 2112.0], [99.3, 2131.0], [99.4, 2155.0], [99.5, 2185.0], [99.6, 2197.0], [99.7, 2209.0], [99.8, 2225.0], [99.9, 2245.0], [100.0, 2487.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 16795.0, "series": [{"data": [[0.0, 4.0], [2100.0, 221.0], [2200.0, 175.0], [600.0, 39.0], [2400.0, 1.0], [700.0, 94.0], [200.0, 91.0], [800.0, 422.0], [900.0, 273.0], [1000.0, 241.0], [1100.0, 3430.0], [300.0, 160.0], [1200.0, 16795.0], [1300.0, 11831.0], [1400.0, 9234.0], [1500.0, 1439.0], [400.0, 183.0], [1600.0, 354.0], [1700.0, 142.0], [1800.0, 112.0], [1900.0, 99.0], [500.0, 215.0], [2000.0, 104.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 42595.0, "series": [{"data": [[0.0, 435.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 42595.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2625.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 868.3341714860433, "minX": 1.7523582E12, "maxY": 995.8834508900702, "series": [{"data": [[1.75235826E12, 868.3341714860433], [1.7523582E12, 995.8834508900702]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235826E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 284.0, "minX": 1.0, "maxY": 1649.0, "series": [{"data": [[2.0, 595.0], [3.0, 605.0], [4.0, 611.0], [5.0, 1186.0], [6.0, 1202.0], [7.0, 1273.0], [8.0, 1284.0], [9.0, 1296.0], [10.0, 1296.0], [11.0, 1315.0], [12.0, 1320.0], [13.0, 1321.0], [14.0, 1322.0], [15.0, 1335.0], [16.0, 1347.0], [17.0, 1369.0], [18.0, 1371.0], [19.0, 1383.0], [20.0, 1381.0], [21.0, 1082.0], [22.0, 1386.0], [23.0, 1089.0], [24.0, 1387.0], [25.0, 1096.0], [26.0, 1395.0], [27.0, 1112.0], [28.0, 1403.0], [29.0, 1122.0], [30.0, 1403.0], [31.0, 1121.0], [33.0, 1121.0], [32.0, 1403.0], [35.0, 1122.0], [34.0, 1404.0], [37.0, 1122.0], [36.0, 1403.0], [38.0, 1403.0], [41.0, 1419.0], [40.0, 1276.0], [43.0, 1420.0], [42.0, 1143.0], [45.0, 1420.0], [44.0, 1143.0], [47.0, 1419.0], [46.0, 1144.0], [49.0, 1417.0], [48.0, 1142.0], [51.0, 1416.0], [50.0, 1260.0], [53.0, 1417.0], [52.0, 1266.0], [55.0, 1417.0], [54.0, 1273.0], [57.0, 1418.0], [56.0, 1281.0], [59.0, 1308.0], [58.0, 1301.0], [61.0, 1314.0], [60.0, 1413.0], [63.0, 1039.0], [62.0, 1413.0], [67.0, 1329.0], [66.0, 1040.0], [65.0, 1414.0], [64.0, 1321.0], [71.0, 1414.0], [70.0, 1330.0], [69.0, 1068.0], [68.0, 1414.0], [75.0, 1080.0], [74.0, 1414.0], [73.0, 1329.0], [72.0, 1067.0], [77.0, 1414.0], [76.0, 1329.0], [83.0, 1325.0], [82.0, 1094.0], [81.0, 1413.0], [80.0, 1273.6666666666667], [87.0, 1414.0], [86.0, 1327.0], [85.0, 1101.0], [84.0, 1413.0], [91.0, 1108.0], [90.0, 1415.0], [89.0, 1327.0], [88.0, 1107.0], [93.0, 1414.0], [92.0, 1335.0], [99.0, 1411.0], [98.0, 1150.0], [97.0, 1336.0], [96.0, 1296.3333333333333], [103.0, 1343.0], [102.0, 1297.0], [100.0, 1337.0], [107.0, 1415.0], [106.0, 1343.0], [105.0, 1414.0], [104.0, 1176.0], [111.0, 1201.0], [110.0, 1415.0], [109.0, 1345.0], [108.0, 1195.0], [115.0, 1383.5], [113.0, 1220.0], [112.0, 1352.0], [119.0, 1412.0], [118.0, 1364.0], [117.0, 1217.0], [116.0, 1417.0], [123.0, 364.0], [122.0, 1420.0], [121.0, 1297.5], [127.0, 382.0], [126.0, 1392.0], [125.0, 1420.0], [124.0, 1224.0], [135.0, 1409.5], [133.0, 897.0], [132.0, 1275.0], [131.0, 984.0], [130.0, 1392.0], [129.0, 1421.0], [128.0, 1271.0], [143.0, 903.0], [142.0, 1346.0], [141.0, 1434.0], [140.0, 1420.0], [139.0, 1020.5], [137.0, 1345.0], [136.0, 1128.0], [151.0, 1445.0], [150.0, 1135.0], [149.0, 1419.0], [148.0, 910.0], [147.0, 1361.0], [146.0, 1446.0], [145.0, 1136.0], [144.0, 1419.0], [159.0, 914.0], [158.0, 1293.0], [156.0, 1444.0], [155.0, 1416.0], [154.0, 1204.0], [153.0, 910.0], [152.0, 1360.0], [167.0, 1218.0], [166.0, 1447.0], [165.0, 1236.0], [162.0, 1219.0], [161.0, 1439.0], [160.0, 1423.0], [175.0, 1443.0], [174.0, 1376.0], [173.0, 921.0], [172.0, 1230.0], [171.0, 1450.0], [170.0, 1428.0], [169.0, 1374.0], [168.0, 914.0], [183.0, 1181.6666666666667], [181.0, 1456.0], [180.0, 1454.0], [178.0, 927.0], [177.0, 1230.0], [176.0, 1451.0], [190.0, 1458.0], [189.0, 1086.0], [187.0, 1374.0], [186.0, 1229.0], [185.0, 1453.0], [184.0, 1457.0], [199.0, 1241.0], [198.0, 1156.5], [196.0, 1457.0], [194.0, 1234.0], [193.0, 934.0], [192.0, 1419.0], [206.0, 1457.0], [205.0, 1242.0], [204.0, 1450.0], [203.0, 1159.5], [202.0, 1242.0], [200.0, 1460.0], [215.0, 1162.0], [214.0, 1449.0], [212.0, 1372.0], [211.0, 1460.0], [210.0, 1239.0], [209.0, 1450.0], [208.0, 1158.0], [223.0, 1372.0], [222.0, 1245.0], [221.0, 1460.0], [220.0, 1102.0], [219.0, 1409.0], [217.0, 1460.0], [216.0, 1250.0], [231.0, 1462.0], [230.0, 1135.0], [229.0, 1374.0], [228.0, 1453.0], [227.0, 1246.0], [226.0, 1462.0], [225.0, 1102.0], [224.0, 1451.0], [239.0, 1376.0], [238.0, 1452.0], [237.0, 1358.0], [235.0, 1153.0], [234.0, 1373.0], [233.0, 1453.0], [232.0, 1253.0], [246.0, 1270.0], [245.0, 1169.0], [244.0, 1374.0], [243.0, 1456.0], [242.0, 1461.0], [241.0, 1270.0], [240.0, 1168.0], [255.0, 1184.0], [254.0, 1272.0], [253.0, 1462.0], [252.0, 1456.0], [251.0, 1373.0], [250.0, 1269.0], [249.0, 1183.0], [248.0, 1459.5], [270.0, 1208.0], [271.0, 1373.0], [269.0, 1398.0], [259.0, 1275.0], [258.0, 1462.0], [257.0, 1457.0], [256.0, 1375.0], [266.0, 1370.0], [265.0, 1208.0], [264.0, 1273.0], [263.0, 1461.0], [262.0, 1456.0], [261.0, 1374.0], [260.0, 1193.0], [285.0, 1220.0], [286.0, 1369.0], [284.0, 1277.0], [275.0, 1203.0], [274.0, 1397.3333333333333], [283.0, 1458.0], [282.0, 1411.0], [281.0, 1220.0], [280.0, 1273.0], [279.0, 1375.6666666666667], [277.0, 1372.0], [276.0, 1277.0], [302.0, 1457.0], [303.0, 1220.0], [301.0, 1366.0], [300.0, 1372.0], [299.0, 1220.0], [298.0, 1457.0], [297.0, 1282.0], [296.0, 1450.0], [295.0, 1372.0], [289.0, 1393.0], [291.0, 1411.0], [290.0, 1220.0], [294.0, 1221.0], [293.0, 1455.0], [292.0, 1279.0], [318.0, 1295.5], [319.0, 1454.0], [316.0, 1322.0], [307.0, 1453.0], [305.0, 1371.0], [304.0, 1289.0], [315.0, 1454.0], [314.0, 1371.0], [313.0, 1219.0], [312.0, 1323.0], [311.0, 1457.0], [310.0, 1370.0], [309.0, 1308.0], [308.0, 1220.0], [333.0, 1209.0], [335.0, 1389.5], [332.0, 1371.0], [323.0, 1371.0], [322.0, 1213.0], [321.0, 1456.0], [320.0, 1323.0], [331.0, 1454.0], [330.0, 1325.0], [329.0, 1454.0], [328.0, 1214.0], [327.0, 1373.0], [326.0, 1391.0], [324.0, 1456.0], [350.0, 1456.0], [351.0, 1450.0], [349.0, 1212.0], [348.0, 1325.0], [347.0, 1371.0], [346.0, 1450.0], [345.0, 1457.0], [344.0, 1272.0], [342.0, 1371.0], [336.0, 1454.0], [339.0, 1270.5], [337.0, 1371.0], [341.0, 1448.0], [340.0, 1456.0], [365.0, 1456.0], [367.0, 1387.5], [364.0, 1293.5], [355.0, 1456.0], [354.0, 1217.0], [353.0, 1324.0], [352.0, 1369.0], [362.0, 1323.0], [361.0, 1453.0], [360.0, 1456.0], [359.0, 1216.0], [358.0, 1370.0], [357.0, 1324.0], [356.0, 1451.0], [382.0, 1220.0], [383.0, 1322.0], [381.0, 1407.5], [371.0, 1344.0], [369.0, 1456.0], [368.0, 1218.0], [379.0, 1389.0], [377.0, 1216.0], [376.0, 1450.0], [375.0, 1366.0], [374.0, 1323.0], [373.0, 1454.0], [372.0, 1451.0], [398.0, 1454.0], [399.0, 1224.0], [397.0, 1323.0], [396.0, 1365.0], [395.0, 1448.0], [394.0, 1222.0], [393.0, 1454.0], [392.0, 1340.0], [389.0, 1389.0], [385.0, 1453.0], [384.0, 1451.0], [387.0, 1223.0], [386.0, 1366.0], [414.0, 1322.0], [415.0, 1222.0], [413.0, 1449.0], [412.0, 1454.0], [411.0, 1368.0], [410.0, 1272.5], [409.0, 1449.0], [408.0, 1455.0], [407.0, 1366.0], [400.0, 1448.0], [403.0, 1454.0], [402.0, 1343.0], [406.0, 1320.0], [405.0, 1336.0], [422.0, 1221.0], [419.0, 1320.0], [418.0, 1451.0], [417.0, 1367.0], [416.0, 1454.0], [446.0, 1456.0], [447.0, 1319.0], [445.0, 1365.0], [444.0, 1222.0], [443.0, 1320.0], [442.0, 1450.0], [441.0, 1456.0], [440.0, 1294.5], [438.0, 1384.0], [434.0, 1455.0], [437.0, 1372.0666666666668], [462.0, 1221.0], [463.0, 1460.0], [461.0, 1320.0], [460.0, 1364.0], [459.0, 1440.0], [458.0, 1459.0], [457.0, 1221.0], [456.0, 1319.0], [455.0, 1365.0], [451.0, 1410.5], [449.0, 1335.5], [454.0, 1458.0], [453.0, 1222.0], [452.0, 1317.0], [476.0, 1321.0], [478.0, 1457.0], [479.0, 1218.0], [477.0, 1442.0], [475.0, 1363.0], [474.0, 1373.0], [471.0, 1319.0], [464.0, 1441.0], [466.0, 1317.0], [465.0, 1363.0], [470.0, 1402.5], [468.0, 1339.0], [482.0, 1444.0], [494.0, 1337.0], [492.0, 1379.0], [489.0, 1337.0], [487.0, 1447.0], [486.0, 1325.0], [485.0, 1346.0], [481.0, 1325.0], [480.0, 1363.0], [510.0, 1359.0], [509.0, 1373.6666666666667], [506.0, 1361.0], [505.0, 1360.0], [504.0, 1448.0], [503.0, 1337.0], [501.0, 1389.0], [498.0, 1336.5], [496.0, 1404.5], [540.0, 1451.5], [541.0, 1379.0], [538.0, 1289.0], [536.0, 1379.0], [535.0, 1370.5], [531.0, 1374.0], [530.0, 1370.0], [526.0, 1373.0], [514.0, 1372.5], [516.0, 1361.0], [515.0, 1361.0], [525.0, 1450.5], [524.0, 1290.5], [521.0, 1370.0], [520.0, 1373.5], [573.0, 1443.0], [574.0, 1362.0], [572.0, 1392.0], [571.0, 1368.25], [568.0, 1392.0], [551.0, 1387.0], [550.0, 1375.8], [545.0, 1450.5], [544.0, 1289.5], [557.0, 1360.0], [556.0, 1387.0], [555.0, 1368.75], [566.0, 1340.6666666666667], [563.0, 1453.0], [562.0, 1393.0], [561.0, 1376.25], [606.0, 1218.0], [607.0, 1448.0], [592.0, 1406.0], [597.0, 1359.5], [593.0, 1446.0], [605.0, 1364.0], [604.0, 1418.0], [603.0, 1445.0], [602.0, 1447.0], [601.0, 1291.0], [583.0, 1446.0], [582.0, 1401.0], [581.0, 1344.6666666666667], [578.0, 1445.0], [577.0, 1400.0], [576.0, 1335.0], [591.0, 1343.0], [588.0, 1445.0], [587.0, 1402.0], [586.0, 1342.6666666666667], [599.0, 1410.0], [598.0, 1445.0], [633.0, 1292.0], [639.0, 675.75], [627.0, 488.93650793650795], [624.0, 1447.0], [628.0, 1221.4], [629.0, 483.6603773584905], [638.0, 910.75], [630.0, 915.0], [631.0, 1441.0], [636.0, 1448.5], [634.0, 1451.0], [623.0, 1432.0], [608.0, 1448.0], [611.0, 1405.5], [609.0, 1421.0], [613.0, 1445.0], [612.0, 1218.0], [615.0, 1449.0], [614.0, 1425.0], [622.0, 1292.5], [620.0, 1447.0], [619.0, 1437.5], [617.0, 1291.5], [668.0, 924.5], [670.0, 893.0], [669.0, 1366.0], [671.0, 1228.0], [664.0, 1101.6666666666667], [667.0, 1225.0], [666.0, 1467.0], [665.0, 1470.0], [643.0, 774.0], [642.0, 1407.0], [640.0, 1454.0], [645.0, 1455.0], [644.0, 1451.0], [647.0, 1220.0], [646.0, 1451.0], [663.0, 308.5], [662.0, 1221.0], [661.0, 1192.75], [657.0, 847.5], [659.0, 1366.0], [656.0, 1207.2], [654.0, 380.0], [651.0, 1078.0], [652.0, 1221.0], [649.0, 1122.6666666666667], [648.0, 337.5], [698.0, 499.0], [700.0, 1005.2], [702.0, 1226.0], [688.0, 1469.0], [701.0, 1460.0], [696.0, 1169.4], [697.0, 1461.0], [678.0, 891.5], [676.0, 923.0], [675.0, 1415.5], [673.0, 1465.0], [677.0, 1227.0], [672.0, 752.3333333333333], [687.0, 1461.0], [686.0, 1228.0], [694.0, 324.0], [693.0, 389.0], [691.0, 984.5], [692.0, 1460.0], [690.0, 967.6666666666666], [685.0, 841.5], [683.0, 924.0], [684.0, 1468.0], [681.0, 1019.4], [682.0, 1230.0], [731.0, 444.0], [732.0, 328.0], [734.0, 1456.0], [733.0, 1363.0], [730.0, 1220.8333333333333], [711.0, 1353.3333333333333], [708.0, 1388.6666666666667], [723.0, 456.25], [722.0, 1468.0], [721.0, 1352.0], [724.0, 1375.0], [727.0, 1468.0], [725.0, 1344.5], [715.0, 407.3333333333333], [713.0, 319.0], [712.0, 1459.0], [707.0, 405.3333333333333], [706.0, 318.0], [705.0, 1362.0], [704.0, 1472.5], [718.0, 1479.0], [717.0, 1459.0], [716.0, 1384.75], [735.0, 1457.0], [763.0, 1220.0], [767.0, 1219.0], [758.0, 1001.0], [757.0, 1413.5], [756.0, 1440.0], [759.0, 1220.0], [755.0, 781.5], [754.0, 928.5], [747.0, 1078.0], [744.0, 354.6666666666667], [746.0, 1413.0], [740.0, 877.0], [751.0, 1445.0], [737.0, 1353.3333333333333], [739.0, 1457.0], [738.0, 1467.5], [750.0, 1225.0], [749.0, 1487.0], [748.0, 1415.5], [760.0, 1438.0], [743.0, 1456.0], [742.0, 1484.0], [741.0, 1375.0], [762.0, 1374.0], [761.0, 1470.5], [764.0, 1445.5], [766.0, 1372.0], [765.0, 1488.0], [795.0, 1371.0], [797.0, 781.5], [793.0, 843.4285714285713], [792.0, 1438.0], [774.0, 1218.0], [773.0, 1407.0], [772.0, 1488.0], [794.0, 1438.5], [787.0, 1074.0], [786.0, 1500.0], [785.0, 1295.5], [784.0, 1461.0], [788.0, 1296.5], [790.0, 1220.0], [789.0, 1463.3333333333333], [780.0, 598.3333333333333], [779.0, 1441.0], [778.0, 1454.0], [777.0, 1395.2], [781.0, 1375.0], [771.0, 1065.3333333333333], [770.0, 592.4], [769.0, 1461.3333333333333], [782.0, 1218.0], [799.0, 1410.5], [798.0, 1504.0], [796.0, 1442.0], [829.0, 1449.0], [803.0, 885.5], [831.0, 790.0], [826.0, 896.0], [825.0, 1450.0], [824.0, 1340.5], [807.0, 1446.0], [806.0, 1374.0], [805.0, 1446.0], [804.0, 1373.0], [828.0, 1341.0], [827.0, 1527.0], [830.0, 1453.0], [822.0, 930.0], [823.0, 1526.0], [818.0, 931.0], [817.0, 1482.0], [816.0, 1395.75], [819.0, 1235.0], [821.0, 1519.0], [820.0, 1412.5], [811.0, 801.8333333333333], [808.0, 962.5], [810.0, 1448.5], [809.0, 1234.0], [801.0, 826.0], [802.0, 1376.0], [800.0, 929.5], [814.0, 1339.0], [813.0, 1482.0], [812.0, 1444.0], [858.0, 799.2], [851.0, 420.9259259259259], [850.0, 520.1962616822428], [854.0, 798.5], [853.0, 1448.0], [855.0, 1554.0], [856.0, 1137.6666666666667], [839.0, 1235.0], [838.0, 1447.0], [837.0, 1382.0], [857.0, 1557.0], [860.0, 417.0], [859.0, 1504.5], [861.0, 1309.5], [863.0, 1562.0], [862.0, 1446.0], [849.0, 1075.4], [843.0, 945.5], [842.0, 1356.0], [841.0, 1447.0], [840.0, 1546.0], [845.0, 1449.0], [844.0, 1447.0], [835.0, 696.25], [834.0, 1342.0], [833.0, 1462.0], [832.0, 1449.0], [846.0, 1308.0], [836.0, 978.0], [868.0, 844.5], [895.0, 1124.25], [881.0, 1056.3333333333333], [880.0, 1338.0], [882.0, 1446.0], [885.0, 1478.5], [884.0, 1337.5], [887.0, 1571.0], [886.0, 1446.0], [879.0, 1232.75], [877.0, 1236.0], [876.0, 1443.5], [875.0, 1476.0], [874.0, 317.0], [872.0, 1077.0], [873.0, 1235.0], [869.0, 1012.0], [870.0, 1235.0], [888.0, 1338.5], [871.0, 1414.0], [891.0, 1406.5], [890.0, 1417.0], [893.0, 1388.0], [892.0, 1442.5], [867.0, 627.25], [866.0, 1235.0], [865.0, 1561.0], [864.0, 959.0], [923.0, 1199.8], [900.0, 845.0], [898.0, 890.6666666666667], [897.0, 1420.2], [896.0, 1447.0], [899.0, 1389.0], [910.0, 975.0], [911.0, 1601.0], [901.0, 1271.1666666666665], [903.0, 1597.0], [902.0, 1238.0], [904.0, 691.1666666666666], [905.0, 1445.0], [907.0, 1391.0], [906.0, 1338.5], [908.0, 491.40909090909093], [926.0, 823.6666666666667], [925.0, 1376.75], [924.0, 1437.5], [927.0, 1391.0], [915.0, 692.3333333333334], [914.0, 1423.0], [917.0, 1340.5], [916.0, 1524.0], [913.0, 1091.0], [920.0, 306.0], [922.0, 1629.0], [921.0, 1425.8], [919.0, 1109.0], [918.0, 965.5], [934.0, 909.0], [957.0, 1567.0], [950.0, 1237.4], [948.0, 1441.6], [947.0, 1439.8], [945.0, 1441.0], [944.0, 1452.3333333333333], [933.0, 1048.0], [932.0, 839.5], [943.0, 1394.0], [929.0, 1519.0], [928.0, 1370.3333333333333], [931.0, 1649.0], [930.0, 1371.3333333333333], [942.0, 1516.6666666666667], [941.0, 1238.0], [940.0, 1427.6666666666667], [939.0, 1472.0], [937.0, 1371.6666666666667], [936.0, 1392.0], [959.0, 1539.6666666666667], [958.0, 1234.0], [955.0, 1447.8], [954.0, 1377.0], [953.0, 1533.6666666666667], [952.0, 1447.2], [935.0, 1549.5], [988.0, 670.8333333333333], [978.0, 879.3076923076923], [976.0, 1455.142857142857], [979.0, 1400.0], [980.0, 1252.0], [982.0, 1206.5555555555557], [981.0, 1432.5], [983.0, 1408.8333333333335], [985.0, 882.1666666666667], [984.0, 1435.0], [967.0, 1563.0], [966.0, 1461.142857142857], [972.0, 1055.25], [970.0, 1567.0], [969.0, 1393.0], [968.0, 1228.0], [973.0, 1466.1666666666667], [975.0, 1469.5], [961.0, 1315.0], [963.0, 1457.0], [962.0, 1544.3333333333333], [974.0, 1427.4285714285713], [965.0, 284.0], [986.0, 1240.4545454545455], [987.0, 1122.9285714285713], [989.0, 1469.4], [990.0, 1476.857142857143], [991.0, 1243.1000000000001], [993.0, 1142.0], [992.0, 1401.0], [994.0, 1461.8000000000002], [996.0, 947.6], [998.0, 1303.5], [999.0, 839.1068702290075], [1000.0, 1326.9759080375502], [997.0, 1556.75], [995.0, 1494.0], [1.0, 597.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[984.7736043277308, 1314.3835826452644]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15178.883333333333, "minX": 1.7523582E12, "maxY": 170340.96666666667, "series": [{"data": [[1.75235826E12, 16231.016666666666], [1.7523582E12, 170340.96666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235826E12, 15178.883333333333], [1.7523582E12, 159071.03333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235826E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1295.9091934168232, "minX": 1.7523582E12, "maxY": 1508.0093034950962, "series": [{"data": [[1.75235826E12, 1508.0093034950962], [1.7523582E12, 1295.9091934168232]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235826E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1295.8762775298646, "minX": 1.7523582E12, "maxY": 1507.9984913251187, "series": [{"data": [[1.75235826E12, 1507.9984913251187], [1.7523582E12, 1295.8762775298646]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235826E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7523582E12, "maxY": 1.4744973849623346, "series": [{"data": [[1.75235826E12, 0.0], [1.7523582E12, 1.4744973849623346]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235826E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 209.0, "minX": 1.7523582E12, "maxY": 2487.0, "series": [{"data": [[1.75235826E12, 2281.0], [1.7523582E12, 2487.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235826E12, 1909.6000000000008], [1.7523582E12, 1442.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235826E12, 2243.0], [1.7523582E12, 1517.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235826E12, 2169.1], [1.7523582E12, 1462.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235826E12, 364.0], [1.7523582E12, 209.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235826E12, 1453.0], [1.7523582E12, 1313.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235826E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 59.0, "maxY": 1610.5, "series": [{"data": [[544.0, 1502.5], [614.0, 1610.5], [651.0, 1411.0], [694.0, 471.0], [678.0, 1505.0], [699.0, 1372.0], [727.0, 1326.0], [733.0, 1304.0], [730.0, 1341.0], [717.0, 1390.0], [732.0, 1445.0], [761.0, 1305.0], [736.0, 966.5], [747.0, 1378.0], [748.0, 1330.0], [749.0, 1352.0], [738.0, 1306.0], [740.0, 1349.0], [741.0, 1326.0], [745.0, 1306.0], [746.0, 1299.0], [743.0, 1223.0], [757.0, 1380.0], [758.0, 1331.5], [760.0, 1294.0], [767.0, 1289.0], [752.0, 1355.0], [763.0, 1299.0], [766.0, 1303.0], [759.0, 1305.0], [756.0, 1354.0], [755.0, 1312.0], [770.0, 1319.0], [773.0, 1262.0], [772.0, 1285.0], [774.0, 1261.0], [777.0, 1284.0], [776.0, 1273.0], [775.0, 1284.0], [769.0, 1295.0], [768.0, 1311.0], [779.0, 1274.0], [781.0, 1324.0], [786.0, 1290.0], [59.0, 1308.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[736.0, 6.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 786.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 59.0, "maxY": 1610.5, "series": [{"data": [[544.0, 1502.5], [614.0, 1610.5], [651.0, 1411.0], [694.0, 471.0], [678.0, 1505.0], [699.0, 1372.0], [727.0, 1326.0], [733.0, 1304.0], [730.0, 1341.0], [717.0, 1390.0], [732.0, 1445.0], [761.0, 1305.0], [736.0, 966.5], [747.0, 1378.0], [748.0, 1330.0], [749.0, 1352.0], [738.0, 1306.0], [740.0, 1349.0], [741.0, 1326.0], [745.0, 1306.0], [746.0, 1299.0], [743.0, 1223.0], [757.0, 1380.0], [758.0, 1331.5], [760.0, 1294.0], [767.0, 1289.0], [752.0, 1355.0], [763.0, 1299.0], [766.0, 1303.0], [759.0, 1305.0], [756.0, 1354.0], [755.0, 1312.0], [770.0, 1319.0], [773.0, 1262.0], [772.0, 1285.0], [774.0, 1261.0], [777.0, 1284.0], [776.0, 1273.0], [775.0, 1284.0], [769.0, 1295.0], [768.0, 1311.0], [779.0, 1274.0], [781.0, 1324.0], [786.0, 1290.0], [59.0, 1308.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[736.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 786.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 49.61666666666667, "minX": 1.7523582E12, "maxY": 711.3666666666667, "series": [{"data": [[1.75235826E12, 49.61666666666667], [1.7523582E12, 711.3666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235826E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.7523582E12, "maxY": 694.6333333333333, "series": [{"data": [[1.75235826E12, 66.28333333333333], [1.7523582E12, 694.6333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7523582E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235826E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.7523582E12, "maxY": 694.6333333333333, "series": [{"data": [[1.75235826E12, 66.28333333333333], [1.7523582E12, 694.6333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7523582E12, 0.06666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235826E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.7523582E12, "maxY": 694.6333333333333, "series": [{"data": [[1.75235826E12, 66.28333333333333], [1.7523582E12, 694.6333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7523582E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235826E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

