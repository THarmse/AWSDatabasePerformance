/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 2525.0, "series": [{"data": [[0.0, 0.0], [0.1, 6.0], [0.2, 18.0], [0.3, 39.0], [0.4, 58.0], [0.5, 74.0], [0.6, 99.0], [0.7, 120.0], [0.8, 143.0], [0.9, 162.0], [1.0, 173.0], [1.1, 191.0], [1.2, 202.0], [1.3, 214.0], [1.4, 237.0], [1.5, 251.0], [1.6, 263.0], [1.7, 273.0], [1.8, 289.0], [1.9, 303.0], [2.0, 318.0], [2.1, 345.0], [2.2, 367.0], [2.3, 415.0], [2.4, 435.0], [2.5, 449.0], [2.6, 471.0], [2.7, 477.0], [2.8, 496.0], [2.9, 505.0], [3.0, 520.0], [3.1, 528.0], [3.2, 537.0], [3.3, 545.0], [3.4, 560.0], [3.5, 569.0], [3.6, 585.0], [3.7, 614.0], [3.8, 623.0], [3.9, 625.0], [4.0, 626.0], [4.1, 627.0], [4.2, 627.0], [4.3, 630.0], [4.4, 631.0], [4.5, 632.0], [4.6, 633.0], [4.7, 633.0], [4.8, 634.0], [4.9, 635.0], [5.0, 635.0], [5.1, 636.0], [5.2, 636.0], [5.3, 637.0], [5.4, 638.0], [5.5, 639.0], [5.6, 640.0], [5.7, 640.0], [5.8, 641.0], [5.9, 642.0], [6.0, 642.0], [6.1, 643.0], [6.2, 643.0], [6.3, 643.0], [6.4, 644.0], [6.5, 644.0], [6.6, 644.0], [6.7, 644.0], [6.8, 645.0], [6.9, 645.0], [7.0, 645.0], [7.1, 645.0], [7.2, 645.0], [7.3, 645.0], [7.4, 646.0], [7.5, 646.0], [7.6, 646.0], [7.7, 646.0], [7.8, 646.0], [7.9, 646.0], [8.0, 647.0], [8.1, 647.0], [8.2, 647.0], [8.3, 647.0], [8.4, 647.0], [8.5, 647.0], [8.6, 648.0], [8.7, 648.0], [8.8, 648.0], [8.9, 648.0], [9.0, 648.0], [9.1, 648.0], [9.2, 649.0], [9.3, 649.0], [9.4, 649.0], [9.5, 649.0], [9.6, 649.0], [9.7, 649.0], [9.8, 649.0], [9.9, 650.0], [10.0, 650.0], [10.1, 650.0], [10.2, 650.0], [10.3, 650.0], [10.4, 650.0], [10.5, 650.0], [10.6, 651.0], [10.7, 651.0], [10.8, 651.0], [10.9, 651.0], [11.0, 651.0], [11.1, 651.0], [11.2, 651.0], [11.3, 652.0], [11.4, 652.0], [11.5, 652.0], [11.6, 652.0], [11.7, 652.0], [11.8, 652.0], [11.9, 653.0], [12.0, 653.0], [12.1, 653.0], [12.2, 653.0], [12.3, 653.0], [12.4, 653.0], [12.5, 654.0], [12.6, 654.0], [12.7, 654.0], [12.8, 654.0], [12.9, 654.0], [13.0, 654.0], [13.1, 654.0], [13.2, 655.0], [13.3, 655.0], [13.4, 655.0], [13.5, 655.0], [13.6, 655.0], [13.7, 655.0], [13.8, 655.0], [13.9, 655.0], [14.0, 656.0], [14.1, 656.0], [14.2, 656.0], [14.3, 656.0], [14.4, 656.0], [14.5, 656.0], [14.6, 656.0], [14.7, 656.0], [14.8, 657.0], [14.9, 657.0], [15.0, 657.0], [15.1, 657.0], [15.2, 657.0], [15.3, 657.0], [15.4, 657.0], [15.5, 657.0], [15.6, 657.0], [15.7, 658.0], [15.8, 658.0], [15.9, 658.0], [16.0, 658.0], [16.1, 658.0], [16.2, 658.0], [16.3, 658.0], [16.4, 658.0], [16.5, 658.0], [16.6, 658.0], [16.7, 658.0], [16.8, 658.0], [16.9, 659.0], [17.0, 659.0], [17.1, 659.0], [17.2, 659.0], [17.3, 659.0], [17.4, 659.0], [17.5, 659.0], [17.6, 659.0], [17.7, 659.0], [17.8, 659.0], [17.9, 660.0], [18.0, 660.0], [18.1, 660.0], [18.2, 660.0], [18.3, 660.0], [18.4, 660.0], [18.5, 660.0], [18.6, 660.0], [18.7, 660.0], [18.8, 660.0], [18.9, 661.0], [19.0, 661.0], [19.1, 661.0], [19.2, 661.0], [19.3, 661.0], [19.4, 661.0], [19.5, 661.0], [19.6, 661.0], [19.7, 661.0], [19.8, 661.0], [19.9, 662.0], [20.0, 662.0], [20.1, 662.0], [20.2, 662.0], [20.3, 662.0], [20.4, 662.0], [20.5, 662.0], [20.6, 662.0], [20.7, 662.0], [20.8, 662.0], [20.9, 663.0], [21.0, 663.0], [21.1, 663.0], [21.2, 663.0], [21.3, 663.0], [21.4, 663.0], [21.5, 663.0], [21.6, 663.0], [21.7, 663.0], [21.8, 664.0], [21.9, 664.0], [22.0, 664.0], [22.1, 664.0], [22.2, 664.0], [22.3, 664.0], [22.4, 664.0], [22.5, 664.0], [22.6, 664.0], [22.7, 665.0], [22.8, 665.0], [22.9, 665.0], [23.0, 665.0], [23.1, 665.0], [23.2, 665.0], [23.3, 665.0], [23.4, 665.0], [23.5, 666.0], [23.6, 666.0], [23.7, 666.0], [23.8, 666.0], [23.9, 666.0], [24.0, 666.0], [24.1, 666.0], [24.2, 666.0], [24.3, 666.0], [24.4, 666.0], [24.5, 667.0], [24.6, 667.0], [24.7, 667.0], [24.8, 667.0], [24.9, 667.0], [25.0, 667.0], [25.1, 667.0], [25.2, 667.0], [25.3, 667.0], [25.4, 667.0], [25.5, 668.0], [25.6, 668.0], [25.7, 668.0], [25.8, 668.0], [25.9, 668.0], [26.0, 668.0], [26.1, 668.0], [26.2, 668.0], [26.3, 668.0], [26.4, 669.0], [26.5, 669.0], [26.6, 669.0], [26.7, 669.0], [26.8, 669.0], [26.9, 669.0], [27.0, 669.0], [27.1, 669.0], [27.2, 669.0], [27.3, 670.0], [27.4, 670.0], [27.5, 670.0], [27.6, 670.0], [27.7, 670.0], [27.8, 670.0], [27.9, 670.0], [28.0, 670.0], [28.1, 670.0], [28.2, 671.0], [28.3, 671.0], [28.4, 671.0], [28.5, 671.0], [28.6, 671.0], [28.7, 671.0], [28.8, 671.0], [28.9, 671.0], [29.0, 671.0], [29.1, 672.0], [29.2, 672.0], [29.3, 672.0], [29.4, 672.0], [29.5, 672.0], [29.6, 672.0], [29.7, 672.0], [29.8, 672.0], [29.9, 672.0], [30.0, 673.0], [30.1, 673.0], [30.2, 673.0], [30.3, 673.0], [30.4, 673.0], [30.5, 673.0], [30.6, 673.0], [30.7, 673.0], [30.8, 673.0], [30.9, 674.0], [31.0, 674.0], [31.1, 674.0], [31.2, 674.0], [31.3, 674.0], [31.4, 674.0], [31.5, 674.0], [31.6, 674.0], [31.7, 674.0], [31.8, 675.0], [31.9, 675.0], [32.0, 675.0], [32.1, 675.0], [32.2, 675.0], [32.3, 675.0], [32.4, 675.0], [32.5, 675.0], [32.6, 676.0], [32.7, 676.0], [32.8, 676.0], [32.9, 676.0], [33.0, 676.0], [33.1, 676.0], [33.2, 676.0], [33.3, 676.0], [33.4, 677.0], [33.5, 677.0], [33.6, 677.0], [33.7, 677.0], [33.8, 677.0], [33.9, 677.0], [34.0, 677.0], [34.1, 678.0], [34.2, 678.0], [34.3, 678.0], [34.4, 678.0], [34.5, 678.0], [34.6, 678.0], [34.7, 679.0], [34.8, 679.0], [34.9, 679.0], [35.0, 679.0], [35.1, 679.0], [35.2, 679.0], [35.3, 679.0], [35.4, 680.0], [35.5, 680.0], [35.6, 680.0], [35.7, 680.0], [35.8, 680.0], [35.9, 680.0], [36.0, 681.0], [36.1, 681.0], [36.2, 681.0], [36.3, 681.0], [36.4, 681.0], [36.5, 681.0], [36.6, 681.0], [36.7, 681.0], [36.8, 681.0], [36.9, 682.0], [37.0, 682.0], [37.1, 682.0], [37.2, 682.0], [37.3, 682.0], [37.4, 682.0], [37.5, 682.0], [37.6, 682.0], [37.7, 683.0], [37.8, 683.0], [37.9, 683.0], [38.0, 683.0], [38.1, 683.0], [38.2, 683.0], [38.3, 683.0], [38.4, 684.0], [38.5, 684.0], [38.6, 684.0], [38.7, 684.0], [38.8, 684.0], [38.9, 684.0], [39.0, 684.0], [39.1, 685.0], [39.2, 685.0], [39.3, 685.0], [39.4, 685.0], [39.5, 685.0], [39.6, 685.0], [39.7, 686.0], [39.8, 686.0], [39.9, 686.0], [40.0, 686.0], [40.1, 686.0], [40.2, 686.0], [40.3, 686.0], [40.4, 687.0], [40.5, 687.0], [40.6, 687.0], [40.7, 687.0], [40.8, 687.0], [40.9, 687.0], [41.0, 687.0], [41.1, 688.0], [41.2, 688.0], [41.3, 688.0], [41.4, 688.0], [41.5, 688.0], [41.6, 688.0], [41.7, 688.0], [41.8, 688.0], [41.9, 689.0], [42.0, 689.0], [42.1, 689.0], [42.2, 689.0], [42.3, 689.0], [42.4, 689.0], [42.5, 689.0], [42.6, 689.0], [42.7, 690.0], [42.8, 690.0], [42.9, 690.0], [43.0, 690.0], [43.1, 690.0], [43.2, 690.0], [43.3, 690.0], [43.4, 690.0], [43.5, 691.0], [43.6, 691.0], [43.7, 691.0], [43.8, 691.0], [43.9, 691.0], [44.0, 691.0], [44.1, 691.0], [44.2, 691.0], [44.3, 692.0], [44.4, 692.0], [44.5, 692.0], [44.6, 692.0], [44.7, 692.0], [44.8, 692.0], [44.9, 692.0], [45.0, 693.0], [45.1, 693.0], [45.2, 693.0], [45.3, 693.0], [45.4, 693.0], [45.5, 693.0], [45.6, 694.0], [45.7, 694.0], [45.8, 694.0], [45.9, 694.0], [46.0, 694.0], [46.1, 694.0], [46.2, 694.0], [46.3, 695.0], [46.4, 695.0], [46.5, 695.0], [46.6, 695.0], [46.7, 695.0], [46.8, 695.0], [46.9, 696.0], [47.0, 696.0], [47.1, 696.0], [47.2, 696.0], [47.3, 696.0], [47.4, 696.0], [47.5, 696.0], [47.6, 697.0], [47.7, 697.0], [47.8, 697.0], [47.9, 697.0], [48.0, 697.0], [48.1, 698.0], [48.2, 698.0], [48.3, 698.0], [48.4, 698.0], [48.5, 698.0], [48.6, 699.0], [48.7, 699.0], [48.8, 699.0], [48.9, 699.0], [49.0, 699.0], [49.1, 700.0], [49.2, 700.0], [49.3, 700.0], [49.4, 700.0], [49.5, 700.0], [49.6, 701.0], [49.7, 701.0], [49.8, 701.0], [49.9, 702.0], [50.0, 702.0], [50.1, 702.0], [50.2, 702.0], [50.3, 703.0], [50.4, 703.0], [50.5, 703.0], [50.6, 703.0], [50.7, 704.0], [50.8, 704.0], [50.9, 704.0], [51.0, 704.0], [51.1, 705.0], [51.2, 705.0], [51.3, 705.0], [51.4, 705.0], [51.5, 706.0], [51.6, 706.0], [51.7, 706.0], [51.8, 706.0], [51.9, 707.0], [52.0, 707.0], [52.1, 707.0], [52.2, 707.0], [52.3, 708.0], [52.4, 708.0], [52.5, 708.0], [52.6, 708.0], [52.7, 709.0], [52.8, 709.0], [52.9, 709.0], [53.0, 710.0], [53.1, 710.0], [53.2, 710.0], [53.3, 710.0], [53.4, 711.0], [53.5, 711.0], [53.6, 712.0], [53.7, 712.0], [53.8, 712.0], [53.9, 713.0], [54.0, 713.0], [54.1, 713.0], [54.2, 714.0], [54.3, 714.0], [54.4, 715.0], [54.5, 715.0], [54.6, 716.0], [54.7, 716.0], [54.8, 717.0], [54.9, 717.0], [55.0, 717.0], [55.1, 718.0], [55.2, 718.0], [55.3, 719.0], [55.4, 720.0], [55.5, 720.0], [55.6, 721.0], [55.7, 721.0], [55.8, 722.0], [55.9, 722.0], [56.0, 723.0], [56.1, 723.0], [56.2, 724.0], [56.3, 724.0], [56.4, 725.0], [56.5, 725.0], [56.6, 726.0], [56.7, 727.0], [56.8, 728.0], [56.9, 729.0], [57.0, 730.0], [57.1, 731.0], [57.2, 731.0], [57.3, 732.0], [57.4, 732.0], [57.5, 733.0], [57.6, 734.0], [57.7, 734.0], [57.8, 735.0], [57.9, 736.0], [58.0, 737.0], [58.1, 737.0], [58.2, 738.0], [58.3, 739.0], [58.4, 740.0], [58.5, 741.0], [58.6, 742.0], [58.7, 743.0], [58.8, 744.0], [58.9, 745.0], [59.0, 747.0], [59.1, 749.0], [59.2, 750.0], [59.3, 752.0], [59.4, 755.0], [59.5, 759.0], [59.6, 765.0], [59.7, 769.0], [59.8, 771.0], [59.9, 774.0], [60.0, 777.0], [60.1, 781.0], [60.2, 784.0], [60.3, 786.0], [60.4, 787.0], [60.5, 788.0], [60.6, 789.0], [60.7, 790.0], [60.8, 792.0], [60.9, 793.0], [61.0, 794.0], [61.1, 795.0], [61.2, 797.0], [61.3, 798.0], [61.4, 799.0], [61.5, 800.0], [61.6, 801.0], [61.7, 801.0], [61.8, 802.0], [61.9, 803.0], [62.0, 803.0], [62.1, 804.0], [62.2, 804.0], [62.3, 805.0], [62.4, 806.0], [62.5, 807.0], [62.6, 808.0], [62.7, 809.0], [62.8, 810.0], [62.9, 810.0], [63.0, 811.0], [63.1, 811.0], [63.2, 811.0], [63.3, 812.0], [63.4, 813.0], [63.5, 813.0], [63.6, 814.0], [63.7, 814.0], [63.8, 815.0], [63.9, 815.0], [64.0, 816.0], [64.1, 816.0], [64.2, 816.0], [64.3, 817.0], [64.4, 817.0], [64.5, 817.0], [64.6, 817.0], [64.7, 818.0], [64.8, 818.0], [64.9, 818.0], [65.0, 818.0], [65.1, 819.0], [65.2, 819.0], [65.3, 819.0], [65.4, 819.0], [65.5, 820.0], [65.6, 820.0], [65.7, 820.0], [65.8, 821.0], [65.9, 821.0], [66.0, 821.0], [66.1, 821.0], [66.2, 822.0], [66.3, 822.0], [66.4, 822.0], [66.5, 822.0], [66.6, 822.0], [66.7, 823.0], [66.8, 823.0], [66.9, 823.0], [67.0, 823.0], [67.1, 823.0], [67.2, 824.0], [67.3, 824.0], [67.4, 824.0], [67.5, 824.0], [67.6, 825.0], [67.7, 825.0], [67.8, 825.0], [67.9, 825.0], [68.0, 826.0], [68.1, 826.0], [68.2, 826.0], [68.3, 827.0], [68.4, 827.0], [68.5, 827.0], [68.6, 827.0], [68.7, 828.0], [68.8, 828.0], [68.9, 828.0], [69.0, 828.0], [69.1, 828.0], [69.2, 829.0], [69.3, 829.0], [69.4, 829.0], [69.5, 829.0], [69.6, 830.0], [69.7, 830.0], [69.8, 830.0], [69.9, 830.0], [70.0, 831.0], [70.1, 831.0], [70.2, 831.0], [70.3, 831.0], [70.4, 832.0], [70.5, 832.0], [70.6, 832.0], [70.7, 832.0], [70.8, 833.0], [70.9, 833.0], [71.0, 833.0], [71.1, 833.0], [71.2, 834.0], [71.3, 834.0], [71.4, 834.0], [71.5, 834.0], [71.6, 834.0], [71.7, 835.0], [71.8, 835.0], [71.9, 835.0], [72.0, 835.0], [72.1, 836.0], [72.2, 836.0], [72.3, 836.0], [72.4, 837.0], [72.5, 837.0], [72.6, 837.0], [72.7, 838.0], [72.8, 838.0], [72.9, 838.0], [73.0, 838.0], [73.1, 839.0], [73.2, 839.0], [73.3, 839.0], [73.4, 839.0], [73.5, 840.0], [73.6, 840.0], [73.7, 840.0], [73.8, 841.0], [73.9, 841.0], [74.0, 841.0], [74.1, 842.0], [74.2, 842.0], [74.3, 842.0], [74.4, 843.0], [74.5, 843.0], [74.6, 843.0], [74.7, 843.0], [74.8, 844.0], [74.9, 844.0], [75.0, 844.0], [75.1, 844.0], [75.2, 844.0], [75.3, 845.0], [75.4, 845.0], [75.5, 845.0], [75.6, 845.0], [75.7, 846.0], [75.8, 846.0], [75.9, 846.0], [76.0, 846.0], [76.1, 847.0], [76.2, 847.0], [76.3, 847.0], [76.4, 847.0], [76.5, 847.0], [76.6, 848.0], [76.7, 848.0], [76.8, 848.0], [76.9, 848.0], [77.0, 849.0], [77.1, 849.0], [77.2, 849.0], [77.3, 850.0], [77.4, 850.0], [77.5, 850.0], [77.6, 850.0], [77.7, 851.0], [77.8, 851.0], [77.9, 851.0], [78.0, 851.0], [78.1, 852.0], [78.2, 852.0], [78.3, 852.0], [78.4, 853.0], [78.5, 853.0], [78.6, 853.0], [78.7, 854.0], [78.8, 854.0], [78.9, 855.0], [79.0, 855.0], [79.1, 855.0], [79.2, 855.0], [79.3, 856.0], [79.4, 856.0], [79.5, 856.0], [79.6, 857.0], [79.7, 857.0], [79.8, 857.0], [79.9, 857.0], [80.0, 858.0], [80.1, 858.0], [80.2, 859.0], [80.3, 859.0], [80.4, 859.0], [80.5, 859.0], [80.6, 860.0], [80.7, 860.0], [80.8, 860.0], [80.9, 860.0], [81.0, 861.0], [81.1, 861.0], [81.2, 861.0], [81.3, 861.0], [81.4, 862.0], [81.5, 862.0], [81.6, 862.0], [81.7, 862.0], [81.8, 863.0], [81.9, 863.0], [82.0, 863.0], [82.1, 863.0], [82.2, 864.0], [82.3, 864.0], [82.4, 864.0], [82.5, 865.0], [82.6, 865.0], [82.7, 865.0], [82.8, 866.0], [82.9, 866.0], [83.0, 866.0], [83.1, 866.0], [83.2, 867.0], [83.3, 867.0], [83.4, 867.0], [83.5, 868.0], [83.6, 868.0], [83.7, 868.0], [83.8, 869.0], [83.9, 869.0], [84.0, 869.0], [84.1, 869.0], [84.2, 870.0], [84.3, 870.0], [84.4, 870.0], [84.5, 870.0], [84.6, 871.0], [84.7, 871.0], [84.8, 871.0], [84.9, 872.0], [85.0, 872.0], [85.1, 872.0], [85.2, 873.0], [85.3, 873.0], [85.4, 873.0], [85.5, 874.0], [85.6, 874.0], [85.7, 874.0], [85.8, 874.0], [85.9, 875.0], [86.0, 875.0], [86.1, 875.0], [86.2, 876.0], [86.3, 876.0], [86.4, 876.0], [86.5, 876.0], [86.6, 877.0], [86.7, 877.0], [86.8, 877.0], [86.9, 878.0], [87.0, 878.0], [87.1, 878.0], [87.2, 879.0], [87.3, 879.0], [87.4, 879.0], [87.5, 880.0], [87.6, 880.0], [87.7, 881.0], [87.8, 881.0], [87.9, 881.0], [88.0, 882.0], [88.1, 882.0], [88.2, 882.0], [88.3, 883.0], [88.4, 883.0], [88.5, 883.0], [88.6, 884.0], [88.7, 884.0], [88.8, 884.0], [88.9, 884.0], [89.0, 885.0], [89.1, 885.0], [89.2, 885.0], [89.3, 885.0], [89.4, 885.0], [89.5, 886.0], [89.6, 886.0], [89.7, 886.0], [89.8, 887.0], [89.9, 887.0], [90.0, 887.0], [90.1, 888.0], [90.2, 888.0], [90.3, 889.0], [90.4, 889.0], [90.5, 890.0], [90.6, 890.0], [90.7, 890.0], [90.8, 891.0], [90.9, 892.0], [91.0, 892.0], [91.1, 892.0], [91.2, 893.0], [91.3, 894.0], [91.4, 894.0], [91.5, 895.0], [91.6, 895.0], [91.7, 896.0], [91.8, 896.0], [91.9, 897.0], [92.0, 897.0], [92.1, 898.0], [92.2, 898.0], [92.3, 899.0], [92.4, 900.0], [92.5, 901.0], [92.6, 901.0], [92.7, 902.0], [92.8, 902.0], [92.9, 903.0], [93.0, 903.0], [93.1, 904.0], [93.2, 904.0], [93.3, 905.0], [93.4, 906.0], [93.5, 906.0], [93.6, 907.0], [93.7, 908.0], [93.8, 909.0], [93.9, 910.0], [94.0, 911.0], [94.1, 912.0], [94.2, 913.0], [94.3, 914.0], [94.4, 914.0], [94.5, 915.0], [94.6, 916.0], [94.7, 917.0], [94.8, 918.0], [94.9, 919.0], [95.0, 920.0], [95.1, 921.0], [95.2, 922.0], [95.3, 923.0], [95.4, 924.0], [95.5, 925.0], [95.6, 926.0], [95.7, 927.0], [95.8, 928.0], [95.9, 928.0], [96.0, 929.0], [96.1, 931.0], [96.2, 932.0], [96.3, 933.0], [96.4, 934.0], [96.5, 935.0], [96.6, 936.0], [96.7, 938.0], [96.8, 941.0], [96.9, 945.0], [97.0, 950.0], [97.1, 954.0], [97.2, 958.0], [97.3, 962.0], [97.4, 966.0], [97.5, 970.0], [97.6, 975.0], [97.7, 978.0], [97.8, 981.0], [97.9, 986.0], [98.0, 993.0], [98.1, 1004.0], [98.2, 1018.0], [98.3, 1037.0], [98.4, 1044.0], [98.5, 1069.0], [98.6, 1083.0], [98.7, 1113.0], [98.8, 1158.0], [98.9, 1200.0], [99.0, 1261.0], [99.1, 1321.0], [99.2, 1359.0], [99.3, 1410.0], [99.4, 1447.0], [99.5, 1593.0], [99.6, 1855.0], [99.7, 2013.0], [99.8, 2140.0], [99.9, 2474.0], [100.0, 2525.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 16.0, "minX": 0.0, "maxY": 36071.0, "series": [{"data": [[0.0, 477.0], [600.0, 36071.0], [700.0, 9808.0], [800.0, 24537.0], [900.0, 4548.0], [1000.0, 467.0], [1100.0, 185.0], [1200.0, 121.0], [1300.0, 178.0], [1400.0, 144.0], [1500.0, 38.0], [100.0, 450.0], [1600.0, 26.0], [1700.0, 37.0], [1800.0, 33.0], [1900.0, 47.0], [2000.0, 70.0], [2100.0, 40.0], [2200.0, 16.0], [2300.0, 17.0], [2400.0, 56.0], [2500.0, 54.0], [200.0, 562.0], [300.0, 302.0], [400.0, 456.0], [500.0, 656.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 106.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 76706.0, "series": [{"data": [[0.0, 2150.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 76706.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 434.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 106.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 974.3163265306106, "minX": 1.75235826E12, "maxY": 991.8208509533316, "series": [{"data": [[1.75235826E12, 991.8208509533316], [1.75235832E12, 974.3163265306106]], "isOverall": false, "label": "Test Plan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235832E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 74.0, "minX": 1.0, "maxY": 1372.0, "series": [{"data": [[2.0, 267.0], [3.0, 265.0], [4.0, 270.0], [5.0, 274.0], [6.0, 275.0], [7.0, 273.0], [8.0, 276.0], [9.0, 278.0], [10.0, 275.0], [11.0, 277.0], [12.0, 276.0], [13.0, 276.0], [15.0, 213.5], [16.0, 206.0], [17.0, 275.0], [18.0, 214.0], [19.0, 276.0], [20.0, 214.0], [21.0, 276.0], [22.0, 218.0], [23.0, 289.0], [24.0, 218.0], [25.0, 289.0], [27.0, 180.0], [28.0, 289.0], [29.0, 221.0], [30.0, 143.0], [33.0, 222.0], [32.0, 195.0], [34.0, 147.0], [36.0, 197.0], [39.0, 289.0], [38.0, 177.5], [40.0, 147.0], [43.0, 152.0], [44.0, 148.0], [47.0, 222.0], [46.0, 116.5], [49.0, 105.0], [48.0, 149.0], [50.0, 225.0], [53.0, 148.0], [52.0, 233.5], [56.0, 154.66666666666666], [58.0, 248.0], [61.0, 155.66666666666666], [62.0, 148.0], [67.0, 149.0], [66.0, 160.66666666666666], [65.0, 428.0], [71.0, 133.0], [70.0, 287.5], [69.0, 318.0], [75.0, 134.0], [74.0, 518.0], [73.0, 131.0], [79.0, 528.0], [78.0, 130.0], [76.0, 453.0], [83.0, 149.0], [82.0, 115.0], [81.0, 454.0], [80.0, 134.0], [86.0, 460.0], [85.0, 331.0], [91.0, 463.0], [90.0, 531.0], [89.0, 149.0], [88.0, 123.5], [95.0, 323.0], [93.0, 148.0], [92.0, 134.0], [98.0, 178.0], [97.0, 134.0], [96.0, 467.0], [102.0, 134.0], [101.0, 466.0], [100.0, 323.5], [107.0, 299.5], [105.0, 533.0], [104.0, 151.5], [109.0, 133.0], [108.0, 189.0], [114.0, 188.5], [112.0, 390.3333333333333], [119.0, 237.0], [117.0, 399.66666666666663], [123.0, 144.0], [122.0, 128.0], [121.0, 566.0], [127.0, 541.0], [126.0, 121.0], [125.0, 623.0], [124.0, 342.0], [135.0, 539.0], [133.0, 144.0], [132.0, 582.0], [131.0, 126.0], [130.0, 532.0], [128.0, 144.0], [143.0, 735.0], [142.0, 608.0], [141.0, 149.0], [140.0, 540.5], [138.0, 143.0], [137.0, 581.0], [136.0, 125.0], [150.0, 618.0], [149.0, 556.5], [147.0, 202.0], [146.0, 381.5], [144.0, 345.0], [159.0, 669.0], [158.0, 262.0], [156.0, 773.0], [155.0, 421.0], [154.0, 368.5], [167.0, 680.0], [166.0, 358.0], [165.0, 492.5], [164.0, 462.0], [163.0, 358.0], [162.0, 179.0], [161.0, 782.0], [160.0, 249.0], [175.0, 250.5], [174.0, 699.0], [173.0, 243.0], [172.0, 256.0], [171.0, 361.0], [170.0, 686.0], [169.0, 521.0], [168.0, 256.0], [183.0, 647.6666666666666], [181.0, 250.0], [180.0, 252.0], [179.0, 766.0], [178.0, 252.5], [177.0, 356.0], [176.0, 698.0], [191.0, 740.0], [190.0, 525.5], [188.0, 251.0], [187.0, 428.0], [186.0, 740.0], [185.0, 803.0], [184.0, 251.0], [199.0, 533.0], [198.0, 500.0], [197.0, 364.5], [196.0, 821.0], [195.0, 499.0], [194.0, 447.25], [193.0, 741.0], [192.0, 312.3333333333333], [207.0, 544.0], [206.0, 514.0], [205.0, 544.0], [204.0, 511.0], [203.0, 253.0], [202.0, 825.0], [201.0, 254.0], [200.0, 751.0], [215.0, 830.0], [214.0, 557.0], [213.0, 522.0], [212.0, 768.0], [211.0, 559.0], [210.0, 755.0], [209.0, 539.6666666666666], [208.0, 510.0], [223.0, 536.3333333333334], [222.0, 772.0], [221.0, 565.8181818181818], [219.0, 467.5], [218.0, 830.0], [217.0, 564.0], [216.0, 464.0], [231.0, 578.0], [230.0, 684.0], [228.0, 582.4], [227.0, 566.0], [226.0, 605.1428571428572], [224.0, 565.6666666666666], [239.0, 680.75], [237.0, 477.0], [236.0, 478.0], [235.0, 844.0], [234.0, 699.5], [233.0, 580.3333333333334], [232.0, 691.5], [247.0, 617.3333333333334], [246.0, 636.0], [245.0, 707.6666666666666], [244.0, 491.0], [243.0, 685.5], [242.0, 479.0], [241.0, 683.5], [240.0, 482.0], [255.0, 576.0], [254.0, 770.0], [253.0, 691.0], [252.0, 670.2], [251.0, 643.3333333333334], [250.0, 687.5], [249.0, 505.0], [248.0, 704.5], [270.0, 585.0], [271.0, 674.0], [269.0, 699.0], [268.0, 771.0], [267.0, 665.0], [266.0, 662.6666666666666], [265.0, 771.0], [264.0, 626.0], [263.0, 657.3333333333333], [257.0, 535.0], [256.0, 662.0], [260.0, 717.1428571428571], [286.0, 592.0], [287.0, 856.0], [285.0, 666.0], [284.0, 562.0], [283.0, 772.0], [282.0, 724.5], [280.0, 562.0], [279.0, 771.0], [273.0, 552.0], [272.0, 771.0], [275.0, 722.0], [274.0, 719.0], [278.0, 670.0], [277.0, 572.0], [291.0, 759.0], [302.0, 672.0], [301.0, 704.75], [299.0, 709.6666666666666], [297.0, 578.0], [296.0, 772.0], [295.0, 671.0], [294.0, 727.5], [293.0, 666.5], [289.0, 579.5], [288.0, 771.0], [307.0, 816.0], [317.0, 727.0], [316.0, 601.0], [315.0, 863.0], [313.0, 690.3333333333334], [310.0, 595.0], [306.0, 672.0], [305.0, 727.0], [304.0, 685.0], [332.0, 864.0], [334.0, 797.0], [335.0, 682.0], [333.0, 605.0], [331.0, 624.0], [330.0, 714.0], [326.0, 734.25], [321.0, 737.5], [320.0, 696.3333333333334], [325.0, 630.0], [324.0, 699.3333333333334], [350.0, 609.0], [351.0, 798.0], [349.0, 659.0], [347.0, 798.0], [346.0, 609.0], [345.0, 615.0], [344.0, 676.75], [340.0, 682.0], [337.0, 602.0], [336.0, 620.0], [339.0, 829.5], [365.0, 623.0], [367.0, 716.5], [364.0, 779.5], [355.0, 606.0], [354.0, 875.0], [353.0, 686.0], [352.0, 631.0], [362.0, 631.0], [361.0, 803.0], [360.0, 623.0], [359.0, 875.0], [358.0, 685.0], [357.0, 631.0], [356.0, 798.0], [381.0, 714.5], [383.0, 759.5], [380.0, 666.5], [371.0, 632.0], [369.0, 685.0], [368.0, 875.0], [378.0, 870.0], [377.0, 802.0], [376.0, 627.0], [375.0, 644.0], [374.0, 689.0], [373.0, 875.0], [372.0, 803.0], [398.0, 875.0], [399.0, 634.0], [397.0, 723.5], [396.0, 662.0], [395.0, 876.0], [394.0, 644.0], [393.0, 803.0], [392.0, 689.0], [391.0, 634.0], [385.0, 774.0], [384.0, 661.5], [387.0, 633.0], [386.0, 689.0], [390.0, 875.0], [389.0, 643.0], [388.0, 803.0], [414.0, 659.0], [415.0, 724.5], [413.0, 759.5], [412.0, 804.0], [411.0, 708.75], [409.0, 804.0], [408.0, 717.6666666666666], [407.0, 803.0], [401.0, 723.0], [403.0, 717.6666666666666], [402.0, 689.0], [406.0, 639.0], [405.0, 781.5], [404.0, 804.0], [429.0, 749.5], [430.0, 645.0], [428.0, 753.0], [418.0, 724.5], [417.0, 659.0], [416.0, 870.0], [427.0, 725.0], [426.0, 711.25], [424.0, 724.0], [423.0, 663.5], [422.0, 874.0], [421.0, 724.5], [420.0, 731.6666666666666], [446.0, 746.5], [447.0, 750.5], [445.0, 645.0], [444.0, 749.25], [443.0, 645.0], [440.0, 729.4], [435.0, 658.6666666666666], [434.0, 805.0], [433.0, 693.75], [451.0, 647.0], [463.0, 658.3333333333334], [460.0, 730.5], [450.0, 636.0], [449.0, 734.0], [448.0, 640.0], [458.0, 663.5], [457.0, 870.0], [456.0, 647.0], [455.0, 815.0], [454.0, 663.5], [453.0, 870.0], [452.0, 735.3333333333334], [478.0, 652.0], [479.0, 872.0], [477.0, 753.0], [476.0, 639.0], [475.0, 761.5], [473.0, 809.0], [472.0, 670.0], [471.0, 754.5], [464.0, 814.0], [467.0, 648.0], [466.0, 755.0], [469.0, 812.0], [468.0, 692.0], [494.0, 238.8], [495.0, 218.20353982300884], [493.0, 656.0], [492.0, 816.0], [491.0, 871.0], [490.0, 792.0], [488.0, 752.5], [486.0, 871.0], [480.0, 638.0], [482.0, 737.6666666666666], [481.0, 816.0], [485.0, 652.0], [484.0, 727.0], [510.0, 791.3333333333334], [502.0, 365.0], [503.0, 349.5], [511.0, 658.0], [508.0, 660.0], [499.0, 688.0], [498.0, 648.0], [497.0, 658.0], [496.0, 817.0], [507.0, 654.0], [506.0, 817.0], [505.0, 739.6666666666666], [501.0, 817.0], [500.0, 870.0], [536.0, 419.5], [513.0, 91.0], [518.0, 686.0], [516.0, 660.0], [515.0, 721.0], [514.0, 871.0], [519.0, 688.0], [522.0, 345.6666666666667], [521.0, 738.0], [520.0, 659.0], [523.0, 661.0], [525.0, 781.6666666666666], [524.0, 688.0], [527.0, 688.0], [512.0, 660.0], [526.0, 661.0], [535.0, 434.0], [534.0, 662.0], [533.0, 673.0], [531.0, 869.0], [530.0, 739.0], [528.0, 659.0], [539.0, 618.0], [538.0, 688.0], [537.0, 659.0], [540.0, 867.0], [543.0, 818.0], [542.0, 662.0], [541.0, 658.0], [568.0, 679.0], [574.0, 765.5], [560.0, 467.0], [561.0, 756.0], [562.0, 477.0], [563.0, 357.5], [565.0, 818.0], [564.0, 690.0], [573.0, 725.6666666666666], [571.0, 731.0], [569.0, 818.0], [559.0, 869.0], [546.0, 713.0], [544.0, 869.0], [549.0, 659.0], [548.0, 765.5], [551.0, 662.0], [550.0, 818.0], [558.0, 725.3333333333334], [557.0, 659.0], [556.0, 869.0], [555.0, 739.5], [554.0, 695.0], [553.0, 659.0], [552.0, 870.0], [567.0, 660.0], [566.0, 870.0], [606.0, 742.0], [580.0, 517.6666666666666], [583.0, 569.3333333333334], [582.0, 870.0], [581.0, 694.0], [601.0, 763.5], [585.0, 91.0], [584.0, 819.0], [586.0, 870.0], [587.0, 578.0], [591.0, 762.25], [576.0, 741.0], [579.0, 765.5], [577.0, 694.0], [590.0, 662.0], [589.0, 871.0], [588.0, 742.5], [596.0, 457.3333333333333], [597.0, 285.33333333333337], [599.0, 665.0], [598.0, 819.0], [607.0, 779.5], [593.0, 693.0], [592.0, 662.5], [595.0, 871.0], [594.0, 819.0], [604.0, 766.0], [603.0, 725.0], [613.0, 352.0], [638.0, 662.5], [618.0, 586.3333333333334], [617.0, 664.0], [616.0, 677.5], [619.0, 663.0], [621.0, 785.3333333333334], [620.0, 692.0], [623.0, 665.0], [608.0, 662.0], [612.0, 677.0], [610.0, 785.0], [622.0, 664.0], [624.0, 392.0], [626.0, 664.0], [625.0, 845.5], [627.0, 524.5], [628.0, 236.25], [631.0, 664.0], [630.0, 845.5], [637.0, 794.0], [634.0, 753.75], [633.0, 691.0], [632.0, 665.0], [615.0, 871.0], [614.0, 741.5], [667.0, 538.6666666666666], [645.0, 596.4], [644.0, 445.5], [642.0, 674.6666666666666], [640.0, 845.0], [655.0, 691.0], [654.0, 869.0], [646.0, 311.41666666666663], [647.0, 666.0], [664.0, 622.0], [665.0, 252.25], [668.0, 98.75], [669.0, 279.125], [670.0, 88.0], [671.0, 726.6666666666666], [649.0, 108.0], [648.0, 820.0], [650.0, 768.5], [651.0, 380.0], [652.0, 272.33333333333337], [653.0, 195.8], [656.0, 229.75], [661.0, 379.0], [660.0, 744.5], [659.0, 666.0], [658.0, 779.5], [657.0, 669.0], [662.0, 384.5], [678.0, 315.33333333333337], [675.0, 89.0], [674.0, 242.25], [673.0, 863.0], [672.0, 665.0], [687.0, 664.0], [686.0, 746.0], [676.0, 363.0], [677.0, 764.5], [681.0, 299.83333333333337], [682.0, 766.0], [684.0, 692.0], [683.0, 743.5], [685.0, 299.0], [692.0, 431.5], [693.0, 824.0], [703.0, 758.5], [688.0, 692.0], [691.0, 718.3333333333334], [689.0, 863.0], [700.0, 365.5], [699.0, 745.5], [697.0, 692.0], [696.0, 664.0], [679.0, 821.0], [701.0, 327.25], [694.0, 367.0], [695.0, 331.75], [728.0, 118.0], [708.0, 254.25], [709.0, 560.6666666666666], [710.0, 858.0], [713.0, 519.0], [715.0, 279.0], [717.0, 668.0], [705.0, 664.0], [704.0, 668.0], [707.0, 668.0], [706.0, 841.5], [720.0, 375.2], [721.0, 200.0], [723.0, 746.5], [725.0, 664.111111111111], [727.0, 668.0], [726.0, 774.0], [729.0, 622.6666666666666], [730.0, 691.0], [731.0, 142.0], [733.0, 74.33333333333333], [732.0, 667.0], [735.0, 669.0], [734.0, 790.6666666666666], [762.0, 187.0], [740.0, 74.0], [742.0, 537.6666666666666], [741.0, 752.75], [761.0, 728.6666666666666], [760.0, 743.0], [748.0, 482.3333333333333], [747.0, 762.25], [746.0, 704.5], [745.0, 858.0], [744.0, 730.6666666666666], [749.0, 825.0], [751.0, 660.0], [737.0, 856.0], [736.0, 664.0], [739.0, 681.0], [738.0, 825.0], [750.0, 855.0], [752.0, 190.0], [755.0, 592.0], [753.0, 681.5], [756.0, 659.0], [757.0, 426.0], [759.0, 573.3333333333334], [767.0, 748.0], [765.0, 693.0], [764.0, 659.0], [763.0, 840.5], [793.0, 669.0], [798.0, 744.0], [799.0, 691.0], [785.0, 680.5], [788.0, 660.0], [787.0, 838.5], [796.0, 669.0], [795.0, 733.0], [794.0, 828.0], [792.0, 660.0], [775.0, 664.0], [773.0, 711.75], [770.0, 693.0], [769.0, 659.0], [768.0, 855.0], [783.0, 660.0], [782.0, 828.0], [781.0, 758.5], [780.0, 739.8], [777.0, 660.0], [776.0, 760.5], [791.0, 789.0], [789.0, 670.0], [824.0, 719.0], [829.0, 675.5], [831.0, 748.5], [816.0, 680.0], [828.0, 845.0], [827.0, 748.0], [826.0, 732.0], [815.0, 660.0], [801.0, 665.0], [800.0, 847.0], [803.0, 660.0], [802.0, 759.5], [805.0, 669.0], [804.0, 846.0], [807.0, 675.5], [806.0, 828.0], [814.0, 836.0], [812.0, 670.0], [811.0, 691.0], [810.0, 777.6666666666666], [809.0, 670.0], [823.0, 836.0], [822.0, 660.0], [820.0, 680.0], [818.0, 777.3333333333334], [857.0, 384.75], [849.0, 747.2], [846.0, 351.913274336283], [845.0, 689.0], [844.0, 668.0], [843.0, 753.0], [842.0, 759.0], [841.0, 664.0], [847.0, 706.0], [848.0, 604.9], [862.0, 471.25], [863.0, 510.7777777777777], [860.0, 624.5], [861.0, 520.5999999999999], [858.0, 706.1428571428571], [859.0, 446.625], [856.0, 712.2857142857143], [839.0, 844.0], [838.0, 828.0], [837.0, 660.0], [836.0, 690.0], [835.0, 757.0], [834.0, 829.0], [833.0, 675.0], [832.0, 845.0], [850.0, 461.5], [851.0, 836.4], [852.0, 543.1], [853.0, 841.5], [854.0, 644.7142857142857], [855.0, 572.2857142857143], [867.0, 581.3749999999999], [864.0, 540.8571428571428], [878.0, 521.7333333333333], [879.0, 544.4444444444445], [876.0, 535.7272727272727], [877.0, 572.8571428571429], [874.0, 537.5555555555555], [875.0, 393.52941176470586], [865.0, 375.45], [866.0, 299.53846153846155], [868.0, 379.2], [869.0, 371.5], [870.0, 629.25], [871.0, 620.4545454545455], [880.0, 397.2391304347827], [894.0, 1278.0], [895.0, 553.3333333333334], [892.0, 537.5], [893.0, 966.5], [890.0, 901.5], [891.0, 718.0], [888.0, 561.5555555555555], [889.0, 199.0], [881.0, 408.2142857142858], [882.0, 524.5833333333333], [883.0, 525.3333333333334], [884.0, 572.0], [885.0, 344.6666666666667], [886.0, 515.875], [887.0, 846.3333333333334], [872.0, 606.8571428571428], [873.0, 405.4761904761904], [898.0, 973.5], [907.0, 329.4285714285714], [896.0, 454.14285714285717], [897.0, 751.5], [911.0, 393.5], [910.0, 755.5], [908.0, 573.1428571428572], [909.0, 869.6], [899.0, 727.3333333333334], [900.0, 525.5], [902.0, 865.0], [901.0, 755.5], [920.0, 722.5454545454545], [921.0, 313.02127659574467], [922.0, 914.2], [923.0, 618.2857142857143], [924.0, 568.3333333333333], [925.0, 647.2222222222222], [926.0, 637.8], [927.0, 488.77777777777777], [912.0, 611.2857142857143], [913.0, 490.99999999999994], [914.0, 637.5], [915.0, 1035.0], [916.0, 794.25], [917.0, 489.8333333333333], [918.0, 826.5], [919.0, 1372.0], [904.0, 637.875], [905.0, 746.3333333333334], [906.0, 943.3333333333334], [935.0, 1038.6666666666667], [931.0, 567.75], [928.0, 1098.0], [941.0, 393.01307189542484], [942.0, 338.9166666666667], [938.0, 657.6666666666666], [939.0, 683.5], [940.0, 481.33333333333326], [929.0, 641.8333333333333], [930.0, 801.3333333333334], [932.0, 788.6666666666666], [933.0, 1054.5], [934.0, 473.625], [946.0, 632.3333333333334], [945.0, 768.7142857142857], [947.0, 749.0], [959.0, 672.7826086956522], [958.0, 837.0], [955.0, 323.6], [956.0, 426.27272727272725], [953.0, 919.0], [952.0, 735.6666666666667], [954.0, 548.3333333333334], [948.0, 274.0], [950.0, 666.5], [949.0, 674.5], [951.0, 617.25], [936.0, 952.5], [937.0, 387.0], [966.0, 612.1428571428571], [962.0, 885.0], [961.0, 606.3333333333334], [960.0, 681.5], [975.0, 737.923076923077], [973.0, 740.8], [963.0, 379.8], [965.0, 740.4], [964.0, 724.2], [969.0, 630.0], [968.0, 751.5], [971.0, 669.0], [970.0, 733.3333333333334], [972.0, 661.5], [976.0, 637.0], [977.0, 742.0000000000001], [991.0, 376.66666666666663], [990.0, 734.6666666666666], [989.0, 741.0], [988.0, 741.6], [985.0, 634.0], [984.0, 748.4444444444445], [967.0, 740.6], [986.0, 755.0], [987.0, 664.6363636363636], [978.0, 718.0000000000001], [979.0, 715.4736842105264], [980.0, 735.8235294117649], [981.0, 604.6], [983.0, 741.1935483870967], [982.0, 743.2], [996.0, 719.7142857142858], [992.0, 587.7142857142857], [993.0, 490.3333333333333], [994.0, 290.16666666666663], [999.0, 657.8928571428572], [1000.0, 760.9967399625152], [998.0, 754.5], [997.0, 845.0], [995.0, 738.8], [1.0, 259.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[986.2032722051399, 748.5932036878498]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 60302.666666666664, "minX": 1.75235826E12, "maxY": 411762.86666666664, "series": [{"data": [[1.75235826E12, 411762.86666666664], [1.75235832E12, 193214.98333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75235826E12, 127350.33333333333], [1.75235832E12, 60302.666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235832E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 730.9801172193769, "minX": 1.75235826E12, "maxY": 785.8627158555721, "series": [{"data": [[1.75235826E12, 730.9801172193769], [1.75235832E12, 785.8627158555721]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235832E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 730.8788485792733, "minX": 1.75235826E12, "maxY": 785.8572605965475, "series": [{"data": [[1.75235826E12, 730.8788485792733], [1.75235832E12, 785.8572605965475]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235832E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4.317111459968599E-4, "minX": 1.75235826E12, "maxY": 0.14808220194376615, "series": [{"data": [[1.75235826E12, 0.14808220194376615], [1.75235832E12, 4.317111459968599E-4]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235832E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.75235826E12, "maxY": 2525.0, "series": [{"data": [[1.75235826E12, 1603.0], [1.75235832E12, 2525.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75235826E12, 876.0], [1.75235832E12, 876.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75235826E12, 951.9900000000016], [1.75235832E12, 936.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75235826E12, 893.0], [1.75235832E12, 904.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75235826E12, 4.0], [1.75235832E12, 100.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75235826E12, 694.0], [1.75235832E12, 688.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235832E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 38.0, "maxY": 1011.0, "series": [{"data": [[725.0, 879.0], [817.0, 1011.0], [1093.0, 888.0], [1145.0, 883.0], [1274.0, 707.0], [1224.0, 775.0], [1273.0, 781.0], [1313.0, 707.0], [1330.0, 733.5], [1327.0, 686.0], [1326.0, 724.5], [1332.0, 692.0], [1336.0, 709.0], [1343.0, 682.0], [1312.0, 742.0], [1342.0, 725.0], [1335.0, 717.0], [1334.0, 706.0], [1308.0, 697.0], [1286.0, 714.0], [1302.0, 722.0], [1324.0, 696.0], [1331.0, 730.0], [1320.0, 726.0], [1323.0, 699.0], [1321.0, 709.0], [1317.0, 702.0], [1346.0, 685.0], [1362.0, 696.0], [1361.0, 664.0], [1366.0, 676.0], [1365.0, 689.0], [1353.0, 689.0], [1345.0, 688.0], [1369.0, 672.0], [1375.0, 713.0], [1368.0, 688.0], [1349.0, 711.0], [1347.0, 671.0], [1348.0, 686.0], [1354.0, 712.0], [1350.0, 690.0], [1351.0, 681.0], [1352.0, 677.0], [1378.0, 687.0], [1390.0, 696.0], [1385.0, 666.0], [1411.0, 525.5], [1786.0, 233.0], [38.0, 11.5], [181.0, 243.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1411.0, 33.0], [1786.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1786.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 38.0, "maxY": 1011.0, "series": [{"data": [[725.0, 879.0], [817.0, 1011.0], [1093.0, 888.0], [1145.0, 883.0], [1274.0, 707.0], [1224.0, 775.0], [1273.0, 781.0], [1313.0, 707.0], [1330.0, 733.5], [1327.0, 686.0], [1326.0, 724.5], [1332.0, 692.0], [1336.0, 709.0], [1343.0, 682.0], [1312.0, 742.0], [1342.0, 725.0], [1335.0, 717.0], [1334.0, 706.0], [1308.0, 697.0], [1286.0, 714.0], [1302.0, 722.0], [1324.0, 696.0], [1331.0, 730.0], [1320.0, 725.5], [1323.0, 699.0], [1321.0, 709.0], [1317.0, 702.0], [1346.0, 685.0], [1362.0, 696.0], [1361.0, 664.0], [1366.0, 676.0], [1365.0, 689.0], [1353.0, 689.0], [1345.0, 688.0], [1369.0, 672.0], [1375.0, 713.0], [1368.0, 688.0], [1349.0, 711.0], [1347.0, 671.0], [1348.0, 686.0], [1354.0, 712.0], [1350.0, 690.0], [1351.0, 681.0], [1352.0, 677.0], [1378.0, 687.0], [1390.0, 696.0], [1385.0, 666.0], [1411.0, 525.0], [1786.0, 232.0], [38.0, 11.5], [181.0, 243.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1411.0, 0.0], [1786.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1786.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 408.0, "minX": 1.75235826E12, "maxY": 915.2666666666667, "series": [{"data": [[1.75235826E12, 915.2666666666667], [1.75235832E12, 408.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235832E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.7666666666666666, "minX": 1.75235826E12, "maxY": 896.8333333333334, "series": [{"data": [[1.75235826E12, 896.8333333333334], [1.75235832E12, 424.6666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75235826E12, 1.7666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75235832E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.7666666666666666, "minX": 1.75235826E12, "maxY": 896.8333333333334, "series": [{"data": [[1.75235826E12, 896.8333333333334], [1.75235832E12, 424.6666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75235826E12, 1.7666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235832E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.7666666666666666, "minX": 1.75235826E12, "maxY": 896.8333333333334, "series": [{"data": [[1.75235826E12, 896.8333333333334], [1.75235832E12, 424.6666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75235826E12, 1.7666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75235832E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

